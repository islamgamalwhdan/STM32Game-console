
STM32_GAME_CONSOLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .SDRAM1       00025800  d0000000  d0000000  00030000  2**2
                  ALLOC
  2 .SDRAM2       00025800  d0200000  d0200000  00030000  2**2
                  ALLOC
  3 .text         0000bcb4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000898  0800be60  0800be60  0001be60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  0800c6f8  0800c6f8  00020050  2**0
                  CONTENTS
  6 .ARM          00000008  0800c6f8  0800c6f8  0001c6f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  0800c700  0800c700  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  0800c700  0800c700  0001c700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  0800c704  0800c704  0001c704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00000050  20000000  0800c708  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000015bc  20000050  0800c758  00020050  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000160c  0800c758  0002160c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c8dc  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004ce8  00000000  00000000  0003c95c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a90  00000000  00000000  00041648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001850  00000000  00000000  000430d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029d23  00000000  00000000  00044928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00023099  00000000  00000000  0006e64b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e344f  00000000  00000000  000916e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00174b33  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006cc4  00000000  00000000  00174b84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000050 	.word	0x20000050
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800be48 	.word	0x0800be48

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000054 	.word	0x20000054
 80001e8:	0800be48 	.word	0x0800be48

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <BL_CopyBinFile>:
static BL_StatusType write_data_to_flash_app( u8 *data, u32 from ,u32 data_len );



BL_StatusType BL_CopyBinFile(const char *filePath  ,u32 Sec_loc)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b0d0      	sub	sp, #320	; 0x140
 8000504:	af00      	add	r7, sp, #0
 8000506:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800050a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800050e:	6018      	str	r0, [r3, #0]
 8000510:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000514:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000518:	6019      	str	r1, [r3, #0]
	    FIL fil ;
	    UINT rb = PACKET_MAX_SIZE ;
 800051a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800051e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	    u8 buf[PACKET_MAX_SIZE] ;// todo : fix static to be at stack
	    BL_StatusType ret  ;


	   	//Erase APP section
	   	if( App_section_erase()!= BL_OK)
 8000522:	f000 f8af 	bl	8000684 <App_section_erase>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <BL_CopyBinFile+0x30>
	   	{
	   		return BL_ERROR ;
 800052c:	2301      	movs	r3, #1
 800052e:	e06e      	b.n	800060e <BL_CopyBinFile+0x10e>
	    }

	   	if(f_open(&fil, filePath, FA_WRITE | FA_READ | FA_OPEN_EXISTING) != FR_OK)
 8000530:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000534:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000538:	f507 7086 	add.w	r0, r7, #268	; 0x10c
 800053c:	2203      	movs	r2, #3
 800053e:	6819      	ldr	r1, [r3, #0]
 8000540:	f00a fde4 	bl	800b10c <f_open>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d04a      	beq.n	80005e0 <BL_CopyBinFile+0xe0>
	   	 {
	   		return BL_ERROR ;
 800054a:	2301      	movs	r3, #1
 800054c:	e05f      	b.n	800060e <BL_CopyBinFile+0x10e>
	   	 }

	   	  while(rb== PACKET_MAX_SIZE) // read while until reach rb != PACKET_MAX_SIZE (end of file) .
	   	  {
	   		 f_read(&fil,buf , PACKET_MAX_SIZE , &rb) ;
 800054e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000552:	f107 0108 	add.w	r1, r7, #8
 8000556:	f507 7086 	add.w	r0, r7, #268	; 0x10c
 800055a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800055e:	f00b f878 	bl	800b652 <f_read>
	   		 if(rb)
 8000562:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000566:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800056a:	f5a2 72a0 	sub.w	r2, r2, #320	; 0x140
 800056e:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8000572:	f5a1 71a0 	sub.w	r1, r1, #320	; 0x140
 8000576:	6809      	ldr	r1, [r1, #0]
 8000578:	6011      	str	r1, [r2, #0]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d030      	beq.n	80005e0 <BL_CopyBinFile+0xe0>
	   		 {
	   			 if(rb < PACKET_MAX_SIZE)
 800057e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000582:	2bff      	cmp	r3, #255	; 0xff
 8000584:	d80c      	bhi.n	80005a0 <BL_CopyBinFile+0xa0>
	   			 {
	   				memset(buf + rb , 0xFF , PACKET_MAX_SIZE -rb) ; // fill remain buffer
 8000586:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800058a:	f107 0208 	add.w	r2, r7, #8
 800058e:	18d0      	adds	r0, r2, r3
 8000590:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000594:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000598:	461a      	mov	r2, r3
 800059a:	21ff      	movs	r1, #255	; 0xff
 800059c:	f00b fc2a 	bl	800bdf4 <memset>
	   			 }
	   			ret= write_data_to_flash_app(buf, Sec_loc  ,PACKET_MAX_SIZE);
 80005a0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80005a4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80005a8:	f107 0008 	add.w	r0, r7, #8
 80005ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005b0:	6819      	ldr	r1, [r3, #0]
 80005b2:	f000 f890 	bl	80006d6 <write_data_to_flash_app>
 80005b6:	4603      	mov	r3, r0
 80005b8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	   			if(ret != BL_OK)
 80005bc:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <BL_CopyBinFile+0xc8>
	   			{
	   				return BL_ERROR ;
 80005c4:	2301      	movs	r3, #1
 80005c6:	e022      	b.n	800060e <BL_CopyBinFile+0x10e>
	   			}
	   			 Sec_loc += PACKET_MAX_SIZE ;
 80005c8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80005cc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80005d0:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80005d4:	f5a2 72a0 	sub.w	r2, r2, #320	; 0x140
 80005d8:	6812      	ldr	r2, [r2, #0]
 80005da:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80005de:	601a      	str	r2, [r3, #0]
	   	  while(rb== PACKET_MAX_SIZE) // read while until reach rb != PACKET_MAX_SIZE (end of file) .
 80005e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80005e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80005e8:	d0b1      	beq.n	800054e <BL_CopyBinFile+0x4e>
	   		 }
	   	  } // while

	   	/* Close file */
	   	f_close(&fil);
 80005ea:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80005ee:	4618      	mov	r0, r3
 80005f0:	f00b f9cb 	bl	800b98a <f_close>

	   	/* Unmount SDCARD */
	   	if(f_mount(NULL, "", 1) != FR_OK)
 80005f4:	2201      	movs	r2, #1
 80005f6:	4908      	ldr	r1, [pc, #32]	; (8000618 <BL_CopyBinFile+0x118>)
 80005f8:	2000      	movs	r0, #0
 80005fa:	f00a fd41 	bl	800b080 <f_mount>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d003      	beq.n	800060c <BL_CopyBinFile+0x10c>
	   		FileError_Handler(__FILE__, __LINE__);
 8000604:	2146      	movs	r1, #70	; 0x46
 8000606:	4805      	ldr	r0, [pc, #20]	; (800061c <BL_CopyBinFile+0x11c>)
 8000608:	f000 fa56 	bl	8000ab8 <FileError_Handler>

	   	return BL_OK ;
 800060c:	2300      	movs	r3, #0
}
 800060e:	4618      	mov	r0, r3
 8000610:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	0800be60 	.word	0x0800be60
 800061c:	0800be64 	.word	0x0800be64

08000620 <BL_Go2App>:




void BL_Go2App(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0

	if( *((u32 *)APPLICATION_FLASH_ADD) == SRAM_END  )
 8000626:	4b13      	ldr	r3, [pc, #76]	; (8000674 <BL_Go2App+0x54>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a13      	ldr	r2, [pc, #76]	; (8000678 <BL_Go2App+0x58>)
 800062c:	4293      	cmp	r3, r2
 800062e:	d119      	bne.n	8000664 <BL_Go2App+0x44>
	{

		HAL_RCC_DeInit();// to turn off the PLL and set the clock to it's default state
 8000630:	f003 ffea 	bl	8004608 <HAL_RCC_DeInit>
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000634:	f3bf 8f5f 	dmb	sy
}
 8000638:	bf00      	nop
		SysTick->CTRL = 0;
		//SysTick->LOAD = 0;
		//SysTick->VAL =0 ;
#endif
		__DMB(); //ARM says to use a DMB instruction before relocating VTOR */
		SCB->VTOR = APPLICATION_FLASH_ADD; //We relocate vector table to the sector 1
 800063a:	4b10      	ldr	r3, [pc, #64]	; (800067c <BL_Go2App+0x5c>)
 800063c:	4a0d      	ldr	r2, [pc, #52]	; (8000674 <BL_Go2App+0x54>)
 800063e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8000640:	f3bf 8f4f 	dsb	sy
}
 8000644:	bf00      	nop
		__DSB(); //ARM says to use a DSB instruction just after relocating VTOR */

		u32 jump_addr = *((volatile u32* )(APPLICATION_FLASH_ADD+4)) ; // reset handler of app
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <BL_Go2App+0x60>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	60fb      	str	r3, [r7, #12]

		void (*App_RestHandler)(void) = (void*)jump_addr;
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	60bb      	str	r3, [r7, #8]
		__set_MSP(*(volatile u32*)APPLICATION_FLASH_ADD ); //Set the MSP
 8000650:	4b08      	ldr	r3, [pc, #32]	; (8000674 <BL_Go2App+0x54>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	f383 8808 	msr	MSP, r3
}
 800065c:	bf00      	nop

		//Now Jump to The App
		App_RestHandler();
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	4798      	blx	r3
	else
	{
		HAL_Delay(50) ;
		//printf("No App!!\r\n") ;
	}
}
 8000662:	e002      	b.n	800066a <BL_Go2App+0x4a>
		HAL_Delay(50) ;
 8000664:	2032      	movs	r0, #50	; 0x32
 8000666:	f000 fa9f 	bl	8000ba8 <HAL_Delay>
}
 800066a:	bf00      	nop
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	08040000 	.word	0x08040000
 8000678:	20030000 	.word	0x20030000
 800067c:	e000ed00 	.word	0xe000ed00
 8000680:	08040004 	.word	0x08040004

08000684 <App_section_erase>:


/*************************** Static functions */

static BL_StatusType App_section_erase(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af00      	add	r7, sp, #0
	    HAL_StatusTypeDef ret ;
	    FLASH_EraseInitTypeDef EraseInitStruct;
	    uint32_t SectorError;

	    EraseInitStruct.Banks         = FLASH_BANK_1 ;
 800068a:	2301      	movs	r3, #1
 800068c:	60fb      	str	r3, [r7, #12]
	    EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 800068e:	2300      	movs	r3, #0
 8000690:	60bb      	str	r3, [r7, #8]
	    EraseInitStruct.Sector        = FLASH_SECTOR_6; // Sectors 6 ,7 [first sectors to store app bin]
 8000692:	2306      	movs	r3, #6
 8000694:	613b      	str	r3, [r7, #16]
	    EraseInitStruct.NbSectors     = 4;//2;
 8000696:	2304      	movs	r3, #4
 8000698:	617b      	str	r3, [r7, #20]
	    EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 800069a:	2302      	movs	r3, #2
 800069c:	61bb      	str	r3, [r7, #24]

	    if( HAL_FLASH_Unlock() != HAL_OK )
 800069e:	f001 f857 	bl	8001750 <HAL_FLASH_Unlock>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <App_section_erase+0x28>
	    {
	    	      return BL_ERROR ;
 80006a8:	2301      	movs	r3, #1
 80006aa:	e010      	b.n	80006ce <App_section_erase+0x4a>
	    }

	    //Erase the Flash
	    if( HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError ) != HAL_OK )
 80006ac:	1d3a      	adds	r2, r7, #4
 80006ae:	f107 0308 	add.w	r3, r7, #8
 80006b2:	4611      	mov	r1, r2
 80006b4:	4618      	mov	r0, r3
 80006b6:	f001 f9bd 	bl	8001a34 <HAL_FLASHEx_Erase>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <App_section_erase+0x40>
	    {
	    	      return BL_ERROR ;
 80006c0:	2301      	movs	r3, #1
 80006c2:	e004      	b.n	80006ce <App_section_erase+0x4a>
	     }
	    ret = HAL_FLASH_Lock();
 80006c4:	f001 f866 	bl	8001794 <HAL_FLASH_Lock>
 80006c8:	4603      	mov	r3, r0
 80006ca:	77fb      	strb	r3, [r7, #31]
	    return ret ;
 80006cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3720      	adds	r7, #32
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}

080006d6 <write_data_to_flash_app>:

static BL_StatusType write_data_to_flash_app( u8 *data, u32 from ,u32 data_len )
{
 80006d6:	b5b0      	push	{r4, r5, r7, lr}
 80006d8:	b086      	sub	sp, #24
 80006da:	af00      	add	r7, sp, #0
 80006dc:	60f8      	str	r0, [r7, #12]
 80006de:	60b9      	str	r1, [r7, #8]
 80006e0:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef ret ;

    if( HAL_FLASH_Unlock() != HAL_OK )
 80006e2:	f001 f835 	bl	8001750 <HAL_FLASH_Unlock>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <write_data_to_flash_app+0x1a>
    {
      return BL_ERROR;
 80006ec:	2301      	movs	r3, #1
 80006ee:	e031      	b.n	8000754 <write_data_to_flash_app+0x7e>
    }

    data_len >>=2; // divide by 4 [ 32 bit]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	089b      	lsrs	r3, r3, #2
 80006f4:	607b      	str	r3, [r7, #4]

   for( u32 i = 0; i < data_len; i++ )
 80006f6:	2300      	movs	r3, #0
 80006f8:	613b      	str	r3, [r7, #16]
 80006fa:	e018      	b.n	800072e <write_data_to_flash_app+0x58>
    {
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_WORD, from, *((u32*)data) );
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2200      	movs	r2, #0
 8000702:	461c      	mov	r4, r3
 8000704:	4615      	mov	r5, r2
 8000706:	4622      	mov	r2, r4
 8000708:	462b      	mov	r3, r5
 800070a:	68b9      	ldr	r1, [r7, #8]
 800070c:	2002      	movs	r0, #2
 800070e:	f000 ffcb 	bl	80016a8 <HAL_FLASH_Program>
 8000712:	4603      	mov	r3, r0
 8000714:	75fb      	strb	r3, [r7, #23]
      data += 4 ;
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	3304      	adds	r3, #4
 800071a:	60fb      	str	r3, [r7, #12]
      from += 4 ;
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	3304      	adds	r3, #4
 8000720:	60bb      	str	r3, [r7, #8]
      if( ret != HAL_OK )
 8000722:	7dfb      	ldrb	r3, [r7, #23]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d107      	bne.n	8000738 <write_data_to_flash_app+0x62>
   for( u32 i = 0; i < data_len; i++ )
 8000728:	693b      	ldr	r3, [r7, #16]
 800072a:	3301      	adds	r3, #1
 800072c:	613b      	str	r3, [r7, #16]
 800072e:	693a      	ldr	r2, [r7, #16]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	429a      	cmp	r2, r3
 8000734:	d3e2      	bcc.n	80006fc <write_data_to_flash_app+0x26>
 8000736:	e000      	b.n	800073a <write_data_to_flash_app+0x64>
      {
        break;
 8000738:	bf00      	nop
      }
    } // for

    if( ret != HAL_OK )
 800073a:	7dfb      	ldrb	r3, [r7, #23]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <write_data_to_flash_app+0x6e>
    {
      return BL_ERROR;
 8000740:	2301      	movs	r3, #1
 8000742:	e007      	b.n	8000754 <write_data_to_flash_app+0x7e>
    }

    if( HAL_FLASH_Unlock() != HAL_OK )
 8000744:	f001 f804 	bl	8001750 <HAL_FLASH_Unlock>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <write_data_to_flash_app+0x7c>
    {
    	return BL_ERROR;
 800074e:	2301      	movs	r3, #1
 8000750:	e000      	b.n	8000754 <write_data_to_flash_app+0x7e>
    }

  return BL_OK;
 8000752:	2300      	movs	r3, #0
}
 8000754:	4618      	mov	r0, r3
 8000756:	3718      	adds	r7, #24
 8000758:	46bd      	mov	sp, r7
 800075a:	bdb0      	pop	{r4, r5, r7, pc}

0800075c <main>:
void Display_SD_Dir_content(const char *DR_path);
void Choose_BinToload(char** BinFile);

/* Main function ----------------------------------------------------------------------*/
int main(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  MCU_Init() ;
 8000762:	f006 f9d9 	bl	8006b18 <MCU_Init>
  InitDisplay(0,BLUE);
 8000766:	4910      	ldr	r1, [pc, #64]	; (80007a8 <main+0x4c>)
 8000768:	2000      	movs	r0, #0
 800076a:	f005 fcdb 	bl	8006124 <InitDisplay>
  GamePad_Init();
 800076e:	f007 f91b 	bl	80079a8 <GamePad_Init>
  touchpad_init();
 8000772:	f007 fb0b 	bl	8007d8c <touchpad_init>

  MX_FATFS_Init();
 8000776:	f007 fc81 	bl	800807c <MX_FATFS_Init>

  /* Wait for SD module reset */
  HAL_Delay(1);
 800077a:	2001      	movs	r0, #1
 800077c:	f000 fa14 	bl	8000ba8 <HAL_Delay>

  char *BinFile = NULL  ;
 8000780:	2300      	movs	r3, #0
 8000782:	607b      	str	r3, [r7, #4]
  Display_SD_Dir_content(DIR_NAME) ;
 8000784:	4809      	ldr	r0, [pc, #36]	; (80007ac <main+0x50>)
 8000786:	f000 f85f 	bl	8000848 <Display_SD_Dir_content>
  Choose_BinToload(&BinFile);
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	4618      	mov	r0, r3
 800078e:	f000 f915 	bl	80009bc <Choose_BinToload>

  // If there is a new game just replace it with the old one Or jump to the old one
  if(BinFile != NULL)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d004      	beq.n	80007a2 <main+0x46>
  {
           BL_CopyBinFile(BinFile ,APPLICATION_FLASH_ADD);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	4905      	ldr	r1, [pc, #20]	; (80007b0 <main+0x54>)
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff feaf 	bl	8000500 <BL_CopyBinFile>
  }
  BL_Go2App();
 80007a2:	f7ff ff3d 	bl	8000620 <BL_Go2App>

 //Should not reach here!!
  while (1) ;
 80007a6:	e7fe      	b.n	80007a6 <main+0x4a>
 80007a8:	003282f6 	.word	0x003282f6
 80007ac:	0800be80 	.word	0x0800be80
 80007b0:	08040000 	.word	0x08040000

080007b4 <Init_backGround>:
}//main


/* Functions ----------------------------------------------------------------------*/
void Init_backGround(Sprite *spr)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
   spr->x = 0 ;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2200      	movs	r2, #0
 80007c0:	605a      	str	r2, [r3, #4]
   spr->y = 0 ;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
   spr->Width =  SCREEN_W ;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	22f0      	movs	r2, #240	; 0xf0
 80007cc:	60da      	str	r2, [r3, #12]
   spr->Height = SCREEN_H;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007d4:	611a      	str	r2, [r3, #16]
   spr->ImageData =0; //(uint16_t*) image_background ;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
   spr->color = BLUE ;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	4a08      	ldr	r2, [pc, #32]	; (8000800 <Init_backGround+0x4c>)
 80007e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   spr->LayerId   = BACKGROUND ;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2200      	movs	r2, #0
 80007e8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
   spr->active =1 ;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2201      	movs	r2, #1
 80007f0:	61da      	str	r2, [r3, #28]
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	003282f6 	.word	0x003282f6

08000804 <Init_Arrow>:


void Init_Arrow(Sprite *spr)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	spr->x = 5 ;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2205      	movs	r2, #5
 8000810:	605a      	str	r2, [r3, #4]
	spr->y = 90 ;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	225a      	movs	r2, #90	; 0x5a
 8000816:	609a      	str	r2, [r3, #8]
	spr->Width =  10 ;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	220a      	movs	r2, #10
 800081c:	60da      	str	r2, [r3, #12]
	spr->Height = 8;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2208      	movs	r2, #8
 8000822:	611a      	str	r2, [r3, #16]
	spr->ImageData =(uint16_t*) image_arrow ;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	4a07      	ldr	r2, [pc, #28]	; (8000844 <Init_Arrow+0x40>)
 8000828:	601a      	str	r2, [r3, #0]
	spr->LayerId   = SPRITE ;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2201      	movs	r2, #1
 800082e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	spr->active =1 ;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2201      	movs	r2, #1
 8000836:	61da      	str	r2, [r3, #28]
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	0800bf00 	.word	0x0800bf00

08000848 <Display_SD_Dir_content>:


void Display_SD_Dir_content(const char *DR_path)
{
 8000848:	b590      	push	{r4, r7, lr}
 800084a:	b0d9      	sub	sp, #356	; 0x164
 800084c:	af00      	add	r7, sp, #0
 800084e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8000852:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8000856:	6018      	str	r0, [r3, #0]
	FILINFO fno;



	/* Mount SD Card */
	  if(f_mount(&fs, "", 0) != FR_OK)
 8000858:	2200      	movs	r2, #0
 800085a:	4950      	ldr	r1, [pc, #320]	; (800099c <Display_SD_Dir_content+0x154>)
 800085c:	4850      	ldr	r0, [pc, #320]	; (80009a0 <Display_SD_Dir_content+0x158>)
 800085e:	f00a fc0f 	bl	800b080 <f_mount>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d003      	beq.n	8000870 <Display_SD_Dir_content+0x28>
	   		FileError_Handler(__FILE__, __LINE__);
 8000868:	2178      	movs	r1, #120	; 0x78
 800086a:	484e      	ldr	r0, [pc, #312]	; (80009a4 <Display_SD_Dir_content+0x15c>)
 800086c:	f000 f924 	bl	8000ab8 <FileError_Handler>

	   	// open directory .
	   if(f_opendir(&dir_files , DR_path) == FR_OK)
 8000870:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8000874:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8000878:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800087c:	6819      	ldr	r1, [r3, #0]
 800087e:	4610      	mov	r0, r2
 8000880:	f00b f8ad 	bl	800b9de <f_opendir>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d147      	bne.n	800091a <Display_SD_Dir_content+0xd2>
	   	 {

	   for(;;)
	   		{//loop to read files or directory inside  directory .

	   			rc = f_readdir(&dir_files, &fno);	/* Read a directory item */
 800088a:	f107 0208 	add.w	r2, r7, #8
 800088e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000892:	4611      	mov	r1, r2
 8000894:	4618      	mov	r0, r3
 8000896:	f00b f95f 	bl	800bb58 <f_readdir>
 800089a:	4603      	mov	r3, r0
 800089c:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
	   			if (rc || !fno.fname[0]) break;	/* Error or end of dir */
 80008a0:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d138      	bne.n	800091a <Display_SD_Dir_content+0xd2>
 80008a8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80008ac:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80008b0:	7d9b      	ldrb	r3, [r3, #22]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d031      	beq.n	800091a <Display_SD_Dir_content+0xd2>

	   			if (! (fno.fattrib & AM_DIR) )  // if it is not directory So it should be files .
 80008b6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80008ba:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80008be:	7a1b      	ldrb	r3, [r3, #8]
 80008c0:	f003 0310 	and.w	r3, r3, #16
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d1e0      	bne.n	800088a <Display_SD_Dir_content+0x42>
	   			{
	   			    strncpy(content[i].file_name , fno.fname , strlen(fno.fname)) ;
 80008c8:	4b37      	ldr	r3, [pc, #220]	; (80009a8 <Display_SD_Dir_content+0x160>)
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	4613      	mov	r3, r2
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	4413      	add	r3, r2
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	4a35      	ldr	r2, [pc, #212]	; (80009ac <Display_SD_Dir_content+0x164>)
 80008d6:	189c      	adds	r4, r3, r2
 80008d8:	f107 0308 	add.w	r3, r7, #8
 80008dc:	3316      	adds	r3, #22
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff fc84 	bl	80001ec <strlen>
 80008e4:	4602      	mov	r2, r0
 80008e6:	f107 0308 	add.w	r3, r7, #8
 80008ea:	3316      	adds	r3, #22
 80008ec:	4619      	mov	r1, r3
 80008ee:	4620      	mov	r0, r4
 80008f0:	f00b fa97 	bl	800be22 <strncpy>
	   				content[i++].file_size = fno.fsize ;
 80008f4:	4b2c      	ldr	r3, [pc, #176]	; (80009a8 <Display_SD_Dir_content+0x160>)
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	1c53      	adds	r3, r2, #1
 80008fa:	492b      	ldr	r1, [pc, #172]	; (80009a8 <Display_SD_Dir_content+0x160>)
 80008fc:	600b      	str	r3, [r1, #0]
 80008fe:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8000902:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8000906:	6819      	ldr	r1, [r3, #0]
 8000908:	4828      	ldr	r0, [pc, #160]	; (80009ac <Display_SD_Dir_content+0x164>)
 800090a:	4613      	mov	r3, r2
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	4413      	add	r3, r2
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	4403      	add	r3, r0
 8000914:	3310      	adds	r3, #16
 8000916:	6019      	str	r1, [r3, #0]
	   			rc = f_readdir(&dir_files, &fno);	/* Read a directory item */
 8000918:	e7b7      	b.n	800088a <Display_SD_Dir_content+0x42>

	   		} //for

	   	 }//if

	   	BufferConfig(NON_ANIMATED) ;
 800091a:	2000      	movs	r0, #0
 800091c:	f005 fa70 	bl	8005e00 <BufferConfig>
	   	Init_backGround(&BackGround);
 8000920:	4823      	ldr	r0, [pc, #140]	; (80009b0 <Display_SD_Dir_content+0x168>)
 8000922:	f7ff ff47 	bl	80007b4 <Init_backGround>
	   	DrawSprite(&BackGround);
 8000926:	4822      	ldr	r0, [pc, #136]	; (80009b0 <Display_SD_Dir_content+0x168>)
 8000928:	f005 fa7c 	bl	8005e24 <DrawSprite>

	   	//Draw_String_fast(50, 50, "Folder Contents :");
	   	renderStr(0, 50, BLACK, "Folder Contents :");
 800092c:	4b21      	ldr	r3, [pc, #132]	; (80009b4 <Display_SD_Dir_content+0x16c>)
 800092e:	2200      	movs	r2, #0
 8000930:	2132      	movs	r1, #50	; 0x32
 8000932:	2000      	movs	r0, #0
 8000934:	f005 fd24 	bl	8006380 <renderStr>

	   	for(int k = 0 , r = 90 ; k< i ;k++ , r+=20)
 8000938:	2300      	movs	r3, #0
 800093a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800093e:	235a      	movs	r3, #90	; 0x5a
 8000940:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000944:	e018      	b.n	8000978 <Display_SD_Dir_content+0x130>
	   	   	    //Draw_String_fast(100,r , content[k].file_name);
	   		renderStr(20,r ,WHITE, content[k].file_name);
 8000946:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800094a:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 800094e:	4613      	mov	r3, r2
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	4413      	add	r3, r2
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	4a15      	ldr	r2, [pc, #84]	; (80009ac <Display_SD_Dir_content+0x164>)
 8000958:	4413      	add	r3, r2
 800095a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800095e:	2014      	movs	r0, #20
 8000960:	f005 fd0e 	bl	8006380 <renderStr>
	   	for(int k = 0 , r = 90 ; k< i ;k++ , r+=20)
 8000964:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000968:	3301      	adds	r3, #1
 800096a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800096e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000972:	3314      	adds	r3, #20
 8000974:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000978:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <Display_SD_Dir_content+0x160>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8000980:	429a      	cmp	r2, r3
 8000982:	dbe0      	blt.n	8000946 <Display_SD_Dir_content+0xfe>

	   	Init_Arrow(&arrow);
 8000984:	480c      	ldr	r0, [pc, #48]	; (80009b8 <Display_SD_Dir_content+0x170>)
 8000986:	f7ff ff3d 	bl	8000804 <Init_Arrow>
	   	DrawSprite(&arrow);
 800098a:	480b      	ldr	r0, [pc, #44]	; (80009b8 <Display_SD_Dir_content+0x170>)
 800098c:	f005 fa4a 	bl	8005e24 <DrawSprite>
}
 8000990:	bf00      	nop
 8000992:	f507 77b2 	add.w	r7, r7, #356	; 0x164
 8000996:	46bd      	mov	sp, r7
 8000998:	bd90      	pop	{r4, r7, pc}
 800099a:	bf00      	nop
 800099c:	0800be88 	.word	0x0800be88
 80009a0:	20000188 	.word	0x20000188
 80009a4:	0800be8c 	.word	0x0800be8c
 80009a8:	20001288 	.word	0x20001288
 80009ac:	200011c0 	.word	0x200011c0
 80009b0:	2000006c 	.word	0x2000006c
 80009b4:	0800bea4 	.word	0x0800bea4
 80009b8:	200000f4 	.word	0x200000f4

080009bc <Choose_BinToload>:
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */

void Choose_BinToload(char **BinFile)
{
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b08b      	sub	sp, #44	; 0x2c
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6178      	str	r0, [r7, #20]
	u32 pressCount = 0 ;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
	u32 entryTime = HAL_GetTick() ;
 80009c8:	f000 f8e2 	bl	8000b90 <HAL_GetTick>
 80009cc:	6238      	str	r0, [r7, #32]
	GamePAD_BTNState Bustate = RELEASED ;
 80009ce:	2301      	movs	r3, #1
 80009d0:	77fb      	strb	r3, [r7, #31]
	static char bin[30] = DIR_PATH ;

	   	while ( (HAL_GetTick() - entryTime) < TIMEOUT )
 80009d2:	e056      	b.n	8000a82 <Choose_BinToload+0xc6>
	   	{
	   		GamePad = GamePad_Read() ;
 80009d4:	4c32      	ldr	r4, [pc, #200]	; (8000aa0 <Choose_BinToload+0xe4>)
 80009d6:	463b      	mov	r3, r7
 80009d8:	4618      	mov	r0, r3
 80009da:	f007 f81b 	bl	8007a14 <GamePad_Read>
 80009de:	4623      	mov	r3, r4
 80009e0:	463a      	mov	r2, r7
 80009e2:	6810      	ldr	r0, [r2, #0]
 80009e4:	6851      	ldr	r1, [r2, #4]
 80009e6:	6892      	ldr	r2, [r2, #8]
 80009e8:	c307      	stmia	r3!, {r0, r1, r2}
	   		if( GamePad.button.down == PRESSED && Bustate ==RELEASED )
 80009ea:	4b2d      	ldr	r3, [pc, #180]	; (8000aa0 <Choose_BinToload+0xe4>)
 80009ec:	789b      	ldrb	r3, [r3, #2]
 80009ee:	f003 0304 	and.w	r3, r3, #4
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d122      	bne.n	8000a3e <Choose_BinToload+0x82>
 80009f8:	7ffb      	ldrb	r3, [r7, #31]
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d11f      	bne.n	8000a3e <Choose_BinToload+0x82>
	   		{
	   			Erase_Sprite(&arrow , &BackGround);
 80009fe:	4929      	ldr	r1, [pc, #164]	; (8000aa4 <Choose_BinToload+0xe8>)
 8000a00:	4829      	ldr	r0, [pc, #164]	; (8000aa8 <Choose_BinToload+0xec>)
 8000a02:	f005 fad1 	bl	8005fa8 <Erase_Sprite>
	   			if(++pressCount >= i)
 8000a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a08:	3301      	adds	r3, #1
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a0c:	4b27      	ldr	r3, [pc, #156]	; (8000aac <Choose_BinToload+0xf0>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	461a      	mov	r2, r3
 8000a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d305      	bcc.n	8000a24 <Choose_BinToload+0x68>
	   			   	{
	   				    pressCount = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
	   			   		arrow.y = 90 ;
 8000a1c:	4b22      	ldr	r3, [pc, #136]	; (8000aa8 <Choose_BinToload+0xec>)
 8000a1e:	225a      	movs	r2, #90	; 0x5a
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	e004      	b.n	8000a2e <Choose_BinToload+0x72>
	   			   	}
	   			else    arrow.y += 20 ;
 8000a24:	4b20      	ldr	r3, [pc, #128]	; (8000aa8 <Choose_BinToload+0xec>)
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	3314      	adds	r3, #20
 8000a2a:	4a1f      	ldr	r2, [pc, #124]	; (8000aa8 <Choose_BinToload+0xec>)
 8000a2c:	6093      	str	r3, [r2, #8]

	   			DrawSprite(&arrow) ;
 8000a2e:	481e      	ldr	r0, [pc, #120]	; (8000aa8 <Choose_BinToload+0xec>)
 8000a30:	f005 f9f8 	bl	8005e24 <DrawSprite>
	   			Bustate =PRESSED;
 8000a34:	2300      	movs	r3, #0
 8000a36:	77fb      	strb	r3, [r7, #31]

	   			entryTime = HAL_GetTick() ;
 8000a38:	f000 f8aa 	bl	8000b90 <HAL_GetTick>
 8000a3c:	6238      	str	r0, [r7, #32]
	   		}
	   		if(GamePad.button.down == RELEASED && Bustate ==PRESSED )
 8000a3e:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <Choose_BinToload+0xe4>)
 8000a40:	789b      	ldrb	r3, [r3, #2]
 8000a42:	f003 0304 	and.w	r3, r3, #4
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d004      	beq.n	8000a56 <Choose_BinToload+0x9a>
 8000a4c:	7ffb      	ldrb	r3, [r7, #31]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d101      	bne.n	8000a56 <Choose_BinToload+0x9a>
	   		{
	   			Bustate =RELEASED;
 8000a52:	2301      	movs	r3, #1
 8000a54:	77fb      	strb	r3, [r7, #31]
	   		}

	   		if(GamePad.button.select == PRESSED)
 8000a56:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <Choose_BinToload+0xe4>)
 8000a58:	789b      	ldrb	r3, [r3, #2]
 8000a5a:	f003 0320 	and.w	r3, r3, #32
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d10e      	bne.n	8000a82 <Choose_BinToload+0xc6>
	   		{
	   			strcat(bin, content[pressCount].file_name);
 8000a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a66:	4613      	mov	r3, r2
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	4413      	add	r3, r2
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	4a10      	ldr	r2, [pc, #64]	; (8000ab0 <Choose_BinToload+0xf4>)
 8000a70:	4413      	add	r3, r2
 8000a72:	4619      	mov	r1, r3
 8000a74:	480f      	ldr	r0, [pc, #60]	; (8000ab4 <Choose_BinToload+0xf8>)
 8000a76:	f00b f9c5 	bl	800be04 <strcat>
	   			*BinFile = bin ;
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	4a0d      	ldr	r2, [pc, #52]	; (8000ab4 <Choose_BinToload+0xf8>)
 8000a7e:	601a      	str	r2, [r3, #0]
	   			break;
 8000a80:	e009      	b.n	8000a96 <Choose_BinToload+0xda>
	   	while ( (HAL_GetTick() - entryTime) < TIMEOUT )
 8000a82:	f000 f885 	bl	8000b90 <HAL_GetTick>
 8000a86:	4602      	mov	r2, r0
 8000a88:	6a3b      	ldr	r3, [r7, #32]
 8000a8a:	1ad3      	subs	r3, r2, r3
 8000a8c:	f241 3287 	movw	r2, #4999	; 0x1387
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d99f      	bls.n	80009d4 <Choose_BinToload+0x18>
	   		}
	   	}
}
 8000a94:	bf00      	nop
 8000a96:	bf00      	nop
 8000a98:	372c      	adds	r7, #44	; 0x2c
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd90      	pop	{r4, r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	2000017c 	.word	0x2000017c
 8000aa4:	2000006c 	.word	0x2000006c
 8000aa8:	200000f4 	.word	0x200000f4
 8000aac:	20001288 	.word	0x20001288
 8000ab0:	200011c0 	.word	0x200011c0
 8000ab4:	20000000 	.word	0x20000000

08000ab8 <FileError_Handler>:
}



void FileError_Handler(char *file, int line)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while(1)
 8000ac2:	e7fe      	b.n	8000ac2 <FileError_Handler+0xa>

08000ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ac8:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <HAL_Init+0x40>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a0d      	ldr	r2, [pc, #52]	; (8000b04 <HAL_Init+0x40>)
 8000ace:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ad2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ad4:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <HAL_Init+0x40>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a0a      	ldr	r2, [pc, #40]	; (8000b04 <HAL_Init+0x40>)
 8000ada:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ade:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae0:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <HAL_Init+0x40>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a07      	ldr	r2, [pc, #28]	; (8000b04 <HAL_Init+0x40>)
 8000ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aec:	2003      	movs	r0, #3
 8000aee:	f000 f94f 	bl	8000d90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000af2:	2000      	movs	r0, #0
 8000af4:	f000 f808 	bl	8000b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000af8:	f006 fd8c 	bl	8007614 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40023c00 	.word	0x40023c00

08000b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b10:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <HAL_InitTick+0x54>)
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <HAL_InitTick+0x58>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	4619      	mov	r1, r3
 8000b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 f967 	bl	8000dfa <HAL_SYSTICK_Config>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e00e      	b.n	8000b54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2b0f      	cmp	r3, #15
 8000b3a:	d80a      	bhi.n	8000b52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	6879      	ldr	r1, [r7, #4]
 8000b40:	f04f 30ff 	mov.w	r0, #4294967295
 8000b44:	f000 f92f 	bl	8000da6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b48:	4a06      	ldr	r2, [pc, #24]	; (8000b64 <HAL_InitTick+0x5c>)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	e000      	b.n	8000b54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000034 	.word	0x20000034
 8000b60:	20000024 	.word	0x20000024
 8000b64:	20000020 	.word	0x20000020

08000b68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <HAL_IncTick+0x20>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	461a      	mov	r2, r3
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <HAL_IncTick+0x24>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4413      	add	r3, r2
 8000b78:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <HAL_IncTick+0x24>)
 8000b7a:	6013      	str	r3, [r2, #0]
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	20000024 	.word	0x20000024
 8000b8c:	2000128c 	.word	0x2000128c

08000b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  return uwTick;
 8000b94:	4b03      	ldr	r3, [pc, #12]	; (8000ba4 <HAL_GetTick+0x14>)
 8000b96:	681b      	ldr	r3, [r3, #0]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	2000128c 	.word	0x2000128c

08000ba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bb0:	f7ff ffee 	bl	8000b90 <HAL_GetTick>
 8000bb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bc0:	d005      	beq.n	8000bce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bc2:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <HAL_Delay+0x44>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	4413      	add	r3, r2
 8000bcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bce:	bf00      	nop
 8000bd0:	f7ff ffde 	bl	8000b90 <HAL_GetTick>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d8f7      	bhi.n	8000bd0 <HAL_Delay+0x28>
  {
  }
}
 8000be0:	bf00      	nop
 8000be2:	bf00      	nop
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000024 	.word	0x20000024

08000bf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c00:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <__NVIC_SetPriorityGrouping+0x44>)
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c06:	68ba      	ldr	r2, [r7, #8]
 8000c08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c22:	4a04      	ldr	r2, [pc, #16]	; (8000c34 <__NVIC_SetPriorityGrouping+0x44>)
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	60d3      	str	r3, [r2, #12]
}
 8000c28:	bf00      	nop
 8000c2a:	3714      	adds	r7, #20
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c3c:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <__NVIC_GetPriorityGrouping+0x18>)
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	0a1b      	lsrs	r3, r3, #8
 8000c42:	f003 0307 	and.w	r3, r3, #7
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	db0b      	blt.n	8000c7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	f003 021f 	and.w	r2, r3, #31
 8000c6c:	4907      	ldr	r1, [pc, #28]	; (8000c8c <__NVIC_EnableIRQ+0x38>)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	095b      	lsrs	r3, r3, #5
 8000c74:	2001      	movs	r0, #1
 8000c76:	fa00 f202 	lsl.w	r2, r0, r2
 8000c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000e100 	.word	0xe000e100

08000c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	6039      	str	r1, [r7, #0]
 8000c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db0a      	blt.n	8000cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	490c      	ldr	r1, [pc, #48]	; (8000cdc <__NVIC_SetPriority+0x4c>)
 8000caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cae:	0112      	lsls	r2, r2, #4
 8000cb0:	b2d2      	uxtb	r2, r2
 8000cb2:	440b      	add	r3, r1
 8000cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb8:	e00a      	b.n	8000cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	4908      	ldr	r1, [pc, #32]	; (8000ce0 <__NVIC_SetPriority+0x50>)
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	f003 030f 	and.w	r3, r3, #15
 8000cc6:	3b04      	subs	r3, #4
 8000cc8:	0112      	lsls	r2, r2, #4
 8000cca:	b2d2      	uxtb	r2, r2
 8000ccc:	440b      	add	r3, r1
 8000cce:	761a      	strb	r2, [r3, #24]
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000e100 	.word	0xe000e100
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b089      	sub	sp, #36	; 0x24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	f1c3 0307 	rsb	r3, r3, #7
 8000cfe:	2b04      	cmp	r3, #4
 8000d00:	bf28      	it	cs
 8000d02:	2304      	movcs	r3, #4
 8000d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	3304      	adds	r3, #4
 8000d0a:	2b06      	cmp	r3, #6
 8000d0c:	d902      	bls.n	8000d14 <NVIC_EncodePriority+0x30>
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	3b03      	subs	r3, #3
 8000d12:	e000      	b.n	8000d16 <NVIC_EncodePriority+0x32>
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d18:	f04f 32ff 	mov.w	r2, #4294967295
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43da      	mvns	r2, r3
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	401a      	ands	r2, r3
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	fa01 f303 	lsl.w	r3, r1, r3
 8000d36:	43d9      	mvns	r1, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3c:	4313      	orrs	r3, r2
         );
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3724      	adds	r7, #36	; 0x24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
	...

08000d4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3b01      	subs	r3, #1
 8000d58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d5c:	d301      	bcc.n	8000d62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e00f      	b.n	8000d82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d62:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <SysTick_Config+0x40>)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d6a:	210f      	movs	r1, #15
 8000d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d70:	f7ff ff8e 	bl	8000c90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d74:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <SysTick_Config+0x40>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d7a:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <SysTick_Config+0x40>)
 8000d7c:	2207      	movs	r2, #7
 8000d7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	e000e010 	.word	0xe000e010

08000d90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f7ff ff29 	bl	8000bf0 <__NVIC_SetPriorityGrouping>
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b086      	sub	sp, #24
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	4603      	mov	r3, r0
 8000dae:	60b9      	str	r1, [r7, #8]
 8000db0:	607a      	str	r2, [r7, #4]
 8000db2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000db8:	f7ff ff3e 	bl	8000c38 <__NVIC_GetPriorityGrouping>
 8000dbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	68b9      	ldr	r1, [r7, #8]
 8000dc2:	6978      	ldr	r0, [r7, #20]
 8000dc4:	f7ff ff8e 	bl	8000ce4 <NVIC_EncodePriority>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dce:	4611      	mov	r1, r2
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff5d 	bl	8000c90 <__NVIC_SetPriority>
}
 8000dd6:	bf00      	nop
 8000dd8:	3718      	adds	r7, #24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	4603      	mov	r3, r0
 8000de6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff31 	bl	8000c54 <__NVIC_EnableIRQ>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f7ff ffa2 	bl	8000d4c <SysTick_Config>
 8000e08:	4603      	mov	r3, r0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000e20:	f7ff feb6 	bl	8000b90 <HAL_GetTick>
 8000e24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d101      	bne.n	8000e30 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	e099      	b.n	8000f64 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2200      	movs	r2, #0
 8000e34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2202      	movs	r2, #2
 8000e3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f022 0201 	bic.w	r2, r2, #1
 8000e4e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e50:	e00f      	b.n	8000e72 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e52:	f7ff fe9d 	bl	8000b90 <HAL_GetTick>
 8000e56:	4602      	mov	r2, r0
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	2b05      	cmp	r3, #5
 8000e5e:	d908      	bls.n	8000e72 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2220      	movs	r2, #32
 8000e64:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2203      	movs	r2, #3
 8000e6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	e078      	b.n	8000f64 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f003 0301 	and.w	r3, r3, #1
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d1e8      	bne.n	8000e52 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000e88:	697a      	ldr	r2, [r7, #20]
 8000e8a:	4b38      	ldr	r3, [pc, #224]	; (8000f6c <HAL_DMA_Init+0x158>)
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685a      	ldr	r2, [r3, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	691b      	ldr	r3, [r3, #16]
 8000ea4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eaa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6a1b      	ldr	r3, [r3, #32]
 8000ebc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ebe:	697a      	ldr	r2, [r7, #20]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec8:	2b04      	cmp	r3, #4
 8000eca:	d107      	bne.n	8000edc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	697a      	ldr	r2, [r7, #20]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	697a      	ldr	r2, [r7, #20]
 8000ee2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	695b      	ldr	r3, [r3, #20]
 8000eea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	f023 0307 	bic.w	r3, r3, #7
 8000ef2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef8:	697a      	ldr	r2, [r7, #20]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f02:	2b04      	cmp	r3, #4
 8000f04:	d117      	bne.n	8000f36 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f0a:	697a      	ldr	r2, [r7, #20]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d00e      	beq.n	8000f36 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f000 f8bd 	bl	8001098 <DMA_CheckFifoParam>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d008      	beq.n	8000f36 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2240      	movs	r2, #64	; 0x40
 8000f28:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000f32:	2301      	movs	r3, #1
 8000f34:	e016      	b.n	8000f64 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	697a      	ldr	r2, [r7, #20]
 8000f3c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f000 f874 	bl	800102c <DMA_CalcBaseAndBitshift>
 8000f44:	4603      	mov	r3, r0
 8000f46:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f4c:	223f      	movs	r2, #63	; 0x3f
 8000f4e:	409a      	lsls	r2, r3
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2200      	movs	r2, #0
 8000f58:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000f62:	2300      	movs	r3, #0
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3718      	adds	r7, #24
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	f010803f 	.word	0xf010803f

08000f70 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d101      	bne.n	8000f82 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e050      	b.n	8001024 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d101      	bne.n	8000f92 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	e048      	b.n	8001024 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f022 0201 	bic.w	r2, r2, #1
 8000fa0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2221      	movs	r2, #33	; 0x21
 8000fd0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f000 f82a 	bl	800102c <DMA_CalcBaseAndBitshift>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001004:	223f      	movs	r2, #63	; 0x3f
 8001006:	409a      	lsls	r2, r3
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2200      	movs	r2, #0
 8001010:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2200      	movs	r2, #0
 8001016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001022:	2300      	movs	r3, #0
}
 8001024:	4618      	mov	r0, r3
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	b2db      	uxtb	r3, r3
 800103a:	3b10      	subs	r3, #16
 800103c:	4a14      	ldr	r2, [pc, #80]	; (8001090 <DMA_CalcBaseAndBitshift+0x64>)
 800103e:	fba2 2303 	umull	r2, r3, r2, r3
 8001042:	091b      	lsrs	r3, r3, #4
 8001044:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001046:	4a13      	ldr	r2, [pc, #76]	; (8001094 <DMA_CalcBaseAndBitshift+0x68>)
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4413      	add	r3, r2
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	461a      	mov	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	2b03      	cmp	r3, #3
 8001058:	d909      	bls.n	800106e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001062:	f023 0303 	bic.w	r3, r3, #3
 8001066:	1d1a      	adds	r2, r3, #4
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	659a      	str	r2, [r3, #88]	; 0x58
 800106c:	e007      	b.n	800107e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001076:	f023 0303 	bic.w	r3, r3, #3
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001082:	4618      	mov	r0, r3
 8001084:	3714      	adds	r7, #20
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	aaaaaaab 	.word	0xaaaaaaab
 8001094:	0800bfa0 	.word	0x0800bfa0

08001098 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010a0:	2300      	movs	r3, #0
 80010a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	699b      	ldr	r3, [r3, #24]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d11f      	bne.n	80010f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	2b03      	cmp	r3, #3
 80010b6:	d856      	bhi.n	8001166 <DMA_CheckFifoParam+0xce>
 80010b8:	a201      	add	r2, pc, #4	; (adr r2, 80010c0 <DMA_CheckFifoParam+0x28>)
 80010ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010be:	bf00      	nop
 80010c0:	080010d1 	.word	0x080010d1
 80010c4:	080010e3 	.word	0x080010e3
 80010c8:	080010d1 	.word	0x080010d1
 80010cc:	08001167 	.word	0x08001167
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d046      	beq.n	800116a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80010e0:	e043      	b.n	800116a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80010ea:	d140      	bne.n	800116e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80010f0:	e03d      	b.n	800116e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	699b      	ldr	r3, [r3, #24]
 80010f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010fa:	d121      	bne.n	8001140 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	2b03      	cmp	r3, #3
 8001100:	d837      	bhi.n	8001172 <DMA_CheckFifoParam+0xda>
 8001102:	a201      	add	r2, pc, #4	; (adr r2, 8001108 <DMA_CheckFifoParam+0x70>)
 8001104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001108:	08001119 	.word	0x08001119
 800110c:	0800111f 	.word	0x0800111f
 8001110:	08001119 	.word	0x08001119
 8001114:	08001131 	.word	0x08001131
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	73fb      	strb	r3, [r7, #15]
      break;
 800111c:	e030      	b.n	8001180 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001122:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d025      	beq.n	8001176 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800112e:	e022      	b.n	8001176 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001134:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001138:	d11f      	bne.n	800117a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800113e:	e01c      	b.n	800117a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	2b02      	cmp	r3, #2
 8001144:	d903      	bls.n	800114e <DMA_CheckFifoParam+0xb6>
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	2b03      	cmp	r3, #3
 800114a:	d003      	beq.n	8001154 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800114c:	e018      	b.n	8001180 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	73fb      	strb	r3, [r7, #15]
      break;
 8001152:	e015      	b.n	8001180 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001158:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d00e      	beq.n	800117e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	73fb      	strb	r3, [r7, #15]
      break;
 8001164:	e00b      	b.n	800117e <DMA_CheckFifoParam+0xe6>
      break;
 8001166:	bf00      	nop
 8001168:	e00a      	b.n	8001180 <DMA_CheckFifoParam+0xe8>
      break;
 800116a:	bf00      	nop
 800116c:	e008      	b.n	8001180 <DMA_CheckFifoParam+0xe8>
      break;
 800116e:	bf00      	nop
 8001170:	e006      	b.n	8001180 <DMA_CheckFifoParam+0xe8>
      break;
 8001172:	bf00      	nop
 8001174:	e004      	b.n	8001180 <DMA_CheckFifoParam+0xe8>
      break;
 8001176:	bf00      	nop
 8001178:	e002      	b.n	8001180 <DMA_CheckFifoParam+0xe8>
      break;   
 800117a:	bf00      	nop
 800117c:	e000      	b.n	8001180 <DMA_CheckFifoParam+0xe8>
      break;
 800117e:	bf00      	nop
    }
  } 
  
  return status; 
 8001180:	7bfb      	ldrb	r3, [r7, #15]
}
 8001182:	4618      	mov	r0, r3
 8001184:	3714      	adds	r7, #20
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop

08001190 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e03b      	b.n	800121a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d106      	bne.n	80011bc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f005 fa1a 	bl	80065f0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2202      	movs	r2, #2
 80011c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685a      	ldr	r2, [r3, #4]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	430a      	orrs	r2, r1
 80011d8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011e0:	f023 0107 	bic.w	r1, r3, #7
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689a      	ldr	r2, [r3, #8]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	430a      	orrs	r2, r1
 80011ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80011fa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	68d1      	ldr	r1, [r2, #12]
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	6812      	ldr	r2, [r2, #0]
 8001206:	430b      	orrs	r3, r1
 8001208:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2200      	movs	r2, #0
 800120e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2201      	movs	r2, #1
 8001214:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b086      	sub	sp, #24
 8001226:	af02      	add	r7, sp, #8
 8001228:	60f8      	str	r0, [r7, #12]
 800122a:	60b9      	str	r1, [r7, #8]
 800122c:	607a      	str	r2, [r7, #4]
 800122e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001236:	2b01      	cmp	r3, #1
 8001238:	d101      	bne.n	800123e <HAL_DMA2D_Start+0x1c>
 800123a:	2302      	movs	r3, #2
 800123c:	e018      	b.n	8001270 <HAL_DMA2D_Start+0x4e>
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2201      	movs	r2, #1
 8001242:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	2202      	movs	r2, #2
 800124a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	68b9      	ldr	r1, [r7, #8]
 8001258:	68f8      	ldr	r0, [r7, #12]
 800125a:	f000 f989 	bl	8001570 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f042 0201 	orr.w	r2, r2, #1
 800126c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800126e:	2300      	movs	r3, #0
}
 8001270:	4618      	mov	r0, r3
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0301 	and.w	r3, r3, #1
 8001290:	2b00      	cmp	r3, #0
 8001292:	d056      	beq.n	8001342 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8001294:	f7ff fc7c 	bl	8000b90 <HAL_GetTick>
 8001298:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800129a:	e04b      	b.n	8001334 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d023      	beq.n	80012f6 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	f003 0320 	and.w	r3, r3, #32
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d005      	beq.n	80012c4 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012bc:	f043 0202 	orr.w	r2, r3, #2
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d005      	beq.n	80012da <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012d2:	f043 0201 	orr.w	r2, r3, #1
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2221      	movs	r2, #33	; 0x21
 80012e0:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2204      	movs	r2, #4
 80012e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e0a5      	b.n	8001442 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012fc:	d01a      	beq.n	8001334 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80012fe:	f7ff fc47 	bl	8000b90 <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	683a      	ldr	r2, [r7, #0]
 800130a:	429a      	cmp	r2, r3
 800130c:	d302      	bcc.n	8001314 <HAL_DMA2D_PollForTransfer+0x9c>
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d10f      	bne.n	8001334 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001318:	f043 0220 	orr.w	r2, r3, #32
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2203      	movs	r2, #3
 8001324:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2200      	movs	r2, #0
 800132c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e086      	b.n	8001442 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d0ac      	beq.n	800129c <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	69db      	ldr	r3, [r3, #28]
 8001348:	f003 0320 	and.w	r3, r3, #32
 800134c:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001354:	f003 0320 	and.w	r3, r3, #32
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	4313      	orrs	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d061      	beq.n	8001428 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001364:	f7ff fc14 	bl	8000b90 <HAL_GetTick>
 8001368:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800136a:	e056      	b.n	800141a <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800137a:	2b00      	cmp	r3, #0
 800137c:	d02e      	beq.n	80013dc <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	f003 0308 	and.w	r3, r3, #8
 8001384:	2b00      	cmp	r3, #0
 8001386:	d005      	beq.n	8001394 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800138c:	f043 0204 	orr.w	r2, r3, #4
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f003 0320 	and.w	r3, r3, #32
 800139a:	2b00      	cmp	r3, #0
 800139c:	d005      	beq.n	80013aa <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013a2:	f043 0202 	orr.w	r2, r3, #2
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d005      	beq.n	80013c0 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013b8:	f043 0201 	orr.w	r2, r3, #1
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2229      	movs	r2, #41	; 0x29
 80013c6:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2204      	movs	r2, #4
 80013cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e032      	b.n	8001442 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e2:	d01a      	beq.n	800141a <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80013e4:	f7ff fbd4 	bl	8000b90 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	683a      	ldr	r2, [r7, #0]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d302      	bcc.n	80013fa <HAL_DMA2D_PollForTransfer+0x182>
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d10f      	bne.n	800141a <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013fe:	f043 0220 	orr.w	r2, r3, #32
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2203      	movs	r2, #3
 800140a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e013      	b.n	8001442 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 0310 	and.w	r3, r3, #16
 8001424:	2b00      	cmp	r3, #0
 8001426:	d0a1      	beq.n	800136c <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2212      	movs	r2, #18
 800142e:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2201      	movs	r2, #1
 8001434:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800144c:	b480      	push	{r7}
 800144e:	b087      	sub	sp, #28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001464:	2b01      	cmp	r3, #1
 8001466:	d101      	bne.n	800146c <HAL_DMA2D_ConfigLayer+0x20>
 8001468:	2302      	movs	r3, #2
 800146a:	e079      	b.n	8001560 <HAL_DMA2D_ConfigLayer+0x114>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2201      	movs	r2, #1
 8001470:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2202      	movs	r2, #2
 8001478:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	011b      	lsls	r3, r3, #4
 8001480:	3318      	adds	r3, #24
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	041b      	lsls	r3, r3, #16
 8001492:	4313      	orrs	r3, r2
 8001494:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001496:	4b35      	ldr	r3, [pc, #212]	; (800156c <HAL_DMA2D_ConfigLayer+0x120>)
 8001498:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	2b0a      	cmp	r3, #10
 80014a0:	d003      	beq.n	80014aa <HAL_DMA2D_ConfigLayer+0x5e>
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2b09      	cmp	r3, #9
 80014a8:	d107      	bne.n	80014ba <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80014b2:	697a      	ldr	r2, [r7, #20]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	e005      	b.n	80014c6 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	061b      	lsls	r3, r3, #24
 80014c0:	697a      	ldr	r2, [r7, #20]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d120      	bne.n	800150e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	43db      	mvns	r3, r3
 80014d6:	ea02 0103 	and.w	r1, r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	430a      	orrs	r2, r1
 80014e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	6812      	ldr	r2, [r2, #0]
 80014ec:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	2b0a      	cmp	r3, #10
 80014f4:	d003      	beq.n	80014fe <HAL_DMA2D_ConfigLayer+0xb2>
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	2b09      	cmp	r3, #9
 80014fc:	d127      	bne.n	800154e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	68da      	ldr	r2, [r3, #12]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800150a:	629a      	str	r2, [r3, #40]	; 0x28
 800150c:	e01f      	b.n	800154e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	69da      	ldr	r2, [r3, #28]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	43db      	mvns	r3, r3
 8001518:	ea02 0103 	and.w	r1, r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	697a      	ldr	r2, [r7, #20]
 8001522:	430a      	orrs	r2, r1
 8001524:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	6812      	ldr	r2, [r2, #0]
 800152e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	2b0a      	cmp	r3, #10
 8001536:	d003      	beq.n	8001540 <HAL_DMA2D_ConfigLayer+0xf4>
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	2b09      	cmp	r3, #9
 800153e:	d106      	bne.n	800154e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	68da      	ldr	r2, [r3, #12]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800154c:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2201      	movs	r2, #1
 8001552:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	371c      	adds	r7, #28
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	ff03000f 	.word	0xff03000f

08001570 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8001570:	b480      	push	{r7}
 8001572:	b08b      	sub	sp, #44	; 0x2c
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
 800157c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001584:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	041a      	lsls	r2, r3, #16
 800158c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800158e:	431a      	orrs	r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	430a      	orrs	r2, r1
 8001596:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80015a8:	d174      	bne.n	8001694 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80015b0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80015b8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80015c0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d108      	bne.n	80015e2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	431a      	orrs	r2, r3
 80015d6:	6a3b      	ldr	r3, [r7, #32]
 80015d8:	4313      	orrs	r3, r2
 80015da:	697a      	ldr	r2, [r7, #20]
 80015dc:	4313      	orrs	r3, r2
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
 80015e0:	e053      	b.n	800168a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d106      	bne.n	80015f8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
 80015f6:	e048      	b.n	800168a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d111      	bne.n	8001624 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	0cdb      	lsrs	r3, r3, #19
 8001604:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	0a9b      	lsrs	r3, r3, #10
 800160a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	08db      	lsrs	r3, r3, #3
 8001610:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	015a      	lsls	r2, r3, #5
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	02db      	lsls	r3, r3, #11
 800161a:	4313      	orrs	r3, r2
 800161c:	697a      	ldr	r2, [r7, #20]
 800161e:	4313      	orrs	r3, r2
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
 8001622:	e032      	b.n	800168a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	2b03      	cmp	r3, #3
 800162a:	d117      	bne.n	800165c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800162c:	6a3b      	ldr	r3, [r7, #32]
 800162e:	0fdb      	lsrs	r3, r3, #31
 8001630:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	0cdb      	lsrs	r3, r3, #19
 8001636:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	0adb      	lsrs	r3, r3, #11
 800163c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	08db      	lsrs	r3, r3, #3
 8001642:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	015a      	lsls	r2, r3, #5
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	029b      	lsls	r3, r3, #10
 800164c:	431a      	orrs	r2, r3
 800164e:	6a3b      	ldr	r3, [r7, #32]
 8001650:	03db      	lsls	r3, r3, #15
 8001652:	4313      	orrs	r3, r2
 8001654:	697a      	ldr	r2, [r7, #20]
 8001656:	4313      	orrs	r3, r2
 8001658:	627b      	str	r3, [r7, #36]	; 0x24
 800165a:	e016      	b.n	800168a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800165c:	6a3b      	ldr	r3, [r7, #32]
 800165e:	0f1b      	lsrs	r3, r3, #28
 8001660:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	0d1b      	lsrs	r3, r3, #20
 8001666:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	0b1b      	lsrs	r3, r3, #12
 800166c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	091b      	lsrs	r3, r3, #4
 8001672:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	011a      	lsls	r2, r3, #4
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	021b      	lsls	r3, r3, #8
 800167c:	431a      	orrs	r2, r3
 800167e:	6a3b      	ldr	r3, [r7, #32]
 8001680:	031b      	lsls	r3, r3, #12
 8001682:	4313      	orrs	r3, r2
 8001684:	697a      	ldr	r2, [r7, #20]
 8001686:	4313      	orrs	r3, r2
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001690:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8001692:	e003      	b.n	800169c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	68ba      	ldr	r2, [r7, #8]
 800169a:	60da      	str	r2, [r3, #12]
}
 800169c:	bf00      	nop
 800169e:	372c      	adds	r7, #44	; 0x2c
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80016ba:	4b23      	ldr	r3, [pc, #140]	; (8001748 <HAL_FLASH_Program+0xa0>)
 80016bc:	7e1b      	ldrb	r3, [r3, #24]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d101      	bne.n	80016c6 <HAL_FLASH_Program+0x1e>
 80016c2:	2302      	movs	r3, #2
 80016c4:	e03b      	b.n	800173e <HAL_FLASH_Program+0x96>
 80016c6:	4b20      	ldr	r3, [pc, #128]	; (8001748 <HAL_FLASH_Program+0xa0>)
 80016c8:	2201      	movs	r2, #1
 80016ca:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80016cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80016d0:	f000 f870 	bl	80017b4 <FLASH_WaitForLastOperation>
 80016d4:	4603      	mov	r3, r0
 80016d6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80016d8:	7dfb      	ldrb	r3, [r7, #23]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d12b      	bne.n	8001736 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d105      	bne.n	80016f0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80016e4:	783b      	ldrb	r3, [r7, #0]
 80016e6:	4619      	mov	r1, r3
 80016e8:	68b8      	ldr	r0, [r7, #8]
 80016ea:	f000 f91b 	bl	8001924 <FLASH_Program_Byte>
 80016ee:	e016      	b.n	800171e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d105      	bne.n	8001702 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80016f6:	883b      	ldrh	r3, [r7, #0]
 80016f8:	4619      	mov	r1, r3
 80016fa:	68b8      	ldr	r0, [r7, #8]
 80016fc:	f000 f8ee 	bl	80018dc <FLASH_Program_HalfWord>
 8001700:	e00d      	b.n	800171e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2b02      	cmp	r3, #2
 8001706:	d105      	bne.n	8001714 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	4619      	mov	r1, r3
 800170c:	68b8      	ldr	r0, [r7, #8]
 800170e:	f000 f8c3 	bl	8001898 <FLASH_Program_Word>
 8001712:	e004      	b.n	800171e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001714:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001718:	68b8      	ldr	r0, [r7, #8]
 800171a:	f000 f88b 	bl	8001834 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800171e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001722:	f000 f847 	bl	80017b4 <FLASH_WaitForLastOperation>
 8001726:	4603      	mov	r3, r0
 8001728:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800172a:	4b08      	ldr	r3, [pc, #32]	; (800174c <HAL_FLASH_Program+0xa4>)
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	4a07      	ldr	r2, [pc, #28]	; (800174c <HAL_FLASH_Program+0xa4>)
 8001730:	f023 0301 	bic.w	r3, r3, #1
 8001734:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001736:	4b04      	ldr	r3, [pc, #16]	; (8001748 <HAL_FLASH_Program+0xa0>)
 8001738:	2200      	movs	r2, #0
 800173a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800173c:	7dfb      	ldrb	r3, [r7, #23]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20001290 	.word	0x20001290
 800174c:	40023c00 	.word	0x40023c00

08001750 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001756:	2300      	movs	r3, #0
 8001758:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800175a:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <HAL_FLASH_Unlock+0x38>)
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	2b00      	cmp	r3, #0
 8001760:	da0b      	bge.n	800177a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001762:	4b09      	ldr	r3, [pc, #36]	; (8001788 <HAL_FLASH_Unlock+0x38>)
 8001764:	4a09      	ldr	r2, [pc, #36]	; (800178c <HAL_FLASH_Unlock+0x3c>)
 8001766:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001768:	4b07      	ldr	r3, [pc, #28]	; (8001788 <HAL_FLASH_Unlock+0x38>)
 800176a:	4a09      	ldr	r2, [pc, #36]	; (8001790 <HAL_FLASH_Unlock+0x40>)
 800176c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800176e:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_FLASH_Unlock+0x38>)
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	2b00      	cmp	r3, #0
 8001774:	da01      	bge.n	800177a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800177a:	79fb      	ldrb	r3, [r7, #7]
}
 800177c:	4618      	mov	r0, r3
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	40023c00 	.word	0x40023c00
 800178c:	45670123 	.word	0x45670123
 8001790:	cdef89ab 	.word	0xcdef89ab

08001794 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001798:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <HAL_FLASH_Lock+0x1c>)
 800179a:	691b      	ldr	r3, [r3, #16]
 800179c:	4a04      	ldr	r2, [pc, #16]	; (80017b0 <HAL_FLASH_Lock+0x1c>)
 800179e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80017a2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	40023c00 	.word	0x40023c00

080017b4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017bc:	2300      	movs	r3, #0
 80017be:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80017c0:	4b1a      	ldr	r3, [pc, #104]	; (800182c <FLASH_WaitForLastOperation+0x78>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80017c6:	f7ff f9e3 	bl	8000b90 <HAL_GetTick>
 80017ca:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80017cc:	e010      	b.n	80017f0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d4:	d00c      	beq.n	80017f0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d007      	beq.n	80017ec <FLASH_WaitForLastOperation+0x38>
 80017dc:	f7ff f9d8 	bl	8000b90 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d201      	bcs.n	80017f0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e019      	b.n	8001824 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80017f0:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <FLASH_WaitForLastOperation+0x7c>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1e8      	bne.n	80017ce <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <FLASH_WaitForLastOperation+0x7c>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	2b00      	cmp	r3, #0
 8001806:	d002      	beq.n	800180e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001808:	4b09      	ldr	r3, [pc, #36]	; (8001830 <FLASH_WaitForLastOperation+0x7c>)
 800180a:	2201      	movs	r2, #1
 800180c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800180e:	4b08      	ldr	r3, [pc, #32]	; (8001830 <FLASH_WaitForLastOperation+0x7c>)
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800181a:	f000 f8a5 	bl	8001968 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e000      	b.n	8001824 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001822:	2300      	movs	r3, #0
  
}  
 8001824:	4618      	mov	r0, r3
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20001290 	.word	0x20001290
 8001830:	40023c00 	.word	0x40023c00

08001834 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001840:	4b14      	ldr	r3, [pc, #80]	; (8001894 <FLASH_Program_DoubleWord+0x60>)
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	4a13      	ldr	r2, [pc, #76]	; (8001894 <FLASH_Program_DoubleWord+0x60>)
 8001846:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800184a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800184c:	4b11      	ldr	r3, [pc, #68]	; (8001894 <FLASH_Program_DoubleWord+0x60>)
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	4a10      	ldr	r2, [pc, #64]	; (8001894 <FLASH_Program_DoubleWord+0x60>)
 8001852:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001856:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001858:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <FLASH_Program_DoubleWord+0x60>)
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	4a0d      	ldr	r2, [pc, #52]	; (8001894 <FLASH_Program_DoubleWord+0x60>)
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800186a:	f3bf 8f6f 	isb	sy
}
 800186e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001870:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	f04f 0300 	mov.w	r3, #0
 800187c:	000a      	movs	r2, r1
 800187e:	2300      	movs	r3, #0
 8001880:	68f9      	ldr	r1, [r7, #12]
 8001882:	3104      	adds	r1, #4
 8001884:	4613      	mov	r3, r2
 8001886:	600b      	str	r3, [r1, #0]
}
 8001888:	bf00      	nop
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	40023c00 	.word	0x40023c00

08001898 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80018a2:	4b0d      	ldr	r3, [pc, #52]	; (80018d8 <FLASH_Program_Word+0x40>)
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	4a0c      	ldr	r2, [pc, #48]	; (80018d8 <FLASH_Program_Word+0x40>)
 80018a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018ac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80018ae:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <FLASH_Program_Word+0x40>)
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	4a09      	ldr	r2, [pc, #36]	; (80018d8 <FLASH_Program_Word+0x40>)
 80018b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018b8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80018ba:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <FLASH_Program_Word+0x40>)
 80018bc:	691b      	ldr	r3, [r3, #16]
 80018be:	4a06      	ldr	r2, [pc, #24]	; (80018d8 <FLASH_Program_Word+0x40>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	601a      	str	r2, [r3, #0]
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	40023c00 	.word	0x40023c00

080018dc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	460b      	mov	r3, r1
 80018e6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80018e8:	4b0d      	ldr	r3, [pc, #52]	; (8001920 <FLASH_Program_HalfWord+0x44>)
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	4a0c      	ldr	r2, [pc, #48]	; (8001920 <FLASH_Program_HalfWord+0x44>)
 80018ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80018f4:	4b0a      	ldr	r3, [pc, #40]	; (8001920 <FLASH_Program_HalfWord+0x44>)
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	4a09      	ldr	r2, [pc, #36]	; (8001920 <FLASH_Program_HalfWord+0x44>)
 80018fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001900:	4b07      	ldr	r3, [pc, #28]	; (8001920 <FLASH_Program_HalfWord+0x44>)
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	4a06      	ldr	r2, [pc, #24]	; (8001920 <FLASH_Program_HalfWord+0x44>)
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	887a      	ldrh	r2, [r7, #2]
 8001910:	801a      	strh	r2, [r3, #0]
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	40023c00 	.word	0x40023c00

08001924 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	460b      	mov	r3, r1
 800192e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001930:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <FLASH_Program_Byte+0x40>)
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	4a0b      	ldr	r2, [pc, #44]	; (8001964 <FLASH_Program_Byte+0x40>)
 8001936:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800193a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800193c:	4b09      	ldr	r3, [pc, #36]	; (8001964 <FLASH_Program_Byte+0x40>)
 800193e:	4a09      	ldr	r2, [pc, #36]	; (8001964 <FLASH_Program_Byte+0x40>)
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001944:	4b07      	ldr	r3, [pc, #28]	; (8001964 <FLASH_Program_Byte+0x40>)
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	4a06      	ldr	r2, [pc, #24]	; (8001964 <FLASH_Program_Byte+0x40>)
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	78fa      	ldrb	r2, [r7, #3]
 8001954:	701a      	strb	r2, [r3, #0]
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40023c00 	.word	0x40023c00

08001968 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800196c:	4b2f      	ldr	r3, [pc, #188]	; (8001a2c <FLASH_SetErrorCode+0xc4>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	f003 0310 	and.w	r3, r3, #16
 8001974:	2b00      	cmp	r3, #0
 8001976:	d008      	beq.n	800198a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001978:	4b2d      	ldr	r3, [pc, #180]	; (8001a30 <FLASH_SetErrorCode+0xc8>)
 800197a:	69db      	ldr	r3, [r3, #28]
 800197c:	f043 0310 	orr.w	r3, r3, #16
 8001980:	4a2b      	ldr	r2, [pc, #172]	; (8001a30 <FLASH_SetErrorCode+0xc8>)
 8001982:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001984:	4b29      	ldr	r3, [pc, #164]	; (8001a2c <FLASH_SetErrorCode+0xc4>)
 8001986:	2210      	movs	r2, #16
 8001988:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800198a:	4b28      	ldr	r3, [pc, #160]	; (8001a2c <FLASH_SetErrorCode+0xc4>)
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	f003 0320 	and.w	r3, r3, #32
 8001992:	2b00      	cmp	r3, #0
 8001994:	d008      	beq.n	80019a8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001996:	4b26      	ldr	r3, [pc, #152]	; (8001a30 <FLASH_SetErrorCode+0xc8>)
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	f043 0308 	orr.w	r3, r3, #8
 800199e:	4a24      	ldr	r2, [pc, #144]	; (8001a30 <FLASH_SetErrorCode+0xc8>)
 80019a0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80019a2:	4b22      	ldr	r3, [pc, #136]	; (8001a2c <FLASH_SetErrorCode+0xc4>)
 80019a4:	2220      	movs	r2, #32
 80019a6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80019a8:	4b20      	ldr	r3, [pc, #128]	; (8001a2c <FLASH_SetErrorCode+0xc4>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d008      	beq.n	80019c6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80019b4:	4b1e      	ldr	r3, [pc, #120]	; (8001a30 <FLASH_SetErrorCode+0xc8>)
 80019b6:	69db      	ldr	r3, [r3, #28]
 80019b8:	f043 0304 	orr.w	r3, r3, #4
 80019bc:	4a1c      	ldr	r2, [pc, #112]	; (8001a30 <FLASH_SetErrorCode+0xc8>)
 80019be:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80019c0:	4b1a      	ldr	r3, [pc, #104]	; (8001a2c <FLASH_SetErrorCode+0xc4>)
 80019c2:	2240      	movs	r2, #64	; 0x40
 80019c4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80019c6:	4b19      	ldr	r3, [pc, #100]	; (8001a2c <FLASH_SetErrorCode+0xc4>)
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d008      	beq.n	80019e4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80019d2:	4b17      	ldr	r3, [pc, #92]	; (8001a30 <FLASH_SetErrorCode+0xc8>)
 80019d4:	69db      	ldr	r3, [r3, #28]
 80019d6:	f043 0302 	orr.w	r3, r3, #2
 80019da:	4a15      	ldr	r2, [pc, #84]	; (8001a30 <FLASH_SetErrorCode+0xc8>)
 80019dc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80019de:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <FLASH_SetErrorCode+0xc4>)
 80019e0:	2280      	movs	r2, #128	; 0x80
 80019e2:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80019e4:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <FLASH_SetErrorCode+0xc4>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d009      	beq.n	8001a04 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80019f0:	4b0f      	ldr	r3, [pc, #60]	; (8001a30 <FLASH_SetErrorCode+0xc8>)
 80019f2:	69db      	ldr	r3, [r3, #28]
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	4a0d      	ldr	r2, [pc, #52]	; (8001a30 <FLASH_SetErrorCode+0xc8>)
 80019fa:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80019fc:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <FLASH_SetErrorCode+0xc4>)
 80019fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a02:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001a04:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <FLASH_SetErrorCode+0xc4>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d008      	beq.n	8001a22 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001a10:	4b07      	ldr	r3, [pc, #28]	; (8001a30 <FLASH_SetErrorCode+0xc8>)
 8001a12:	69db      	ldr	r3, [r3, #28]
 8001a14:	f043 0320 	orr.w	r3, r3, #32
 8001a18:	4a05      	ldr	r2, [pc, #20]	; (8001a30 <FLASH_SetErrorCode+0xc8>)
 8001a1a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001a1c:	4b03      	ldr	r3, [pc, #12]	; (8001a2c <FLASH_SetErrorCode+0xc4>)
 8001a1e:	2202      	movs	r2, #2
 8001a20:	60da      	str	r2, [r3, #12]
  }
}
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	40023c00 	.word	0x40023c00
 8001a30:	20001290 	.word	0x20001290

08001a34 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001a42:	2300      	movs	r3, #0
 8001a44:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001a46:	4b32      	ldr	r3, [pc, #200]	; (8001b10 <HAL_FLASHEx_Erase+0xdc>)
 8001a48:	7e1b      	ldrb	r3, [r3, #24]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d101      	bne.n	8001a52 <HAL_FLASHEx_Erase+0x1e>
 8001a4e:	2302      	movs	r3, #2
 8001a50:	e05a      	b.n	8001b08 <HAL_FLASHEx_Erase+0xd4>
 8001a52:	4b2f      	ldr	r3, [pc, #188]	; (8001b10 <HAL_FLASHEx_Erase+0xdc>)
 8001a54:	2201      	movs	r2, #1
 8001a56:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a58:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a5c:	f7ff feaa 	bl	80017b4 <FLASH_WaitForLastOperation>
 8001a60:	4603      	mov	r3, r0
 8001a62:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d14a      	bne.n	8001b00 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a70:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d117      	bne.n	8001aaa <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	4619      	mov	r1, r3
 8001a86:	4610      	mov	r0, r2
 8001a88:	f000 f846 	bl	8001b18 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a8c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a90:	f7ff fe90 	bl	80017b4 <FLASH_WaitForLastOperation>
 8001a94:	4603      	mov	r3, r0
 8001a96:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001a98:	4b1e      	ldr	r3, [pc, #120]	; (8001b14 <HAL_FLASHEx_Erase+0xe0>)
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	4a1d      	ldr	r2, [pc, #116]	; (8001b14 <HAL_FLASHEx_Erase+0xe0>)
 8001a9e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001aa2:	f023 0304 	bic.w	r3, r3, #4
 8001aa6:	6113      	str	r3, [r2, #16]
 8001aa8:	e028      	b.n	8001afc <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	e01c      	b.n	8001aec <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	4619      	mov	r1, r3
 8001aba:	68b8      	ldr	r0, [r7, #8]
 8001abc:	f000 f866 	bl	8001b8c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ac0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001ac4:	f7ff fe76 	bl	80017b4 <FLASH_WaitForLastOperation>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001acc:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <HAL_FLASHEx_Erase+0xe0>)
 8001ace:	691b      	ldr	r3, [r3, #16]
 8001ad0:	4a10      	ldr	r2, [pc, #64]	; (8001b14 <HAL_FLASHEx_Erase+0xe0>)
 8001ad2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001ad6:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8001ad8:	7bfb      	ldrb	r3, [r7, #15]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	68ba      	ldr	r2, [r7, #8]
 8001ae2:	601a      	str	r2, [r3, #0]
          break;
 8001ae4:	e00a      	b.n	8001afc <HAL_FLASHEx_Erase+0xc8>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	68da      	ldr	r2, [r3, #12]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	4413      	add	r3, r2
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d3da      	bcc.n	8001ab2 <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8001afc:	f000 f894 	bl	8001c28 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001b00:	4b03      	ldr	r3, [pc, #12]	; (8001b10 <HAL_FLASHEx_Erase+0xdc>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	761a      	strb	r2, [r3, #24]

  return status;
 8001b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	20001290 	.word	0x20001290
 8001b14:	40023c00 	.word	0x40023c00

08001b18 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	6039      	str	r1, [r7, #0]
 8001b22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b24:	4b18      	ldr	r3, [pc, #96]	; (8001b88 <FLASH_MassErase+0x70>)
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	4a17      	ldr	r2, [pc, #92]	; (8001b88 <FLASH_MassErase+0x70>)
 8001b2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b2e:	6113      	str	r3, [r2, #16]

  if(Banks == FLASH_BANK_BOTH)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	2b03      	cmp	r3, #3
 8001b34:	d108      	bne.n	8001b48 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8001b36:	4b14      	ldr	r3, [pc, #80]	; (8001b88 <FLASH_MassErase+0x70>)
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	4a13      	ldr	r2, [pc, #76]	; (8001b88 <FLASH_MassErase+0x70>)
 8001b3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b40:	f043 0304 	orr.w	r3, r3, #4
 8001b44:	6113      	str	r3, [r2, #16]
 8001b46:	e00f      	b.n	8001b68 <FLASH_MassErase+0x50>
  }
  else if(Banks == FLASH_BANK_1)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d106      	bne.n	8001b5c <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <FLASH_MassErase+0x70>)
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	4a0d      	ldr	r2, [pc, #52]	; (8001b88 <FLASH_MassErase+0x70>)
 8001b54:	f043 0304 	orr.w	r3, r3, #4
 8001b58:	6113      	str	r3, [r2, #16]
 8001b5a:	e005      	b.n	8001b68 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8001b5c:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <FLASH_MassErase+0x70>)
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	4a09      	ldr	r2, [pc, #36]	; (8001b88 <FLASH_MassErase+0x70>)
 8001b62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b66:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8001b68:	4b07      	ldr	r3, [pc, #28]	; (8001b88 <FLASH_MassErase+0x70>)
 8001b6a:	691a      	ldr	r2, [r3, #16]
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	021b      	lsls	r3, r3, #8
 8001b70:	4313      	orrs	r3, r2
 8001b72:	4a05      	ldr	r2, [pc, #20]	; (8001b88 <FLASH_MassErase+0x70>)
 8001b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b78:	6113      	str	r3, [r2, #16]
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	40023c00 	.word	0x40023c00

08001b8c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	460b      	mov	r3, r1
 8001b96:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001b9c:	78fb      	ldrb	r3, [r7, #3]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d102      	bne.n	8001ba8 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	e010      	b.n	8001bca <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001ba8:	78fb      	ldrb	r3, [r7, #3]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d103      	bne.n	8001bb6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001bae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	e009      	b.n	8001bca <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001bb6:	78fb      	ldrb	r3, [r7, #3]
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d103      	bne.n	8001bc4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001bbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	e002      	b.n	8001bca <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001bc4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bc8:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b0b      	cmp	r3, #11
 8001bce:	d902      	bls.n	8001bd6 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3304      	adds	r3, #4
 8001bd4:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001bd6:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <FLASH_Erase_Sector+0x98>)
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	4a12      	ldr	r2, [pc, #72]	; (8001c24 <FLASH_Erase_Sector+0x98>)
 8001bdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001be0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001be2:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <FLASH_Erase_Sector+0x98>)
 8001be4:	691a      	ldr	r2, [r3, #16]
 8001be6:	490f      	ldr	r1, [pc, #60]	; (8001c24 <FLASH_Erase_Sector+0x98>)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001bee:	4b0d      	ldr	r3, [pc, #52]	; (8001c24 <FLASH_Erase_Sector+0x98>)
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	4a0c      	ldr	r2, [pc, #48]	; (8001c24 <FLASH_Erase_Sector+0x98>)
 8001bf4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001bf8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <FLASH_Erase_Sector+0x98>)
 8001bfc:	691a      	ldr	r2, [r3, #16]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	4313      	orrs	r3, r2
 8001c04:	4a07      	ldr	r2, [pc, #28]	; (8001c24 <FLASH_Erase_Sector+0x98>)
 8001c06:	f043 0302 	orr.w	r3, r3, #2
 8001c0a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <FLASH_Erase_Sector+0x98>)
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	4a04      	ldr	r2, [pc, #16]	; (8001c24 <FLASH_Erase_Sector+0x98>)
 8001c12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c16:	6113      	str	r3, [r2, #16]
}
 8001c18:	bf00      	nop
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	40023c00 	.word	0x40023c00

08001c28 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8001c2c:	4b20      	ldr	r3, [pc, #128]	; (8001cb0 <FLASH_FlushCaches+0x88>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d017      	beq.n	8001c68 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001c38:	4b1d      	ldr	r3, [pc, #116]	; (8001cb0 <FLASH_FlushCaches+0x88>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a1c      	ldr	r2, [pc, #112]	; (8001cb0 <FLASH_FlushCaches+0x88>)
 8001c3e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001c42:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001c44:	4b1a      	ldr	r3, [pc, #104]	; (8001cb0 <FLASH_FlushCaches+0x88>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a19      	ldr	r2, [pc, #100]	; (8001cb0 <FLASH_FlushCaches+0x88>)
 8001c4a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c4e:	6013      	str	r3, [r2, #0]
 8001c50:	4b17      	ldr	r3, [pc, #92]	; (8001cb0 <FLASH_FlushCaches+0x88>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a16      	ldr	r2, [pc, #88]	; (8001cb0 <FLASH_FlushCaches+0x88>)
 8001c56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001c5a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c5c:	4b14      	ldr	r3, [pc, #80]	; (8001cb0 <FLASH_FlushCaches+0x88>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a13      	ldr	r2, [pc, #76]	; (8001cb0 <FLASH_FlushCaches+0x88>)
 8001c62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c66:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001c68:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <FLASH_FlushCaches+0x88>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d017      	beq.n	8001ca4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001c74:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <FLASH_FlushCaches+0x88>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a0d      	ldr	r2, [pc, #52]	; (8001cb0 <FLASH_FlushCaches+0x88>)
 8001c7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001c7e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001c80:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <FLASH_FlushCaches+0x88>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a0a      	ldr	r2, [pc, #40]	; (8001cb0 <FLASH_FlushCaches+0x88>)
 8001c86:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c8a:	6013      	str	r3, [r2, #0]
 8001c8c:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <FLASH_FlushCaches+0x88>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a07      	ldr	r2, [pc, #28]	; (8001cb0 <FLASH_FlushCaches+0x88>)
 8001c92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c96:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c98:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <FLASH_FlushCaches+0x88>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a04      	ldr	r2, [pc, #16]	; (8001cb0 <FLASH_FlushCaches+0x88>)
 8001c9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ca2:	6013      	str	r3, [r2, #0]
  }
}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	40023c00 	.word	0x40023c00

08001cb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b089      	sub	sp, #36	; 0x24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61fb      	str	r3, [r7, #28]
 8001cce:	e177      	b.n	8001fc0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	f040 8166 	bne.w	8001fba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d00b      	beq.n	8001d0e <HAL_GPIO_Init+0x5a>
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d007      	beq.n	8001d0e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d02:	2b11      	cmp	r3, #17
 8001d04:	d003      	beq.n	8001d0e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2b12      	cmp	r3, #18
 8001d0c:	d130      	bne.n	8001d70 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	2203      	movs	r2, #3
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4013      	ands	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	68da      	ldr	r2, [r3, #12]
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d44:	2201      	movs	r2, #1
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	091b      	lsrs	r3, r3, #4
 8001d5a:	f003 0201 	and.w	r2, r3, #1
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	2203      	movs	r2, #3
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d003      	beq.n	8001db0 <HAL_GPIO_Init+0xfc>
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2b12      	cmp	r3, #18
 8001dae:	d123      	bne.n	8001df8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	08da      	lsrs	r2, r3, #3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3208      	adds	r2, #8
 8001db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	220f      	movs	r2, #15
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	691a      	ldr	r2, [r3, #16]
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	08da      	lsrs	r2, r3, #3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	3208      	adds	r2, #8
 8001df2:	69b9      	ldr	r1, [r7, #24]
 8001df4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	2203      	movs	r2, #3
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f003 0203 	and.w	r2, r3, #3
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f000 80c0 	beq.w	8001fba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	4b66      	ldr	r3, [pc, #408]	; (8001fd8 <HAL_GPIO_Init+0x324>)
 8001e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e42:	4a65      	ldr	r2, [pc, #404]	; (8001fd8 <HAL_GPIO_Init+0x324>)
 8001e44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e48:	6453      	str	r3, [r2, #68]	; 0x44
 8001e4a:	4b63      	ldr	r3, [pc, #396]	; (8001fd8 <HAL_GPIO_Init+0x324>)
 8001e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e56:	4a61      	ldr	r2, [pc, #388]	; (8001fdc <HAL_GPIO_Init+0x328>)
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	089b      	lsrs	r3, r3, #2
 8001e5c:	3302      	adds	r3, #2
 8001e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	220f      	movs	r2, #15
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43db      	mvns	r3, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4013      	ands	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a58      	ldr	r2, [pc, #352]	; (8001fe0 <HAL_GPIO_Init+0x32c>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d037      	beq.n	8001ef2 <HAL_GPIO_Init+0x23e>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a57      	ldr	r2, [pc, #348]	; (8001fe4 <HAL_GPIO_Init+0x330>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d031      	beq.n	8001eee <HAL_GPIO_Init+0x23a>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a56      	ldr	r2, [pc, #344]	; (8001fe8 <HAL_GPIO_Init+0x334>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d02b      	beq.n	8001eea <HAL_GPIO_Init+0x236>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a55      	ldr	r2, [pc, #340]	; (8001fec <HAL_GPIO_Init+0x338>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d025      	beq.n	8001ee6 <HAL_GPIO_Init+0x232>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a54      	ldr	r2, [pc, #336]	; (8001ff0 <HAL_GPIO_Init+0x33c>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d01f      	beq.n	8001ee2 <HAL_GPIO_Init+0x22e>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a53      	ldr	r2, [pc, #332]	; (8001ff4 <HAL_GPIO_Init+0x340>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d019      	beq.n	8001ede <HAL_GPIO_Init+0x22a>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a52      	ldr	r2, [pc, #328]	; (8001ff8 <HAL_GPIO_Init+0x344>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d013      	beq.n	8001eda <HAL_GPIO_Init+0x226>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a51      	ldr	r2, [pc, #324]	; (8001ffc <HAL_GPIO_Init+0x348>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d00d      	beq.n	8001ed6 <HAL_GPIO_Init+0x222>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a50      	ldr	r2, [pc, #320]	; (8002000 <HAL_GPIO_Init+0x34c>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d007      	beq.n	8001ed2 <HAL_GPIO_Init+0x21e>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a4f      	ldr	r2, [pc, #316]	; (8002004 <HAL_GPIO_Init+0x350>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d101      	bne.n	8001ece <HAL_GPIO_Init+0x21a>
 8001eca:	2309      	movs	r3, #9
 8001ecc:	e012      	b.n	8001ef4 <HAL_GPIO_Init+0x240>
 8001ece:	230a      	movs	r3, #10
 8001ed0:	e010      	b.n	8001ef4 <HAL_GPIO_Init+0x240>
 8001ed2:	2308      	movs	r3, #8
 8001ed4:	e00e      	b.n	8001ef4 <HAL_GPIO_Init+0x240>
 8001ed6:	2307      	movs	r3, #7
 8001ed8:	e00c      	b.n	8001ef4 <HAL_GPIO_Init+0x240>
 8001eda:	2306      	movs	r3, #6
 8001edc:	e00a      	b.n	8001ef4 <HAL_GPIO_Init+0x240>
 8001ede:	2305      	movs	r3, #5
 8001ee0:	e008      	b.n	8001ef4 <HAL_GPIO_Init+0x240>
 8001ee2:	2304      	movs	r3, #4
 8001ee4:	e006      	b.n	8001ef4 <HAL_GPIO_Init+0x240>
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e004      	b.n	8001ef4 <HAL_GPIO_Init+0x240>
 8001eea:	2302      	movs	r3, #2
 8001eec:	e002      	b.n	8001ef4 <HAL_GPIO_Init+0x240>
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e000      	b.n	8001ef4 <HAL_GPIO_Init+0x240>
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	69fa      	ldr	r2, [r7, #28]
 8001ef6:	f002 0203 	and.w	r2, r2, #3
 8001efa:	0092      	lsls	r2, r2, #2
 8001efc:	4093      	lsls	r3, r2
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f04:	4935      	ldr	r1, [pc, #212]	; (8001fdc <HAL_GPIO_Init+0x328>)
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	089b      	lsrs	r3, r3, #2
 8001f0a:	3302      	adds	r3, #2
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f12:	4b3d      	ldr	r3, [pc, #244]	; (8002008 <HAL_GPIO_Init+0x354>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f36:	4a34      	ldr	r2, [pc, #208]	; (8002008 <HAL_GPIO_Init+0x354>)
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f3c:	4b32      	ldr	r3, [pc, #200]	; (8002008 <HAL_GPIO_Init+0x354>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f60:	4a29      	ldr	r2, [pc, #164]	; (8002008 <HAL_GPIO_Init+0x354>)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f66:	4b28      	ldr	r3, [pc, #160]	; (8002008 <HAL_GPIO_Init+0x354>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4013      	ands	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f8a:	4a1f      	ldr	r2, [pc, #124]	; (8002008 <HAL_GPIO_Init+0x354>)
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f90:	4b1d      	ldr	r3, [pc, #116]	; (8002008 <HAL_GPIO_Init+0x354>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d003      	beq.n	8001fb4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fb4:	4a14      	ldr	r2, [pc, #80]	; (8002008 <HAL_GPIO_Init+0x354>)
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	61fb      	str	r3, [r7, #28]
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	2b0f      	cmp	r3, #15
 8001fc4:	f67f ae84 	bls.w	8001cd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fc8:	bf00      	nop
 8001fca:	bf00      	nop
 8001fcc:	3724      	adds	r7, #36	; 0x24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	40013800 	.word	0x40013800
 8001fe0:	40020000 	.word	0x40020000
 8001fe4:	40020400 	.word	0x40020400
 8001fe8:	40020800 	.word	0x40020800
 8001fec:	40020c00 	.word	0x40020c00
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	40021400 	.word	0x40021400
 8001ff8:	40021800 	.word	0x40021800
 8001ffc:	40021c00 	.word	0x40021c00
 8002000:	40022000 	.word	0x40022000
 8002004:	40022400 	.word	0x40022400
 8002008:	40013c00 	.word	0x40013c00

0800200c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800200c:	b480      	push	{r7}
 800200e:	b087      	sub	sp, #28
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002016:	2300      	movs	r3, #0
 8002018:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800201a:	2300      	movs	r3, #0
 800201c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800201e:	2300      	movs	r3, #0
 8002020:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002022:	2300      	movs	r3, #0
 8002024:	617b      	str	r3, [r7, #20]
 8002026:	e0d9      	b.n	80021dc <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002028:	2201      	movs	r2, #1
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	4013      	ands	r3, r2
 8002038:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	429a      	cmp	r2, r3
 8002040:	f040 80c9 	bne.w	80021d6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002044:	4a6b      	ldr	r2, [pc, #428]	; (80021f4 <HAL_GPIO_DeInit+0x1e8>)
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	089b      	lsrs	r3, r3, #2
 800204a:	3302      	adds	r3, #2
 800204c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002050:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f003 0303 	and.w	r3, r3, #3
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	220f      	movs	r2, #15
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	68ba      	ldr	r2, [r7, #8]
 8002062:	4013      	ands	r3, r2
 8002064:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a63      	ldr	r2, [pc, #396]	; (80021f8 <HAL_GPIO_DeInit+0x1ec>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d037      	beq.n	80020de <HAL_GPIO_DeInit+0xd2>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a62      	ldr	r2, [pc, #392]	; (80021fc <HAL_GPIO_DeInit+0x1f0>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d031      	beq.n	80020da <HAL_GPIO_DeInit+0xce>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a61      	ldr	r2, [pc, #388]	; (8002200 <HAL_GPIO_DeInit+0x1f4>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d02b      	beq.n	80020d6 <HAL_GPIO_DeInit+0xca>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a60      	ldr	r2, [pc, #384]	; (8002204 <HAL_GPIO_DeInit+0x1f8>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d025      	beq.n	80020d2 <HAL_GPIO_DeInit+0xc6>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a5f      	ldr	r2, [pc, #380]	; (8002208 <HAL_GPIO_DeInit+0x1fc>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d01f      	beq.n	80020ce <HAL_GPIO_DeInit+0xc2>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a5e      	ldr	r2, [pc, #376]	; (800220c <HAL_GPIO_DeInit+0x200>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d019      	beq.n	80020ca <HAL_GPIO_DeInit+0xbe>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a5d      	ldr	r2, [pc, #372]	; (8002210 <HAL_GPIO_DeInit+0x204>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d013      	beq.n	80020c6 <HAL_GPIO_DeInit+0xba>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a5c      	ldr	r2, [pc, #368]	; (8002214 <HAL_GPIO_DeInit+0x208>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d00d      	beq.n	80020c2 <HAL_GPIO_DeInit+0xb6>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a5b      	ldr	r2, [pc, #364]	; (8002218 <HAL_GPIO_DeInit+0x20c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d007      	beq.n	80020be <HAL_GPIO_DeInit+0xb2>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a5a      	ldr	r2, [pc, #360]	; (800221c <HAL_GPIO_DeInit+0x210>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d101      	bne.n	80020ba <HAL_GPIO_DeInit+0xae>
 80020b6:	2309      	movs	r3, #9
 80020b8:	e012      	b.n	80020e0 <HAL_GPIO_DeInit+0xd4>
 80020ba:	230a      	movs	r3, #10
 80020bc:	e010      	b.n	80020e0 <HAL_GPIO_DeInit+0xd4>
 80020be:	2308      	movs	r3, #8
 80020c0:	e00e      	b.n	80020e0 <HAL_GPIO_DeInit+0xd4>
 80020c2:	2307      	movs	r3, #7
 80020c4:	e00c      	b.n	80020e0 <HAL_GPIO_DeInit+0xd4>
 80020c6:	2306      	movs	r3, #6
 80020c8:	e00a      	b.n	80020e0 <HAL_GPIO_DeInit+0xd4>
 80020ca:	2305      	movs	r3, #5
 80020cc:	e008      	b.n	80020e0 <HAL_GPIO_DeInit+0xd4>
 80020ce:	2304      	movs	r3, #4
 80020d0:	e006      	b.n	80020e0 <HAL_GPIO_DeInit+0xd4>
 80020d2:	2303      	movs	r3, #3
 80020d4:	e004      	b.n	80020e0 <HAL_GPIO_DeInit+0xd4>
 80020d6:	2302      	movs	r3, #2
 80020d8:	e002      	b.n	80020e0 <HAL_GPIO_DeInit+0xd4>
 80020da:	2301      	movs	r3, #1
 80020dc:	e000      	b.n	80020e0 <HAL_GPIO_DeInit+0xd4>
 80020de:	2300      	movs	r3, #0
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	f002 0203 	and.w	r2, r2, #3
 80020e6:	0092      	lsls	r2, r2, #2
 80020e8:	4093      	lsls	r3, r2
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d132      	bne.n	8002156 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80020f0:	4b4b      	ldr	r3, [pc, #300]	; (8002220 <HAL_GPIO_DeInit+0x214>)
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	43db      	mvns	r3, r3
 80020f8:	4949      	ldr	r1, [pc, #292]	; (8002220 <HAL_GPIO_DeInit+0x214>)
 80020fa:	4013      	ands	r3, r2
 80020fc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80020fe:	4b48      	ldr	r3, [pc, #288]	; (8002220 <HAL_GPIO_DeInit+0x214>)
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	43db      	mvns	r3, r3
 8002106:	4946      	ldr	r1, [pc, #280]	; (8002220 <HAL_GPIO_DeInit+0x214>)
 8002108:	4013      	ands	r3, r2
 800210a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800210c:	4b44      	ldr	r3, [pc, #272]	; (8002220 <HAL_GPIO_DeInit+0x214>)
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	43db      	mvns	r3, r3
 8002114:	4942      	ldr	r1, [pc, #264]	; (8002220 <HAL_GPIO_DeInit+0x214>)
 8002116:	4013      	ands	r3, r2
 8002118:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800211a:	4b41      	ldr	r3, [pc, #260]	; (8002220 <HAL_GPIO_DeInit+0x214>)
 800211c:	68da      	ldr	r2, [r3, #12]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	43db      	mvns	r3, r3
 8002122:	493f      	ldr	r1, [pc, #252]	; (8002220 <HAL_GPIO_DeInit+0x214>)
 8002124:	4013      	ands	r3, r2
 8002126:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	f003 0303 	and.w	r3, r3, #3
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	220f      	movs	r2, #15
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002138:	4a2e      	ldr	r2, [pc, #184]	; (80021f4 <HAL_GPIO_DeInit+0x1e8>)
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	089b      	lsrs	r3, r3, #2
 800213e:	3302      	adds	r3, #2
 8002140:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	43da      	mvns	r2, r3
 8002148:	482a      	ldr	r0, [pc, #168]	; (80021f4 <HAL_GPIO_DeInit+0x1e8>)
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	089b      	lsrs	r3, r3, #2
 800214e:	400a      	ands	r2, r1
 8002150:	3302      	adds	r3, #2
 8002152:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	2103      	movs	r1, #3
 8002160:	fa01 f303 	lsl.w	r3, r1, r3
 8002164:	43db      	mvns	r3, r3
 8002166:	401a      	ands	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	08da      	lsrs	r2, r3, #3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	3208      	adds	r2, #8
 8002174:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	220f      	movs	r2, #15
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	43db      	mvns	r3, r3
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	08d2      	lsrs	r2, r2, #3
 800218c:	4019      	ands	r1, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	3208      	adds	r2, #8
 8002192:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68da      	ldr	r2, [r3, #12]
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	2103      	movs	r1, #3
 80021a0:	fa01 f303 	lsl.w	r3, r1, r3
 80021a4:	43db      	mvns	r3, r3
 80021a6:	401a      	ands	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685a      	ldr	r2, [r3, #4]
 80021b0:	2101      	movs	r1, #1
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	fa01 f303 	lsl.w	r3, r1, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	401a      	ands	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	2103      	movs	r1, #3
 80021ca:	fa01 f303 	lsl.w	r3, r1, r3
 80021ce:	43db      	mvns	r3, r3
 80021d0:	401a      	ands	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	3301      	adds	r3, #1
 80021da:	617b      	str	r3, [r7, #20]
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	2b0f      	cmp	r3, #15
 80021e0:	f67f af22 	bls.w	8002028 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80021e4:	bf00      	nop
 80021e6:	bf00      	nop
 80021e8:	371c      	adds	r7, #28
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	40013800 	.word	0x40013800
 80021f8:	40020000 	.word	0x40020000
 80021fc:	40020400 	.word	0x40020400
 8002200:	40020800 	.word	0x40020800
 8002204:	40020c00 	.word	0x40020c00
 8002208:	40021000 	.word	0x40021000
 800220c:	40021400 	.word	0x40021400
 8002210:	40021800 	.word	0x40021800
 8002214:	40021c00 	.word	0x40021c00
 8002218:	40022000 	.word	0x40022000
 800221c:	40022400 	.word	0x40022400
 8002220:	40013c00 	.word	0x40013c00

08002224 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	460b      	mov	r3, r1
 800222e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	691a      	ldr	r2, [r3, #16]
 8002234:	887b      	ldrh	r3, [r7, #2]
 8002236:	4013      	ands	r3, r2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d002      	beq.n	8002242 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800223c:	2301      	movs	r3, #1
 800223e:	73fb      	strb	r3, [r7, #15]
 8002240:	e001      	b.n	8002246 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002242:	2300      	movs	r3, #0
 8002244:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002246:	7bfb      	ldrb	r3, [r7, #15]
}
 8002248:	4618      	mov	r0, r3
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	460b      	mov	r3, r1
 800225e:	807b      	strh	r3, [r7, #2]
 8002260:	4613      	mov	r3, r2
 8002262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002264:	787b      	ldrb	r3, [r7, #1]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800226a:	887a      	ldrh	r2, [r7, #2]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002270:	e003      	b.n	800227a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002272:	887b      	ldrh	r3, [r7, #2]
 8002274:	041a      	lsls	r2, r3, #16
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	619a      	str	r2, [r3, #24]
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
	...

08002288 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e12b      	b.n	80024f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d106      	bne.n	80022b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f005 fa24 	bl	80076fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2224      	movs	r2, #36	; 0x24
 80022b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 0201 	bic.w	r2, r2, #1
 80022ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022ec:	f001 ffa4 	bl	8004238 <HAL_RCC_GetPCLK1Freq>
 80022f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	4a81      	ldr	r2, [pc, #516]	; (80024fc <HAL_I2C_Init+0x274>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d807      	bhi.n	800230c <HAL_I2C_Init+0x84>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	4a80      	ldr	r2, [pc, #512]	; (8002500 <HAL_I2C_Init+0x278>)
 8002300:	4293      	cmp	r3, r2
 8002302:	bf94      	ite	ls
 8002304:	2301      	movls	r3, #1
 8002306:	2300      	movhi	r3, #0
 8002308:	b2db      	uxtb	r3, r3
 800230a:	e006      	b.n	800231a <HAL_I2C_Init+0x92>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	4a7d      	ldr	r2, [pc, #500]	; (8002504 <HAL_I2C_Init+0x27c>)
 8002310:	4293      	cmp	r3, r2
 8002312:	bf94      	ite	ls
 8002314:	2301      	movls	r3, #1
 8002316:	2300      	movhi	r3, #0
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e0e7      	b.n	80024f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	4a78      	ldr	r2, [pc, #480]	; (8002508 <HAL_I2C_Init+0x280>)
 8002326:	fba2 2303 	umull	r2, r3, r2, r3
 800232a:	0c9b      	lsrs	r3, r3, #18
 800232c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68ba      	ldr	r2, [r7, #8]
 800233e:	430a      	orrs	r2, r1
 8002340:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	4a6a      	ldr	r2, [pc, #424]	; (80024fc <HAL_I2C_Init+0x274>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d802      	bhi.n	800235c <HAL_I2C_Init+0xd4>
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	3301      	adds	r3, #1
 800235a:	e009      	b.n	8002370 <HAL_I2C_Init+0xe8>
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002362:	fb02 f303 	mul.w	r3, r2, r3
 8002366:	4a69      	ldr	r2, [pc, #420]	; (800250c <HAL_I2C_Init+0x284>)
 8002368:	fba2 2303 	umull	r2, r3, r2, r3
 800236c:	099b      	lsrs	r3, r3, #6
 800236e:	3301      	adds	r3, #1
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	6812      	ldr	r2, [r2, #0]
 8002374:	430b      	orrs	r3, r1
 8002376:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002382:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	495c      	ldr	r1, [pc, #368]	; (80024fc <HAL_I2C_Init+0x274>)
 800238c:	428b      	cmp	r3, r1
 800238e:	d819      	bhi.n	80023c4 <HAL_I2C_Init+0x13c>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	1e59      	subs	r1, r3, #1
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	fbb1 f3f3 	udiv	r3, r1, r3
 800239e:	1c59      	adds	r1, r3, #1
 80023a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80023a4:	400b      	ands	r3, r1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00a      	beq.n	80023c0 <HAL_I2C_Init+0x138>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	1e59      	subs	r1, r3, #1
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80023b8:	3301      	adds	r3, #1
 80023ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023be:	e051      	b.n	8002464 <HAL_I2C_Init+0x1dc>
 80023c0:	2304      	movs	r3, #4
 80023c2:	e04f      	b.n	8002464 <HAL_I2C_Init+0x1dc>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d111      	bne.n	80023f0 <HAL_I2C_Init+0x168>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	1e58      	subs	r0, r3, #1
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6859      	ldr	r1, [r3, #4]
 80023d4:	460b      	mov	r3, r1
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	440b      	add	r3, r1
 80023da:	fbb0 f3f3 	udiv	r3, r0, r3
 80023de:	3301      	adds	r3, #1
 80023e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	bf0c      	ite	eq
 80023e8:	2301      	moveq	r3, #1
 80023ea:	2300      	movne	r3, #0
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	e012      	b.n	8002416 <HAL_I2C_Init+0x18e>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	1e58      	subs	r0, r3, #1
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6859      	ldr	r1, [r3, #4]
 80023f8:	460b      	mov	r3, r1
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	0099      	lsls	r1, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	fbb0 f3f3 	udiv	r3, r0, r3
 8002406:	3301      	adds	r3, #1
 8002408:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800240c:	2b00      	cmp	r3, #0
 800240e:	bf0c      	ite	eq
 8002410:	2301      	moveq	r3, #1
 8002412:	2300      	movne	r3, #0
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <HAL_I2C_Init+0x196>
 800241a:	2301      	movs	r3, #1
 800241c:	e022      	b.n	8002464 <HAL_I2C_Init+0x1dc>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10e      	bne.n	8002444 <HAL_I2C_Init+0x1bc>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	1e58      	subs	r0, r3, #1
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6859      	ldr	r1, [r3, #4]
 800242e:	460b      	mov	r3, r1
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	440b      	add	r3, r1
 8002434:	fbb0 f3f3 	udiv	r3, r0, r3
 8002438:	3301      	adds	r3, #1
 800243a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800243e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002442:	e00f      	b.n	8002464 <HAL_I2C_Init+0x1dc>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	1e58      	subs	r0, r3, #1
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6859      	ldr	r1, [r3, #4]
 800244c:	460b      	mov	r3, r1
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	440b      	add	r3, r1
 8002452:	0099      	lsls	r1, r3, #2
 8002454:	440b      	add	r3, r1
 8002456:	fbb0 f3f3 	udiv	r3, r0, r3
 800245a:	3301      	adds	r3, #1
 800245c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002460:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	6809      	ldr	r1, [r1, #0]
 8002468:	4313      	orrs	r3, r2
 800246a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	69da      	ldr	r2, [r3, #28]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	431a      	orrs	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	430a      	orrs	r2, r1
 8002486:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002492:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	6911      	ldr	r1, [r2, #16]
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	68d2      	ldr	r2, [r2, #12]
 800249e:	4311      	orrs	r1, r2
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	6812      	ldr	r2, [r2, #0]
 80024a4:	430b      	orrs	r3, r1
 80024a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	695a      	ldr	r2, [r3, #20]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	431a      	orrs	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f042 0201 	orr.w	r2, r2, #1
 80024d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2220      	movs	r2, #32
 80024de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	000186a0 	.word	0x000186a0
 8002500:	001e847f 	.word	0x001e847f
 8002504:	003d08ff 	.word	0x003d08ff
 8002508:	431bde83 	.word	0x431bde83
 800250c:	10624dd3 	.word	0x10624dd3

08002510 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e021      	b.n	8002566 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2224      	movs	r2, #36	; 0x24
 8002526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 0201 	bic.w	r2, r2, #1
 8002538:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f817 	bl	800256e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800256e:	b480      	push	{r7}
 8002570:	b083      	sub	sp, #12
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
	...

08002584 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b088      	sub	sp, #32
 8002588:	af02      	add	r7, sp, #8
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	4608      	mov	r0, r1
 800258e:	4611      	mov	r1, r2
 8002590:	461a      	mov	r2, r3
 8002592:	4603      	mov	r3, r0
 8002594:	817b      	strh	r3, [r7, #10]
 8002596:	460b      	mov	r3, r1
 8002598:	813b      	strh	r3, [r7, #8]
 800259a:	4613      	mov	r3, r2
 800259c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800259e:	f7fe faf7 	bl	8000b90 <HAL_GetTick>
 80025a2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b20      	cmp	r3, #32
 80025ae:	f040 80d9 	bne.w	8002764 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	2319      	movs	r3, #25
 80025b8:	2201      	movs	r2, #1
 80025ba:	496d      	ldr	r1, [pc, #436]	; (8002770 <HAL_I2C_Mem_Write+0x1ec>)
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f000 fc8d 	bl	8002edc <I2C_WaitOnFlagUntilTimeout>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80025c8:	2302      	movs	r3, #2
 80025ca:	e0cc      	b.n	8002766 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d101      	bne.n	80025da <HAL_I2C_Mem_Write+0x56>
 80025d6:	2302      	movs	r3, #2
 80025d8:	e0c5      	b.n	8002766 <HAL_I2C_Mem_Write+0x1e2>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d007      	beq.n	8002600 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f042 0201 	orr.w	r2, r2, #1
 80025fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800260e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2221      	movs	r2, #33	; 0x21
 8002614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2240      	movs	r2, #64	; 0x40
 800261c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6a3a      	ldr	r2, [r7, #32]
 800262a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002630:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002636:	b29a      	uxth	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4a4d      	ldr	r2, [pc, #308]	; (8002774 <HAL_I2C_Mem_Write+0x1f0>)
 8002640:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002642:	88f8      	ldrh	r0, [r7, #6]
 8002644:	893a      	ldrh	r2, [r7, #8]
 8002646:	8979      	ldrh	r1, [r7, #10]
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	9301      	str	r3, [sp, #4]
 800264c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800264e:	9300      	str	r3, [sp, #0]
 8002650:	4603      	mov	r3, r0
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 fac4 	bl	8002be0 <I2C_RequestMemoryWrite>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d052      	beq.n	8002704 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e081      	b.n	8002766 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f000 fd0e 	bl	8003088 <I2C_WaitOnTXEFlagUntilTimeout>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00d      	beq.n	800268e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	2b04      	cmp	r3, #4
 8002678:	d107      	bne.n	800268a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002688:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e06b      	b.n	8002766 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002692:	781a      	ldrb	r2, [r3, #0]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269e:	1c5a      	adds	r2, r3, #1
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a8:	3b01      	subs	r3, #1
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	3b01      	subs	r3, #1
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	2b04      	cmp	r3, #4
 80026ca:	d11b      	bne.n	8002704 <HAL_I2C_Mem_Write+0x180>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d017      	beq.n	8002704 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	781a      	ldrb	r2, [r3, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e4:	1c5a      	adds	r2, r3, #1
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ee:	3b01      	subs	r3, #1
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	3b01      	subs	r3, #1
 80026fe:	b29a      	uxth	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1aa      	bne.n	8002662 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f000 fcfa 	bl	800310a <I2C_WaitOnBTFFlagUntilTimeout>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00d      	beq.n	8002738 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002720:	2b04      	cmp	r3, #4
 8002722:	d107      	bne.n	8002734 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002732:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e016      	b.n	8002766 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002746:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2220      	movs	r2, #32
 800274c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002760:	2300      	movs	r3, #0
 8002762:	e000      	b.n	8002766 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002764:	2302      	movs	r3, #2
  }
}
 8002766:	4618      	mov	r0, r3
 8002768:	3718      	adds	r7, #24
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	00100002 	.word	0x00100002
 8002774:	ffff0000 	.word	0xffff0000

08002778 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b08c      	sub	sp, #48	; 0x30
 800277c:	af02      	add	r7, sp, #8
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	4608      	mov	r0, r1
 8002782:	4611      	mov	r1, r2
 8002784:	461a      	mov	r2, r3
 8002786:	4603      	mov	r3, r0
 8002788:	817b      	strh	r3, [r7, #10]
 800278a:	460b      	mov	r3, r1
 800278c:	813b      	strh	r3, [r7, #8]
 800278e:	4613      	mov	r3, r2
 8002790:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002792:	f7fe f9fd 	bl	8000b90 <HAL_GetTick>
 8002796:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2b20      	cmp	r3, #32
 80027a2:	f040 8208 	bne.w	8002bb6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	2319      	movs	r3, #25
 80027ac:	2201      	movs	r2, #1
 80027ae:	497b      	ldr	r1, [pc, #492]	; (800299c <HAL_I2C_Mem_Read+0x224>)
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f000 fb93 	bl	8002edc <I2C_WaitOnFlagUntilTimeout>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80027bc:	2302      	movs	r3, #2
 80027be:	e1fb      	b.n	8002bb8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d101      	bne.n	80027ce <HAL_I2C_Mem_Read+0x56>
 80027ca:	2302      	movs	r3, #2
 80027cc:	e1f4      	b.n	8002bb8 <HAL_I2C_Mem_Read+0x440>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d007      	beq.n	80027f4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 0201 	orr.w	r2, r2, #1
 80027f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002802:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2222      	movs	r2, #34	; 0x22
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2240      	movs	r2, #64	; 0x40
 8002810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800281e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002824:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800282a:	b29a      	uxth	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	4a5b      	ldr	r2, [pc, #364]	; (80029a0 <HAL_I2C_Mem_Read+0x228>)
 8002834:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002836:	88f8      	ldrh	r0, [r7, #6]
 8002838:	893a      	ldrh	r2, [r7, #8]
 800283a:	8979      	ldrh	r1, [r7, #10]
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	9301      	str	r3, [sp, #4]
 8002840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	4603      	mov	r3, r0
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 fa60 	bl	8002d0c <I2C_RequestMemoryRead>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e1b0      	b.n	8002bb8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285a:	2b00      	cmp	r3, #0
 800285c:	d113      	bne.n	8002886 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800285e:	2300      	movs	r3, #0
 8002860:	623b      	str	r3, [r7, #32]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	623b      	str	r3, [r7, #32]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	623b      	str	r3, [r7, #32]
 8002872:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	e184      	b.n	8002b90 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288a:	2b01      	cmp	r3, #1
 800288c:	d11b      	bne.n	80028c6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800289c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800289e:	2300      	movs	r3, #0
 80028a0:	61fb      	str	r3, [r7, #28]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	61fb      	str	r3, [r7, #28]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	61fb      	str	r3, [r7, #28]
 80028b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	e164      	b.n	8002b90 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d11b      	bne.n	8002906 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ee:	2300      	movs	r3, #0
 80028f0:	61bb      	str	r3, [r7, #24]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	61bb      	str	r3, [r7, #24]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	61bb      	str	r3, [r7, #24]
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	e144      	b.n	8002b90 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002906:	2300      	movs	r3, #0
 8002908:	617b      	str	r3, [r7, #20]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	617b      	str	r3, [r7, #20]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	617b      	str	r3, [r7, #20]
 800291a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800291c:	e138      	b.n	8002b90 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002922:	2b03      	cmp	r3, #3
 8002924:	f200 80f1 	bhi.w	8002b0a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800292c:	2b01      	cmp	r3, #1
 800292e:	d123      	bne.n	8002978 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002932:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f000 fc29 	bl	800318c <I2C_WaitOnRXNEFlagUntilTimeout>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e139      	b.n	8002bb8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	691a      	ldr	r2, [r3, #16]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294e:	b2d2      	uxtb	r2, r2
 8002950:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002956:	1c5a      	adds	r2, r3, #1
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002960:	3b01      	subs	r3, #1
 8002962:	b29a      	uxth	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800296c:	b29b      	uxth	r3, r3
 800296e:	3b01      	subs	r3, #1
 8002970:	b29a      	uxth	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002976:	e10b      	b.n	8002b90 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800297c:	2b02      	cmp	r3, #2
 800297e:	d14e      	bne.n	8002a1e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002986:	2200      	movs	r2, #0
 8002988:	4906      	ldr	r1, [pc, #24]	; (80029a4 <HAL_I2C_Mem_Read+0x22c>)
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f000 faa6 	bl	8002edc <I2C_WaitOnFlagUntilTimeout>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d008      	beq.n	80029a8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e10e      	b.n	8002bb8 <HAL_I2C_Mem_Read+0x440>
 800299a:	bf00      	nop
 800299c:	00100002 	.word	0x00100002
 80029a0:	ffff0000 	.word	0xffff0000
 80029a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	691a      	ldr	r2, [r3, #16]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c2:	b2d2      	uxtb	r2, r2
 80029c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ca:	1c5a      	adds	r2, r3, #1
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d4:	3b01      	subs	r3, #1
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	3b01      	subs	r3, #1
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	691a      	ldr	r2, [r3, #16]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f4:	b2d2      	uxtb	r2, r2
 80029f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	1c5a      	adds	r2, r3, #1
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a06:	3b01      	subs	r3, #1
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	3b01      	subs	r3, #1
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a1c:	e0b8      	b.n	8002b90 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	9300      	str	r3, [sp, #0]
 8002a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a24:	2200      	movs	r2, #0
 8002a26:	4966      	ldr	r1, [pc, #408]	; (8002bc0 <HAL_I2C_Mem_Read+0x448>)
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	f000 fa57 	bl	8002edc <I2C_WaitOnFlagUntilTimeout>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e0bf      	b.n	8002bb8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	691a      	ldr	r2, [r3, #16]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5a:	1c5a      	adds	r2, r3, #1
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a64:	3b01      	subs	r3, #1
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	3b01      	subs	r3, #1
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	9300      	str	r3, [sp, #0]
 8002a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a80:	2200      	movs	r2, #0
 8002a82:	494f      	ldr	r1, [pc, #316]	; (8002bc0 <HAL_I2C_Mem_Read+0x448>)
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 fa29 	bl	8002edc <I2C_WaitOnFlagUntilTimeout>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e091      	b.n	8002bb8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aa2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	691a      	ldr	r2, [r3, #16]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aae:	b2d2      	uxtb	r2, r2
 8002ab0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab6:	1c5a      	adds	r2, r3, #1
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	691a      	ldr	r2, [r3, #16]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae0:	b2d2      	uxtb	r2, r2
 8002ae2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae8:	1c5a      	adds	r2, r3, #1
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af2:	3b01      	subs	r3, #1
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	3b01      	subs	r3, #1
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b08:	e042      	b.n	8002b90 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f000 fb3c 	bl	800318c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e04c      	b.n	8002bb8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	691a      	ldr	r2, [r3, #16]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b28:	b2d2      	uxtb	r2, r2
 8002b2a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b30:	1c5a      	adds	r2, r3, #1
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	f003 0304 	and.w	r3, r3, #4
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	d118      	bne.n	8002b90 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	691a      	ldr	r2, [r3, #16]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b68:	b2d2      	uxtb	r2, r2
 8002b6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b70:	1c5a      	adds	r2, r3, #1
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f47f aec2 	bne.w	800291e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2220      	movs	r2, #32
 8002b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	e000      	b.n	8002bb8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002bb6:	2302      	movs	r3, #2
  }
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3728      	adds	r7, #40	; 0x28
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	00010004 	.word	0x00010004

08002bc4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd2:	b2db      	uxtb	r3, r3
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b088      	sub	sp, #32
 8002be4:	af02      	add	r7, sp, #8
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	4608      	mov	r0, r1
 8002bea:	4611      	mov	r1, r2
 8002bec:	461a      	mov	r2, r3
 8002bee:	4603      	mov	r3, r0
 8002bf0:	817b      	strh	r3, [r7, #10]
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	813b      	strh	r3, [r7, #8]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c08:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	6a3b      	ldr	r3, [r7, #32]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 f960 	bl	8002edc <I2C_WaitOnFlagUntilTimeout>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00d      	beq.n	8002c3e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c30:	d103      	bne.n	8002c3a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c38:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e05f      	b.n	8002cfe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c3e:	897b      	ldrh	r3, [r7, #10]
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	461a      	mov	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c4c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	6a3a      	ldr	r2, [r7, #32]
 8002c52:	492d      	ldr	r1, [pc, #180]	; (8002d08 <I2C_RequestMemoryWrite+0x128>)
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f000 f998 	bl	8002f8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e04c      	b.n	8002cfe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c64:	2300      	movs	r3, #0
 8002c66:	617b      	str	r3, [r7, #20]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	617b      	str	r3, [r7, #20]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	617b      	str	r3, [r7, #20]
 8002c78:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c7c:	6a39      	ldr	r1, [r7, #32]
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f000 fa02 	bl	8003088 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00d      	beq.n	8002ca6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d107      	bne.n	8002ca2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ca0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e02b      	b.n	8002cfe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ca6:	88fb      	ldrh	r3, [r7, #6]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d105      	bne.n	8002cb8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cac:	893b      	ldrh	r3, [r7, #8]
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	611a      	str	r2, [r3, #16]
 8002cb6:	e021      	b.n	8002cfc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002cb8:	893b      	ldrh	r3, [r7, #8]
 8002cba:	0a1b      	lsrs	r3, r3, #8
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	b2da      	uxtb	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cc8:	6a39      	ldr	r1, [r7, #32]
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 f9dc 	bl	8003088 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00d      	beq.n	8002cf2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	d107      	bne.n	8002cee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e005      	b.n	8002cfe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cf2:	893b      	ldrh	r3, [r7, #8]
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3718      	adds	r7, #24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	00010002 	.word	0x00010002

08002d0c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b088      	sub	sp, #32
 8002d10:	af02      	add	r7, sp, #8
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	4608      	mov	r0, r1
 8002d16:	4611      	mov	r1, r2
 8002d18:	461a      	mov	r2, r3
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	817b      	strh	r3, [r7, #10]
 8002d1e:	460b      	mov	r3, r1
 8002d20:	813b      	strh	r3, [r7, #8]
 8002d22:	4613      	mov	r3, r2
 8002d24:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d34:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d44:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	6a3b      	ldr	r3, [r7, #32]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f000 f8c2 	bl	8002edc <I2C_WaitOnFlagUntilTimeout>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00d      	beq.n	8002d7a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d6c:	d103      	bne.n	8002d76 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d74:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e0aa      	b.n	8002ed0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d7a:	897b      	ldrh	r3, [r7, #10]
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	461a      	mov	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d88:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8c:	6a3a      	ldr	r2, [r7, #32]
 8002d8e:	4952      	ldr	r1, [pc, #328]	; (8002ed8 <I2C_RequestMemoryRead+0x1cc>)
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f000 f8fa 	bl	8002f8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e097      	b.n	8002ed0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002da0:	2300      	movs	r3, #0
 8002da2:	617b      	str	r3, [r7, #20]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	617b      	str	r3, [r7, #20]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	617b      	str	r3, [r7, #20]
 8002db4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db8:	6a39      	ldr	r1, [r7, #32]
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f000 f964 	bl	8003088 <I2C_WaitOnTXEFlagUntilTimeout>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00d      	beq.n	8002de2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	d107      	bne.n	8002dde <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ddc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e076      	b.n	8002ed0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002de2:	88fb      	ldrh	r3, [r7, #6]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d105      	bne.n	8002df4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002de8:	893b      	ldrh	r3, [r7, #8]
 8002dea:	b2da      	uxtb	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	611a      	str	r2, [r3, #16]
 8002df2:	e021      	b.n	8002e38 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002df4:	893b      	ldrh	r3, [r7, #8]
 8002df6:	0a1b      	lsrs	r3, r3, #8
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e04:	6a39      	ldr	r1, [r7, #32]
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f000 f93e 	bl	8003088 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00d      	beq.n	8002e2e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	d107      	bne.n	8002e2a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e28:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e050      	b.n	8002ed0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e2e:	893b      	ldrh	r3, [r7, #8]
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e3a:	6a39      	ldr	r1, [r7, #32]
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f000 f923 	bl	8003088 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00d      	beq.n	8002e64 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4c:	2b04      	cmp	r3, #4
 8002e4e:	d107      	bne.n	8002e60 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e5e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e035      	b.n	8002ed0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e72:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 f82b 	bl	8002edc <I2C_WaitOnFlagUntilTimeout>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00d      	beq.n	8002ea8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e9a:	d103      	bne.n	8002ea4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ea2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e013      	b.n	8002ed0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002ea8:	897b      	ldrh	r3, [r7, #10]
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	f043 0301 	orr.w	r3, r3, #1
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eba:	6a3a      	ldr	r2, [r7, #32]
 8002ebc:	4906      	ldr	r1, [pc, #24]	; (8002ed8 <I2C_RequestMemoryRead+0x1cc>)
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 f863 	bl	8002f8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e000      	b.n	8002ed0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3718      	adds	r7, #24
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	00010002 	.word	0x00010002

08002edc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	603b      	str	r3, [r7, #0]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002eec:	e025      	b.n	8002f3a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef4:	d021      	beq.n	8002f3a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ef6:	f7fd fe4b 	bl	8000b90 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d302      	bcc.n	8002f0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d116      	bne.n	8002f3a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2220      	movs	r2, #32
 8002f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	f043 0220 	orr.w	r2, r3, #32
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e023      	b.n	8002f82 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	0c1b      	lsrs	r3, r3, #16
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d10d      	bne.n	8002f60 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	43da      	mvns	r2, r3
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	bf0c      	ite	eq
 8002f56:	2301      	moveq	r3, #1
 8002f58:	2300      	movne	r3, #0
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	e00c      	b.n	8002f7a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	43da      	mvns	r2, r3
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	bf0c      	ite	eq
 8002f72:	2301      	moveq	r3, #1
 8002f74:	2300      	movne	r3, #0
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	461a      	mov	r2, r3
 8002f7a:	79fb      	ldrb	r3, [r7, #7]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d0b6      	beq.n	8002eee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b084      	sub	sp, #16
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	60f8      	str	r0, [r7, #12]
 8002f92:	60b9      	str	r1, [r7, #8]
 8002f94:	607a      	str	r2, [r7, #4]
 8002f96:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f98:	e051      	b.n	800303e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fa8:	d123      	bne.n	8002ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fb8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fc2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2220      	movs	r2, #32
 8002fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	f043 0204 	orr.w	r2, r3, #4
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e046      	b.n	8003080 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff8:	d021      	beq.n	800303e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ffa:	f7fd fdc9 	bl	8000b90 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	429a      	cmp	r2, r3
 8003008:	d302      	bcc.n	8003010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d116      	bne.n	800303e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2220      	movs	r2, #32
 800301a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	f043 0220 	orr.w	r2, r3, #32
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e020      	b.n	8003080 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	0c1b      	lsrs	r3, r3, #16
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b01      	cmp	r3, #1
 8003046:	d10c      	bne.n	8003062 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	43da      	mvns	r2, r3
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	4013      	ands	r3, r2
 8003054:	b29b      	uxth	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	bf14      	ite	ne
 800305a:	2301      	movne	r3, #1
 800305c:	2300      	moveq	r3, #0
 800305e:	b2db      	uxtb	r3, r3
 8003060:	e00b      	b.n	800307a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	43da      	mvns	r2, r3
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	4013      	ands	r3, r2
 800306e:	b29b      	uxth	r3, r3
 8003070:	2b00      	cmp	r3, #0
 8003072:	bf14      	ite	ne
 8003074:	2301      	movne	r3, #1
 8003076:	2300      	moveq	r3, #0
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d18d      	bne.n	8002f9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003094:	e02d      	b.n	80030f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003096:	68f8      	ldr	r0, [r7, #12]
 8003098:	f000 f8ce 	bl	8003238 <I2C_IsAcknowledgeFailed>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e02d      	b.n	8003102 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ac:	d021      	beq.n	80030f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ae:	f7fd fd6f 	bl	8000b90 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	68ba      	ldr	r2, [r7, #8]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d302      	bcc.n	80030c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d116      	bne.n	80030f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2220      	movs	r2, #32
 80030ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	f043 0220 	orr.w	r2, r3, #32
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e007      	b.n	8003102 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fc:	2b80      	cmp	r3, #128	; 0x80
 80030fe:	d1ca      	bne.n	8003096 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b084      	sub	sp, #16
 800310e:	af00      	add	r7, sp, #0
 8003110:	60f8      	str	r0, [r7, #12]
 8003112:	60b9      	str	r1, [r7, #8]
 8003114:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003116:	e02d      	b.n	8003174 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f000 f88d 	bl	8003238 <I2C_IsAcknowledgeFailed>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e02d      	b.n	8003184 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800312e:	d021      	beq.n	8003174 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003130:	f7fd fd2e 	bl	8000b90 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	68ba      	ldr	r2, [r7, #8]
 800313c:	429a      	cmp	r2, r3
 800313e:	d302      	bcc.n	8003146 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d116      	bne.n	8003174 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2220      	movs	r2, #32
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	f043 0220 	orr.w	r2, r3, #32
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e007      	b.n	8003184 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	f003 0304 	and.w	r3, r3, #4
 800317e:	2b04      	cmp	r3, #4
 8003180:	d1ca      	bne.n	8003118 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003198:	e042      	b.n	8003220 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	f003 0310 	and.w	r3, r3, #16
 80031a4:	2b10      	cmp	r3, #16
 80031a6:	d119      	bne.n	80031dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f06f 0210 	mvn.w	r2, #16
 80031b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2220      	movs	r2, #32
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e029      	b.n	8003230 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031dc:	f7fd fcd8 	bl	8000b90 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d302      	bcc.n	80031f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d116      	bne.n	8003220 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2220      	movs	r2, #32
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320c:	f043 0220 	orr.w	r2, r3, #32
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e007      	b.n	8003230 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322a:	2b40      	cmp	r3, #64	; 0x40
 800322c:	d1b5      	bne.n	800319a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800324a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800324e:	d11b      	bne.n	8003288 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003258:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2220      	movs	r2, #32
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003274:	f043 0204 	orr.w	r2, r3, #4
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e000      	b.n	800328a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
	...

08003298 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e0bf      	b.n	800342a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d106      	bne.n	80032c4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f003 f9b8 	bl	8006634 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2202      	movs	r2, #2
 80032c8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	699a      	ldr	r2, [r3, #24]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80032da:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6999      	ldr	r1, [r3, #24]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685a      	ldr	r2, [r3, #4]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80032f0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6899      	ldr	r1, [r3, #8]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	4b4a      	ldr	r3, [pc, #296]	; (8003434 <HAL_LTDC_Init+0x19c>)
 800330c:	400b      	ands	r3, r1
 800330e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	041b      	lsls	r3, r3, #16
 8003316:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6899      	ldr	r1, [r3, #8]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	699a      	ldr	r2, [r3, #24]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	431a      	orrs	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68d9      	ldr	r1, [r3, #12]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	4b3e      	ldr	r3, [pc, #248]	; (8003434 <HAL_LTDC_Init+0x19c>)
 800333a:	400b      	ands	r3, r1
 800333c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	041b      	lsls	r3, r3, #16
 8003344:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68d9      	ldr	r1, [r3, #12]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a1a      	ldr	r2, [r3, #32]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	431a      	orrs	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6919      	ldr	r1, [r3, #16]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	4b33      	ldr	r3, [pc, #204]	; (8003434 <HAL_LTDC_Init+0x19c>)
 8003368:	400b      	ands	r3, r1
 800336a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003370:	041b      	lsls	r3, r3, #16
 8003372:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6919      	ldr	r1, [r3, #16]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	431a      	orrs	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6959      	ldr	r1, [r3, #20]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	4b27      	ldr	r3, [pc, #156]	; (8003434 <HAL_LTDC_Init+0x19c>)
 8003396:	400b      	ands	r3, r1
 8003398:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339e:	041b      	lsls	r3, r3, #16
 80033a0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	6959      	ldr	r1, [r3, #20]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033be:	021b      	lsls	r3, r3, #8
 80033c0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80033c8:	041b      	lsls	r3, r3, #16
 80033ca:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80033da:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80033ee:	431a      	orrs	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	430a      	orrs	r2, r1
 80033f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 0206 	orr.w	r2, r2, #6
 8003406:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	699a      	ldr	r2, [r3, #24]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0201 	orr.w	r2, r2, #1
 8003416:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	f000f800 	.word	0xf000f800

08003438 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003438:	b5b0      	push	{r4, r5, r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800344a:	2b01      	cmp	r3, #1
 800344c:	d101      	bne.n	8003452 <HAL_LTDC_ConfigLayer+0x1a>
 800344e:	2302      	movs	r3, #2
 8003450:	e02c      	b.n	80034ac <HAL_LTDC_ConfigLayer+0x74>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2202      	movs	r2, #2
 800345e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2134      	movs	r1, #52	; 0x34
 8003468:	fb01 f303 	mul.w	r3, r1, r3
 800346c:	4413      	add	r3, r2
 800346e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	4614      	mov	r4, r2
 8003476:	461d      	mov	r5, r3
 8003478:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800347a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800347c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800347e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003480:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003482:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003484:	682b      	ldr	r3, [r5, #0]
 8003486:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	68b9      	ldr	r1, [r7, #8]
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f000 f886 	bl	800359e <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2201      	movs	r2, #1
 8003498:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3710      	adds	r7, #16
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bdb0      	pop	{r4, r5, r7, pc}

080034b4 <HAL_LTDC_ConfigColorKeying_NoReload>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d101      	bne.n	80034ce <HAL_LTDC_ConfigColorKeying_NoReload+0x1a>
 80034ca:	2302      	movs	r3, #2
 80034cc:	e02c      	b.n	8003528 <HAL_LTDC_ConfigColorKeying_NoReload+0x74>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2202      	movs	r2, #2
 80034da:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	461a      	mov	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	01db      	lsls	r3, r3, #7
 80034e8:	4413      	add	r3, r2
 80034ea:	3384      	adds	r3, #132	; 0x84
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	6812      	ldr	r2, [r2, #0]
 80034f2:	4611      	mov	r1, r2
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	01d2      	lsls	r2, r2, #7
 80034f8:	440a      	add	r2, r1
 80034fa:	3284      	adds	r2, #132	; 0x84
 80034fc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003500:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	461a      	mov	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	01db      	lsls	r3, r3, #7
 800350c:	4413      	add	r3, r2
 800350e:	3384      	adds	r3, #132	; 0x84
 8003510:	461a      	mov	r2, r3
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	60d3      	str	r3, [r2, #12]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <HAL_LTDC_EnableColorKeying_NoReload>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003544:	2b01      	cmp	r3, #1
 8003546:	d101      	bne.n	800354c <HAL_LTDC_EnableColorKeying_NoReload+0x18>
 8003548:	2302      	movs	r3, #2
 800354a:	e022      	b.n	8003592 <HAL_LTDC_EnableColorKeying_NoReload+0x5e>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2202      	movs	r2, #2
 8003558:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	461a      	mov	r2, r3
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	01db      	lsls	r3, r3, #7
 8003566:	4413      	add	r3, r2
 8003568:	3384      	adds	r3, #132	; 0x84
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	6812      	ldr	r2, [r2, #0]
 8003570:	4611      	mov	r1, r2
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	01d2      	lsls	r2, r2, #7
 8003576:	440a      	add	r2, r1
 8003578:	3284      	adds	r2, #132	; 0x84
 800357a:	f043 0302 	orr.w	r3, r3, #2
 800357e:	6013      	str	r3, [r2, #0]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800359e:	b480      	push	{r7}
 80035a0:	b089      	sub	sp, #36	; 0x24
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	60f8      	str	r0, [r7, #12]
 80035a6:	60b9      	str	r1, [r7, #8]
 80035a8:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	0c1b      	lsrs	r3, r3, #16
 80035b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ba:	4413      	add	r3, r2
 80035bc:	041b      	lsls	r3, r3, #16
 80035be:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	461a      	mov	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	01db      	lsls	r3, r3, #7
 80035ca:	4413      	add	r3, r2
 80035cc:	3384      	adds	r3, #132	; 0x84
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	6812      	ldr	r2, [r2, #0]
 80035d4:	4611      	mov	r1, r2
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	01d2      	lsls	r2, r2, #7
 80035da:	440a      	add	r2, r1
 80035dc:	3284      	adds	r2, #132	; 0x84
 80035de:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80035e2:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	0c1b      	lsrs	r3, r3, #16
 80035f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035f4:	4413      	add	r3, r2
 80035f6:	1c5a      	adds	r2, r3, #1
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4619      	mov	r1, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	01db      	lsls	r3, r3, #7
 8003602:	440b      	add	r3, r1
 8003604:	3384      	adds	r3, #132	; 0x84
 8003606:	4619      	mov	r1, r3
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	4313      	orrs	r3, r2
 800360c:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	68da      	ldr	r2, [r3, #12]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800361c:	4413      	add	r3, r2
 800361e:	041b      	lsls	r3, r3, #16
 8003620:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	461a      	mov	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	01db      	lsls	r3, r3, #7
 800362c:	4413      	add	r3, r2
 800362e:	3384      	adds	r3, #132	; 0x84
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	6812      	ldr	r2, [r2, #0]
 8003636:	4611      	mov	r1, r2
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	01d2      	lsls	r2, r2, #7
 800363c:	440a      	add	r2, r1
 800363e:	3284      	adds	r2, #132	; 0x84
 8003640:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003644:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	689a      	ldr	r2, [r3, #8]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003654:	4413      	add	r3, r2
 8003656:	1c5a      	adds	r2, r3, #1
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4619      	mov	r1, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	01db      	lsls	r3, r3, #7
 8003662:	440b      	add	r3, r1
 8003664:	3384      	adds	r3, #132	; 0x84
 8003666:	4619      	mov	r1, r3
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	4313      	orrs	r3, r2
 800366c:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	461a      	mov	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	01db      	lsls	r3, r3, #7
 8003678:	4413      	add	r3, r2
 800367a:	3384      	adds	r3, #132	; 0x84
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	6812      	ldr	r2, [r2, #0]
 8003682:	4611      	mov	r1, r2
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	01d2      	lsls	r2, r2, #7
 8003688:	440a      	add	r2, r1
 800368a:	3284      	adds	r2, #132	; 0x84
 800368c:	f023 0307 	bic.w	r3, r3, #7
 8003690:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	461a      	mov	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	01db      	lsls	r3, r3, #7
 800369c:	4413      	add	r3, r2
 800369e:	3384      	adds	r3, #132	; 0x84
 80036a0:	461a      	mov	r2, r3
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80036ae:	021b      	lsls	r3, r3, #8
 80036b0:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80036b8:	041b      	lsls	r3, r3, #16
 80036ba:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	061b      	lsls	r3, r3, #24
 80036c2:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	461a      	mov	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	01db      	lsls	r3, r3, #7
 80036ce:	4413      	add	r3, r2
 80036d0:	3384      	adds	r3, #132	; 0x84
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	461a      	mov	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	01db      	lsls	r3, r3, #7
 80036de:	4413      	add	r3, r2
 80036e0:	3384      	adds	r3, #132	; 0x84
 80036e2:	461a      	mov	r2, r3
 80036e4:	2300      	movs	r3, #0
 80036e6:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80036ee:	461a      	mov	r2, r3
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	431a      	orrs	r2, r3
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	431a      	orrs	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4619      	mov	r1, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	01db      	lsls	r3, r3, #7
 8003702:	440b      	add	r3, r1
 8003704:	3384      	adds	r3, #132	; 0x84
 8003706:	4619      	mov	r1, r3
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	4313      	orrs	r3, r2
 800370c:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	461a      	mov	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	01db      	lsls	r3, r3, #7
 8003718:	4413      	add	r3, r2
 800371a:	3384      	adds	r3, #132	; 0x84
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	6812      	ldr	r2, [r2, #0]
 8003722:	4611      	mov	r1, r2
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	01d2      	lsls	r2, r2, #7
 8003728:	440a      	add	r2, r1
 800372a:	3284      	adds	r2, #132	; 0x84
 800372c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003730:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	461a      	mov	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	01db      	lsls	r3, r3, #7
 800373c:	4413      	add	r3, r2
 800373e:	3384      	adds	r3, #132	; 0x84
 8003740:	461a      	mov	r2, r3
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	461a      	mov	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	01db      	lsls	r3, r3, #7
 8003752:	4413      	add	r3, r2
 8003754:	3384      	adds	r3, #132	; 0x84
 8003756:	69db      	ldr	r3, [r3, #28]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	6812      	ldr	r2, [r2, #0]
 800375c:	4611      	mov	r1, r2
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	01d2      	lsls	r2, r2, #7
 8003762:	440a      	add	r2, r1
 8003764:	3284      	adds	r2, #132	; 0x84
 8003766:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800376a:	f023 0307 	bic.w	r3, r3, #7
 800376e:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	69da      	ldr	r2, [r3, #28]
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	68f9      	ldr	r1, [r7, #12]
 800377a:	6809      	ldr	r1, [r1, #0]
 800377c:	4608      	mov	r0, r1
 800377e:	6879      	ldr	r1, [r7, #4]
 8003780:	01c9      	lsls	r1, r1, #7
 8003782:	4401      	add	r1, r0
 8003784:	3184      	adds	r1, #132	; 0x84
 8003786:	4313      	orrs	r3, r2
 8003788:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	461a      	mov	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	01db      	lsls	r3, r3, #7
 8003794:	4413      	add	r3, r2
 8003796:	3384      	adds	r3, #132	; 0x84
 8003798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	461a      	mov	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	01db      	lsls	r3, r3, #7
 80037a4:	4413      	add	r3, r2
 80037a6:	3384      	adds	r3, #132	; 0x84
 80037a8:	461a      	mov	r2, r3
 80037aa:	2300      	movs	r3, #0
 80037ac:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	461a      	mov	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	01db      	lsls	r3, r3, #7
 80037b8:	4413      	add	r3, r2
 80037ba:	3384      	adds	r3, #132	; 0x84
 80037bc:	461a      	mov	r2, r3
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c2:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d102      	bne.n	80037d2 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80037cc:	2304      	movs	r3, #4
 80037ce:	61fb      	str	r3, [r7, #28]
 80037d0:	e01b      	b.n	800380a <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d102      	bne.n	80037e0 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80037da:	2303      	movs	r3, #3
 80037dc:	61fb      	str	r3, [r7, #28]
 80037de:	e014      	b.n	800380a <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	2b04      	cmp	r3, #4
 80037e6:	d00b      	beq.n	8003800 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d007      	beq.n	8003800 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80037f4:	2b03      	cmp	r3, #3
 80037f6:	d003      	beq.n	8003800 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80037fc:	2b07      	cmp	r3, #7
 80037fe:	d102      	bne.n	8003806 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8003800:	2302      	movs	r3, #2
 8003802:	61fb      	str	r3, [r7, #28]
 8003804:	e001      	b.n	800380a <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8003806:	2301      	movs	r3, #1
 8003808:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	461a      	mov	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	01db      	lsls	r3, r3, #7
 8003814:	4413      	add	r3, r2
 8003816:	3384      	adds	r3, #132	; 0x84
 8003818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	6812      	ldr	r2, [r2, #0]
 800381e:	4611      	mov	r1, r2
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	01d2      	lsls	r2, r2, #7
 8003824:	440a      	add	r2, r1
 8003826:	3284      	adds	r2, #132	; 0x84
 8003828:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800382c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003832:	69fa      	ldr	r2, [r7, #28]
 8003834:	fb02 f303 	mul.w	r3, r2, r3
 8003838:	041a      	lsls	r2, r3, #16
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	6859      	ldr	r1, [r3, #4]
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	1acb      	subs	r3, r1, r3
 8003844:	69f9      	ldr	r1, [r7, #28]
 8003846:	fb01 f303 	mul.w	r3, r1, r3
 800384a:	3303      	adds	r3, #3
 800384c:	68f9      	ldr	r1, [r7, #12]
 800384e:	6809      	ldr	r1, [r1, #0]
 8003850:	4608      	mov	r0, r1
 8003852:	6879      	ldr	r1, [r7, #4]
 8003854:	01c9      	lsls	r1, r1, #7
 8003856:	4401      	add	r1, r0
 8003858:	3184      	adds	r1, #132	; 0x84
 800385a:	4313      	orrs	r3, r2
 800385c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	461a      	mov	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	01db      	lsls	r3, r3, #7
 8003868:	4413      	add	r3, r2
 800386a:	3384      	adds	r3, #132	; 0x84
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	6812      	ldr	r2, [r2, #0]
 8003872:	4611      	mov	r1, r2
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	01d2      	lsls	r2, r2, #7
 8003878:	440a      	add	r2, r1
 800387a:	3284      	adds	r2, #132	; 0x84
 800387c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003880:	f023 0307 	bic.w	r3, r3, #7
 8003884:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	461a      	mov	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	01db      	lsls	r3, r3, #7
 8003890:	4413      	add	r3, r2
 8003892:	3384      	adds	r3, #132	; 0x84
 8003894:	461a      	mov	r2, r3
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389a:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	461a      	mov	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	01db      	lsls	r3, r3, #7
 80038a6:	4413      	add	r3, r2
 80038a8:	3384      	adds	r3, #132	; 0x84
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	6812      	ldr	r2, [r2, #0]
 80038b0:	4611      	mov	r1, r2
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	01d2      	lsls	r2, r2, #7
 80038b6:	440a      	add	r2, r1
 80038b8:	3284      	adds	r2, #132	; 0x84
 80038ba:	f043 0301 	orr.w	r3, r3, #1
 80038be:	6013      	str	r3, [r2, #0]
}
 80038c0:	bf00      	nop
 80038c2:	3724      	adds	r7, #36	; 0x24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80038d2:	2300      	movs	r3, #0
 80038d4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80038d6:	2300      	movs	r3, #0
 80038d8:	603b      	str	r3, [r7, #0]
 80038da:	4b20      	ldr	r3, [pc, #128]	; (800395c <HAL_PWREx_EnableOverDrive+0x90>)
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	4a1f      	ldr	r2, [pc, #124]	; (800395c <HAL_PWREx_EnableOverDrive+0x90>)
 80038e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038e4:	6413      	str	r3, [r2, #64]	; 0x40
 80038e6:	4b1d      	ldr	r3, [pc, #116]	; (800395c <HAL_PWREx_EnableOverDrive+0x90>)
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ee:	603b      	str	r3, [r7, #0]
 80038f0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80038f2:	4b1b      	ldr	r3, [pc, #108]	; (8003960 <HAL_PWREx_EnableOverDrive+0x94>)
 80038f4:	2201      	movs	r2, #1
 80038f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038f8:	f7fd f94a 	bl	8000b90 <HAL_GetTick>
 80038fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80038fe:	e009      	b.n	8003914 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003900:	f7fd f946 	bl	8000b90 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800390e:	d901      	bls.n	8003914 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e01f      	b.n	8003954 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003914:	4b13      	ldr	r3, [pc, #76]	; (8003964 <HAL_PWREx_EnableOverDrive+0x98>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800391c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003920:	d1ee      	bne.n	8003900 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003922:	4b11      	ldr	r3, [pc, #68]	; (8003968 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003924:	2201      	movs	r2, #1
 8003926:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003928:	f7fd f932 	bl	8000b90 <HAL_GetTick>
 800392c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800392e:	e009      	b.n	8003944 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003930:	f7fd f92e 	bl	8000b90 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800393e:	d901      	bls.n	8003944 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e007      	b.n	8003954 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003944:	4b07      	ldr	r3, [pc, #28]	; (8003964 <HAL_PWREx_EnableOverDrive+0x98>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003950:	d1ee      	bne.n	8003930 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	40023800 	.word	0x40023800
 8003960:	420e0040 	.word	0x420e0040
 8003964:	40007000 	.word	0x40007000
 8003968:	420e0044 	.word	0x420e0044

0800396c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e25e      	b.n	8003e3c <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d075      	beq.n	8003a76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800398a:	4b88      	ldr	r3, [pc, #544]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 030c 	and.w	r3, r3, #12
 8003992:	2b04      	cmp	r3, #4
 8003994:	d00c      	beq.n	80039b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003996:	4b85      	ldr	r3, [pc, #532]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800399e:	2b08      	cmp	r3, #8
 80039a0:	d112      	bne.n	80039c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039a2:	4b82      	ldr	r3, [pc, #520]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039ae:	d10b      	bne.n	80039c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b0:	4b7e      	ldr	r3, [pc, #504]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d05b      	beq.n	8003a74 <HAL_RCC_OscConfig+0x108>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d157      	bne.n	8003a74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e239      	b.n	8003e3c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039d0:	d106      	bne.n	80039e0 <HAL_RCC_OscConfig+0x74>
 80039d2:	4b76      	ldr	r3, [pc, #472]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a75      	ldr	r2, [pc, #468]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 80039d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	e01d      	b.n	8003a1c <HAL_RCC_OscConfig+0xb0>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039e8:	d10c      	bne.n	8003a04 <HAL_RCC_OscConfig+0x98>
 80039ea:	4b70      	ldr	r3, [pc, #448]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a6f      	ldr	r2, [pc, #444]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 80039f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039f4:	6013      	str	r3, [r2, #0]
 80039f6:	4b6d      	ldr	r3, [pc, #436]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a6c      	ldr	r2, [pc, #432]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 80039fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a00:	6013      	str	r3, [r2, #0]
 8003a02:	e00b      	b.n	8003a1c <HAL_RCC_OscConfig+0xb0>
 8003a04:	4b69      	ldr	r3, [pc, #420]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a68      	ldr	r2, [pc, #416]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a0e:	6013      	str	r3, [r2, #0]
 8003a10:	4b66      	ldr	r3, [pc, #408]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a65      	ldr	r2, [pc, #404]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003a16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d013      	beq.n	8003a4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a24:	f7fd f8b4 	bl	8000b90 <HAL_GetTick>
 8003a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a2a:	e008      	b.n	8003a3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a2c:	f7fd f8b0 	bl	8000b90 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b64      	cmp	r3, #100	; 0x64
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e1fe      	b.n	8003e3c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a3e:	4b5b      	ldr	r3, [pc, #364]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d0f0      	beq.n	8003a2c <HAL_RCC_OscConfig+0xc0>
 8003a4a:	e014      	b.n	8003a76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a4c:	f7fd f8a0 	bl	8000b90 <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a54:	f7fd f89c 	bl	8000b90 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b64      	cmp	r3, #100	; 0x64
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e1ea      	b.n	8003e3c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a66:	4b51      	ldr	r3, [pc, #324]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1f0      	bne.n	8003a54 <HAL_RCC_OscConfig+0xe8>
 8003a72:	e000      	b.n	8003a76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d063      	beq.n	8003b4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a82:	4b4a      	ldr	r3, [pc, #296]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f003 030c 	and.w	r3, r3, #12
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00b      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a8e:	4b47      	ldr	r3, [pc, #284]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a96:	2b08      	cmp	r3, #8
 8003a98:	d11c      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a9a:	4b44      	ldr	r3, [pc, #272]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d116      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aa6:	4b41      	ldr	r3, [pc, #260]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d005      	beq.n	8003abe <HAL_RCC_OscConfig+0x152>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d001      	beq.n	8003abe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e1be      	b.n	8003e3c <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003abe:	4b3b      	ldr	r3, [pc, #236]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	4937      	ldr	r1, [pc, #220]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ad2:	e03a      	b.n	8003b4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d020      	beq.n	8003b1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003adc:	4b34      	ldr	r3, [pc, #208]	; (8003bb0 <HAL_RCC_OscConfig+0x244>)
 8003ade:	2201      	movs	r2, #1
 8003ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae2:	f7fd f855 	bl	8000b90 <HAL_GetTick>
 8003ae6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae8:	e008      	b.n	8003afc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aea:	f7fd f851 	bl	8000b90 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d901      	bls.n	8003afc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e19f      	b.n	8003e3c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003afc:	4b2b      	ldr	r3, [pc, #172]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d0f0      	beq.n	8003aea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b08:	4b28      	ldr	r3, [pc, #160]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	4925      	ldr	r1, [pc, #148]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	600b      	str	r3, [r1, #0]
 8003b1c:	e015      	b.n	8003b4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b1e:	4b24      	ldr	r3, [pc, #144]	; (8003bb0 <HAL_RCC_OscConfig+0x244>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b24:	f7fd f834 	bl	8000b90 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b2c:	f7fd f830 	bl	8000b90 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e17e      	b.n	8003e3c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b3e:	4b1b      	ldr	r3, [pc, #108]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f0      	bne.n	8003b2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0308 	and.w	r3, r3, #8
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d036      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d016      	beq.n	8003b8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b5e:	4b15      	ldr	r3, [pc, #84]	; (8003bb4 <HAL_RCC_OscConfig+0x248>)
 8003b60:	2201      	movs	r2, #1
 8003b62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b64:	f7fd f814 	bl	8000b90 <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b6c:	f7fd f810 	bl	8000b90 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e15e      	b.n	8003e3c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b7e:	4b0b      	ldr	r3, [pc, #44]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d0f0      	beq.n	8003b6c <HAL_RCC_OscConfig+0x200>
 8003b8a:	e01b      	b.n	8003bc4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b8c:	4b09      	ldr	r3, [pc, #36]	; (8003bb4 <HAL_RCC_OscConfig+0x248>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b92:	f7fc fffd 	bl	8000b90 <HAL_GetTick>
 8003b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b98:	e00e      	b.n	8003bb8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b9a:	f7fc fff9 	bl	8000b90 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d907      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e147      	b.n	8003e3c <HAL_RCC_OscConfig+0x4d0>
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	42470000 	.word	0x42470000
 8003bb4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bb8:	4b88      	ldr	r3, [pc, #544]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1ea      	bne.n	8003b9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 8097 	beq.w	8003d00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bd6:	4b81      	ldr	r3, [pc, #516]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10f      	bne.n	8003c02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003be2:	2300      	movs	r3, #0
 8003be4:	60bb      	str	r3, [r7, #8]
 8003be6:	4b7d      	ldr	r3, [pc, #500]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	4a7c      	ldr	r2, [pc, #496]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8003bf2:	4b7a      	ldr	r3, [pc, #488]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bfa:	60bb      	str	r3, [r7, #8]
 8003bfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c02:	4b77      	ldr	r3, [pc, #476]	; (8003de0 <HAL_RCC_OscConfig+0x474>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d118      	bne.n	8003c40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c0e:	4b74      	ldr	r3, [pc, #464]	; (8003de0 <HAL_RCC_OscConfig+0x474>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a73      	ldr	r2, [pc, #460]	; (8003de0 <HAL_RCC_OscConfig+0x474>)
 8003c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c1a:	f7fc ffb9 	bl	8000b90 <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c20:	e008      	b.n	8003c34 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c22:	f7fc ffb5 	bl	8000b90 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e103      	b.n	8003e3c <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c34:	4b6a      	ldr	r3, [pc, #424]	; (8003de0 <HAL_RCC_OscConfig+0x474>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0f0      	beq.n	8003c22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d106      	bne.n	8003c56 <HAL_RCC_OscConfig+0x2ea>
 8003c48:	4b64      	ldr	r3, [pc, #400]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4c:	4a63      	ldr	r2, [pc, #396]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c4e:	f043 0301 	orr.w	r3, r3, #1
 8003c52:	6713      	str	r3, [r2, #112]	; 0x70
 8003c54:	e01c      	b.n	8003c90 <HAL_RCC_OscConfig+0x324>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	2b05      	cmp	r3, #5
 8003c5c:	d10c      	bne.n	8003c78 <HAL_RCC_OscConfig+0x30c>
 8003c5e:	4b5f      	ldr	r3, [pc, #380]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c62:	4a5e      	ldr	r2, [pc, #376]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c64:	f043 0304 	orr.w	r3, r3, #4
 8003c68:	6713      	str	r3, [r2, #112]	; 0x70
 8003c6a:	4b5c      	ldr	r3, [pc, #368]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6e:	4a5b      	ldr	r2, [pc, #364]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c70:	f043 0301 	orr.w	r3, r3, #1
 8003c74:	6713      	str	r3, [r2, #112]	; 0x70
 8003c76:	e00b      	b.n	8003c90 <HAL_RCC_OscConfig+0x324>
 8003c78:	4b58      	ldr	r3, [pc, #352]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7c:	4a57      	ldr	r2, [pc, #348]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c7e:	f023 0301 	bic.w	r3, r3, #1
 8003c82:	6713      	str	r3, [r2, #112]	; 0x70
 8003c84:	4b55      	ldr	r3, [pc, #340]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c88:	4a54      	ldr	r2, [pc, #336]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c8a:	f023 0304 	bic.w	r3, r3, #4
 8003c8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d015      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c98:	f7fc ff7a 	bl	8000b90 <HAL_GetTick>
 8003c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c9e:	e00a      	b.n	8003cb6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ca0:	f7fc ff76 	bl	8000b90 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e0c2      	b.n	8003e3c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cb6:	4b49      	ldr	r3, [pc, #292]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0ee      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x334>
 8003cc2:	e014      	b.n	8003cee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cc4:	f7fc ff64 	bl	8000b90 <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cca:	e00a      	b.n	8003ce2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ccc:	f7fc ff60 	bl	8000b90 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e0ac      	b.n	8003e3c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ce2:	4b3e      	ldr	r3, [pc, #248]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1ee      	bne.n	8003ccc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cee:	7dfb      	ldrb	r3, [r7, #23]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d105      	bne.n	8003d00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cf4:	4b39      	ldr	r3, [pc, #228]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf8:	4a38      	ldr	r2, [pc, #224]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003cfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cfe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f000 8098 	beq.w	8003e3a <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d0a:	4b34      	ldr	r3, [pc, #208]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 030c 	and.w	r3, r3, #12
 8003d12:	2b08      	cmp	r3, #8
 8003d14:	d05c      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d141      	bne.n	8003da2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d1e:	4b31      	ldr	r3, [pc, #196]	; (8003de4 <HAL_RCC_OscConfig+0x478>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d24:	f7fc ff34 	bl	8000b90 <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d2a:	e008      	b.n	8003d3e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d2c:	f7fc ff30 	bl	8000b90 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e07e      	b.n	8003e3c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d3e:	4b27      	ldr	r3, [pc, #156]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1f0      	bne.n	8003d2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	69da      	ldr	r2, [r3, #28]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	431a      	orrs	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d58:	019b      	lsls	r3, r3, #6
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d60:	085b      	lsrs	r3, r3, #1
 8003d62:	3b01      	subs	r3, #1
 8003d64:	041b      	lsls	r3, r3, #16
 8003d66:	431a      	orrs	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6c:	061b      	lsls	r3, r3, #24
 8003d6e:	491b      	ldr	r1, [pc, #108]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d74:	4b1b      	ldr	r3, [pc, #108]	; (8003de4 <HAL_RCC_OscConfig+0x478>)
 8003d76:	2201      	movs	r2, #1
 8003d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d7a:	f7fc ff09 	bl	8000b90 <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d80:	e008      	b.n	8003d94 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d82:	f7fc ff05 	bl	8000b90 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e053      	b.n	8003e3c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d94:	4b11      	ldr	r3, [pc, #68]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d0f0      	beq.n	8003d82 <HAL_RCC_OscConfig+0x416>
 8003da0:	e04b      	b.n	8003e3a <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003da2:	4b10      	ldr	r3, [pc, #64]	; (8003de4 <HAL_RCC_OscConfig+0x478>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da8:	f7fc fef2 	bl	8000b90 <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dae:	e008      	b.n	8003dc2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003db0:	f7fc feee 	bl	8000b90 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e03c      	b.n	8003e3c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dc2:	4b06      	ldr	r3, [pc, #24]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1f0      	bne.n	8003db0 <HAL_RCC_OscConfig+0x444>
 8003dce:	e034      	b.n	8003e3a <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d107      	bne.n	8003de8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e02f      	b.n	8003e3c <HAL_RCC_OscConfig+0x4d0>
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	40007000 	.word	0x40007000
 8003de4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003de8:	4b16      	ldr	r3, [pc, #88]	; (8003e44 <HAL_RCC_OscConfig+0x4d8>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	69db      	ldr	r3, [r3, #28]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d11c      	bne.n	8003e36 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d115      	bne.n	8003e36 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e10:	4013      	ands	r3, r2
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d10d      	bne.n	8003e36 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d106      	bne.n	8003e36 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d001      	beq.n	8003e3a <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e000      	b.n	8003e3c <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3718      	adds	r7, #24
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	40023800 	.word	0x40023800

08003e48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d101      	bne.n	8003e5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e0cc      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e5c:	4b68      	ldr	r3, [pc, #416]	; (8004000 <HAL_RCC_ClockConfig+0x1b8>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 030f 	and.w	r3, r3, #15
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d90c      	bls.n	8003e84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e6a:	4b65      	ldr	r3, [pc, #404]	; (8004000 <HAL_RCC_ClockConfig+0x1b8>)
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	b2d2      	uxtb	r2, r2
 8003e70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e72:	4b63      	ldr	r3, [pc, #396]	; (8004000 <HAL_RCC_ClockConfig+0x1b8>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 030f 	and.w	r3, r3, #15
 8003e7a:	683a      	ldr	r2, [r7, #0]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d001      	beq.n	8003e84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e0b8      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d020      	beq.n	8003ed2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0304 	and.w	r3, r3, #4
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d005      	beq.n	8003ea8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e9c:	4b59      	ldr	r3, [pc, #356]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	4a58      	ldr	r2, [pc, #352]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ea6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0308 	and.w	r3, r3, #8
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d005      	beq.n	8003ec0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003eb4:	4b53      	ldr	r3, [pc, #332]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	4a52      	ldr	r2, [pc, #328]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003eba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ebe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ec0:	4b50      	ldr	r3, [pc, #320]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	494d      	ldr	r1, [pc, #308]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d044      	beq.n	8003f68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d107      	bne.n	8003ef6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ee6:	4b47      	ldr	r3, [pc, #284]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d119      	bne.n	8003f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e07f      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d003      	beq.n	8003f06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f02:	2b03      	cmp	r3, #3
 8003f04:	d107      	bne.n	8003f16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f06:	4b3f      	ldr	r3, [pc, #252]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d109      	bne.n	8003f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e06f      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f16:	4b3b      	ldr	r3, [pc, #236]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e067      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f26:	4b37      	ldr	r3, [pc, #220]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f023 0203 	bic.w	r2, r3, #3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	4934      	ldr	r1, [pc, #208]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f38:	f7fc fe2a 	bl	8000b90 <HAL_GetTick>
 8003f3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f3e:	e00a      	b.n	8003f56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f40:	f7fc fe26 	bl	8000b90 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e04f      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f56:	4b2b      	ldr	r3, [pc, #172]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f003 020c 	and.w	r2, r3, #12
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d1eb      	bne.n	8003f40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f68:	4b25      	ldr	r3, [pc, #148]	; (8004000 <HAL_RCC_ClockConfig+0x1b8>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 030f 	and.w	r3, r3, #15
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d20c      	bcs.n	8003f90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f76:	4b22      	ldr	r3, [pc, #136]	; (8004000 <HAL_RCC_ClockConfig+0x1b8>)
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f7e:	4b20      	ldr	r3, [pc, #128]	; (8004000 <HAL_RCC_ClockConfig+0x1b8>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 030f 	and.w	r3, r3, #15
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d001      	beq.n	8003f90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e032      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d008      	beq.n	8003fae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f9c:	4b19      	ldr	r3, [pc, #100]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	4916      	ldr	r1, [pc, #88]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d009      	beq.n	8003fce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fba:	4b12      	ldr	r3, [pc, #72]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	490e      	ldr	r1, [pc, #56]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fce:	f000 f821 	bl	8004014 <HAL_RCC_GetSysClockFreq>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	4b0b      	ldr	r3, [pc, #44]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	091b      	lsrs	r3, r3, #4
 8003fda:	f003 030f 	and.w	r3, r3, #15
 8003fde:	490a      	ldr	r1, [pc, #40]	; (8004008 <HAL_RCC_ClockConfig+0x1c0>)
 8003fe0:	5ccb      	ldrb	r3, [r1, r3]
 8003fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fe6:	4a09      	ldr	r2, [pc, #36]	; (800400c <HAL_RCC_ClockConfig+0x1c4>)
 8003fe8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fea:	4b09      	ldr	r3, [pc, #36]	; (8004010 <HAL_RCC_ClockConfig+0x1c8>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7fc fd8a 	bl	8000b08 <HAL_InitTick>

  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	40023c00 	.word	0x40023c00
 8004004:	40023800 	.word	0x40023800
 8004008:	0800c2a0 	.word	0x0800c2a0
 800400c:	20000034 	.word	0x20000034
 8004010:	20000020 	.word	0x20000020

08004014 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004014:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004018:	b094      	sub	sp, #80	; 0x50
 800401a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800401c:	2300      	movs	r3, #0
 800401e:	647b      	str	r3, [r7, #68]	; 0x44
 8004020:	2300      	movs	r3, #0
 8004022:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004024:	2300      	movs	r3, #0
 8004026:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004028:	2300      	movs	r3, #0
 800402a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800402c:	4b79      	ldr	r3, [pc, #484]	; (8004214 <HAL_RCC_GetSysClockFreq+0x200>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f003 030c 	and.w	r3, r3, #12
 8004034:	2b08      	cmp	r3, #8
 8004036:	d00d      	beq.n	8004054 <HAL_RCC_GetSysClockFreq+0x40>
 8004038:	2b08      	cmp	r3, #8
 800403a:	f200 80e1 	bhi.w	8004200 <HAL_RCC_GetSysClockFreq+0x1ec>
 800403e:	2b00      	cmp	r3, #0
 8004040:	d002      	beq.n	8004048 <HAL_RCC_GetSysClockFreq+0x34>
 8004042:	2b04      	cmp	r3, #4
 8004044:	d003      	beq.n	800404e <HAL_RCC_GetSysClockFreq+0x3a>
 8004046:	e0db      	b.n	8004200 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004048:	4b73      	ldr	r3, [pc, #460]	; (8004218 <HAL_RCC_GetSysClockFreq+0x204>)
 800404a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800404c:	e0db      	b.n	8004206 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800404e:	4b73      	ldr	r3, [pc, #460]	; (800421c <HAL_RCC_GetSysClockFreq+0x208>)
 8004050:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004052:	e0d8      	b.n	8004206 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004054:	4b6f      	ldr	r3, [pc, #444]	; (8004214 <HAL_RCC_GetSysClockFreq+0x200>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800405c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800405e:	4b6d      	ldr	r3, [pc, #436]	; (8004214 <HAL_RCC_GetSysClockFreq+0x200>)
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d063      	beq.n	8004132 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800406a:	4b6a      	ldr	r3, [pc, #424]	; (8004214 <HAL_RCC_GetSysClockFreq+0x200>)
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	099b      	lsrs	r3, r3, #6
 8004070:	2200      	movs	r2, #0
 8004072:	63bb      	str	r3, [r7, #56]	; 0x38
 8004074:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004078:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800407c:	633b      	str	r3, [r7, #48]	; 0x30
 800407e:	2300      	movs	r3, #0
 8004080:	637b      	str	r3, [r7, #52]	; 0x34
 8004082:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004086:	4622      	mov	r2, r4
 8004088:	462b      	mov	r3, r5
 800408a:	f04f 0000 	mov.w	r0, #0
 800408e:	f04f 0100 	mov.w	r1, #0
 8004092:	0159      	lsls	r1, r3, #5
 8004094:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004098:	0150      	lsls	r0, r2, #5
 800409a:	4602      	mov	r2, r0
 800409c:	460b      	mov	r3, r1
 800409e:	4621      	mov	r1, r4
 80040a0:	1a51      	subs	r1, r2, r1
 80040a2:	6139      	str	r1, [r7, #16]
 80040a4:	4629      	mov	r1, r5
 80040a6:	eb63 0301 	sbc.w	r3, r3, r1
 80040aa:	617b      	str	r3, [r7, #20]
 80040ac:	f04f 0200 	mov.w	r2, #0
 80040b0:	f04f 0300 	mov.w	r3, #0
 80040b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040b8:	4659      	mov	r1, fp
 80040ba:	018b      	lsls	r3, r1, #6
 80040bc:	4651      	mov	r1, sl
 80040be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040c2:	4651      	mov	r1, sl
 80040c4:	018a      	lsls	r2, r1, #6
 80040c6:	4651      	mov	r1, sl
 80040c8:	ebb2 0801 	subs.w	r8, r2, r1
 80040cc:	4659      	mov	r1, fp
 80040ce:	eb63 0901 	sbc.w	r9, r3, r1
 80040d2:	f04f 0200 	mov.w	r2, #0
 80040d6:	f04f 0300 	mov.w	r3, #0
 80040da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040e6:	4690      	mov	r8, r2
 80040e8:	4699      	mov	r9, r3
 80040ea:	4623      	mov	r3, r4
 80040ec:	eb18 0303 	adds.w	r3, r8, r3
 80040f0:	60bb      	str	r3, [r7, #8]
 80040f2:	462b      	mov	r3, r5
 80040f4:	eb49 0303 	adc.w	r3, r9, r3
 80040f8:	60fb      	str	r3, [r7, #12]
 80040fa:	f04f 0200 	mov.w	r2, #0
 80040fe:	f04f 0300 	mov.w	r3, #0
 8004102:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004106:	4629      	mov	r1, r5
 8004108:	024b      	lsls	r3, r1, #9
 800410a:	4621      	mov	r1, r4
 800410c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004110:	4621      	mov	r1, r4
 8004112:	024a      	lsls	r2, r1, #9
 8004114:	4610      	mov	r0, r2
 8004116:	4619      	mov	r1, r3
 8004118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800411a:	2200      	movs	r2, #0
 800411c:	62bb      	str	r3, [r7, #40]	; 0x28
 800411e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004120:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004124:	f7fc f86a 	bl	80001fc <__aeabi_uldivmod>
 8004128:	4602      	mov	r2, r0
 800412a:	460b      	mov	r3, r1
 800412c:	4613      	mov	r3, r2
 800412e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004130:	e058      	b.n	80041e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004132:	4b38      	ldr	r3, [pc, #224]	; (8004214 <HAL_RCC_GetSysClockFreq+0x200>)
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	099b      	lsrs	r3, r3, #6
 8004138:	2200      	movs	r2, #0
 800413a:	4618      	mov	r0, r3
 800413c:	4611      	mov	r1, r2
 800413e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004142:	623b      	str	r3, [r7, #32]
 8004144:	2300      	movs	r3, #0
 8004146:	627b      	str	r3, [r7, #36]	; 0x24
 8004148:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800414c:	4642      	mov	r2, r8
 800414e:	464b      	mov	r3, r9
 8004150:	f04f 0000 	mov.w	r0, #0
 8004154:	f04f 0100 	mov.w	r1, #0
 8004158:	0159      	lsls	r1, r3, #5
 800415a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800415e:	0150      	lsls	r0, r2, #5
 8004160:	4602      	mov	r2, r0
 8004162:	460b      	mov	r3, r1
 8004164:	4641      	mov	r1, r8
 8004166:	ebb2 0a01 	subs.w	sl, r2, r1
 800416a:	4649      	mov	r1, r9
 800416c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004170:	f04f 0200 	mov.w	r2, #0
 8004174:	f04f 0300 	mov.w	r3, #0
 8004178:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800417c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004180:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004184:	ebb2 040a 	subs.w	r4, r2, sl
 8004188:	eb63 050b 	sbc.w	r5, r3, fp
 800418c:	f04f 0200 	mov.w	r2, #0
 8004190:	f04f 0300 	mov.w	r3, #0
 8004194:	00eb      	lsls	r3, r5, #3
 8004196:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800419a:	00e2      	lsls	r2, r4, #3
 800419c:	4614      	mov	r4, r2
 800419e:	461d      	mov	r5, r3
 80041a0:	4643      	mov	r3, r8
 80041a2:	18e3      	adds	r3, r4, r3
 80041a4:	603b      	str	r3, [r7, #0]
 80041a6:	464b      	mov	r3, r9
 80041a8:	eb45 0303 	adc.w	r3, r5, r3
 80041ac:	607b      	str	r3, [r7, #4]
 80041ae:	f04f 0200 	mov.w	r2, #0
 80041b2:	f04f 0300 	mov.w	r3, #0
 80041b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041ba:	4629      	mov	r1, r5
 80041bc:	028b      	lsls	r3, r1, #10
 80041be:	4621      	mov	r1, r4
 80041c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041c4:	4621      	mov	r1, r4
 80041c6:	028a      	lsls	r2, r1, #10
 80041c8:	4610      	mov	r0, r2
 80041ca:	4619      	mov	r1, r3
 80041cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041ce:	2200      	movs	r2, #0
 80041d0:	61bb      	str	r3, [r7, #24]
 80041d2:	61fa      	str	r2, [r7, #28]
 80041d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041d8:	f7fc f810 	bl	80001fc <__aeabi_uldivmod>
 80041dc:	4602      	mov	r2, r0
 80041de:	460b      	mov	r3, r1
 80041e0:	4613      	mov	r3, r2
 80041e2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041e4:	4b0b      	ldr	r3, [pc, #44]	; (8004214 <HAL_RCC_GetSysClockFreq+0x200>)
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	0c1b      	lsrs	r3, r3, #16
 80041ea:	f003 0303 	and.w	r3, r3, #3
 80041ee:	3301      	adds	r3, #1
 80041f0:	005b      	lsls	r3, r3, #1
 80041f2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80041f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041fe:	e002      	b.n	8004206 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004200:	4b05      	ldr	r3, [pc, #20]	; (8004218 <HAL_RCC_GetSysClockFreq+0x204>)
 8004202:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004204:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004206:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004208:	4618      	mov	r0, r3
 800420a:	3750      	adds	r7, #80	; 0x50
 800420c:	46bd      	mov	sp, r7
 800420e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004212:	bf00      	nop
 8004214:	40023800 	.word	0x40023800
 8004218:	00f42400 	.word	0x00f42400
 800421c:	007a1200 	.word	0x007a1200

08004220 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004224:	4b03      	ldr	r3, [pc, #12]	; (8004234 <HAL_RCC_GetHCLKFreq+0x14>)
 8004226:	681b      	ldr	r3, [r3, #0]
}
 8004228:	4618      	mov	r0, r3
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	20000034 	.word	0x20000034

08004238 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800423c:	f7ff fff0 	bl	8004220 <HAL_RCC_GetHCLKFreq>
 8004240:	4602      	mov	r2, r0
 8004242:	4b05      	ldr	r3, [pc, #20]	; (8004258 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	0a9b      	lsrs	r3, r3, #10
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	4903      	ldr	r1, [pc, #12]	; (800425c <HAL_RCC_GetPCLK1Freq+0x24>)
 800424e:	5ccb      	ldrb	r3, [r1, r3]
 8004250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004254:	4618      	mov	r0, r3
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40023800 	.word	0x40023800
 800425c:	0800c2b0 	.word	0x0800c2b0

08004260 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004264:	f7ff ffdc 	bl	8004220 <HAL_RCC_GetHCLKFreq>
 8004268:	4602      	mov	r2, r0
 800426a:	4b05      	ldr	r3, [pc, #20]	; (8004280 <HAL_RCC_GetPCLK2Freq+0x20>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	0b5b      	lsrs	r3, r3, #13
 8004270:	f003 0307 	and.w	r3, r3, #7
 8004274:	4903      	ldr	r1, [pc, #12]	; (8004284 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004276:	5ccb      	ldrb	r3, [r1, r3]
 8004278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800427c:	4618      	mov	r0, r3
 800427e:	bd80      	pop	{r7, pc}
 8004280:	40023800 	.word	0x40023800
 8004284:	0800c2b0 	.word	0x0800c2b0

08004288 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004290:	2300      	movs	r3, #0
 8004292:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004294:	2300      	movs	r3, #0
 8004296:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d10b      	bne.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d105      	bne.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d075      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80042bc:	4b91      	ldr	r3, [pc, #580]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80042be:	2200      	movs	r2, #0
 80042c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042c2:	f7fc fc65 	bl	8000b90 <HAL_GetTick>
 80042c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042c8:	e008      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80042ca:	f7fc fc61 	bl	8000b90 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d901      	bls.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e189      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042dc:	4b8a      	ldr	r3, [pc, #552]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1f0      	bne.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d009      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	019a      	lsls	r2, r3, #6
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	071b      	lsls	r3, r3, #28
 8004300:	4981      	ldr	r1, [pc, #516]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004302:	4313      	orrs	r3, r2
 8004304:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d01f      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004314:	4b7c      	ldr	r3, [pc, #496]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004316:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800431a:	0f1b      	lsrs	r3, r3, #28
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	019a      	lsls	r2, r3, #6
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	061b      	lsls	r3, r3, #24
 800432e:	431a      	orrs	r2, r3
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	071b      	lsls	r3, r3, #28
 8004334:	4974      	ldr	r1, [pc, #464]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004336:	4313      	orrs	r3, r2
 8004338:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800433c:	4b72      	ldr	r3, [pc, #456]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800433e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004342:	f023 021f 	bic.w	r2, r3, #31
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	3b01      	subs	r3, #1
 800434c:	496e      	ldr	r1, [pc, #440]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00d      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	019a      	lsls	r2, r3, #6
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	061b      	lsls	r3, r3, #24
 800436c:	431a      	orrs	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	071b      	lsls	r3, r3, #28
 8004374:	4964      	ldr	r1, [pc, #400]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004376:	4313      	orrs	r3, r2
 8004378:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800437c:	4b61      	ldr	r3, [pc, #388]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800437e:	2201      	movs	r2, #1
 8004380:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004382:	f7fc fc05 	bl	8000b90 <HAL_GetTick>
 8004386:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004388:	e008      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800438a:	f7fc fc01 	bl	8000b90 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b02      	cmp	r3, #2
 8004396:	d901      	bls.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e129      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800439c:	4b5a      	ldr	r3, [pc, #360]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d0f0      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d105      	bne.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d079      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80043c0:	4b52      	ldr	r3, [pc, #328]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043c6:	f7fc fbe3 	bl	8000b90 <HAL_GetTick>
 80043ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043cc:	e008      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80043ce:	f7fc fbdf 	bl	8000b90 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d901      	bls.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e107      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043e0:	4b49      	ldr	r3, [pc, #292]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043ec:	d0ef      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0304 	and.w	r3, r3, #4
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d020      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80043fa:	4b43      	ldr	r3, [pc, #268]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80043fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004400:	0f1b      	lsrs	r3, r3, #28
 8004402:	f003 0307 	and.w	r3, r3, #7
 8004406:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	019a      	lsls	r2, r3, #6
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	061b      	lsls	r3, r3, #24
 8004414:	431a      	orrs	r2, r3
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	071b      	lsls	r3, r3, #28
 800441a:	493b      	ldr	r1, [pc, #236]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800441c:	4313      	orrs	r3, r2
 800441e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004422:	4b39      	ldr	r3, [pc, #228]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004424:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004428:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a1b      	ldr	r3, [r3, #32]
 8004430:	3b01      	subs	r3, #1
 8004432:	021b      	lsls	r3, r3, #8
 8004434:	4934      	ldr	r1, [pc, #208]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004436:	4313      	orrs	r3, r2
 8004438:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0308 	and.w	r3, r3, #8
 8004444:	2b00      	cmp	r3, #0
 8004446:	d01e      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004448:	4b2f      	ldr	r3, [pc, #188]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800444a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444e:	0e1b      	lsrs	r3, r3, #24
 8004450:	f003 030f 	and.w	r3, r3, #15
 8004454:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	019a      	lsls	r2, r3, #6
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	061b      	lsls	r3, r3, #24
 8004460:	431a      	orrs	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	071b      	lsls	r3, r3, #28
 8004468:	4927      	ldr	r1, [pc, #156]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800446a:	4313      	orrs	r3, r2
 800446c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004470:	4b25      	ldr	r3, [pc, #148]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004472:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004476:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447e:	4922      	ldr	r1, [pc, #136]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004480:	4313      	orrs	r3, r2
 8004482:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004486:	4b21      	ldr	r3, [pc, #132]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004488:	2201      	movs	r2, #1
 800448a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800448c:	f7fc fb80 	bl	8000b90 <HAL_GetTick>
 8004490:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004492:	e008      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004494:	f7fc fb7c 	bl	8000b90 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e0a4      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80044a6:	4b18      	ldr	r3, [pc, #96]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044b2:	d1ef      	bne.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0320 	and.w	r3, r3, #32
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f000 808b 	beq.w	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80044c2:	2300      	movs	r3, #0
 80044c4:	60fb      	str	r3, [r7, #12]
 80044c6:	4b10      	ldr	r3, [pc, #64]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	4a0f      	ldr	r2, [pc, #60]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044d0:	6413      	str	r3, [r2, #64]	; 0x40
 80044d2:	4b0d      	ldr	r3, [pc, #52]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044da:	60fb      	str	r3, [r7, #12]
 80044dc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80044de:	4b0c      	ldr	r3, [pc, #48]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a0b      	ldr	r2, [pc, #44]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80044e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044e8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80044ea:	f7fc fb51 	bl	8000b90 <HAL_GetTick>
 80044ee:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044f0:	e010      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80044f2:	f7fc fb4d 	bl	8000b90 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d909      	bls.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e075      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004504:	42470068 	.word	0x42470068
 8004508:	40023800 	.word	0x40023800
 800450c:	42470070 	.word	0x42470070
 8004510:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004514:	4b38      	ldr	r3, [pc, #224]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800451c:	2b00      	cmp	r3, #0
 800451e:	d0e8      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004520:	4b36      	ldr	r3, [pc, #216]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004524:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004528:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d02f      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004534:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	429a      	cmp	r2, r3
 800453c:	d028      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800453e:	4b2f      	ldr	r3, [pc, #188]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004542:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004546:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004548:	4b2d      	ldr	r3, [pc, #180]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800454a:	2201      	movs	r2, #1
 800454c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800454e:	4b2c      	ldr	r3, [pc, #176]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004550:	2200      	movs	r2, #0
 8004552:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004554:	4a29      	ldr	r2, [pc, #164]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800455a:	4b28      	ldr	r3, [pc, #160]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800455c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b01      	cmp	r3, #1
 8004564:	d114      	bne.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004566:	f7fc fb13 	bl	8000b90 <HAL_GetTick>
 800456a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800456c:	e00a      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800456e:	f7fc fb0f 	bl	8000b90 <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	f241 3288 	movw	r2, #5000	; 0x1388
 800457c:	4293      	cmp	r3, r2
 800457e:	d901      	bls.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e035      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004584:	4b1d      	ldr	r3, [pc, #116]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b00      	cmp	r3, #0
 800458e:	d0ee      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004594:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004598:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800459c:	d10d      	bne.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x332>
 800459e:	4b17      	ldr	r3, [pc, #92]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045aa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80045ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045b2:	4912      	ldr	r1, [pc, #72]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	608b      	str	r3, [r1, #8]
 80045b8:	e005      	b.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80045ba:	4b10      	ldr	r3, [pc, #64]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	4a0f      	ldr	r2, [pc, #60]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80045c0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80045c4:	6093      	str	r3, [r2, #8]
 80045c6:	4b0d      	ldr	r3, [pc, #52]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80045c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045d2:	490a      	ldr	r1, [pc, #40]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0310 	and.w	r3, r3, #16
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d004      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80045ea:	4b06      	ldr	r3, [pc, #24]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80045ec:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3718      	adds	r7, #24
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	40007000 	.word	0x40007000
 80045fc:	40023800 	.word	0x40023800
 8004600:	42470e40 	.word	0x42470e40
 8004604:	424711e0 	.word	0x424711e0

08004608 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800460e:	f7fc fabf 	bl	8000b90 <HAL_GetTick>
 8004612:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004614:	4b72      	ldr	r3, [pc, #456]	; (80047e0 <HAL_RCC_DeInit+0x1d8>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a71      	ldr	r2, [pc, #452]	; (80047e0 <HAL_RCC_DeInit+0x1d8>)
 800461a:	f043 0301 	orr.w	r3, r3, #1
 800461e:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8004620:	e008      	b.n	8004634 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004622:	f7fc fab5 	bl	8000b90 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	2b02      	cmp	r3, #2
 800462e:	d901      	bls.n	8004634 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e0d0      	b.n	80047d6 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8004634:	4b6a      	ldr	r3, [pc, #424]	; (80047e0 <HAL_RCC_DeInit+0x1d8>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d0f0      	beq.n	8004622 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8004640:	4b67      	ldr	r3, [pc, #412]	; (80047e0 <HAL_RCC_DeInit+0x1d8>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a66      	ldr	r2, [pc, #408]	; (80047e0 <HAL_RCC_DeInit+0x1d8>)
 8004646:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800464a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800464c:	f7fc faa0 	bl	8000b90 <HAL_GetTick>
 8004650:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8004652:	4b63      	ldr	r3, [pc, #396]	; (80047e0 <HAL_RCC_DeInit+0x1d8>)
 8004654:	2200      	movs	r2, #0
 8004656:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8004658:	e00a      	b.n	8004670 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800465a:	f7fc fa99 	bl	8000b90 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	f241 3288 	movw	r2, #5000	; 0x1388
 8004668:	4293      	cmp	r3, r2
 800466a:	d901      	bls.n	8004670 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e0b2      	b.n	80047d6 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8004670:	4b5b      	ldr	r3, [pc, #364]	; (80047e0 <HAL_RCC_DeInit+0x1d8>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f003 030c 	and.w	r3, r3, #12
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1ee      	bne.n	800465a <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800467c:	f7fc fa88 	bl	8000b90 <HAL_GetTick>
 8004680:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8004682:	4b57      	ldr	r3, [pc, #348]	; (80047e0 <HAL_RCC_DeInit+0x1d8>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a56      	ldr	r2, [pc, #344]	; (80047e0 <HAL_RCC_DeInit+0x1d8>)
 8004688:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 800468c:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800468e:	e008      	b.n	80046a2 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004690:	f7fc fa7e 	bl	8000b90 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b64      	cmp	r3, #100	; 0x64
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e099      	b.n	80047d6 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80046a2:	4b4f      	ldr	r3, [pc, #316]	; (80047e0 <HAL_RCC_DeInit+0x1d8>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1f0      	bne.n	8004690 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80046ae:	f7fc fa6f 	bl	8000b90 <HAL_GetTick>
 80046b2:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80046b4:	4b4a      	ldr	r3, [pc, #296]	; (80047e0 <HAL_RCC_DeInit+0x1d8>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a49      	ldr	r2, [pc, #292]	; (80047e0 <HAL_RCC_DeInit+0x1d8>)
 80046ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046be:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80046c0:	e008      	b.n	80046d4 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c2:	f7fc fa65 	bl	8000b90 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d901      	bls.n	80046d4 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e080      	b.n	80047d6 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80046d4:	4b42      	ldr	r3, [pc, #264]	; (80047e0 <HAL_RCC_DeInit+0x1d8>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1f0      	bne.n	80046c2 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80046e0:	f7fc fa56 	bl	8000b90 <HAL_GetTick>
 80046e4:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 80046e6:	4b3e      	ldr	r3, [pc, #248]	; (80047e0 <HAL_RCC_DeInit+0x1d8>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a3d      	ldr	r2, [pc, #244]	; (80047e0 <HAL_RCC_DeInit+0x1d8>)
 80046ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046f0:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80046f2:	e008      	b.n	8004706 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80046f4:	f7fc fa4c 	bl	8000b90 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e067      	b.n	80047d6 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8004706:	4b36      	ldr	r3, [pc, #216]	; (80047e0 <HAL_RCC_DeInit+0x1d8>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1f0      	bne.n	80046f4 <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8004712:	f7fc fa3d 	bl	8000b90 <HAL_GetTick>
 8004716:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 8004718:	4b31      	ldr	r3, [pc, #196]	; (80047e0 <HAL_RCC_DeInit+0x1d8>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a30      	ldr	r2, [pc, #192]	; (80047e0 <HAL_RCC_DeInit+0x1d8>)
 800471e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004722:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8004724:	e008      	b.n	8004738 <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004726:	f7fc fa33 	bl	8000b90 <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	2b02      	cmp	r3, #2
 8004732:	d901      	bls.n	8004738 <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e04e      	b.n	80047d6 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8004738:	4b29      	ldr	r3, [pc, #164]	; (80047e0 <HAL_RCC_DeInit+0x1d8>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1f0      	bne.n	8004726 <HAL_RCC_DeInit+0x11e>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8004744:	4b26      	ldr	r3, [pc, #152]	; (80047e0 <HAL_RCC_DeInit+0x1d8>)
 8004746:	4a27      	ldr	r2, [pc, #156]	; (80047e4 <HAL_RCC_DeInit+0x1dc>)
 8004748:	605a      	str	r2, [r3, #4]
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 800474a:	4b25      	ldr	r3, [pc, #148]	; (80047e0 <HAL_RCC_DeInit+0x1d8>)
 800474c:	4a26      	ldr	r2, [pc, #152]	; (80047e8 <HAL_RCC_DeInit+0x1e0>)
 800474e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx */

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
 8004752:	4b23      	ldr	r3, [pc, #140]	; (80047e0 <HAL_RCC_DeInit+0x1d8>)
 8004754:	4a24      	ldr	r2, [pc, #144]	; (80047e8 <HAL_RCC_DeInit+0x1e0>)
 8004756:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 800475a:	4b21      	ldr	r3, [pc, #132]	; (80047e0 <HAL_RCC_DeInit+0x1d8>)
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	4a20      	ldr	r2, [pc, #128]	; (80047e0 <HAL_RCC_DeInit+0x1d8>)
 8004760:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8004764:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8004766:	4b1e      	ldr	r3, [pc, #120]	; (80047e0 <HAL_RCC_DeInit+0x1d8>)
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	4a1d      	ldr	r2, [pc, #116]	; (80047e0 <HAL_RCC_DeInit+0x1d8>)
 800476c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004770:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 8004772:	4b1b      	ldr	r3, [pc, #108]	; (80047e0 <HAL_RCC_DeInit+0x1d8>)
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	4a1a      	ldr	r2, [pc, #104]	; (80047e0 <HAL_RCC_DeInit+0x1d8>)
 8004778:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800477c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 800477e:	4b18      	ldr	r3, [pc, #96]	; (80047e0 <HAL_RCC_DeInit+0x1d8>)
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	4a17      	ldr	r2, [pc, #92]	; (80047e0 <HAL_RCC_DeInit+0x1d8>)
 8004784:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8004788:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 800478a:	4b15      	ldr	r3, [pc, #84]	; (80047e0 <HAL_RCC_DeInit+0x1d8>)
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	4a14      	ldr	r2, [pc, #80]	; (80047e0 <HAL_RCC_DeInit+0x1d8>)
 8004790:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004794:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 8004796:	4b12      	ldr	r3, [pc, #72]	; (80047e0 <HAL_RCC_DeInit+0x1d8>)
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	4a11      	ldr	r2, [pc, #68]	; (80047e0 <HAL_RCC_DeInit+0x1d8>)
 800479c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80047a0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80047a2:	4b0f      	ldr	r3, [pc, #60]	; (80047e0 <HAL_RCC_DeInit+0x1d8>)
 80047a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047a6:	4a0e      	ldr	r2, [pc, #56]	; (80047e0 <HAL_RCC_DeInit+0x1d8>)
 80047a8:	f023 0301 	bic.w	r3, r3, #1
 80047ac:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80047ae:	4b0c      	ldr	r3, [pc, #48]	; (80047e0 <HAL_RCC_DeInit+0x1d8>)
 80047b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047b2:	4a0b      	ldr	r2, [pc, #44]	; (80047e0 <HAL_RCC_DeInit+0x1d8>)
 80047b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047b8:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80047ba:	4b0c      	ldr	r3, [pc, #48]	; (80047ec <HAL_RCC_DeInit+0x1e4>)
 80047bc:	4a0c      	ldr	r2, [pc, #48]	; (80047f0 <HAL_RCC_DeInit+0x1e8>)
 80047be:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 80047c0:	4b0c      	ldr	r3, [pc, #48]	; (80047f4 <HAL_RCC_DeInit+0x1ec>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7fc f99f 	bl	8000b08 <HAL_InitTick>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d001      	beq.n	80047d4 <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e000      	b.n	80047d6 <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 80047d4:	2300      	movs	r3, #0
  }
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3708      	adds	r7, #8
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	40023800 	.word	0x40023800
 80047e4:	04003010 	.word	0x04003010
 80047e8:	24003000 	.word	0x24003000
 80047ec:	20000034 	.word	0x20000034
 80047f0:	00f42400 	.word	0x00f42400
 80047f4:	20000020 	.word	0x20000020

080047f8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e025      	b.n	8004858 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b00      	cmp	r3, #0
 8004816:	d106      	bne.n	8004826 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 f81d 	bl	8004860 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2202      	movs	r2, #2
 800482a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	3304      	adds	r3, #4
 8004836:	4619      	mov	r1, r3
 8004838:	4610      	mov	r0, r2
 800483a:	f001 f99f 	bl	8005b7c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6818      	ldr	r0, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	461a      	mov	r2, r3
 8004848:	6839      	ldr	r1, [r7, #0]
 800484a:	f001 fa0a 	bl	8005c62 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3708      	adds	r7, #8
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004886:	b2db      	uxtb	r3, r3
 8004888:	2b02      	cmp	r3, #2
 800488a:	d101      	bne.n	8004890 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800488c:	2302      	movs	r3, #2
 800488e:	e018      	b.n	80048c2 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2202      	movs	r2, #2
 8004894:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	68b9      	ldr	r1, [r7, #8]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f001 fa5d 	bl	8005d60 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d104      	bne.n	80048b8 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2205      	movs	r2, #5
 80048b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80048b6:	e003      	b.n	80048c0 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b082      	sub	sp, #8
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
 80048d2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d101      	bne.n	80048e4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80048e0:	2302      	movs	r3, #2
 80048e2:	e00e      	b.n	8004902 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2202      	movs	r2, #2
 80048e8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6839      	ldr	r1, [r7, #0]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f001 fa70 	bl	8005dd8 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800490a:	b580      	push	{r7, lr}
 800490c:	b082      	sub	sp, #8
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d101      	bne.n	800491c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e056      	b.n	80049ca <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b00      	cmp	r3, #0
 800492c:	d106      	bne.n	800493c <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f002 fe98 	bl	800766c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2202      	movs	r2, #2
 8004940:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004952:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685a      	ldr	r2, [r3, #4]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	431a      	orrs	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	431a      	orrs	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	431a      	orrs	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	431a      	orrs	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004978:	431a      	orrs	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	69db      	ldr	r3, [r3, #28]
 800497e:	431a      	orrs	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a1b      	ldr	r3, [r3, #32]
 8004984:	ea42 0103 	orr.w	r1, r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	430a      	orrs	r2, r1
 8004992:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	0c1b      	lsrs	r3, r3, #16
 800499a:	f003 0104 	and.w	r1, r3, #4
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	69da      	ldr	r2, [r3, #28]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3708      	adds	r7, #8
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b082      	sub	sp, #8
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d101      	bne.n	80049e4 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e01a      	b.n	8004a1a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2202      	movs	r2, #2
 80049e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049fa:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f002 ff2f 	bl	8007860 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3708      	adds	r7, #8
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b088      	sub	sp, #32
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	60f8      	str	r0, [r7, #12]
 8004a2a:	60b9      	str	r1, [r7, #8]
 8004a2c:	603b      	str	r3, [r7, #0]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a32:	2300      	movs	r3, #0
 8004a34:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d101      	bne.n	8004a44 <HAL_SPI_Transmit+0x22>
 8004a40:	2302      	movs	r3, #2
 8004a42:	e11e      	b.n	8004c82 <HAL_SPI_Transmit+0x260>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a4c:	f7fc f8a0 	bl	8000b90 <HAL_GetTick>
 8004a50:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a52:	88fb      	ldrh	r3, [r7, #6]
 8004a54:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d002      	beq.n	8004a68 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a62:	2302      	movs	r3, #2
 8004a64:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a66:	e103      	b.n	8004c70 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d002      	beq.n	8004a74 <HAL_SPI_Transmit+0x52>
 8004a6e:	88fb      	ldrh	r3, [r7, #6]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d102      	bne.n	8004a7a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a78:	e0fa      	b.n	8004c70 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2203      	movs	r2, #3
 8004a7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	68ba      	ldr	r2, [r7, #8]
 8004a8c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	88fa      	ldrh	r2, [r7, #6]
 8004a92:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	88fa      	ldrh	r2, [r7, #6]
 8004a98:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ac0:	d107      	bne.n	8004ad2 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ad0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004adc:	2b40      	cmp	r3, #64	; 0x40
 8004ade:	d007      	beq.n	8004af0 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004aee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004af8:	d14b      	bne.n	8004b92 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d002      	beq.n	8004b08 <HAL_SPI_Transmit+0xe6>
 8004b02:	8afb      	ldrh	r3, [r7, #22]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d13e      	bne.n	8004b86 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0c:	881a      	ldrh	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b18:	1c9a      	adds	r2, r3, #2
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	3b01      	subs	r3, #1
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b2c:	e02b      	b.n	8004b86 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f003 0302 	and.w	r3, r3, #2
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d112      	bne.n	8004b62 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b40:	881a      	ldrh	r2, [r3, #0]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4c:	1c9a      	adds	r2, r3, #2
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b60:	e011      	b.n	8004b86 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b62:	f7fc f815 	bl	8000b90 <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	683a      	ldr	r2, [r7, #0]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d803      	bhi.n	8004b7a <HAL_SPI_Transmit+0x158>
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b78:	d102      	bne.n	8004b80 <HAL_SPI_Transmit+0x15e>
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d102      	bne.n	8004b86 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b84:	e074      	b.n	8004c70 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1ce      	bne.n	8004b2e <HAL_SPI_Transmit+0x10c>
 8004b90:	e04c      	b.n	8004c2c <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d002      	beq.n	8004ba0 <HAL_SPI_Transmit+0x17e>
 8004b9a:	8afb      	ldrh	r3, [r7, #22]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d140      	bne.n	8004c22 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	330c      	adds	r3, #12
 8004baa:	7812      	ldrb	r2, [r2, #0]
 8004bac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb2:	1c5a      	adds	r2, r3, #1
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004bc6:	e02c      	b.n	8004c22 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d113      	bne.n	8004bfe <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	330c      	adds	r3, #12
 8004be0:	7812      	ldrb	r2, [r2, #0]
 8004be2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be8:	1c5a      	adds	r2, r3, #1
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	86da      	strh	r2, [r3, #54]	; 0x36
 8004bfc:	e011      	b.n	8004c22 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bfe:	f7fb ffc7 	bl	8000b90 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d803      	bhi.n	8004c16 <HAL_SPI_Transmit+0x1f4>
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c14:	d102      	bne.n	8004c1c <HAL_SPI_Transmit+0x1fa>
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d102      	bne.n	8004c22 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c20:	e026      	b.n	8004c70 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1cd      	bne.n	8004bc8 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c2c:	69ba      	ldr	r2, [r7, #24]
 8004c2e:	6839      	ldr	r1, [r7, #0]
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f000 fa45 	bl	80050c0 <SPI_EndRxTxTransaction>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d002      	beq.n	8004c42 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2220      	movs	r2, #32
 8004c40:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10a      	bne.n	8004c60 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	613b      	str	r3, [r7, #16]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	613b      	str	r3, [r7, #16]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	613b      	str	r3, [r7, #16]
 8004c5e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d002      	beq.n	8004c6e <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	77fb      	strb	r3, [r7, #31]
 8004c6c:	e000      	b.n	8004c70 <HAL_SPI_Transmit+0x24e>
  }

error:
 8004c6e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c80:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3720      	adds	r7, #32
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b08c      	sub	sp, #48	; 0x30
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	60f8      	str	r0, [r7, #12]
 8004c92:	60b9      	str	r1, [r7, #8]
 8004c94:	607a      	str	r2, [r7, #4]
 8004c96:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d101      	bne.n	8004cb0 <HAL_SPI_TransmitReceive+0x26>
 8004cac:	2302      	movs	r3, #2
 8004cae:	e18a      	b.n	8004fc6 <HAL_SPI_TransmitReceive+0x33c>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cb8:	f7fb ff6a 	bl	8000b90 <HAL_GetTick>
 8004cbc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004cce:	887b      	ldrh	r3, [r7, #2]
 8004cd0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004cd2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d00f      	beq.n	8004cfa <HAL_SPI_TransmitReceive+0x70>
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ce0:	d107      	bne.n	8004cf2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d103      	bne.n	8004cf2 <HAL_SPI_TransmitReceive+0x68>
 8004cea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cee:	2b04      	cmp	r3, #4
 8004cf0:	d003      	beq.n	8004cfa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004cf2:	2302      	movs	r3, #2
 8004cf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004cf8:	e15b      	b.n	8004fb2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d005      	beq.n	8004d0c <HAL_SPI_TransmitReceive+0x82>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d002      	beq.n	8004d0c <HAL_SPI_TransmitReceive+0x82>
 8004d06:	887b      	ldrh	r3, [r7, #2]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d103      	bne.n	8004d14 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d12:	e14e      	b.n	8004fb2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	2b04      	cmp	r3, #4
 8004d1e:	d003      	beq.n	8004d28 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2205      	movs	r2, #5
 8004d24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	887a      	ldrh	r2, [r7, #2]
 8004d38:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	887a      	ldrh	r2, [r7, #2]
 8004d3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	887a      	ldrh	r2, [r7, #2]
 8004d4a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	887a      	ldrh	r2, [r7, #2]
 8004d50:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d68:	2b40      	cmp	r3, #64	; 0x40
 8004d6a:	d007      	beq.n	8004d7c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d84:	d178      	bne.n	8004e78 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d002      	beq.n	8004d94 <HAL_SPI_TransmitReceive+0x10a>
 8004d8e:	8b7b      	ldrh	r3, [r7, #26]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d166      	bne.n	8004e62 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d98:	881a      	ldrh	r2, [r3, #0]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da4:	1c9a      	adds	r2, r3, #2
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	3b01      	subs	r3, #1
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004db8:	e053      	b.n	8004e62 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d11b      	bne.n	8004e00 <HAL_SPI_TransmitReceive+0x176>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d016      	beq.n	8004e00 <HAL_SPI_TransmitReceive+0x176>
 8004dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d113      	bne.n	8004e00 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ddc:	881a      	ldrh	r2, [r3, #0]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de8:	1c9a      	adds	r2, r3, #2
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	3b01      	subs	r3, #1
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d119      	bne.n	8004e42 <HAL_SPI_TransmitReceive+0x1b8>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d014      	beq.n	8004e42 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68da      	ldr	r2, [r3, #12]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e22:	b292      	uxth	r2, r2
 8004e24:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2a:	1c9a      	adds	r2, r3, #2
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	3b01      	subs	r3, #1
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e42:	f7fb fea5 	bl	8000b90 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d807      	bhi.n	8004e62 <HAL_SPI_TransmitReceive+0x1d8>
 8004e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e58:	d003      	beq.n	8004e62 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004e60:	e0a7      	b.n	8004fb2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1a6      	bne.n	8004dba <HAL_SPI_TransmitReceive+0x130>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1a1      	bne.n	8004dba <HAL_SPI_TransmitReceive+0x130>
 8004e76:	e07c      	b.n	8004f72 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d002      	beq.n	8004e86 <HAL_SPI_TransmitReceive+0x1fc>
 8004e80:	8b7b      	ldrh	r3, [r7, #26]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d16b      	bne.n	8004f5e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	330c      	adds	r3, #12
 8004e90:	7812      	ldrb	r2, [r2, #0]
 8004e92:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e98:	1c5a      	adds	r2, r3, #1
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004eac:	e057      	b.n	8004f5e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f003 0302 	and.w	r3, r3, #2
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d11c      	bne.n	8004ef6 <HAL_SPI_TransmitReceive+0x26c>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d017      	beq.n	8004ef6 <HAL_SPI_TransmitReceive+0x26c>
 8004ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d114      	bne.n	8004ef6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	330c      	adds	r3, #12
 8004ed6:	7812      	ldrb	r2, [r2, #0]
 8004ed8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ede:	1c5a      	adds	r2, r3, #1
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	3b01      	subs	r3, #1
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f003 0301 	and.w	r3, r3, #1
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d119      	bne.n	8004f38 <HAL_SPI_TransmitReceive+0x2ae>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d014      	beq.n	8004f38 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68da      	ldr	r2, [r3, #12]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f18:	b2d2      	uxtb	r2, r2
 8004f1a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f20:	1c5a      	adds	r2, r3, #1
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f34:	2301      	movs	r3, #1
 8004f36:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f38:	f7fb fe2a 	bl	8000b90 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d803      	bhi.n	8004f50 <HAL_SPI_TransmitReceive+0x2c6>
 8004f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f4e:	d102      	bne.n	8004f56 <HAL_SPI_TransmitReceive+0x2cc>
 8004f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d103      	bne.n	8004f5e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004f5c:	e029      	b.n	8004fb2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1a2      	bne.n	8004eae <HAL_SPI_TransmitReceive+0x224>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d19d      	bne.n	8004eae <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f76:	68f8      	ldr	r0, [r7, #12]
 8004f78:	f000 f8a2 	bl	80050c0 <SPI_EndRxTxTransaction>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d006      	beq.n	8004f90 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004f8e:	e010      	b.n	8004fb2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d10b      	bne.n	8004fb0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f98:	2300      	movs	r3, #0
 8004f9a:	617b      	str	r3, [r7, #20]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	617b      	str	r3, [r7, #20]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	617b      	str	r3, [r7, #20]
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	e000      	b.n	8004fb2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004fb0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004fc2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3730      	adds	r7, #48	; 0x30
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b083      	sub	sp, #12
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fdc:	b2db      	uxtb	r3, r3
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b084      	sub	sp, #16
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	60f8      	str	r0, [r7, #12]
 8004ff2:	60b9      	str	r1, [r7, #8]
 8004ff4:	603b      	str	r3, [r7, #0]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ffa:	e04c      	b.n	8005096 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005002:	d048      	beq.n	8005096 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005004:	f7fb fdc4 	bl	8000b90 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	683a      	ldr	r2, [r7, #0]
 8005010:	429a      	cmp	r2, r3
 8005012:	d902      	bls.n	800501a <SPI_WaitFlagStateUntilTimeout+0x30>
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d13d      	bne.n	8005096 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	685a      	ldr	r2, [r3, #4]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005028:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005032:	d111      	bne.n	8005058 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800503c:	d004      	beq.n	8005048 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005046:	d107      	bne.n	8005058 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005056:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005060:	d10f      	bne.n	8005082 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005070:	601a      	str	r2, [r3, #0]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005080:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e00f      	b.n	80050b6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	689a      	ldr	r2, [r3, #8]
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	4013      	ands	r3, r2
 80050a0:	68ba      	ldr	r2, [r7, #8]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	bf0c      	ite	eq
 80050a6:	2301      	moveq	r3, #1
 80050a8:	2300      	movne	r3, #0
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	461a      	mov	r2, r3
 80050ae:	79fb      	ldrb	r3, [r7, #7]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d1a3      	bne.n	8004ffc <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3710      	adds	r7, #16
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
	...

080050c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b088      	sub	sp, #32
 80050c4:	af02      	add	r7, sp, #8
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80050cc:	4b1b      	ldr	r3, [pc, #108]	; (800513c <SPI_EndRxTxTransaction+0x7c>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a1b      	ldr	r2, [pc, #108]	; (8005140 <SPI_EndRxTxTransaction+0x80>)
 80050d2:	fba2 2303 	umull	r2, r3, r2, r3
 80050d6:	0d5b      	lsrs	r3, r3, #21
 80050d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050dc:	fb02 f303 	mul.w	r3, r2, r3
 80050e0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050ea:	d112      	bne.n	8005112 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	9300      	str	r3, [sp, #0]
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	2200      	movs	r2, #0
 80050f4:	2180      	movs	r1, #128	; 0x80
 80050f6:	68f8      	ldr	r0, [r7, #12]
 80050f8:	f7ff ff77 	bl	8004fea <SPI_WaitFlagStateUntilTimeout>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d016      	beq.n	8005130 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005106:	f043 0220 	orr.w	r2, r3, #32
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e00f      	b.n	8005132 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00a      	beq.n	800512e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	3b01      	subs	r3, #1
 800511c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005128:	2b80      	cmp	r3, #128	; 0x80
 800512a:	d0f2      	beq.n	8005112 <SPI_EndRxTxTransaction+0x52>
 800512c:	e000      	b.n	8005130 <SPI_EndRxTxTransaction+0x70>
        break;
 800512e:	bf00      	nop
  }

  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3718      	adds	r7, #24
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	20000034 	.word	0x20000034
 8005140:	165e9f81 	.word	0x165e9f81

08005144 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d101      	bne.n	8005156 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e03f      	b.n	80051d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b00      	cmp	r3, #0
 8005160:	d106      	bne.n	8005170 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f002 fb30 	bl	80077d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2224      	movs	r2, #36	; 0x24
 8005174:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68da      	ldr	r2, [r3, #12]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005186:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 f829 	bl	80051e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	691a      	ldr	r2, [r3, #16]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800519c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	695a      	ldr	r2, [r3, #20]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68da      	ldr	r2, [r3, #12]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2220      	movs	r2, #32
 80051c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2220      	movs	r2, #32
 80051d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3708      	adds	r7, #8
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
	...

080051e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051e4:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051ee:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80051fa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80051fe:	68d9      	ldr	r1, [r3, #12]
 8005200:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	ea40 0301 	orr.w	r3, r0, r1
 800520a:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800520c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005210:	689a      	ldr	r2, [r3, #8]
 8005212:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	431a      	orrs	r2, r3
 800521a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800521e:	695b      	ldr	r3, [r3, #20]
 8005220:	431a      	orrs	r2, r3
 8005222:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005226:	69db      	ldr	r3, [r3, #28]
 8005228:	4313      	orrs	r3, r2
 800522a:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 800522e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800523a:	f021 010c 	bic.w	r1, r1, #12
 800523e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8005248:	430b      	orrs	r3, r1
 800524a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800524c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005258:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800525c:	6999      	ldr	r1, [r3, #24]
 800525e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	ea40 0301 	orr.w	r3, r0, r1
 8005268:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800526a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800526e:	69db      	ldr	r3, [r3, #28]
 8005270:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005274:	f040 824a 	bne.w	800570c <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005278:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	4b96      	ldr	r3, [pc, #600]	; (80054d8 <UART_SetConfig+0x2f8>)
 8005280:	429a      	cmp	r2, r3
 8005282:	d006      	beq.n	8005292 <UART_SetConfig+0xb2>
 8005284:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	4b94      	ldr	r3, [pc, #592]	; (80054dc <UART_SetConfig+0x2fc>)
 800528c:	429a      	cmp	r2, r3
 800528e:	f040 8129 	bne.w	80054e4 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005292:	f7fe ffe5 	bl	8004260 <HAL_RCC_GetPCLK2Freq>
 8005296:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800529a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800529e:	2200      	movs	r2, #0
 80052a0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 80052a4:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 80052a8:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 80052ac:	4622      	mov	r2, r4
 80052ae:	462b      	mov	r3, r5
 80052b0:	1891      	adds	r1, r2, r2
 80052b2:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80052b6:	415b      	adcs	r3, r3
 80052b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80052bc:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80052c0:	4621      	mov	r1, r4
 80052c2:	1851      	adds	r1, r2, r1
 80052c4:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 80052c8:	4629      	mov	r1, r5
 80052ca:	414b      	adcs	r3, r1
 80052cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80052d0:	f04f 0200 	mov.w	r2, #0
 80052d4:	f04f 0300 	mov.w	r3, #0
 80052d8:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 80052dc:	4649      	mov	r1, r9
 80052de:	00cb      	lsls	r3, r1, #3
 80052e0:	4641      	mov	r1, r8
 80052e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052e6:	4641      	mov	r1, r8
 80052e8:	00ca      	lsls	r2, r1, #3
 80052ea:	4610      	mov	r0, r2
 80052ec:	4619      	mov	r1, r3
 80052ee:	4603      	mov	r3, r0
 80052f0:	4622      	mov	r2, r4
 80052f2:	189b      	adds	r3, r3, r2
 80052f4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80052f8:	462b      	mov	r3, r5
 80052fa:	460a      	mov	r2, r1
 80052fc:	eb42 0303 	adc.w	r3, r2, r3
 8005300:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8005304:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8005310:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8005314:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8005318:	460b      	mov	r3, r1
 800531a:	18db      	adds	r3, r3, r3
 800531c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005320:	4613      	mov	r3, r2
 8005322:	eb42 0303 	adc.w	r3, r2, r3
 8005326:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800532a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800532e:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8005332:	f7fa ff63 	bl	80001fc <__aeabi_uldivmod>
 8005336:	4602      	mov	r2, r0
 8005338:	460b      	mov	r3, r1
 800533a:	4b69      	ldr	r3, [pc, #420]	; (80054e0 <UART_SetConfig+0x300>)
 800533c:	fba3 2302 	umull	r2, r3, r3, r2
 8005340:	095b      	lsrs	r3, r3, #5
 8005342:	011c      	lsls	r4, r3, #4
 8005344:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005348:	2200      	movs	r2, #0
 800534a:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 800534e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8005352:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 8005356:	4642      	mov	r2, r8
 8005358:	464b      	mov	r3, r9
 800535a:	1891      	adds	r1, r2, r2
 800535c:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8005360:	415b      	adcs	r3, r3
 8005362:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005366:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800536a:	4641      	mov	r1, r8
 800536c:	1851      	adds	r1, r2, r1
 800536e:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8005372:	4649      	mov	r1, r9
 8005374:	414b      	adcs	r3, r1
 8005376:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800537a:	f04f 0200 	mov.w	r2, #0
 800537e:	f04f 0300 	mov.w	r3, #0
 8005382:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8005386:	4659      	mov	r1, fp
 8005388:	00cb      	lsls	r3, r1, #3
 800538a:	4651      	mov	r1, sl
 800538c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005390:	4651      	mov	r1, sl
 8005392:	00ca      	lsls	r2, r1, #3
 8005394:	4610      	mov	r0, r2
 8005396:	4619      	mov	r1, r3
 8005398:	4603      	mov	r3, r0
 800539a:	4642      	mov	r2, r8
 800539c:	189b      	adds	r3, r3, r2
 800539e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80053a2:	464b      	mov	r3, r9
 80053a4:	460a      	mov	r2, r1
 80053a6:	eb42 0303 	adc.w	r3, r2, r3
 80053aa:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80053ae:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80053ba:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 80053be:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 80053c2:	460b      	mov	r3, r1
 80053c4:	18db      	adds	r3, r3, r3
 80053c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80053ca:	4613      	mov	r3, r2
 80053cc:	eb42 0303 	adc.w	r3, r2, r3
 80053d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80053d4:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80053d8:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 80053dc:	f7fa ff0e 	bl	80001fc <__aeabi_uldivmod>
 80053e0:	4602      	mov	r2, r0
 80053e2:	460b      	mov	r3, r1
 80053e4:	4611      	mov	r1, r2
 80053e6:	4b3e      	ldr	r3, [pc, #248]	; (80054e0 <UART_SetConfig+0x300>)
 80053e8:	fba3 2301 	umull	r2, r3, r3, r1
 80053ec:	095b      	lsrs	r3, r3, #5
 80053ee:	2264      	movs	r2, #100	; 0x64
 80053f0:	fb02 f303 	mul.w	r3, r2, r3
 80053f4:	1acb      	subs	r3, r1, r3
 80053f6:	00db      	lsls	r3, r3, #3
 80053f8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80053fc:	4b38      	ldr	r3, [pc, #224]	; (80054e0 <UART_SetConfig+0x300>)
 80053fe:	fba3 2302 	umull	r2, r3, r3, r2
 8005402:	095b      	lsrs	r3, r3, #5
 8005404:	005b      	lsls	r3, r3, #1
 8005406:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800540a:	441c      	add	r4, r3
 800540c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005410:	2200      	movs	r2, #0
 8005412:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005416:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 800541a:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 800541e:	4642      	mov	r2, r8
 8005420:	464b      	mov	r3, r9
 8005422:	1891      	adds	r1, r2, r2
 8005424:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8005428:	415b      	adcs	r3, r3
 800542a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800542e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8005432:	4641      	mov	r1, r8
 8005434:	1851      	adds	r1, r2, r1
 8005436:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800543a:	4649      	mov	r1, r9
 800543c:	414b      	adcs	r3, r1
 800543e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005442:	f04f 0200 	mov.w	r2, #0
 8005446:	f04f 0300 	mov.w	r3, #0
 800544a:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 800544e:	4659      	mov	r1, fp
 8005450:	00cb      	lsls	r3, r1, #3
 8005452:	4651      	mov	r1, sl
 8005454:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005458:	4651      	mov	r1, sl
 800545a:	00ca      	lsls	r2, r1, #3
 800545c:	4610      	mov	r0, r2
 800545e:	4619      	mov	r1, r3
 8005460:	4603      	mov	r3, r0
 8005462:	4642      	mov	r2, r8
 8005464:	189b      	adds	r3, r3, r2
 8005466:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800546a:	464b      	mov	r3, r9
 800546c:	460a      	mov	r2, r1
 800546e:	eb42 0303 	adc.w	r3, r2, r3
 8005472:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8005476:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8005482:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8005486:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 800548a:	460b      	mov	r3, r1
 800548c:	18db      	adds	r3, r3, r3
 800548e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005492:	4613      	mov	r3, r2
 8005494:	eb42 0303 	adc.w	r3, r2, r3
 8005498:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800549c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80054a0:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 80054a4:	f7fa feaa 	bl	80001fc <__aeabi_uldivmod>
 80054a8:	4602      	mov	r2, r0
 80054aa:	460b      	mov	r3, r1
 80054ac:	4b0c      	ldr	r3, [pc, #48]	; (80054e0 <UART_SetConfig+0x300>)
 80054ae:	fba3 1302 	umull	r1, r3, r3, r2
 80054b2:	095b      	lsrs	r3, r3, #5
 80054b4:	2164      	movs	r1, #100	; 0x64
 80054b6:	fb01 f303 	mul.w	r3, r1, r3
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	00db      	lsls	r3, r3, #3
 80054be:	3332      	adds	r3, #50	; 0x32
 80054c0:	4a07      	ldr	r2, [pc, #28]	; (80054e0 <UART_SetConfig+0x300>)
 80054c2:	fba2 2303 	umull	r2, r3, r2, r3
 80054c6:	095b      	lsrs	r3, r3, #5
 80054c8:	f003 0207 	and.w	r2, r3, #7
 80054cc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4422      	add	r2, r4
 80054d4:	609a      	str	r2, [r3, #8]
 80054d6:	e349      	b.n	8005b6c <UART_SetConfig+0x98c>
 80054d8:	40011000 	.word	0x40011000
 80054dc:	40011400 	.word	0x40011400
 80054e0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80054e4:	f7fe fea8 	bl	8004238 <HAL_RCC_GetPCLK1Freq>
 80054e8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054ec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80054f0:	2200      	movs	r2, #0
 80054f2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80054f6:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 80054fa:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 80054fe:	4622      	mov	r2, r4
 8005500:	462b      	mov	r3, r5
 8005502:	1891      	adds	r1, r2, r2
 8005504:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8005508:	415b      	adcs	r3, r3
 800550a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800550e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005512:	4621      	mov	r1, r4
 8005514:	eb12 0a01 	adds.w	sl, r2, r1
 8005518:	4629      	mov	r1, r5
 800551a:	eb43 0b01 	adc.w	fp, r3, r1
 800551e:	f04f 0200 	mov.w	r2, #0
 8005522:	f04f 0300 	mov.w	r3, #0
 8005526:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800552a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800552e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005532:	4692      	mov	sl, r2
 8005534:	469b      	mov	fp, r3
 8005536:	4623      	mov	r3, r4
 8005538:	eb1a 0303 	adds.w	r3, sl, r3
 800553c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005540:	462b      	mov	r3, r5
 8005542:	eb4b 0303 	adc.w	r3, fp, r3
 8005546:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800554a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8005556:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800555a:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 800555e:	460b      	mov	r3, r1
 8005560:	18db      	adds	r3, r3, r3
 8005562:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005566:	4613      	mov	r3, r2
 8005568:	eb42 0303 	adc.w	r3, r2, r3
 800556c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005570:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8005574:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8005578:	f7fa fe40 	bl	80001fc <__aeabi_uldivmod>
 800557c:	4602      	mov	r2, r0
 800557e:	460b      	mov	r3, r1
 8005580:	4b61      	ldr	r3, [pc, #388]	; (8005708 <UART_SetConfig+0x528>)
 8005582:	fba3 2302 	umull	r2, r3, r3, r2
 8005586:	095b      	lsrs	r3, r3, #5
 8005588:	011c      	lsls	r4, r3, #4
 800558a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800558e:	2200      	movs	r2, #0
 8005590:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8005594:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8005598:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 800559c:	4642      	mov	r2, r8
 800559e:	464b      	mov	r3, r9
 80055a0:	1891      	adds	r1, r2, r2
 80055a2:	67b9      	str	r1, [r7, #120]	; 0x78
 80055a4:	415b      	adcs	r3, r3
 80055a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80055a8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80055ac:	4641      	mov	r1, r8
 80055ae:	1851      	adds	r1, r2, r1
 80055b0:	6739      	str	r1, [r7, #112]	; 0x70
 80055b2:	4649      	mov	r1, r9
 80055b4:	414b      	adcs	r3, r1
 80055b6:	677b      	str	r3, [r7, #116]	; 0x74
 80055b8:	f04f 0200 	mov.w	r2, #0
 80055bc:	f04f 0300 	mov.w	r3, #0
 80055c0:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 80055c4:	4659      	mov	r1, fp
 80055c6:	00cb      	lsls	r3, r1, #3
 80055c8:	4651      	mov	r1, sl
 80055ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055ce:	4651      	mov	r1, sl
 80055d0:	00ca      	lsls	r2, r1, #3
 80055d2:	4610      	mov	r0, r2
 80055d4:	4619      	mov	r1, r3
 80055d6:	4603      	mov	r3, r0
 80055d8:	4642      	mov	r2, r8
 80055da:	189b      	adds	r3, r3, r2
 80055dc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80055e0:	464b      	mov	r3, r9
 80055e2:	460a      	mov	r2, r1
 80055e4:	eb42 0303 	adc.w	r3, r2, r3
 80055e8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80055ec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80055f8:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 80055fc:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8005600:	460b      	mov	r3, r1
 8005602:	18db      	adds	r3, r3, r3
 8005604:	66bb      	str	r3, [r7, #104]	; 0x68
 8005606:	4613      	mov	r3, r2
 8005608:	eb42 0303 	adc.w	r3, r2, r3
 800560c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800560e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005612:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8005616:	f7fa fdf1 	bl	80001fc <__aeabi_uldivmod>
 800561a:	4602      	mov	r2, r0
 800561c:	460b      	mov	r3, r1
 800561e:	4611      	mov	r1, r2
 8005620:	4b39      	ldr	r3, [pc, #228]	; (8005708 <UART_SetConfig+0x528>)
 8005622:	fba3 2301 	umull	r2, r3, r3, r1
 8005626:	095b      	lsrs	r3, r3, #5
 8005628:	2264      	movs	r2, #100	; 0x64
 800562a:	fb02 f303 	mul.w	r3, r2, r3
 800562e:	1acb      	subs	r3, r1, r3
 8005630:	00db      	lsls	r3, r3, #3
 8005632:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005636:	4b34      	ldr	r3, [pc, #208]	; (8005708 <UART_SetConfig+0x528>)
 8005638:	fba3 2302 	umull	r2, r3, r3, r2
 800563c:	095b      	lsrs	r3, r3, #5
 800563e:	005b      	lsls	r3, r3, #1
 8005640:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005644:	441c      	add	r4, r3
 8005646:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800564a:	2200      	movs	r2, #0
 800564c:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8005650:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8005654:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8005658:	4642      	mov	r2, r8
 800565a:	464b      	mov	r3, r9
 800565c:	1891      	adds	r1, r2, r2
 800565e:	6639      	str	r1, [r7, #96]	; 0x60
 8005660:	415b      	adcs	r3, r3
 8005662:	667b      	str	r3, [r7, #100]	; 0x64
 8005664:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005668:	4641      	mov	r1, r8
 800566a:	1851      	adds	r1, r2, r1
 800566c:	65b9      	str	r1, [r7, #88]	; 0x58
 800566e:	4649      	mov	r1, r9
 8005670:	414b      	adcs	r3, r1
 8005672:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005674:	f04f 0200 	mov.w	r2, #0
 8005678:	f04f 0300 	mov.w	r3, #0
 800567c:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8005680:	4659      	mov	r1, fp
 8005682:	00cb      	lsls	r3, r1, #3
 8005684:	4651      	mov	r1, sl
 8005686:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800568a:	4651      	mov	r1, sl
 800568c:	00ca      	lsls	r2, r1, #3
 800568e:	4610      	mov	r0, r2
 8005690:	4619      	mov	r1, r3
 8005692:	4603      	mov	r3, r0
 8005694:	4642      	mov	r2, r8
 8005696:	189b      	adds	r3, r3, r2
 8005698:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800569c:	464b      	mov	r3, r9
 800569e:	460a      	mov	r2, r1
 80056a0:	eb42 0303 	adc.w	r3, r2, r3
 80056a4:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80056a8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80056b4:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 80056b8:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 80056bc:	460b      	mov	r3, r1
 80056be:	18db      	adds	r3, r3, r3
 80056c0:	653b      	str	r3, [r7, #80]	; 0x50
 80056c2:	4613      	mov	r3, r2
 80056c4:	eb42 0303 	adc.w	r3, r2, r3
 80056c8:	657b      	str	r3, [r7, #84]	; 0x54
 80056ca:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80056ce:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 80056d2:	f7fa fd93 	bl	80001fc <__aeabi_uldivmod>
 80056d6:	4602      	mov	r2, r0
 80056d8:	460b      	mov	r3, r1
 80056da:	4b0b      	ldr	r3, [pc, #44]	; (8005708 <UART_SetConfig+0x528>)
 80056dc:	fba3 1302 	umull	r1, r3, r3, r2
 80056e0:	095b      	lsrs	r3, r3, #5
 80056e2:	2164      	movs	r1, #100	; 0x64
 80056e4:	fb01 f303 	mul.w	r3, r1, r3
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	00db      	lsls	r3, r3, #3
 80056ec:	3332      	adds	r3, #50	; 0x32
 80056ee:	4a06      	ldr	r2, [pc, #24]	; (8005708 <UART_SetConfig+0x528>)
 80056f0:	fba2 2303 	umull	r2, r3, r2, r3
 80056f4:	095b      	lsrs	r3, r3, #5
 80056f6:	f003 0207 	and.w	r2, r3, #7
 80056fa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4422      	add	r2, r4
 8005702:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005704:	e232      	b.n	8005b6c <UART_SetConfig+0x98c>
 8005706:	bf00      	nop
 8005708:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800570c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	4b8d      	ldr	r3, [pc, #564]	; (8005948 <UART_SetConfig+0x768>)
 8005714:	429a      	cmp	r2, r3
 8005716:	d006      	beq.n	8005726 <UART_SetConfig+0x546>
 8005718:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	4b8b      	ldr	r3, [pc, #556]	; (800594c <UART_SetConfig+0x76c>)
 8005720:	429a      	cmp	r2, r3
 8005722:	f040 8117 	bne.w	8005954 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005726:	f7fe fd9b 	bl	8004260 <HAL_RCC_GetPCLK2Freq>
 800572a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800572e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005732:	2200      	movs	r2, #0
 8005734:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8005738:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 800573c:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8005740:	4622      	mov	r2, r4
 8005742:	462b      	mov	r3, r5
 8005744:	1891      	adds	r1, r2, r2
 8005746:	64b9      	str	r1, [r7, #72]	; 0x48
 8005748:	415b      	adcs	r3, r3
 800574a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800574c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005750:	4621      	mov	r1, r4
 8005752:	eb12 0801 	adds.w	r8, r2, r1
 8005756:	4629      	mov	r1, r5
 8005758:	eb43 0901 	adc.w	r9, r3, r1
 800575c:	f04f 0200 	mov.w	r2, #0
 8005760:	f04f 0300 	mov.w	r3, #0
 8005764:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005768:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800576c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005770:	4690      	mov	r8, r2
 8005772:	4699      	mov	r9, r3
 8005774:	4623      	mov	r3, r4
 8005776:	eb18 0303 	adds.w	r3, r8, r3
 800577a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800577e:	462b      	mov	r3, r5
 8005780:	eb49 0303 	adc.w	r3, r9, r3
 8005784:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8005788:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005794:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8005798:	f04f 0200 	mov.w	r2, #0
 800579c:	f04f 0300 	mov.w	r3, #0
 80057a0:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 80057a4:	4629      	mov	r1, r5
 80057a6:	008b      	lsls	r3, r1, #2
 80057a8:	4621      	mov	r1, r4
 80057aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057ae:	4621      	mov	r1, r4
 80057b0:	008a      	lsls	r2, r1, #2
 80057b2:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 80057b6:	f7fa fd21 	bl	80001fc <__aeabi_uldivmod>
 80057ba:	4602      	mov	r2, r0
 80057bc:	460b      	mov	r3, r1
 80057be:	4b64      	ldr	r3, [pc, #400]	; (8005950 <UART_SetConfig+0x770>)
 80057c0:	fba3 2302 	umull	r2, r3, r3, r2
 80057c4:	095b      	lsrs	r3, r3, #5
 80057c6:	011c      	lsls	r4, r3, #4
 80057c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80057cc:	2200      	movs	r2, #0
 80057ce:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80057d2:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80057d6:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 80057da:	4642      	mov	r2, r8
 80057dc:	464b      	mov	r3, r9
 80057de:	1891      	adds	r1, r2, r2
 80057e0:	6439      	str	r1, [r7, #64]	; 0x40
 80057e2:	415b      	adcs	r3, r3
 80057e4:	647b      	str	r3, [r7, #68]	; 0x44
 80057e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80057ea:	4641      	mov	r1, r8
 80057ec:	1851      	adds	r1, r2, r1
 80057ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80057f0:	4649      	mov	r1, r9
 80057f2:	414b      	adcs	r3, r1
 80057f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057f6:	f04f 0200 	mov.w	r2, #0
 80057fa:	f04f 0300 	mov.w	r3, #0
 80057fe:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8005802:	4659      	mov	r1, fp
 8005804:	00cb      	lsls	r3, r1, #3
 8005806:	4651      	mov	r1, sl
 8005808:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800580c:	4651      	mov	r1, sl
 800580e:	00ca      	lsls	r2, r1, #3
 8005810:	4610      	mov	r0, r2
 8005812:	4619      	mov	r1, r3
 8005814:	4603      	mov	r3, r0
 8005816:	4642      	mov	r2, r8
 8005818:	189b      	adds	r3, r3, r2
 800581a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800581e:	464b      	mov	r3, r9
 8005820:	460a      	mov	r2, r1
 8005822:	eb42 0303 	adc.w	r3, r2, r3
 8005826:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800582a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8005836:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800583a:	f04f 0200 	mov.w	r2, #0
 800583e:	f04f 0300 	mov.w	r3, #0
 8005842:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8005846:	4649      	mov	r1, r9
 8005848:	008b      	lsls	r3, r1, #2
 800584a:	4641      	mov	r1, r8
 800584c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005850:	4641      	mov	r1, r8
 8005852:	008a      	lsls	r2, r1, #2
 8005854:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8005858:	f7fa fcd0 	bl	80001fc <__aeabi_uldivmod>
 800585c:	4602      	mov	r2, r0
 800585e:	460b      	mov	r3, r1
 8005860:	4b3b      	ldr	r3, [pc, #236]	; (8005950 <UART_SetConfig+0x770>)
 8005862:	fba3 1302 	umull	r1, r3, r3, r2
 8005866:	095b      	lsrs	r3, r3, #5
 8005868:	2164      	movs	r1, #100	; 0x64
 800586a:	fb01 f303 	mul.w	r3, r1, r3
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	011b      	lsls	r3, r3, #4
 8005872:	3332      	adds	r3, #50	; 0x32
 8005874:	4a36      	ldr	r2, [pc, #216]	; (8005950 <UART_SetConfig+0x770>)
 8005876:	fba2 2303 	umull	r2, r3, r2, r3
 800587a:	095b      	lsrs	r3, r3, #5
 800587c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005880:	441c      	add	r4, r3
 8005882:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005886:	2200      	movs	r2, #0
 8005888:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800588c:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8005890:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8005894:	4642      	mov	r2, r8
 8005896:	464b      	mov	r3, r9
 8005898:	1891      	adds	r1, r2, r2
 800589a:	6339      	str	r1, [r7, #48]	; 0x30
 800589c:	415b      	adcs	r3, r3
 800589e:	637b      	str	r3, [r7, #52]	; 0x34
 80058a0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80058a4:	4641      	mov	r1, r8
 80058a6:	1851      	adds	r1, r2, r1
 80058a8:	62b9      	str	r1, [r7, #40]	; 0x28
 80058aa:	4649      	mov	r1, r9
 80058ac:	414b      	adcs	r3, r1
 80058ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058b0:	f04f 0200 	mov.w	r2, #0
 80058b4:	f04f 0300 	mov.w	r3, #0
 80058b8:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 80058bc:	4659      	mov	r1, fp
 80058be:	00cb      	lsls	r3, r1, #3
 80058c0:	4651      	mov	r1, sl
 80058c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058c6:	4651      	mov	r1, sl
 80058c8:	00ca      	lsls	r2, r1, #3
 80058ca:	4610      	mov	r0, r2
 80058cc:	4619      	mov	r1, r3
 80058ce:	4603      	mov	r3, r0
 80058d0:	4642      	mov	r2, r8
 80058d2:	189b      	adds	r3, r3, r2
 80058d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80058d8:	464b      	mov	r3, r9
 80058da:	460a      	mov	r2, r1
 80058dc:	eb42 0303 	adc.w	r3, r2, r3
 80058e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80058e4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80058f0:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 80058f4:	f04f 0200 	mov.w	r2, #0
 80058f8:	f04f 0300 	mov.w	r3, #0
 80058fc:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8005900:	4649      	mov	r1, r9
 8005902:	008b      	lsls	r3, r1, #2
 8005904:	4641      	mov	r1, r8
 8005906:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800590a:	4641      	mov	r1, r8
 800590c:	008a      	lsls	r2, r1, #2
 800590e:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8005912:	f7fa fc73 	bl	80001fc <__aeabi_uldivmod>
 8005916:	4602      	mov	r2, r0
 8005918:	460b      	mov	r3, r1
 800591a:	4b0d      	ldr	r3, [pc, #52]	; (8005950 <UART_SetConfig+0x770>)
 800591c:	fba3 1302 	umull	r1, r3, r3, r2
 8005920:	095b      	lsrs	r3, r3, #5
 8005922:	2164      	movs	r1, #100	; 0x64
 8005924:	fb01 f303 	mul.w	r3, r1, r3
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	011b      	lsls	r3, r3, #4
 800592c:	3332      	adds	r3, #50	; 0x32
 800592e:	4a08      	ldr	r2, [pc, #32]	; (8005950 <UART_SetConfig+0x770>)
 8005930:	fba2 2303 	umull	r2, r3, r2, r3
 8005934:	095b      	lsrs	r3, r3, #5
 8005936:	f003 020f 	and.w	r2, r3, #15
 800593a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4422      	add	r2, r4
 8005942:	609a      	str	r2, [r3, #8]
 8005944:	e112      	b.n	8005b6c <UART_SetConfig+0x98c>
 8005946:	bf00      	nop
 8005948:	40011000 	.word	0x40011000
 800594c:	40011400 	.word	0x40011400
 8005950:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8005954:	f7fe fc70 	bl	8004238 <HAL_RCC_GetPCLK1Freq>
 8005958:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800595c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005960:	2200      	movs	r2, #0
 8005962:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005966:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800596a:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 800596e:	4642      	mov	r2, r8
 8005970:	464b      	mov	r3, r9
 8005972:	1891      	adds	r1, r2, r2
 8005974:	6239      	str	r1, [r7, #32]
 8005976:	415b      	adcs	r3, r3
 8005978:	627b      	str	r3, [r7, #36]	; 0x24
 800597a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800597e:	4641      	mov	r1, r8
 8005980:	1854      	adds	r4, r2, r1
 8005982:	4649      	mov	r1, r9
 8005984:	eb43 0501 	adc.w	r5, r3, r1
 8005988:	f04f 0200 	mov.w	r2, #0
 800598c:	f04f 0300 	mov.w	r3, #0
 8005990:	00eb      	lsls	r3, r5, #3
 8005992:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005996:	00e2      	lsls	r2, r4, #3
 8005998:	4614      	mov	r4, r2
 800599a:	461d      	mov	r5, r3
 800599c:	4643      	mov	r3, r8
 800599e:	18e3      	adds	r3, r4, r3
 80059a0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80059a4:	464b      	mov	r3, r9
 80059a6:	eb45 0303 	adc.w	r3, r5, r3
 80059aa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80059ae:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80059ba:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80059be:	f04f 0200 	mov.w	r2, #0
 80059c2:	f04f 0300 	mov.w	r3, #0
 80059c6:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 80059ca:	4629      	mov	r1, r5
 80059cc:	008b      	lsls	r3, r1, #2
 80059ce:	4621      	mov	r1, r4
 80059d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059d4:	4621      	mov	r1, r4
 80059d6:	008a      	lsls	r2, r1, #2
 80059d8:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80059dc:	f7fa fc0e 	bl	80001fc <__aeabi_uldivmod>
 80059e0:	4602      	mov	r2, r0
 80059e2:	460b      	mov	r3, r1
 80059e4:	4b64      	ldr	r3, [pc, #400]	; (8005b78 <UART_SetConfig+0x998>)
 80059e6:	fba3 2302 	umull	r2, r3, r3, r2
 80059ea:	095b      	lsrs	r3, r3, #5
 80059ec:	011c      	lsls	r4, r3, #4
 80059ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80059f2:	2200      	movs	r2, #0
 80059f4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80059f8:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80059fc:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8005a00:	4642      	mov	r2, r8
 8005a02:	464b      	mov	r3, r9
 8005a04:	1891      	adds	r1, r2, r2
 8005a06:	61b9      	str	r1, [r7, #24]
 8005a08:	415b      	adcs	r3, r3
 8005a0a:	61fb      	str	r3, [r7, #28]
 8005a0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a10:	4641      	mov	r1, r8
 8005a12:	1851      	adds	r1, r2, r1
 8005a14:	6139      	str	r1, [r7, #16]
 8005a16:	4649      	mov	r1, r9
 8005a18:	414b      	adcs	r3, r1
 8005a1a:	617b      	str	r3, [r7, #20]
 8005a1c:	f04f 0200 	mov.w	r2, #0
 8005a20:	f04f 0300 	mov.w	r3, #0
 8005a24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a28:	4659      	mov	r1, fp
 8005a2a:	00cb      	lsls	r3, r1, #3
 8005a2c:	4651      	mov	r1, sl
 8005a2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a32:	4651      	mov	r1, sl
 8005a34:	00ca      	lsls	r2, r1, #3
 8005a36:	4610      	mov	r0, r2
 8005a38:	4619      	mov	r1, r3
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	4642      	mov	r2, r8
 8005a3e:	189b      	adds	r3, r3, r2
 8005a40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005a44:	464b      	mov	r3, r9
 8005a46:	460a      	mov	r2, r1
 8005a48:	eb42 0303 	adc.w	r3, r2, r3
 8005a4c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a50:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005a5c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8005a60:	f04f 0200 	mov.w	r2, #0
 8005a64:	f04f 0300 	mov.w	r3, #0
 8005a68:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8005a6c:	4649      	mov	r1, r9
 8005a6e:	008b      	lsls	r3, r1, #2
 8005a70:	4641      	mov	r1, r8
 8005a72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a76:	4641      	mov	r1, r8
 8005a78:	008a      	lsls	r2, r1, #2
 8005a7a:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8005a7e:	f7fa fbbd 	bl	80001fc <__aeabi_uldivmod>
 8005a82:	4602      	mov	r2, r0
 8005a84:	460b      	mov	r3, r1
 8005a86:	4b3c      	ldr	r3, [pc, #240]	; (8005b78 <UART_SetConfig+0x998>)
 8005a88:	fba3 1302 	umull	r1, r3, r3, r2
 8005a8c:	095b      	lsrs	r3, r3, #5
 8005a8e:	2164      	movs	r1, #100	; 0x64
 8005a90:	fb01 f303 	mul.w	r3, r1, r3
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	011b      	lsls	r3, r3, #4
 8005a98:	3332      	adds	r3, #50	; 0x32
 8005a9a:	4a37      	ldr	r2, [pc, #220]	; (8005b78 <UART_SetConfig+0x998>)
 8005a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa0:	095b      	lsrs	r3, r3, #5
 8005aa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005aa6:	441c      	add	r4, r3
 8005aa8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005aac:	2200      	movs	r2, #0
 8005aae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ab2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005ab6:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8005aba:	4642      	mov	r2, r8
 8005abc:	464b      	mov	r3, r9
 8005abe:	1891      	adds	r1, r2, r2
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	415b      	adcs	r3, r3
 8005ac4:	60fb      	str	r3, [r7, #12]
 8005ac6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005aca:	4641      	mov	r1, r8
 8005acc:	1851      	adds	r1, r2, r1
 8005ace:	6039      	str	r1, [r7, #0]
 8005ad0:	4649      	mov	r1, r9
 8005ad2:	414b      	adcs	r3, r1
 8005ad4:	607b      	str	r3, [r7, #4]
 8005ad6:	f04f 0200 	mov.w	r2, #0
 8005ada:	f04f 0300 	mov.w	r3, #0
 8005ade:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ae2:	4659      	mov	r1, fp
 8005ae4:	00cb      	lsls	r3, r1, #3
 8005ae6:	4651      	mov	r1, sl
 8005ae8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005aec:	4651      	mov	r1, sl
 8005aee:	00ca      	lsls	r2, r1, #3
 8005af0:	4610      	mov	r0, r2
 8005af2:	4619      	mov	r1, r3
 8005af4:	4603      	mov	r3, r0
 8005af6:	4642      	mov	r2, r8
 8005af8:	189b      	adds	r3, r3, r2
 8005afa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005afe:	464b      	mov	r3, r9
 8005b00:	460a      	mov	r2, r1
 8005b02:	eb42 0303 	adc.w	r3, r2, r3
 8005b06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b0a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005b16:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005b1a:	f04f 0200 	mov.w	r2, #0
 8005b1e:	f04f 0300 	mov.w	r3, #0
 8005b22:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8005b26:	4649      	mov	r1, r9
 8005b28:	008b      	lsls	r3, r1, #2
 8005b2a:	4641      	mov	r1, r8
 8005b2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b30:	4641      	mov	r1, r8
 8005b32:	008a      	lsls	r2, r1, #2
 8005b34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005b38:	f7fa fb60 	bl	80001fc <__aeabi_uldivmod>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	460b      	mov	r3, r1
 8005b40:	4b0d      	ldr	r3, [pc, #52]	; (8005b78 <UART_SetConfig+0x998>)
 8005b42:	fba3 1302 	umull	r1, r3, r3, r2
 8005b46:	095b      	lsrs	r3, r3, #5
 8005b48:	2164      	movs	r1, #100	; 0x64
 8005b4a:	fb01 f303 	mul.w	r3, r1, r3
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	011b      	lsls	r3, r3, #4
 8005b52:	3332      	adds	r3, #50	; 0x32
 8005b54:	4a08      	ldr	r2, [pc, #32]	; (8005b78 <UART_SetConfig+0x998>)
 8005b56:	fba2 2303 	umull	r2, r3, r2, r3
 8005b5a:	095b      	lsrs	r3, r3, #5
 8005b5c:	f003 020f 	and.w	r2, r3, #15
 8005b60:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4422      	add	r2, r4
 8005b68:	609a      	str	r2, [r3, #8]
}
 8005b6a:	e7ff      	b.n	8005b6c <UART_SetConfig+0x98c>
 8005b6c:	bf00      	nop
 8005b6e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8005b72:	46bd      	mov	sp, r7
 8005b74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b78:	51eb851f 	.word	0x51eb851f

08005b7c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8005b86:	2300      	movs	r3, #0
 8005b88:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d029      	beq.n	8005bea <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005ba2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005ba6:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005bb0:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8005bb6:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8005bbc:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8005bc2:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8005bc8:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8005bce:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8005bd4:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8005bda:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	601a      	str	r2, [r3, #0]
 8005be8:	e034      	b.n	8005c54 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bf6:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005c00:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8005c06:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005c1a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005c1e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005c28:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8005c2e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8005c34:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8005c3a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8005c40:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	68ba      	ldr	r2, [r7, #8]
 8005c52:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3714      	adds	r7, #20
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005c62:	b480      	push	{r7}
 8005c64:	b087      	sub	sp, #28
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	60f8      	str	r0, [r7, #12]
 8005c6a:	60b9      	str	r1, [r7, #8]
 8005c6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8005c72:	2300      	movs	r3, #0
 8005c74:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d02e      	beq.n	8005cda <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005c88:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	3b01      	subs	r3, #1
 8005c96:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005c98:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	3b01      	subs	r3, #1
 8005ca0:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8005ca2:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8005cac:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005cb6:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	695b      	ldr	r3, [r3, #20]
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8005cc0:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	697a      	ldr	r2, [r7, #20]
 8005cd6:	609a      	str	r2, [r3, #8]
 8005cd8:	e03b      	b.n	8005d52 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005ce6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cea:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	695b      	ldr	r3, [r3, #20]
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005d10:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005d20:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	3b01      	subs	r3, #1
 8005d28:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8005d2a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	3b01      	subs	r3, #1
 8005d32:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8005d34:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	699b      	ldr	r3, [r3, #24]
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	371c      	adds	r7, #28
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b086      	sub	sp, #24
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8005d70:	2300      	movs	r3, #0
 8005d72:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005d7c:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	3b01      	subs	r3, #1
 8005d84:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8005d86:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005d98:	f7fa fefa 	bl	8000b90 <HAL_GetTick>
 8005d9c:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8005d9e:	e010      	b.n	8005dc2 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da6:	d00c      	beq.n	8005dc2 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d007      	beq.n	8005dbe <FMC_SDRAM_SendCommand+0x5e>
 8005dae:	f7fa feef 	bl	8000b90 <HAL_GetTick>
 8005db2:	4602      	mov	r2, r0
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d201      	bcs.n	8005dc2 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e006      	b.n	8005dd0 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	699b      	ldr	r3, [r3, #24]
 8005dc6:	f003 0320 	and.w	r3, r3, #32
 8005dca:	2b20      	cmp	r3, #32
 8005dcc:	d0e8      	beq.n	8005da0 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3718      	adds	r7, #24
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	695a      	ldr	r2, [r3, #20]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	005b      	lsls	r3, r3, #1
 8005dea:	431a      	orrs	r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8005df0:	2300      	movs	r3, #0
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	370c      	adds	r7, #12
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
	...

08005e00 <BufferConfig>:
static AnimType buffering = ANIMATED ;
/*************************** Public functions ***************************/
static void blit(Bitmap* SrcPm, void *fb,  int src_x, int src_y, int dst_x, int dst_y, int w, int h);

void  BufferConfig(AnimType an)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	4603      	mov	r3, r0
 8005e08:	71fb      	strb	r3, [r7, #7]
	buffering = an ;
 8005e0a:	4a05      	ldr	r2, [pc, #20]	; (8005e20 <BufferConfig+0x20>)
 8005e0c:	79fb      	ldrb	r3, [r7, #7]
 8005e0e:	7013      	strb	r3, [r2, #0]
	GPU_BufferConfig((u8) an ) ;
 8005e10:	79fb      	ldrb	r3, [r7, #7]
 8005e12:	4618      	mov	r0, r3
 8005e14:	f000 f976 	bl	8006104 <GPU_BufferConfig>
}
 8005e18:	bf00      	nop
 8005e1a:	3708      	adds	r7, #8
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	20000025 	.word	0x20000025

08005e24 <DrawSprite>:


void  DrawSprite(Sprite* spr )
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b096      	sub	sp, #88	; 0x58
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
	if(spr->active)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	69db      	ldr	r3, [r3, #28]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f000 80b1 	beq.w	8005f98 <DrawSprite+0x174>
	{
      void * data = (void *)spr->ImageData ;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	647b      	str	r3, [r7, #68]	; 0x44
      u32 spr_h = spr->Height;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	643b      	str	r3, [r7, #64]	; 0x40
      u32 spr_w = spr->Width;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	63fb      	str	r3, [r7, #60]	; 0x3c

      /**** Clipping work ****/

      //1- check if the image is totally invisible
      	if(spr->x >= disp.Dis_w || spr->y >= disp.Dis_h ||
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	685a      	ldr	r2, [r3, #4]
 8005e4c:	4b54      	ldr	r3, [pc, #336]	; (8005fa0 <DrawSprite+0x17c>)
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	f280 80a0 	bge.w	8005f96 <DrawSprite+0x172>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	689a      	ldr	r2, [r3, #8]
 8005e5a:	4b51      	ldr	r3, [pc, #324]	; (8005fa0 <DrawSprite+0x17c>)
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	f280 8099 	bge.w	8005f96 <DrawSprite+0x172>
      	   spr->x+spr_w <= 0 || spr->y+spr_h <= 0 )
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	461a      	mov	r2, r3
 8005e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e6c:	4413      	add	r3, r2
      	if(spr->x >= disp.Dis_w || spr->y >= disp.Dis_h ||
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	f000 8091 	beq.w	8005f96 <DrawSprite+0x172>
      	   spr->x+spr_w <= 0 || spr->y+spr_h <= 0 )
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	461a      	mov	r2, r3
 8005e7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e7c:	4413      	add	r3, r2
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	f000 8089 	beq.w	8005f96 <DrawSprite+0x172>
      		                                          return ; // go out
      //2-compute new coordinations for easy computation
      	int x1 = spr->x ;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	657b      	str	r3, [r7, #84]	; 0x54
      	int y1 = spr->y ;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	653b      	str	r3, [r7, #80]	; 0x50
      	int x2 = x1+spr_w -1 ;
 8005e90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e94:	4413      	add	r3, r2
 8005e96:	3b01      	subs	r3, #1
 8005e98:	64fb      	str	r3, [r7, #76]	; 0x4c
      	int y2 = y1+spr_h -1 ;
 8005e9a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005e9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e9e:	4413      	add	r3, r2
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	64bb      	str	r3, [r7, #72]	; 0x48

      //3- left upper corner wrapping.
      	if(x1 < 0) x1 = 0 ;
 8005ea4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	da01      	bge.n	8005eae <DrawSprite+0x8a>
 8005eaa:	2300      	movs	r3, #0
 8005eac:	657b      	str	r3, [r7, #84]	; 0x54
      	if(y1 < 0) y1 = 0 ;
 8005eae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	da01      	bge.n	8005eb8 <DrawSprite+0x94>
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	653b      	str	r3, [r7, #80]	; 0x50

     //4- Right lower corner wrapping.
       if(x2 >= disp.Dis_w) x2 = disp.Dis_w - 1 ;
 8005eb8:	4b39      	ldr	r3, [pc, #228]	; (8005fa0 <DrawSprite+0x17c>)
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	db03      	blt.n	8005eca <DrawSprite+0xa6>
 8005ec2:	4b37      	ldr	r3, [pc, #220]	; (8005fa0 <DrawSprite+0x17c>)
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	64fb      	str	r3, [r7, #76]	; 0x4c
       if(y2 >= disp.Dis_h) y2 = disp.Dis_h - 1 ;
 8005eca:	4b35      	ldr	r3, [pc, #212]	; (8005fa0 <DrawSprite+0x17c>)
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	db03      	blt.n	8005edc <DrawSprite+0xb8>
 8005ed4:	4b32      	ldr	r3, [pc, #200]	; (8005fa0 <DrawSprite+0x17c>)
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	3b01      	subs	r3, #1
 8005eda:	64bb      	str	r3, [r7, #72]	; 0x48


    //5- Calculate new offset for destination buffer and source bitmap.
      int offset_des = BPP * (x1 + y1*disp.Dis_w) ;
 8005edc:	4b30      	ldr	r3, [pc, #192]	; (8005fa0 <DrawSprite+0x17c>)
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005ee2:	fb03 f202 	mul.w	r2, r3, r2
 8005ee6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ee8:	4413      	add	r3, r2
 8005eea:	005b      	lsls	r3, r3, #1
 8005eec:	63bb      	str	r3, [r7, #56]	; 0x38
      int offset_src = BPP * ( x1 -spr->x + (y1-spr->y)*spr_w ) ;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	461a      	mov	r2, r3
 8005f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f04:	fb02 f303 	mul.w	r3, r2, r3
 8005f08:	440b      	add	r3, r1
 8005f0a:	005b      	lsls	r3, r3, #1
 8005f0c:	637b      	str	r3, [r7, #52]	; 0x34


    //6- Calculate new width and height for sprite.

      int w = x2-x1 +1 ;
 8005f0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	3301      	adds	r3, #1
 8005f16:	633b      	str	r3, [r7, #48]	; 0x30
      int h = y2-y1 +1 ;
 8005f18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	3301      	adds	r3, #1
 8005f20:	62fb      	str	r3, [r7, #44]	; 0x2c
      int in_offset = spr->Width - w ; /* It is added at the end of each line to determine the starting address of the
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	68da      	ldr	r2, [r3, #12]
 8005f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	62bb      	str	r3, [r7, #40]	; 0x28
                                      next line from source bitmap*/
      Bitmap src , dest ;

      src.data  = data+offset_src              ;
 8005f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f30:	4413      	add	r3, r2
 8005f32:	61bb      	str	r3, [r7, #24]
     // src.color = TRANSPARARENT_COLOR_RGB888   ;
      src.color = spr->color ;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f3a:	61fb      	str	r3, [r7, #28]
      src.w     = w                            ;
 8005f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3e:	623b      	str	r3, [r7, #32]
      src.h     = h                            ;
 8005f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f42:	627b      	str	r3, [r7, #36]	; 0x24

      dest.data = (buffering == ANIMATED ? disp.draw_buff : disp.Rendr_buf) + offset_des  ;
 8005f44:	4b17      	ldr	r3, [pc, #92]	; (8005fa4 <DrawSprite+0x180>)
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d102      	bne.n	8005f52 <DrawSprite+0x12e>
 8005f4c:	4b14      	ldr	r3, [pc, #80]	; (8005fa0 <DrawSprite+0x17c>)
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	e001      	b.n	8005f56 <DrawSprite+0x132>
 8005f52:	4b13      	ldr	r3, [pc, #76]	; (8005fa0 <DrawSprite+0x17c>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f58:	4413      	add	r3, r2
 8005f5a:	60bb      	str	r3, [r7, #8]
      dest.w    = disp.Dis_w                   ;
 8005f5c:	4b10      	ldr	r3, [pc, #64]	; (8005fa0 <DrawSprite+0x17c>)
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	613b      	str	r3, [r7, #16]
      dest.h    = disp.Dis_h                   ;
 8005f62:	4b0f      	ldr	r3, [pc, #60]	; (8005fa0 <DrawSprite+0x17c>)
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	617b      	str	r3, [r7, #20]

     // Now finally blit!
      if(spr->LayerId == SPRITE)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d108      	bne.n	8005f84 <DrawSprite+0x160>
    	  CopyBMP(&src , &dest ,in_offset );
 8005f72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f74:	f107 0108 	add.w	r1, r7, #8
 8005f78:	f107 0318 	add.w	r3, r7, #24
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f000 f905 	bl	800618c <CopyBMP>
 8005f82:	e009      	b.n	8005f98 <DrawSprite+0x174>
      else
    	  Fill_color_buff(&src , &dest);
 8005f84:	f107 0208 	add.w	r2, r7, #8
 8005f88:	f107 0318 	add.w	r3, r7, #24
 8005f8c:	4611      	mov	r1, r2
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f000 f940 	bl	8006214 <Fill_color_buff>
 8005f94:	e000      	b.n	8005f98 <DrawSprite+0x174>
      		                                          return ; // go out
 8005f96:	bf00      	nop
	}//if
}
 8005f98:	3758      	adds	r7, #88	; 0x58
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	2000139c 	.word	0x2000139c
 8005fa4:	20000025 	.word	0x20000025

08005fa8 <Erase_Sprite>:

void Erase_Sprite(Sprite *spr ,Sprite *back )
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b08a      	sub	sp, #40	; 0x28
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]

	CopyBMP(&src  , &dest, back->Width - spr->Width) ;
	//Fill_color_buff(&src , &dest);
#endif

	u32 x = spr->x , y = spr->y  ;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	61bb      	str	r3, [r7, #24]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	617b      	str	r3, [r7, #20]
	__IO u16* buf = (buffering == ANIMATED ? disp.draw_buff : disp.Rendr_buf);
 8005fbe:	4b2b      	ldr	r3, [pc, #172]	; (800606c <Erase_Sprite+0xc4>)
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d102      	bne.n	8005fcc <Erase_Sprite+0x24>
 8005fc6:	4b2a      	ldr	r3, [pc, #168]	; (8006070 <Erase_Sprite+0xc8>)
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	e001      	b.n	8005fd0 <Erase_Sprite+0x28>
 8005fcc:	4b28      	ldr	r3, [pc, #160]	; (8006070 <Erase_Sprite+0xc8>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	613b      	str	r3, [r7, #16]
	__IO u16*  ptr = (u16*)(back->ImageData)+ x +y*back->Width ;
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	4619      	mov	r1, r3
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	fb03 f101 	mul.w	r1, r3, r1
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	440b      	add	r3, r1
 8005fe6:	005b      	lsls	r3, r3, #1
 8005fe8:	4413      	add	r3, r2
 8005fea:	627b      	str	r3, [r7, #36]	; 0x24

	for (u32 i = 0; i <  spr->Height ; i++)
 8005fec:	2300      	movs	r3, #0
 8005fee:	623b      	str	r3, [r7, #32]
 8005ff0:	e030      	b.n	8006054 <Erase_Sprite+0xac>
			for (u32 j = 0; j  < spr->Width; j++)
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	61fb      	str	r3, [r7, #28]
 8005ff6:	e024      	b.n	8006042 <Erase_Sprite+0x9a>
			{
				u16 color = back->ImageData? *ptr++ : rgb888torgb565(back->color);
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d005      	beq.n	800600c <Erase_Sprite+0x64>
 8006000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006002:	1c9a      	adds	r2, r3, #2
 8006004:	627a      	str	r2, [r7, #36]	; 0x24
 8006006:	881b      	ldrh	r3, [r3, #0]
 8006008:	b29b      	uxth	r3, r3
 800600a:	e006      	b.n	800601a <Erase_Sprite+0x72>
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006012:	4618      	mov	r0, r3
 8006014:	f000 f82e 	bl	8006074 <rgb888torgb565>
 8006018:	4603      	mov	r3, r0
 800601a:	81fb      	strh	r3, [r7, #14]
				*( buf + ((y+i)* disp.Dis_w + x + j) ) = color;
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	6a3b      	ldr	r3, [r7, #32]
 8006020:	4413      	add	r3, r2
 8006022:	4a13      	ldr	r2, [pc, #76]	; (8006070 <Erase_Sprite+0xc8>)
 8006024:	6892      	ldr	r2, [r2, #8]
 8006026:	fb03 f202 	mul.w	r2, r3, r2
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	441a      	add	r2, r3
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	4413      	add	r3, r2
 8006032:	005b      	lsls	r3, r3, #1
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	4413      	add	r3, r2
 8006038:	89fa      	ldrh	r2, [r7, #14]
 800603a:	801a      	strh	r2, [r3, #0]
			for (u32 j = 0; j  < spr->Width; j++)
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	3301      	adds	r3, #1
 8006040:	61fb      	str	r3, [r7, #28]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	461a      	mov	r2, r3
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	4293      	cmp	r3, r2
 800604c:	d3d4      	bcc.n	8005ff8 <Erase_Sprite+0x50>
	for (u32 i = 0; i <  spr->Height ; i++)
 800604e:	6a3b      	ldr	r3, [r7, #32]
 8006050:	3301      	adds	r3, #1
 8006052:	623b      	str	r3, [r7, #32]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	461a      	mov	r2, r3
 800605a:	6a3b      	ldr	r3, [r7, #32]
 800605c:	4293      	cmp	r3, r2
 800605e:	d3c8      	bcc.n	8005ff2 <Erase_Sprite+0x4a>
			}

}
 8006060:	bf00      	nop
 8006062:	bf00      	nop
 8006064:	3728      	adds	r7, #40	; 0x28
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	20000025 	.word	0x20000025
 8006070:	2000139c 	.word	0x2000139c

08006074 <rgb888torgb565>:
  }

}

u16 rgb888torgb565(u32 rgb888Pixel)
{
 8006074:	b480      	push	{r7}
 8006076:	b087      	sub	sp, #28
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
	u8 red   = ((u32)rgb888Pixel ) >>16 ;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	0c1b      	lsrs	r3, r3, #16
 8006080:	75fb      	strb	r3, [r7, #23]
	u8 green = (((u32)rgb888Pixel ) >>8) & 0x00FF ;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	0a1b      	lsrs	r3, r3, #8
 8006086:	75bb      	strb	r3, [r7, #22]
	u8 blue  = (u32)rgb888Pixel & 0x000000FFUl ;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	757b      	strb	r3, [r7, #21]

    u16 b = (blue >> 3) & 0x1f;
 800608c:	7d7b      	ldrb	r3, [r7, #21]
 800608e:	08db      	lsrs	r3, r3, #3
 8006090:	b2db      	uxtb	r3, r3
 8006092:	b29b      	uxth	r3, r3
 8006094:	f003 031f 	and.w	r3, r3, #31
 8006098:	827b      	strh	r3, [r7, #18]
    u16 g = ((green >> 2) & 0x3f) << 5;
 800609a:	7dbb      	ldrb	r3, [r7, #22]
 800609c:	089b      	lsrs	r3, r3, #2
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	015b      	lsls	r3, r3, #5
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80060a8:	823b      	strh	r3, [r7, #16]
    u16 r = ((red >> 3) & 0x1f) << 11;
 80060aa:	7dfb      	ldrb	r3, [r7, #23]
 80060ac:	08db      	lsrs	r3, r3, #3
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	02db      	lsls	r3, r3, #11
 80060b2:	81fb      	strh	r3, [r7, #14]

    return (u16) (r | g | b);
 80060b4:	89fa      	ldrh	r2, [r7, #14]
 80060b6:	8a3b      	ldrh	r3, [r7, #16]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	8a7b      	ldrh	r3, [r7, #18]
 80060be:	4313      	orrs	r3, r2
 80060c0:	b29b      	uxth	r3, r3
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	371c      	adds	r7, #28
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr

080060ce <LTDC_ClkConfig>:



/* Private Functions */
static void LTDC_ClkConfig(void)
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b08c      	sub	sp, #48	; 0x30
 80060d2:	af00      	add	r7, sp, #0
RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80060d4:	463b      	mov	r3, r7
 80060d6:	2230      	movs	r2, #48	; 0x30
 80060d8:	2100      	movs	r1, #0
 80060da:	4618      	mov	r0, r3
 80060dc:	f005 fe8a 	bl	800bdf4 <memset>

PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80060e0:	2308      	movs	r3, #8
 80060e2:	603b      	str	r3, [r7, #0]
PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 80060e4:	233c      	movs	r3, #60	; 0x3c
 80060e6:	613b      	str	r3, [r7, #16]
PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80060e8:	2305      	movs	r3, #5
 80060ea:	61bb      	str	r3, [r7, #24]
PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80060ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80060f0:	627b      	str	r3, [r7, #36]	; 0x24
if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80060f2:	463b      	mov	r3, r7
 80060f4:	4618      	mov	r0, r3
 80060f6:	f7fe f8c7 	bl	8004288 <HAL_RCCEx_PeriphCLKConfig>
  {

  }
}
 80060fa:	bf00      	nop
 80060fc:	3730      	adds	r7, #48	; 0x30
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
	...

08006104 <GPU_BufferConfig>:

void  GPU_BufferConfig(uint8_t Type)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	4603      	mov	r3, r0
 800610c:	71fb      	strb	r3, [r7, #7]
	Dbuff = Type ;
 800610e:	4a04      	ldr	r2, [pc, #16]	; (8006120 <GPU_BufferConfig+0x1c>)
 8006110:	79fb      	ldrb	r3, [r7, #7]
 8006112:	7013      	strb	r3, [r2, #0]
}
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr
 8006120:	20000026 	.word	0x20000026

08006124 <InitDisplay>:
void InitDisplay(uint32_t background , u32 color)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
	disp.Rendr_buf = Render_buf ;
 800612e:	4b13      	ldr	r3, [pc, #76]	; (800617c <InitDisplay+0x58>)
 8006130:	4a13      	ldr	r2, [pc, #76]	; (8006180 <InitDisplay+0x5c>)
 8006132:	601a      	str	r2, [r3, #0]
	disp.draw_buff = Draw_buf   ;
 8006134:	4b11      	ldr	r3, [pc, #68]	; (800617c <InitDisplay+0x58>)
 8006136:	4a13      	ldr	r2, [pc, #76]	; (8006184 <InitDisplay+0x60>)
 8006138:	605a      	str	r2, [r3, #4]
	disp.Dis_w = LCD_WIDTH ;
 800613a:	4b10      	ldr	r3, [pc, #64]	; (800617c <InitDisplay+0x58>)
 800613c:	22f0      	movs	r2, #240	; 0xf0
 800613e:	609a      	str	r2, [r3, #8]
	disp.Dis_h = LCD_HEIGHT;
 8006140:	4b0e      	ldr	r3, [pc, #56]	; (800617c <InitDisplay+0x58>)
 8006142:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006146:	60da      	str	r2, [r3, #12]
	background_img = background ;
 8006148:	4a0f      	ldr	r2, [pc, #60]	; (8006188 <InitDisplay+0x64>)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6013      	str	r3, [r2, #0]
	BSP_SDRAM_Init();
 800614e:	f001 f897 	bl	8007280 <BSP_SDRAM_Init>
	ili9341_Init();
 8006152:	f000 fb7d 	bl	8006850 <ili9341_Init>
	LTDC_Init();
 8006156:	f000 f995 	bl	8006484 <LTDC_Init>
	if(background_img==0)
 800615a:	4b0b      	ldr	r3, [pc, #44]	; (8006188 <InitDisplay+0x64>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d108      	bne.n	8006174 <InitDisplay+0x50>
		Fill_Backgroud_Color( color,disp.draw_buff ,disp.Dis_w,disp.Dis_h  ) ;
 8006162:	4b06      	ldr	r3, [pc, #24]	; (800617c <InitDisplay+0x58>)
 8006164:	6859      	ldr	r1, [r3, #4]
 8006166:	4b05      	ldr	r3, [pc, #20]	; (800617c <InitDisplay+0x58>)
 8006168:	689a      	ldr	r2, [r3, #8]
 800616a:	4b04      	ldr	r3, [pc, #16]	; (800617c <InitDisplay+0x58>)
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	6838      	ldr	r0, [r7, #0]
 8006170:	f000 f94e 	bl	8006410 <Fill_Backgroud_Color>
}
 8006174:	bf00      	nop
 8006176:	3708      	adds	r7, #8
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	2000139c 	.word	0x2000139c
 8006180:	d0000000 	.word	0xd0000000
 8006184:	d0200000 	.word	0xd0200000
 8006188:	20001398 	.word	0x20001398

0800618c <CopyBMP>:

void CopyBMP(Bitmap_PTR Psrc_bmp , Bitmap_PTR Pdest_bmp , uint32_t in_offst)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b086      	sub	sp, #24
 8006190:	af02      	add	r7, sp, #8
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	607a      	str	r2, [r7, #4]
	hdma2d.Instance = DMA2D;
 8006198:	4b1c      	ldr	r3, [pc, #112]	; (800620c <CopyBMP+0x80>)
 800619a:	4a1d      	ldr	r2, [pc, #116]	; (8006210 <CopyBMP+0x84>)
 800619c:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_M2M  ;
 800619e:	4b1b      	ldr	r3, [pc, #108]	; (800620c <CopyBMP+0x80>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80061a4:	4b19      	ldr	r3, [pc, #100]	; (800620c <CopyBMP+0x80>)
 80061a6:	2202      	movs	r2, #2
 80061a8:	609a      	str	r2, [r3, #8]
   // hdma2d.Init.OutputOffset = disp.Dis_w - width;
	hdma2d.Init.OutputOffset = Pdest_bmp->w - Psrc_bmp->w ;
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	689a      	ldr	r2, [r3, #8]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	461a      	mov	r2, r3
 80061b6:	4b15      	ldr	r3, [pc, #84]	; (800620c <CopyBMP+0x80>)
 80061b8:	60da      	str	r2, [r3, #12]

	hdma2d.LayerCfg[1].InputOffset = in_offst;
 80061ba:	4a14      	ldr	r2, [pc, #80]	; (800620c <CopyBMP+0x80>)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6293      	str	r3, [r2, #40]	; 0x28
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80061c0:	4b12      	ldr	r3, [pc, #72]	; (800620c <CopyBMP+0x80>)
 80061c2:	2202      	movs	r2, #2
 80061c4:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80061c6:	4b11      	ldr	r3, [pc, #68]	; (800620c <CopyBMP+0x80>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	631a      	str	r2, [r3, #48]	; 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0;
 80061cc:	4b0f      	ldr	r3, [pc, #60]	; (800620c <CopyBMP+0x80>)
 80061ce:	2200      	movs	r2, #0
 80061d0:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_DMA2D_Init(&hdma2d);
 80061d2:	480e      	ldr	r0, [pc, #56]	; (800620c <CopyBMP+0x80>)
 80061d4:	f7fa ffdc 	bl	8001190 <HAL_DMA2D_Init>
	HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 80061d8:	2101      	movs	r1, #1
 80061da:	480c      	ldr	r0, [pc, #48]	; (800620c <CopyBMP+0x80>)
 80061dc:	f7fb f936 	bl	800144c <HAL_DMA2D_ConfigLayer>

	//HAL_DMA2D_Start(&hdma2d, (uint32_t)img , buff , width , height) ;
	HAL_DMA2D_Start(&hdma2d, (uint32_t)Psrc_bmp->data , (uint32_t)Pdest_bmp->data , Psrc_bmp->w , Psrc_bmp->h) ;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4619      	mov	r1, r3
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	461a      	mov	r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	4618      	mov	r0, r3
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	9300      	str	r3, [sp, #0]
 80061f8:	4603      	mov	r3, r0
 80061fa:	4804      	ldr	r0, [pc, #16]	; (800620c <CopyBMP+0x80>)
 80061fc:	f7fb f811 	bl	8001222 <HAL_DMA2D_Start>
	DMA2D_wait() ;
 8006200:	f000 f8ea 	bl	80063d8 <DMA2D_wait>
}
 8006204:	bf00      	nop
 8006206:	3710      	adds	r7, #16
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	20001358 	.word	0x20001358
 8006210:	4002b000 	.word	0x4002b000

08006214 <Fill_color_buff>:

void Fill_color_buff(Bitmap_PTR Psrc_bmp , Bitmap_PTR Pdest_bmp )
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af02      	add	r7, sp, #8
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
	hdma2d.Instance = DMA2D;
 800621e:	4b1d      	ldr	r3, [pc, #116]	; (8006294 <Fill_color_buff+0x80>)
 8006220:	4a1d      	ldr	r2, [pc, #116]	; (8006298 <Fill_color_buff+0x84>)
 8006222:	601a      	str	r2, [r3, #0]
    hdma2d.Init.Mode = DMA2D_R2M  ;
 8006224:	4b1b      	ldr	r3, [pc, #108]	; (8006294 <Fill_color_buff+0x80>)
 8006226:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800622a:	605a      	str	r2, [r3, #4]
    hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 800622c:	4b19      	ldr	r3, [pc, #100]	; (8006294 <Fill_color_buff+0x80>)
 800622e:	2202      	movs	r2, #2
 8006230:	609a      	str	r2, [r3, #8]
	//hdma2d.Init.OutputOffset = disp.Dis_w - width;
    hdma2d.Init.OutputOffset = Pdest_bmp->w - Psrc_bmp->w ;
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	689a      	ldr	r2, [r3, #8]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	461a      	mov	r2, r3
 800623e:	4b15      	ldr	r3, [pc, #84]	; (8006294 <Fill_color_buff+0x80>)
 8006240:	60da      	str	r2, [r3, #12]
    hdma2d.LayerCfg[1].InputOffset = 0;
 8006242:	4b14      	ldr	r3, [pc, #80]	; (8006294 <Fill_color_buff+0x80>)
 8006244:	2200      	movs	r2, #0
 8006246:	629a      	str	r2, [r3, #40]	; 0x28
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8006248:	4b12      	ldr	r3, [pc, #72]	; (8006294 <Fill_color_buff+0x80>)
 800624a:	2202      	movs	r2, #2
 800624c:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800624e:	4b11      	ldr	r3, [pc, #68]	; (8006294 <Fill_color_buff+0x80>)
 8006250:	2200      	movs	r2, #0
 8006252:	631a      	str	r2, [r3, #48]	; 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0;
 8006254:	4b0f      	ldr	r3, [pc, #60]	; (8006294 <Fill_color_buff+0x80>)
 8006256:	2200      	movs	r2, #0
 8006258:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_DMA2D_Init(&hdma2d);
 800625a:	480e      	ldr	r0, [pc, #56]	; (8006294 <Fill_color_buff+0x80>)
 800625c:	f7fa ff98 	bl	8001190 <HAL_DMA2D_Init>
	HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8006260:	2101      	movs	r1, #1
 8006262:	480c      	ldr	r0, [pc, #48]	; (8006294 <Fill_color_buff+0x80>)
 8006264:	f7fb f8f2 	bl	800144c <HAL_DMA2D_ConfigLayer>

	//HAL_DMA2D_Start(&hdma2d, color , buff , width , height) ;
	HAL_DMA2D_Start(&hdma2d, (uint32_t)Psrc_bmp->color , (uint32_t)Pdest_bmp->data , Psrc_bmp->w , Psrc_bmp->h) ;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6859      	ldr	r1, [r3, #4]
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	461a      	mov	r2, r3
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	4618      	mov	r0, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	9300      	str	r3, [sp, #0]
 800627e:	4603      	mov	r3, r0
 8006280:	4804      	ldr	r0, [pc, #16]	; (8006294 <Fill_color_buff+0x80>)
 8006282:	f7fa ffce 	bl	8001222 <HAL_DMA2D_Start>
	DMA2D_wait() ;
 8006286:	f000 f8a7 	bl	80063d8 <DMA2D_wait>
}
 800628a:	bf00      	nop
 800628c:	3708      	adds	r7, #8
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	20001358 	.word	0x20001358
 8006298:	4002b000 	.word	0x4002b000

0800629c <Draw_Pixel>:

void Draw_Pixel(uint32_t x , uint32_t y , uint32_t color)
{
 800629c:	b480      	push	{r7}
 800629e:	b087      	sub	sp, #28
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	607a      	str	r2, [r7, #4]
	void * DrawBuf = Dbuff? disp.draw_buff : disp.Rendr_buf ;
 80062a8:	4b14      	ldr	r3, [pc, #80]	; (80062fc <Draw_Pixel+0x60>)
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d002      	beq.n	80062b6 <Draw_Pixel+0x1a>
 80062b0:	4b13      	ldr	r3, [pc, #76]	; (8006300 <Draw_Pixel+0x64>)
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	e001      	b.n	80062ba <Draw_Pixel+0x1e>
 80062b6:	4b12      	ldr	r3, [pc, #72]	; (8006300 <Draw_Pixel+0x64>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	617b      	str	r3, [r7, #20]
	//clipping
	if(x>=0 && x<=disp.Dis_w && y>=0 && y<=disp.Dis_h)
 80062bc:	4b10      	ldr	r3, [pc, #64]	; (8006300 <Draw_Pixel+0x64>)
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	461a      	mov	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d813      	bhi.n	80062f0 <Draw_Pixel+0x54>
 80062c8:	4b0d      	ldr	r3, [pc, #52]	; (8006300 <Draw_Pixel+0x64>)
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	461a      	mov	r2, r3
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d80d      	bhi.n	80062f0 <Draw_Pixel+0x54>
	   *((__IO uint16_t*) (DrawBuf + BPP*(x + y*disp.Dis_w))) = color ;
 80062d4:	4b0a      	ldr	r3, [pc, #40]	; (8006300 <Draw_Pixel+0x64>)
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	461a      	mov	r2, r3
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	fb03 f202 	mul.w	r2, r3, r2
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	4413      	add	r3, r2
 80062e4:	005b      	lsls	r3, r3, #1
 80062e6:	697a      	ldr	r2, [r7, #20]
 80062e8:	4413      	add	r3, r2
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	b292      	uxth	r2, r2
 80062ee:	801a      	strh	r2, [r3, #0]
}
 80062f0:	bf00      	nop
 80062f2:	371c      	adds	r7, #28
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr
 80062fc:	20000026 	.word	0x20000026
 8006300:	2000139c 	.word	0x2000139c

08006304 <renderChr>:

void renderChr(uint32_t x , uint32_t y , uint32_t color,char c)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b086      	sub	sp, #24
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
 8006310:	70fb      	strb	r3, [r7, #3]
#if FONT8x8 == 1
	u8*  Ptable  = (u8*)font8x8
#else
	u16* Ptable =(u16*) font16x16
#endif
	 + (c-0x20)*CHAR_WIDTH ;
 8006312:	78fb      	ldrb	r3, [r7, #3]
 8006314:	3b20      	subs	r3, #32
 8006316:	00db      	lsls	r3, r3, #3
 8006318:	461a      	mov	r2, r3
	u8*  Ptable  = (u8*)font8x8
 800631a:	4b18      	ldr	r3, [pc, #96]	; (800637c <renderChr+0x78>)
 800631c:	4413      	add	r3, r2
 800631e:	613b      	str	r3, [r7, #16]

    for(u8 i =0 ; i< CHAR_HEIGHT ; i++)
 8006320:	2300      	movs	r3, #0
 8006322:	75fb      	strb	r3, [r7, #23]
 8006324:	e021      	b.n	800636a <renderChr+0x66>
    {
        for(u8 j = 0 ; j < CHAR_WIDTH ; j++)
 8006326:	2300      	movs	r3, #0
 8006328:	75bb      	strb	r3, [r7, #22]
 800632a:	e018      	b.n	800635e <renderChr+0x5a>
        {
           if((Ptable[i]>>j)&1)
 800632c:	7dfb      	ldrb	r3, [r7, #23]
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	4413      	add	r3, r2
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	461a      	mov	r2, r3
 8006336:	7dbb      	ldrb	r3, [r7, #22]
 8006338:	fa42 f303 	asr.w	r3, r2, r3
 800633c:	f003 0301 	and.w	r3, r3, #1
 8006340:	2b00      	cmp	r3, #0
 8006342:	d009      	beq.n	8006358 <renderChr+0x54>
           {
        	 //  printf("0x%X\n",Ptable[i] );
		       Draw_Pixel(x+j,y+i,color) ;
 8006344:	7dba      	ldrb	r2, [r7, #22]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	18d0      	adds	r0, r2, r3
 800634a:	7dfa      	ldrb	r2, [r7, #23]
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	4413      	add	r3, r2
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	4619      	mov	r1, r3
 8006354:	f7ff ffa2 	bl	800629c <Draw_Pixel>
        for(u8 j = 0 ; j < CHAR_WIDTH ; j++)
 8006358:	7dbb      	ldrb	r3, [r7, #22]
 800635a:	3301      	adds	r3, #1
 800635c:	75bb      	strb	r3, [r7, #22]
 800635e:	7dbb      	ldrb	r3, [r7, #22]
 8006360:	2b07      	cmp	r3, #7
 8006362:	d9e3      	bls.n	800632c <renderChr+0x28>
    for(u8 i =0 ; i< CHAR_HEIGHT ; i++)
 8006364:	7dfb      	ldrb	r3, [r7, #23]
 8006366:	3301      	adds	r3, #1
 8006368:	75fb      	strb	r3, [r7, #23]
 800636a:	7dfb      	ldrb	r3, [r7, #23]
 800636c:	2b07      	cmp	r3, #7
 800636e:	d9da      	bls.n	8006326 <renderChr+0x22>
           }
        }
    }
}
 8006370:	bf00      	nop
 8006372:	bf00      	nop
 8006374:	3718      	adds	r7, #24
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	0800bfa8 	.word	0x0800bfa8

08006380 <renderStr>:



void renderStr(uint32_t x , uint32_t y , uint32_t color,char *str)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b086      	sub	sp, #24
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	607a      	str	r2, [r7, #4]
 800638c:	603b      	str	r3, [r7, #0]
	uint32_t first_x = x ;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	617b      	str	r3, [r7, #20]
	while(*str)
 8006392:	e018      	b.n	80063c6 <renderStr+0x46>
	 {
		if( *str == '\n')
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	2b0a      	cmp	r3, #10
 800639a:	d108      	bne.n	80063ae <renderStr+0x2e>
				{
			        x = first_x   ;
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	60fb      	str	r3, [r7, #12]
					y += CHAR_HEIGHT ;
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	3308      	adds	r3, #8
 80063a4:	60bb      	str	r3, [r7, #8]
					str++ ;
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	3301      	adds	r3, #1
 80063aa:	603b      	str	r3, [r7, #0]
					continue ;
 80063ac:	e00b      	b.n	80063c6 <renderStr+0x46>
				}
        renderChr(x , y , color ,*str++) ;
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	1c5a      	adds	r2, r3, #1
 80063b2:	603a      	str	r2, [r7, #0]
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	68b9      	ldr	r1, [r7, #8]
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f7ff ffa2 	bl	8006304 <renderChr>
        x += CHAR_WIDTH ;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	3308      	adds	r3, #8
 80063c4:	60fb      	str	r3, [r7, #12]
	while(*str)
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1e2      	bne.n	8006394 <renderStr+0x14>
	 }
}
 80063ce:	bf00      	nop
 80063d0:	bf00      	nop
 80063d2:	3718      	adds	r7, #24
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <DMA2D_wait>:
hltdc.State = HAL_LTDC_STATE_READY;
__HAL_UNLOCK(&hltdc);
}

static void DMA2D_wait(void)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
	Aux * aux = Get_AuxiliaryStatus() ;
 80063de:	f001 fcdf 	bl	8007da0 <Get_AuxiliaryStatus>
 80063e2:	6078      	str	r0, [r7, #4]
	while(HAL_DMA2D_PollForTransfer(&hdma2d, 0) == HAL_TIMEOUT)
 80063e4:	e006      	b.n	80063f4 <DMA2D_wait+0x1c>
	{
		//During waiting DMA2D to finish it's work we can do some small tasks
		if(aux->SmallTasks) aux->SmallTasks() ;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d002      	beq.n	80063f4 <DMA2D_wait+0x1c>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4798      	blx	r3
	while(HAL_DMA2D_PollForTransfer(&hdma2d, 0) == HAL_TIMEOUT)
 80063f4:	2100      	movs	r1, #0
 80063f6:	4805      	ldr	r0, [pc, #20]	; (800640c <DMA2D_wait+0x34>)
 80063f8:	f7fa ff3e 	bl	8001278 <HAL_DMA2D_PollForTransfer>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b03      	cmp	r3, #3
 8006400:	d0f1      	beq.n	80063e6 <DMA2D_wait+0xe>
	}
}
 8006402:	bf00      	nop
 8006404:	bf00      	nop
 8006406:	3708      	adds	r7, #8
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}
 800640c:	20001358 	.word	0x20001358

08006410 <Fill_Backgroud_Color>:

static void Fill_Backgroud_Color(u32 color , void* buff , int w , int h)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b086      	sub	sp, #24
 8006414:	af02      	add	r7, sp, #8
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	607a      	str	r2, [r7, #4]
 800641c:	603b      	str	r3, [r7, #0]
	//for color keying
	hdma2d.Instance = DMA2D;
 800641e:	4b17      	ldr	r3, [pc, #92]	; (800647c <Fill_Backgroud_Color+0x6c>)
 8006420:	4a17      	ldr	r2, [pc, #92]	; (8006480 <Fill_Backgroud_Color+0x70>)
 8006422:	601a      	str	r2, [r3, #0]
    hdma2d.Init.Mode = DMA2D_R2M  ;
 8006424:	4b15      	ldr	r3, [pc, #84]	; (800647c <Fill_Backgroud_Color+0x6c>)
 8006426:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800642a:	605a      	str	r2, [r3, #4]
    hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 800642c:	4b13      	ldr	r3, [pc, #76]	; (800647c <Fill_Backgroud_Color+0x6c>)
 800642e:	2202      	movs	r2, #2
 8006430:	609a      	str	r2, [r3, #8]
	//hdma2d.Init.OutputOffset = disp.Dis_w - width;
    hdma2d.Init.OutputOffset = 0 ;
 8006432:	4b12      	ldr	r3, [pc, #72]	; (800647c <Fill_Backgroud_Color+0x6c>)
 8006434:	2200      	movs	r2, #0
 8006436:	60da      	str	r2, [r3, #12]
    hdma2d.LayerCfg[0].InputOffset = 0;
 8006438:	4b10      	ldr	r3, [pc, #64]	; (800647c <Fill_Backgroud_Color+0x6c>)
 800643a:	2200      	movs	r2, #0
 800643c:	619a      	str	r2, [r3, #24]
	hdma2d.LayerCfg[0].InputColorMode = DMA2D_INPUT_RGB565;
 800643e:	4b0f      	ldr	r3, [pc, #60]	; (800647c <Fill_Backgroud_Color+0x6c>)
 8006440:	2202      	movs	r2, #2
 8006442:	61da      	str	r2, [r3, #28]
	hdma2d.LayerCfg[0].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8006444:	4b0d      	ldr	r3, [pc, #52]	; (800647c <Fill_Backgroud_Color+0x6c>)
 8006446:	2200      	movs	r2, #0
 8006448:	621a      	str	r2, [r3, #32]
	hdma2d.LayerCfg[0].InputAlpha = 0;
 800644a:	4b0c      	ldr	r3, [pc, #48]	; (800647c <Fill_Backgroud_Color+0x6c>)
 800644c:	2200      	movs	r2, #0
 800644e:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_DMA2D_Init(&hdma2d);
 8006450:	480a      	ldr	r0, [pc, #40]	; (800647c <Fill_Backgroud_Color+0x6c>)
 8006452:	f7fa fe9d 	bl	8001190 <HAL_DMA2D_Init>
	HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8006456:	2100      	movs	r1, #0
 8006458:	4808      	ldr	r0, [pc, #32]	; (800647c <Fill_Backgroud_Color+0x6c>)
 800645a:	f7fa fff7 	bl	800144c <HAL_DMA2D_ConfigLayer>

	//HAL_DMA2D_Start(&hdma2d, color , buff , width , height) ;
	HAL_DMA2D_Start(&hdma2d, color , (u32)buff , w , h) ;
 800645e:	68ba      	ldr	r2, [r7, #8]
 8006460:	6879      	ldr	r1, [r7, #4]
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	9300      	str	r3, [sp, #0]
 8006466:	460b      	mov	r3, r1
 8006468:	68f9      	ldr	r1, [r7, #12]
 800646a:	4804      	ldr	r0, [pc, #16]	; (800647c <Fill_Backgroud_Color+0x6c>)
 800646c:	f7fa fed9 	bl	8001222 <HAL_DMA2D_Start>
	DMA2D_wait() ;
 8006470:	f7ff ffb2 	bl	80063d8 <DMA2D_wait>
}
 8006474:	bf00      	nop
 8006476:	3710      	adds	r7, #16
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}
 800647c:	20001358 	.word	0x20001358
 8006480:	4002b000 	.word	0x4002b000

08006484 <LTDC_Init>:


void LTDC_Init(void)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b09a      	sub	sp, #104	; 0x68
 8006488:	af00      	add	r7, sp, #0

  LTDC_LayerCfgTypeDef pLayerCfg  , pLayerCfg1;

  /* Clock Configuration */

  LTDC_ClkConfig();
 800648a:	f7ff fe20 	bl	80060ce <LTDC_ClkConfig>

  /* LTDC parameter configurations */

  hltdc.Instance = LTDC;
 800648e:	4b54      	ldr	r3, [pc, #336]	; (80065e0 <LTDC_Init+0x15c>)
 8006490:	4a54      	ldr	r2, [pc, #336]	; (80065e4 <LTDC_Init+0x160>)
 8006492:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8006494:	4b52      	ldr	r3, [pc, #328]	; (80065e0 <LTDC_Init+0x15c>)
 8006496:	2200      	movs	r2, #0
 8006498:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800649a:	4b51      	ldr	r3, [pc, #324]	; (80065e0 <LTDC_Init+0x15c>)
 800649c:	2200      	movs	r2, #0
 800649e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80064a0:	4b4f      	ldr	r3, [pc, #316]	; (80065e0 <LTDC_Init+0x15c>)
 80064a2:	2200      	movs	r2, #0
 80064a4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80064a6:	4b4e      	ldr	r3, [pc, #312]	; (80065e0 <LTDC_Init+0x15c>)
 80064a8:	2200      	movs	r2, #0
 80064aa:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80064ac:	4b4c      	ldr	r3, [pc, #304]	; (80065e0 <LTDC_Init+0x15c>)
 80064ae:	2209      	movs	r2, #9
 80064b0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80064b2:	4b4b      	ldr	r3, [pc, #300]	; (80065e0 <LTDC_Init+0x15c>)
 80064b4:	2201      	movs	r2, #1
 80064b6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80064b8:	4b49      	ldr	r3, [pc, #292]	; (80065e0 <LTDC_Init+0x15c>)
 80064ba:	221d      	movs	r2, #29
 80064bc:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80064be:	4b48      	ldr	r3, [pc, #288]	; (80065e0 <LTDC_Init+0x15c>)
 80064c0:	2203      	movs	r2, #3
 80064c2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80064c4:	4b46      	ldr	r3, [pc, #280]	; (80065e0 <LTDC_Init+0x15c>)
 80064c6:	f240 120d 	movw	r2, #269	; 0x10d
 80064ca:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80064cc:	4b44      	ldr	r3, [pc, #272]	; (80065e0 <LTDC_Init+0x15c>)
 80064ce:	f240 1243 	movw	r2, #323	; 0x143
 80064d2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80064d4:	4b42      	ldr	r3, [pc, #264]	; (80065e0 <LTDC_Init+0x15c>)
 80064d6:	f240 1217 	movw	r2, #279	; 0x117
 80064da:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80064dc:	4b40      	ldr	r3, [pc, #256]	; (80065e0 <LTDC_Init+0x15c>)
 80064de:	f240 1247 	movw	r2, #327	; 0x147
 80064e2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80064e4:	4b3e      	ldr	r3, [pc, #248]	; (80065e0 <LTDC_Init+0x15c>)
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80064ec:	4b3c      	ldr	r3, [pc, #240]	; (80065e0 <LTDC_Init+0x15c>)
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80064f4:	4b3a      	ldr	r3, [pc, #232]	; (80065e0 <LTDC_Init+0x15c>)
 80064f6:	2200      	movs	r2, #0
 80064f8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  HAL_LTDC_Init(&hltdc);
 80064fc:	4838      	ldr	r0, [pc, #224]	; (80065e0 <LTDC_Init+0x15c>)
 80064fe:	f7fc fecb 	bl	8003298 <HAL_LTDC_Init>

  //Background layer
  pLayerCfg.WindowX0 = 0;
 8006502:	2300      	movs	r3, #0
 8006504:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 240;
 8006506:	23f0      	movs	r3, #240	; 0xf0
 8006508:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800650a:	2300      	movs	r3, #0
 800650c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 320;
 800650e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8006512:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8006514:	2302      	movs	r3, #2
 8006516:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8006518:	23ff      	movs	r3, #255	; 0xff
 800651a:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800651c:	2300      	movs	r3, #0
 800651e:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8006520:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006524:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8006526:	2307      	movs	r3, #7
 8006528:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = (u32)disp.draw_buff;
 800652a:	4b2f      	ldr	r3, [pc, #188]	; (80065e8 <LTDC_Init+0x164>)
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 240;
 8006530:	23f0      	movs	r3, #240	; 0xf0
 8006532:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 320;
 8006534:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8006538:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800653a:	2300      	movs	r3, #0
 800653c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8006540:	2300      	movs	r3, #0
 8006542:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8006546:	2300      	movs	r3, #0
 8006548:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

  //Foreground layer
  pLayerCfg1.WindowX0 = 0;
 800654c:	2300      	movs	r3, #0
 800654e:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 240;
 8006550:	23f0      	movs	r3, #240	; 0xf0
 8006552:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8006554:	2300      	movs	r3, #0
 8006556:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 320;
 8006558:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800655c:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800655e:	2302      	movs	r3, #2
 8006560:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 255;
 8006562:	23ff      	movs	r3, #255	; 0xff
 8006564:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8006566:	2300      	movs	r3, #0
 8006568:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800656a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800656e:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8006570:	2307      	movs	r3, #7
 8006572:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress =(u32) disp.Rendr_buf;
 8006574:	4b1c      	ldr	r3, [pc, #112]	; (80065e8 <LTDC_Init+0x164>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 240;
 800657a:	23f0      	movs	r3, #240	; 0xf0
 800657c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 320;
 800657e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8006582:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8006584:	2300      	movs	r3, #0
 8006586:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800658a:	2300      	movs	r3, #0
 800658c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8006590:	2300      	movs	r3, #0
 8006592:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

  HAL_LTDC_ConfigColorKeying_NoReload(&hltdc, TRANSPARARENT_COLOR_RGB888 , 1);
 8006596:	2201      	movs	r2, #1
 8006598:	4914      	ldr	r1, [pc, #80]	; (80065ec <LTDC_Init+0x168>)
 800659a:	4811      	ldr	r0, [pc, #68]	; (80065e0 <LTDC_Init+0x15c>)
 800659c:	f7fc ff8a 	bl	80034b4 <HAL_LTDC_ConfigColorKeying_NoReload>
 HAL_LTDC_EnableColorKeying_NoReload(&hltdc, 1);
 80065a0:	2101      	movs	r1, #1
 80065a2:	480f      	ldr	r0, [pc, #60]	; (80065e0 <LTDC_Init+0x15c>)
 80065a4:	f7fc ffc6 	bl	8003534 <HAL_LTDC_EnableColorKeying_NoReload>

  HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0);
 80065a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80065ac:	2200      	movs	r2, #0
 80065ae:	4619      	mov	r1, r3
 80065b0:	480b      	ldr	r0, [pc, #44]	; (80065e0 <LTDC_Init+0x15c>)
 80065b2:	f7fc ff41 	bl	8003438 <HAL_LTDC_ConfigLayer>

  HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1);
 80065b6:	463b      	mov	r3, r7
 80065b8:	2201      	movs	r2, #1
 80065ba:	4619      	mov	r1, r3
 80065bc:	4808      	ldr	r0, [pc, #32]	; (80065e0 <LTDC_Init+0x15c>)
 80065be:	f7fc ff3b 	bl	8003438 <HAL_LTDC_ConfigLayer>

  __HAL_LTDC_ENABLE_IT(&hltdc, LTDC_IT_RR);
 80065c2:	4b07      	ldr	r3, [pc, #28]	; (80065e0 <LTDC_Init+0x15c>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065c8:	4b05      	ldr	r3, [pc, #20]	; (80065e0 <LTDC_Init+0x15c>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f042 0208 	orr.w	r2, r2, #8
 80065d0:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC->SRCR = LTDC_SRCR_VBR;  // reload shadow registers on vertical blank
 80065d2:	4b04      	ldr	r3, [pc, #16]	; (80065e4 <LTDC_Init+0x160>)
 80065d4:	2202      	movs	r2, #2
 80065d6:	625a      	str	r2, [r3, #36]	; 0x24

}
 80065d8:	bf00      	nop
 80065da:	3768      	adds	r7, #104	; 0x68
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	200012b0 	.word	0x200012b0
 80065e4:	40016800 	.word	0x40016800
 80065e8:	2000139c 	.word	0x2000139c
 80065ec:	0052ff73 	.word	0x0052ff73

080065f0 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a0b      	ldr	r2, [pc, #44]	; (800662c <HAL_DMA2D_MspInit+0x3c>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d10d      	bne.n	800661e <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8006602:	2300      	movs	r3, #0
 8006604:	60fb      	str	r3, [r7, #12]
 8006606:	4b0a      	ldr	r3, [pc, #40]	; (8006630 <HAL_DMA2D_MspInit+0x40>)
 8006608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800660a:	4a09      	ldr	r2, [pc, #36]	; (8006630 <HAL_DMA2D_MspInit+0x40>)
 800660c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006610:	6313      	str	r3, [r2, #48]	; 0x30
 8006612:	4b07      	ldr	r3, [pc, #28]	; (8006630 <HAL_DMA2D_MspInit+0x40>)
 8006614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006616:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800661a:	60fb      	str	r3, [r7, #12]
 800661c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800661e:	bf00      	nop
 8006620:	3714      	adds	r7, #20
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop
 800662c:	4002b000 	.word	0x4002b000
 8006630:	40023800 	.word	0x40023800

08006634 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b08e      	sub	sp, #56	; 0x38
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800663c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006640:	2200      	movs	r2, #0
 8006642:	601a      	str	r2, [r3, #0]
 8006644:	605a      	str	r2, [r3, #4]
 8006646:	609a      	str	r2, [r3, #8]
 8006648:	60da      	str	r2, [r3, #12]
 800664a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a77      	ldr	r2, [pc, #476]	; (8006830 <HAL_LTDC_MspInit+0x1fc>)
 8006652:	4293      	cmp	r3, r2
 8006654:	f040 80e8 	bne.w	8006828 <HAL_LTDC_MspInit+0x1f4>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8006658:	2300      	movs	r3, #0
 800665a:	623b      	str	r3, [r7, #32]
 800665c:	4b75      	ldr	r3, [pc, #468]	; (8006834 <HAL_LTDC_MspInit+0x200>)
 800665e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006660:	4a74      	ldr	r2, [pc, #464]	; (8006834 <HAL_LTDC_MspInit+0x200>)
 8006662:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006666:	6453      	str	r3, [r2, #68]	; 0x44
 8006668:	4b72      	ldr	r3, [pc, #456]	; (8006834 <HAL_LTDC_MspInit+0x200>)
 800666a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800666c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006670:	623b      	str	r3, [r7, #32]
 8006672:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006674:	2300      	movs	r3, #0
 8006676:	61fb      	str	r3, [r7, #28]
 8006678:	4b6e      	ldr	r3, [pc, #440]	; (8006834 <HAL_LTDC_MspInit+0x200>)
 800667a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667c:	4a6d      	ldr	r2, [pc, #436]	; (8006834 <HAL_LTDC_MspInit+0x200>)
 800667e:	f043 0320 	orr.w	r3, r3, #32
 8006682:	6313      	str	r3, [r2, #48]	; 0x30
 8006684:	4b6b      	ldr	r3, [pc, #428]	; (8006834 <HAL_LTDC_MspInit+0x200>)
 8006686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006688:	f003 0320 	and.w	r3, r3, #32
 800668c:	61fb      	str	r3, [r7, #28]
 800668e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006690:	2300      	movs	r3, #0
 8006692:	61bb      	str	r3, [r7, #24]
 8006694:	4b67      	ldr	r3, [pc, #412]	; (8006834 <HAL_LTDC_MspInit+0x200>)
 8006696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006698:	4a66      	ldr	r2, [pc, #408]	; (8006834 <HAL_LTDC_MspInit+0x200>)
 800669a:	f043 0301 	orr.w	r3, r3, #1
 800669e:	6313      	str	r3, [r2, #48]	; 0x30
 80066a0:	4b64      	ldr	r3, [pc, #400]	; (8006834 <HAL_LTDC_MspInit+0x200>)
 80066a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a4:	f003 0301 	and.w	r3, r3, #1
 80066a8:	61bb      	str	r3, [r7, #24]
 80066aa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80066ac:	2300      	movs	r3, #0
 80066ae:	617b      	str	r3, [r7, #20]
 80066b0:	4b60      	ldr	r3, [pc, #384]	; (8006834 <HAL_LTDC_MspInit+0x200>)
 80066b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b4:	4a5f      	ldr	r2, [pc, #380]	; (8006834 <HAL_LTDC_MspInit+0x200>)
 80066b6:	f043 0302 	orr.w	r3, r3, #2
 80066ba:	6313      	str	r3, [r2, #48]	; 0x30
 80066bc:	4b5d      	ldr	r3, [pc, #372]	; (8006834 <HAL_LTDC_MspInit+0x200>)
 80066be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c0:	f003 0302 	and.w	r3, r3, #2
 80066c4:	617b      	str	r3, [r7, #20]
 80066c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80066c8:	2300      	movs	r3, #0
 80066ca:	613b      	str	r3, [r7, #16]
 80066cc:	4b59      	ldr	r3, [pc, #356]	; (8006834 <HAL_LTDC_MspInit+0x200>)
 80066ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d0:	4a58      	ldr	r2, [pc, #352]	; (8006834 <HAL_LTDC_MspInit+0x200>)
 80066d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066d6:	6313      	str	r3, [r2, #48]	; 0x30
 80066d8:	4b56      	ldr	r3, [pc, #344]	; (8006834 <HAL_LTDC_MspInit+0x200>)
 80066da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e0:	613b      	str	r3, [r7, #16]
 80066e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80066e4:	2300      	movs	r3, #0
 80066e6:	60fb      	str	r3, [r7, #12]
 80066e8:	4b52      	ldr	r3, [pc, #328]	; (8006834 <HAL_LTDC_MspInit+0x200>)
 80066ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ec:	4a51      	ldr	r2, [pc, #324]	; (8006834 <HAL_LTDC_MspInit+0x200>)
 80066ee:	f043 0304 	orr.w	r3, r3, #4
 80066f2:	6313      	str	r3, [r2, #48]	; 0x30
 80066f4:	4b4f      	ldr	r3, [pc, #316]	; (8006834 <HAL_LTDC_MspInit+0x200>)
 80066f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f8:	f003 0304 	and.w	r3, r3, #4
 80066fc:	60fb      	str	r3, [r7, #12]
 80066fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006700:	2300      	movs	r3, #0
 8006702:	60bb      	str	r3, [r7, #8]
 8006704:	4b4b      	ldr	r3, [pc, #300]	; (8006834 <HAL_LTDC_MspInit+0x200>)
 8006706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006708:	4a4a      	ldr	r2, [pc, #296]	; (8006834 <HAL_LTDC_MspInit+0x200>)
 800670a:	f043 0308 	orr.w	r3, r3, #8
 800670e:	6313      	str	r3, [r2, #48]	; 0x30
 8006710:	4b48      	ldr	r3, [pc, #288]	; (8006834 <HAL_LTDC_MspInit+0x200>)
 8006712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006714:	f003 0308 	and.w	r3, r3, #8
 8006718:	60bb      	str	r3, [r7, #8]
 800671a:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800671c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006720:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006722:	2302      	movs	r3, #2
 8006724:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006726:	2300      	movs	r3, #0
 8006728:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800672a:	2300      	movs	r3, #0
 800672c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800672e:	230e      	movs	r3, #14
 8006730:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8006732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006736:	4619      	mov	r1, r3
 8006738:	483f      	ldr	r0, [pc, #252]	; (8006838 <HAL_LTDC_MspInit+0x204>)
 800673a:	f7fb fabb 	bl	8001cb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800673e:	f641 0358 	movw	r3, #6232	; 0x1858
 8006742:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006744:	2302      	movs	r3, #2
 8006746:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006748:	2300      	movs	r3, #0
 800674a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800674c:	2300      	movs	r3, #0
 800674e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006750:	230e      	movs	r3, #14
 8006752:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006758:	4619      	mov	r1, r3
 800675a:	4838      	ldr	r0, [pc, #224]	; (800683c <HAL_LTDC_MspInit+0x208>)
 800675c:	f7fb faaa 	bl	8001cb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8006760:	2303      	movs	r3, #3
 8006762:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006764:	2302      	movs	r3, #2
 8006766:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006768:	2300      	movs	r3, #0
 800676a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800676c:	2300      	movs	r3, #0
 800676e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8006770:	2309      	movs	r3, #9
 8006772:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006778:	4619      	mov	r1, r3
 800677a:	4831      	ldr	r0, [pc, #196]	; (8006840 <HAL_LTDC_MspInit+0x20c>)
 800677c:	f7fb fa9a 	bl	8001cb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8006780:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8006784:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006786:	2302      	movs	r3, #2
 8006788:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800678a:	2300      	movs	r3, #0
 800678c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800678e:	2300      	movs	r3, #0
 8006790:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006792:	230e      	movs	r3, #14
 8006794:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800679a:	4619      	mov	r1, r3
 800679c:	4828      	ldr	r0, [pc, #160]	; (8006840 <HAL_LTDC_MspInit+0x20c>)
 800679e:	f7fb fa89 	bl	8001cb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80067a2:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80067a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067a8:	2302      	movs	r3, #2
 80067aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067ac:	2300      	movs	r3, #0
 80067ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067b0:	2300      	movs	r3, #0
 80067b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80067b4:	230e      	movs	r3, #14
 80067b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80067b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067bc:	4619      	mov	r1, r3
 80067be:	4821      	ldr	r0, [pc, #132]	; (8006844 <HAL_LTDC_MspInit+0x210>)
 80067c0:	f7fb fa78 	bl	8001cb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80067c4:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80067c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067ca:	2302      	movs	r3, #2
 80067cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067ce:	2300      	movs	r3, #0
 80067d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067d2:	2300      	movs	r3, #0
 80067d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80067d6:	230e      	movs	r3, #14
 80067d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80067da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067de:	4619      	mov	r1, r3
 80067e0:	4819      	ldr	r0, [pc, #100]	; (8006848 <HAL_LTDC_MspInit+0x214>)
 80067e2:	f7fb fa67 	bl	8001cb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80067e6:	2348      	movs	r3, #72	; 0x48
 80067e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067ea:	2302      	movs	r3, #2
 80067ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067ee:	2300      	movs	r3, #0
 80067f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067f2:	2300      	movs	r3, #0
 80067f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80067f6:	230e      	movs	r3, #14
 80067f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80067fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067fe:	4619      	mov	r1, r3
 8006800:	4812      	ldr	r0, [pc, #72]	; (800684c <HAL_LTDC_MspInit+0x218>)
 8006802:	f7fb fa57 	bl	8001cb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8006806:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800680a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800680c:	2302      	movs	r3, #2
 800680e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006810:	2300      	movs	r3, #0
 8006812:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006814:	2300      	movs	r3, #0
 8006816:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8006818:	2309      	movs	r3, #9
 800681a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800681c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006820:	4619      	mov	r1, r3
 8006822:	4808      	ldr	r0, [pc, #32]	; (8006844 <HAL_LTDC_MspInit+0x210>)
 8006824:	f7fb fa46 	bl	8001cb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8006828:	bf00      	nop
 800682a:	3738      	adds	r7, #56	; 0x38
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	40016800 	.word	0x40016800
 8006834:	40023800 	.word	0x40023800
 8006838:	40021400 	.word	0x40021400
 800683c:	40020000 	.word	0x40020000
 8006840:	40020400 	.word	0x40020400
 8006844:	40021800 	.word	0x40021800
 8006848:	40020800 	.word	0x40020800
 800684c:	40020c00 	.word	0x40020c00

08006850 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8006854:	f000 fc16 	bl	8007084 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8006858:	20ca      	movs	r0, #202	; 0xca
 800685a:	f000 f943 	bl	8006ae4 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 800685e:	20c3      	movs	r0, #195	; 0xc3
 8006860:	f000 f94d 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8006864:	2008      	movs	r0, #8
 8006866:	f000 f94a 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x50);
 800686a:	2050      	movs	r0, #80	; 0x50
 800686c:	f000 f947 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8006870:	20cf      	movs	r0, #207	; 0xcf
 8006872:	f000 f937 	bl	8006ae4 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8006876:	2000      	movs	r0, #0
 8006878:	f000 f941 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 800687c:	20c1      	movs	r0, #193	; 0xc1
 800687e:	f000 f93e 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8006882:	2030      	movs	r0, #48	; 0x30
 8006884:	f000 f93b 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8006888:	20ed      	movs	r0, #237	; 0xed
 800688a:	f000 f92b 	bl	8006ae4 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 800688e:	2064      	movs	r0, #100	; 0x64
 8006890:	f000 f935 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8006894:	2003      	movs	r0, #3
 8006896:	f000 f932 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x12);
 800689a:	2012      	movs	r0, #18
 800689c:	f000 f92f 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80068a0:	2081      	movs	r0, #129	; 0x81
 80068a2:	f000 f92c 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80068a6:	20e8      	movs	r0, #232	; 0xe8
 80068a8:	f000 f91c 	bl	8006ae4 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80068ac:	2085      	movs	r0, #133	; 0x85
 80068ae:	f000 f926 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80068b2:	2000      	movs	r0, #0
 80068b4:	f000 f923 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80068b8:	2078      	movs	r0, #120	; 0x78
 80068ba:	f000 f920 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80068be:	20cb      	movs	r0, #203	; 0xcb
 80068c0:	f000 f910 	bl	8006ae4 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80068c4:	2039      	movs	r0, #57	; 0x39
 80068c6:	f000 f91a 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80068ca:	202c      	movs	r0, #44	; 0x2c
 80068cc:	f000 f917 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80068d0:	2000      	movs	r0, #0
 80068d2:	f000 f914 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x34);
 80068d6:	2034      	movs	r0, #52	; 0x34
 80068d8:	f000 f911 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x02);
 80068dc:	2002      	movs	r0, #2
 80068de:	f000 f90e 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 80068e2:	20f7      	movs	r0, #247	; 0xf7
 80068e4:	f000 f8fe 	bl	8006ae4 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 80068e8:	2020      	movs	r0, #32
 80068ea:	f000 f908 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80068ee:	20ea      	movs	r0, #234	; 0xea
 80068f0:	f000 f8f8 	bl	8006ae4 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80068f4:	2000      	movs	r0, #0
 80068f6:	f000 f902 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80068fa:	2000      	movs	r0, #0
 80068fc:	f000 f8ff 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8006900:	20b1      	movs	r0, #177	; 0xb1
 8006902:	f000 f8ef 	bl	8006ae4 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8006906:	2000      	movs	r0, #0
 8006908:	f000 f8f9 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800690c:	201b      	movs	r0, #27
 800690e:	f000 f8f6 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8006912:	20b6      	movs	r0, #182	; 0xb6
 8006914:	f000 f8e6 	bl	8006ae4 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8006918:	200a      	movs	r0, #10
 800691a:	f000 f8f0 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 800691e:	20a2      	movs	r0, #162	; 0xa2
 8006920:	f000 f8ed 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8006924:	20c0      	movs	r0, #192	; 0xc0
 8006926:	f000 f8dd 	bl	8006ae4 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800692a:	2010      	movs	r0, #16
 800692c:	f000 f8e7 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8006930:	20c1      	movs	r0, #193	; 0xc1
 8006932:	f000 f8d7 	bl	8006ae4 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8006936:	2010      	movs	r0, #16
 8006938:	f000 f8e1 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 800693c:	20c5      	movs	r0, #197	; 0xc5
 800693e:	f000 f8d1 	bl	8006ae4 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8006942:	2045      	movs	r0, #69	; 0x45
 8006944:	f000 f8db 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8006948:	2015      	movs	r0, #21
 800694a:	f000 f8d8 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 800694e:	20c7      	movs	r0, #199	; 0xc7
 8006950:	f000 f8c8 	bl	8006ae4 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8006954:	2090      	movs	r0, #144	; 0x90
 8006956:	f000 f8d2 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 800695a:	2036      	movs	r0, #54	; 0x36
 800695c:	f000 f8c2 	bl	8006ae4 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8006960:	20c8      	movs	r0, #200	; 0xc8
 8006962:	f000 f8cc 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8006966:	20f2      	movs	r0, #242	; 0xf2
 8006968:	f000 f8bc 	bl	8006ae4 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800696c:	2000      	movs	r0, #0
 800696e:	f000 f8c6 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8006972:	20b0      	movs	r0, #176	; 0xb0
 8006974:	f000 f8b6 	bl	8006ae4 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8006978:	20c2      	movs	r0, #194	; 0xc2
 800697a:	f000 f8c0 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 800697e:	20b6      	movs	r0, #182	; 0xb6
 8006980:	f000 f8b0 	bl	8006ae4 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8006984:	200a      	movs	r0, #10
 8006986:	f000 f8ba 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 800698a:	20a7      	movs	r0, #167	; 0xa7
 800698c:	f000 f8b7 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8006990:	2027      	movs	r0, #39	; 0x27
 8006992:	f000 f8b4 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8006996:	2004      	movs	r0, #4
 8006998:	f000 f8b1 	bl	8006afe <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 800699c:	202a      	movs	r0, #42	; 0x2a
 800699e:	f000 f8a1 	bl	8006ae4 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80069a2:	2000      	movs	r0, #0
 80069a4:	f000 f8ab 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80069a8:	2000      	movs	r0, #0
 80069aa:	f000 f8a8 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80069ae:	2000      	movs	r0, #0
 80069b0:	f000 f8a5 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80069b4:	20ef      	movs	r0, #239	; 0xef
 80069b6:	f000 f8a2 	bl	8006afe <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80069ba:	202b      	movs	r0, #43	; 0x2b
 80069bc:	f000 f892 	bl	8006ae4 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80069c0:	2000      	movs	r0, #0
 80069c2:	f000 f89c 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80069c6:	2000      	movs	r0, #0
 80069c8:	f000 f899 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x01);
 80069cc:	2001      	movs	r0, #1
 80069ce:	f000 f896 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 80069d2:	203f      	movs	r0, #63	; 0x3f
 80069d4:	f000 f893 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 80069d8:	20f6      	movs	r0, #246	; 0xf6
 80069da:	f000 f883 	bl	8006ae4 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80069de:	2001      	movs	r0, #1
 80069e0:	f000 f88d 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80069e4:	2000      	movs	r0, #0
 80069e6:	f000 f88a 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x06);
 80069ea:	2006      	movs	r0, #6
 80069ec:	f000 f887 	bl	8006afe <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 80069f0:	202c      	movs	r0, #44	; 0x2c
 80069f2:	f000 f877 	bl	8006ae4 <ili9341_WriteReg>
  LCD_Delay(200);
 80069f6:	20c8      	movs	r0, #200	; 0xc8
 80069f8:	f000 fc00 	bl	80071fc <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80069fc:	2026      	movs	r0, #38	; 0x26
 80069fe:	f000 f871 	bl	8006ae4 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8006a02:	2001      	movs	r0, #1
 8006a04:	f000 f87b 	bl	8006afe <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8006a08:	20e0      	movs	r0, #224	; 0xe0
 8006a0a:	f000 f86b 	bl	8006ae4 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8006a0e:	200f      	movs	r0, #15
 8006a10:	f000 f875 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8006a14:	2029      	movs	r0, #41	; 0x29
 8006a16:	f000 f872 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8006a1a:	2024      	movs	r0, #36	; 0x24
 8006a1c:	f000 f86f 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8006a20:	200c      	movs	r0, #12
 8006a22:	f000 f86c 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8006a26:	200e      	movs	r0, #14
 8006a28:	f000 f869 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8006a2c:	2009      	movs	r0, #9
 8006a2e:	f000 f866 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8006a32:	204e      	movs	r0, #78	; 0x4e
 8006a34:	f000 f863 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8006a38:	2078      	movs	r0, #120	; 0x78
 8006a3a:	f000 f860 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8006a3e:	203c      	movs	r0, #60	; 0x3c
 8006a40:	f000 f85d 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8006a44:	2009      	movs	r0, #9
 8006a46:	f000 f85a 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8006a4a:	2013      	movs	r0, #19
 8006a4c:	f000 f857 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8006a50:	2005      	movs	r0, #5
 8006a52:	f000 f854 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8006a56:	2017      	movs	r0, #23
 8006a58:	f000 f851 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8006a5c:	2011      	movs	r0, #17
 8006a5e:	f000 f84e 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8006a62:	2000      	movs	r0, #0
 8006a64:	f000 f84b 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8006a68:	20e1      	movs	r0, #225	; 0xe1
 8006a6a:	f000 f83b 	bl	8006ae4 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8006a6e:	2000      	movs	r0, #0
 8006a70:	f000 f845 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8006a74:	2016      	movs	r0, #22
 8006a76:	f000 f842 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8006a7a:	201b      	movs	r0, #27
 8006a7c:	f000 f83f 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8006a80:	2004      	movs	r0, #4
 8006a82:	f000 f83c 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8006a86:	2011      	movs	r0, #17
 8006a88:	f000 f839 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8006a8c:	2007      	movs	r0, #7
 8006a8e:	f000 f836 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8006a92:	2031      	movs	r0, #49	; 0x31
 8006a94:	f000 f833 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8006a98:	2033      	movs	r0, #51	; 0x33
 8006a9a:	f000 f830 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8006a9e:	2042      	movs	r0, #66	; 0x42
 8006aa0:	f000 f82d 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8006aa4:	2005      	movs	r0, #5
 8006aa6:	f000 f82a 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8006aaa:	200c      	movs	r0, #12
 8006aac:	f000 f827 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8006ab0:	200a      	movs	r0, #10
 8006ab2:	f000 f824 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8006ab6:	2028      	movs	r0, #40	; 0x28
 8006ab8:	f000 f821 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8006abc:	202f      	movs	r0, #47	; 0x2f
 8006abe:	f000 f81e 	bl	8006afe <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8006ac2:	200f      	movs	r0, #15
 8006ac4:	f000 f81b 	bl	8006afe <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8006ac8:	2011      	movs	r0, #17
 8006aca:	f000 f80b 	bl	8006ae4 <ili9341_WriteReg>
  LCD_Delay(200);
 8006ace:	20c8      	movs	r0, #200	; 0xc8
 8006ad0:	f000 fb94 	bl	80071fc <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8006ad4:	2029      	movs	r0, #41	; 0x29
 8006ad6:	f000 f805 	bl	8006ae4 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8006ada:	202c      	movs	r0, #44	; 0x2c
 8006adc:	f000 f802 	bl	8006ae4 <ili9341_WriteReg>
}
 8006ae0:	bf00      	nop
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	4603      	mov	r3, r0
 8006aec:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8006aee:	79fb      	ldrb	r3, [r7, #7]
 8006af0:	4618      	mov	r0, r3
 8006af2:	f000 fb61 	bl	80071b8 <LCD_IO_WriteReg>
}
 8006af6:	bf00      	nop
 8006af8:	3708      	adds	r7, #8
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}

08006afe <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b082      	sub	sp, #8
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	4603      	mov	r3, r0
 8006b06:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8006b08:	88fb      	ldrh	r3, [r7, #6]
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f000 fb32 	bl	8007174 <LCD_IO_WriteData>
}
 8006b10:	bf00      	nop
 8006b12:	3708      	adds	r7, #8
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <MCU_Init>:
*  Configures specific hardware.
*
**/
/******************************************************************************/
void MCU_Init( void )
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	  HAL_Init();
 8006b1c:	f7f9 ffd2 	bl	8000ac4 <HAL_Init>
	  MX_GPIO_Init();
 8006b20:	f000 f8d8 	bl	8006cd4 <MX_GPIO_Init>

	/* Configure the system clock */
	  SystemClock_Config();
 8006b24:	f000 f806 	bl	8006b34 <SystemClock_Config>
	  MX_USART1_UART_Init();
 8006b28:	f000 f874 	bl	8006c14 <MX_USART1_UART_Init>
	  MX_SPI4_Init();
 8006b2c:	f000 f89c 	bl	8006c68 <MX_SPI4_Init>
}
 8006b30:	bf00      	nop
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <SystemClock_Config>:


#if 1  // 180 Mhz

static void SystemClock_Config(void)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b094      	sub	sp, #80	; 0x50
 8006b38:	af00      	add	r7, sp, #0

   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006b3a:	f107 0320 	add.w	r3, r7, #32
 8006b3e:	2230      	movs	r2, #48	; 0x30
 8006b40:	2100      	movs	r1, #0
 8006b42:	4618      	mov	r0, r3
 8006b44:	f005 f956 	bl	800bdf4 <memset>
   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006b48:	f107 030c 	add.w	r3, r7, #12
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	601a      	str	r2, [r3, #0]
 8006b50:	605a      	str	r2, [r3, #4]
 8006b52:	609a      	str	r2, [r3, #8]
 8006b54:	60da      	str	r2, [r3, #12]
 8006b56:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
    */
    __HAL_RCC_PWR_CLK_ENABLE();
 8006b58:	2300      	movs	r3, #0
 8006b5a:	60bb      	str	r3, [r7, #8]
 8006b5c:	4b2b      	ldr	r3, [pc, #172]	; (8006c0c <SystemClock_Config+0xd8>)
 8006b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b60:	4a2a      	ldr	r2, [pc, #168]	; (8006c0c <SystemClock_Config+0xd8>)
 8006b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b66:	6413      	str	r3, [r2, #64]	; 0x40
 8006b68:	4b28      	ldr	r3, [pc, #160]	; (8006c0c <SystemClock_Config+0xd8>)
 8006b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b70:	60bb      	str	r3, [r7, #8]
 8006b72:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006b74:	2300      	movs	r3, #0
 8006b76:	607b      	str	r3, [r7, #4]
 8006b78:	4b25      	ldr	r3, [pc, #148]	; (8006c10 <SystemClock_Config+0xdc>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a24      	ldr	r2, [pc, #144]	; (8006c10 <SystemClock_Config+0xdc>)
 8006b7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b82:	6013      	str	r3, [r2, #0]
 8006b84:	4b22      	ldr	r3, [pc, #136]	; (8006c10 <SystemClock_Config+0xdc>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006b8c:	607b      	str	r3, [r7, #4]
 8006b8e:	687b      	ldr	r3, [r7, #4]
    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006b90:	2301      	movs	r3, #1
 8006b92:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006b94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006b98:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006b9a:	2302      	movs	r3, #2
 8006b9c:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006b9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 4;
 8006ba4:	2304      	movs	r3, #4
 8006ba6:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 180;
 8006ba8:	23b4      	movs	r3, #180	; 0xb4
 8006baa:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006bac:	2302      	movs	r3, #2
 8006bae:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 3;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006bb4:	f107 0320 	add.w	r3, r7, #32
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f7fc fed7 	bl	800396c <HAL_RCC_OscConfig>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d001      	beq.n	8006bc8 <SystemClock_Config+0x94>
    {
      Error_Handler();
 8006bc4:	f000 f8b2 	bl	8006d2c <Error_Handler>
    }
    /** Activate the Over-Drive mode
    */
    if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8006bc8:	f7fc fe80 	bl	80038cc <HAL_PWREx_EnableOverDrive>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d001      	beq.n	8006bd6 <SystemClock_Config+0xa2>
    {
      Error_Handler();
 8006bd2:	f000 f8ab 	bl	8006d2c <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006bd6:	230f      	movs	r3, #15
 8006bd8:	60fb      	str	r3, [r7, #12]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006bda:	2302      	movs	r3, #2
 8006bdc:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006bde:	2300      	movs	r3, #0
 8006be0:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006be2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006be6:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006be8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006bec:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006bee:	f107 030c 	add.w	r3, r7, #12
 8006bf2:	2105      	movs	r1, #5
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f7fd f927 	bl	8003e48 <HAL_RCC_ClockConfig>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d001      	beq.n	8006c04 <SystemClock_Config+0xd0>
    {
      Error_Handler();
 8006c00:	f000 f894 	bl	8006d2c <Error_Handler>
    }


}
 8006c04:	bf00      	nop
 8006c06:	3750      	adds	r7, #80	; 0x50
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	40023800 	.word	0x40023800
 8006c10:	40007000 	.word	0x40007000

08006c14 <MX_USART1_UART_Init>:
#endif


void MX_USART1_UART_Init(void)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8006c18:	4b11      	ldr	r3, [pc, #68]	; (8006c60 <MX_USART1_UART_Init+0x4c>)
 8006c1a:	4a12      	ldr	r2, [pc, #72]	; (8006c64 <MX_USART1_UART_Init+0x50>)
 8006c1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006c1e:	4b10      	ldr	r3, [pc, #64]	; (8006c60 <MX_USART1_UART_Init+0x4c>)
 8006c20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006c24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006c26:	4b0e      	ldr	r3, [pc, #56]	; (8006c60 <MX_USART1_UART_Init+0x4c>)
 8006c28:	2200      	movs	r2, #0
 8006c2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006c2c:	4b0c      	ldr	r3, [pc, #48]	; (8006c60 <MX_USART1_UART_Init+0x4c>)
 8006c2e:	2200      	movs	r2, #0
 8006c30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006c32:	4b0b      	ldr	r3, [pc, #44]	; (8006c60 <MX_USART1_UART_Init+0x4c>)
 8006c34:	2200      	movs	r2, #0
 8006c36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006c38:	4b09      	ldr	r3, [pc, #36]	; (8006c60 <MX_USART1_UART_Init+0x4c>)
 8006c3a:	220c      	movs	r2, #12
 8006c3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006c3e:	4b08      	ldr	r3, [pc, #32]	; (8006c60 <MX_USART1_UART_Init+0x4c>)
 8006c40:	2200      	movs	r2, #0
 8006c42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006c44:	4b06      	ldr	r3, [pc, #24]	; (8006c60 <MX_USART1_UART_Init+0x4c>)
 8006c46:	2200      	movs	r2, #0
 8006c48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006c4a:	4805      	ldr	r0, [pc, #20]	; (8006c60 <MX_USART1_UART_Init+0x4c>)
 8006c4c:	f7fe fa7a 	bl	8005144 <HAL_UART_Init>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d001      	beq.n	8006c5a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8006c56:	f000 f869 	bl	8006d2c <Error_Handler>
  }
}
 8006c5a:	bf00      	nop
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	200013ac 	.word	0x200013ac
 8006c64:	40011000 	.word	0x40011000

08006c68 <MX_SPI4_Init>:
void MX_UART_DeInit(void)
{
	HAL_UART_MspDeInit(&huart1) ;
}
static void MX_SPI4_Init(void)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	af00      	add	r7, sp, #0
  hspi4.Instance = SPI4;
 8006c6c:	4b17      	ldr	r3, [pc, #92]	; (8006ccc <MX_SPI4_Init+0x64>)
 8006c6e:	4a18      	ldr	r2, [pc, #96]	; (8006cd0 <MX_SPI4_Init+0x68>)
 8006c70:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8006c72:	4b16      	ldr	r3, [pc, #88]	; (8006ccc <MX_SPI4_Init+0x64>)
 8006c74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006c78:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8006c7a:	4b14      	ldr	r3, [pc, #80]	; (8006ccc <MX_SPI4_Init+0x64>)
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8006c80:	4b12      	ldr	r3, [pc, #72]	; (8006ccc <MX_SPI4_Init+0x64>)
 8006c82:	2200      	movs	r2, #0
 8006c84:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c86:	4b11      	ldr	r3, [pc, #68]	; (8006ccc <MX_SPI4_Init+0x64>)
 8006c88:	2200      	movs	r2, #0
 8006c8a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006c8c:	4b0f      	ldr	r3, [pc, #60]	; (8006ccc <MX_SPI4_Init+0x64>)
 8006c8e:	2200      	movs	r2, #0
 8006c90:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8006c92:	4b0e      	ldr	r3, [pc, #56]	; (8006ccc <MX_SPI4_Init+0x64>)
 8006c94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c98:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;  // SPI baud rate should be less than 12Mbps
 8006c9a:	4b0c      	ldr	r3, [pc, #48]	; (8006ccc <MX_SPI4_Init+0x64>)
 8006c9c:	2210      	movs	r2, #16
 8006c9e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006ca0:	4b0a      	ldr	r3, [pc, #40]	; (8006ccc <MX_SPI4_Init+0x64>)
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8006ca6:	4b09      	ldr	r3, [pc, #36]	; (8006ccc <MX_SPI4_Init+0x64>)
 8006ca8:	2200      	movs	r2, #0
 8006caa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006cac:	4b07      	ldr	r3, [pc, #28]	; (8006ccc <MX_SPI4_Init+0x64>)
 8006cae:	2200      	movs	r2, #0
 8006cb0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8006cb2:	4b06      	ldr	r3, [pc, #24]	; (8006ccc <MX_SPI4_Init+0x64>)
 8006cb4:	220a      	movs	r2, #10
 8006cb6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8006cb8:	4804      	ldr	r0, [pc, #16]	; (8006ccc <MX_SPI4_Init+0x64>)
 8006cba:	f7fd fe26 	bl	800490a <HAL_SPI_Init>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d001      	beq.n	8006cc8 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8006cc4:	f000 f832 	bl	8006d2c <Error_Handler>
  }
}
 8006cc8:	bf00      	nop
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	200013ec 	.word	0x200013ec
 8006cd0:	40013400 	.word	0x40013400

08006cd4 <MX_GPIO_Init>:
  }

}

static void MX_GPIO_Init(void)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b086      	sub	sp, #24
 8006cd8:	af00      	add	r7, sp, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH   ;

	HAL_GPIO_Init(LED3_GPIO_PORT, &GPIO_InitStruct);
#endif

	__HAL_RCC_GPIOE_CLK_ENABLE();
 8006cda:	2300      	movs	r3, #0
 8006cdc:	603b      	str	r3, [r7, #0]
 8006cde:	4b11      	ldr	r3, [pc, #68]	; (8006d24 <MX_GPIO_Init+0x50>)
 8006ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce2:	4a10      	ldr	r2, [pc, #64]	; (8006d24 <MX_GPIO_Init+0x50>)
 8006ce4:	f043 0310 	orr.w	r3, r3, #16
 8006ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8006cea:	4b0e      	ldr	r3, [pc, #56]	; (8006d24 <MX_GPIO_Init+0x50>)
 8006cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cee:	f003 0310 	and.w	r3, r3, #16
 8006cf2:	603b      	str	r3, [r7, #0]
 8006cf4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	2108      	movs	r1, #8
 8006cfa:	480b      	ldr	r0, [pc, #44]	; (8006d28 <MX_GPIO_Init+0x54>)
 8006cfc:	f7fb faaa 	bl	8002254 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PE3 */
	  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006d00:	2308      	movs	r3, #8
 8006d02:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d04:	2301      	movs	r3, #1
 8006d06:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006d10:	1d3b      	adds	r3, r7, #4
 8006d12:	4619      	mov	r1, r3
 8006d14:	4804      	ldr	r0, [pc, #16]	; (8006d28 <MX_GPIO_Init+0x54>)
 8006d16:	f7fa ffcd 	bl	8001cb4 <HAL_GPIO_Init>
}
 8006d1a:	bf00      	nop
 8006d1c:	3718      	adds	r7, #24
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	40023800 	.word	0x40023800
 8006d28:	40021000 	.word	0x40021000

08006d2c <Error_Handler>:

void Error_Handler(void)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	while(1)
 8006d30:	e7fe      	b.n	8006d30 <Error_Handler+0x4>
	...

08006d34 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b08a      	sub	sp, #40	; 0x28
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a33      	ldr	r2, [pc, #204]	; (8006e10 <I2Cx_MspInit+0xdc>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d15f      	bne.n	8006e06 <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8006d46:	2300      	movs	r3, #0
 8006d48:	613b      	str	r3, [r7, #16]
 8006d4a:	4b32      	ldr	r3, [pc, #200]	; (8006e14 <I2Cx_MspInit+0xe0>)
 8006d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4e:	4a31      	ldr	r2, [pc, #196]	; (8006e14 <I2Cx_MspInit+0xe0>)
 8006d50:	f043 0304 	orr.w	r3, r3, #4
 8006d54:	6313      	str	r3, [r2, #48]	; 0x30
 8006d56:	4b2f      	ldr	r3, [pc, #188]	; (8006e14 <I2Cx_MspInit+0xe0>)
 8006d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d5a:	f003 0304 	and.w	r3, r3, #4
 8006d5e:	613b      	str	r3, [r7, #16]
 8006d60:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8006d62:	2300      	movs	r3, #0
 8006d64:	60fb      	str	r3, [r7, #12]
 8006d66:	4b2b      	ldr	r3, [pc, #172]	; (8006e14 <I2Cx_MspInit+0xe0>)
 8006d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d6a:	4a2a      	ldr	r2, [pc, #168]	; (8006e14 <I2Cx_MspInit+0xe0>)
 8006d6c:	f043 0301 	orr.w	r3, r3, #1
 8006d70:	6313      	str	r3, [r2, #48]	; 0x30
 8006d72:	4b28      	ldr	r3, [pc, #160]	; (8006e14 <I2Cx_MspInit+0xe0>)
 8006d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d76:	f003 0301 	and.w	r3, r3, #1
 8006d7a:	60fb      	str	r3, [r7, #12]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8006d7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8006d84:	2312      	movs	r3, #18
 8006d86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8006d8c:	2302      	movs	r3, #2
 8006d8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8006d90:	2304      	movs	r3, #4
 8006d92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8006d94:	f107 0314 	add.w	r3, r7, #20
 8006d98:	4619      	mov	r1, r3
 8006d9a:	481f      	ldr	r0, [pc, #124]	; (8006e18 <I2Cx_MspInit+0xe4>)
 8006d9c:	f7fa ff8a 	bl	8001cb4 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8006da0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006da4:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8006da6:	f107 0314 	add.w	r3, r7, #20
 8006daa:	4619      	mov	r1, r3
 8006dac:	481b      	ldr	r0, [pc, #108]	; (8006e1c <I2Cx_MspInit+0xe8>)
 8006dae:	f7fa ff81 	bl	8001cb4 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8006db2:	2300      	movs	r3, #0
 8006db4:	60bb      	str	r3, [r7, #8]
 8006db6:	4b17      	ldr	r3, [pc, #92]	; (8006e14 <I2Cx_MspInit+0xe0>)
 8006db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dba:	4a16      	ldr	r2, [pc, #88]	; (8006e14 <I2Cx_MspInit+0xe0>)
 8006dbc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8006dc2:	4b14      	ldr	r3, [pc, #80]	; (8006e14 <I2Cx_MspInit+0xe0>)
 8006dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006dca:	60bb      	str	r3, [r7, #8]
 8006dcc:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 8006dce:	4b11      	ldr	r3, [pc, #68]	; (8006e14 <I2Cx_MspInit+0xe0>)
 8006dd0:	6a1b      	ldr	r3, [r3, #32]
 8006dd2:	4a10      	ldr	r2, [pc, #64]	; (8006e14 <I2Cx_MspInit+0xe0>)
 8006dd4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006dd8:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 8006dda:	4b0e      	ldr	r3, [pc, #56]	; (8006e14 <I2Cx_MspInit+0xe0>)
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	4a0d      	ldr	r2, [pc, #52]	; (8006e14 <I2Cx_MspInit+0xe0>)
 8006de0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006de4:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8006de6:	2200      	movs	r2, #0
 8006de8:	210f      	movs	r1, #15
 8006dea:	2048      	movs	r0, #72	; 0x48
 8006dec:	f7f9 ffdb 	bl	8000da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8006df0:	2048      	movs	r0, #72	; 0x48
 8006df2:	f7f9 fff4 	bl	8000dde <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8006df6:	2200      	movs	r2, #0
 8006df8:	210f      	movs	r1, #15
 8006dfa:	2049      	movs	r0, #73	; 0x49
 8006dfc:	f7f9 ffd3 	bl	8000da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 8006e00:	2049      	movs	r0, #73	; 0x49
 8006e02:	f7f9 ffec 	bl	8000dde <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 8006e06:	bf00      	nop
 8006e08:	3728      	adds	r7, #40	; 0x28
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	40005c00 	.word	0x40005c00
 8006e14:	40023800 	.word	0x40023800
 8006e18:	40020000 	.word	0x40020000
 8006e1c:	40020800 	.word	0x40020800

08006e20 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8006e24:	4814      	ldr	r0, [pc, #80]	; (8006e78 <I2Cx_Init+0x58>)
 8006e26:	f7fb fecd 	bl	8002bc4 <HAL_I2C_GetState>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d121      	bne.n	8006e74 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8006e30:	4b11      	ldr	r3, [pc, #68]	; (8006e78 <I2Cx_Init+0x58>)
 8006e32:	4a12      	ldr	r2, [pc, #72]	; (8006e7c <I2Cx_Init+0x5c>)
 8006e34:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8006e36:	4b10      	ldr	r3, [pc, #64]	; (8006e78 <I2Cx_Init+0x58>)
 8006e38:	4a11      	ldr	r2, [pc, #68]	; (8006e80 <I2Cx_Init+0x60>)
 8006e3a:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8006e3c:	4b0e      	ldr	r3, [pc, #56]	; (8006e78 <I2Cx_Init+0x58>)
 8006e3e:	2200      	movs	r2, #0
 8006e40:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 8006e42:	4b0d      	ldr	r3, [pc, #52]	; (8006e78 <I2Cx_Init+0x58>)
 8006e44:	2200      	movs	r2, #0
 8006e46:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8006e48:	4b0b      	ldr	r3, [pc, #44]	; (8006e78 <I2Cx_Init+0x58>)
 8006e4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006e4e:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8006e50:	4b09      	ldr	r3, [pc, #36]	; (8006e78 <I2Cx_Init+0x58>)
 8006e52:	2200      	movs	r2, #0
 8006e54:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 8006e56:	4b08      	ldr	r3, [pc, #32]	; (8006e78 <I2Cx_Init+0x58>)
 8006e58:	2200      	movs	r2, #0
 8006e5a:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8006e5c:	4b06      	ldr	r3, [pc, #24]	; (8006e78 <I2Cx_Init+0x58>)
 8006e5e:	2200      	movs	r2, #0
 8006e60:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8006e62:	4b05      	ldr	r3, [pc, #20]	; (8006e78 <I2Cx_Init+0x58>)
 8006e64:	2200      	movs	r2, #0
 8006e66:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8006e68:	4803      	ldr	r0, [pc, #12]	; (8006e78 <I2Cx_Init+0x58>)
 8006e6a:	f7ff ff63 	bl	8006d34 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8006e6e:	4802      	ldr	r0, [pc, #8]	; (8006e78 <I2Cx_Init+0x58>)
 8006e70:	f7fb fa0a 	bl	8002288 <HAL_I2C_Init>
  }
}
 8006e74:	bf00      	nop
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	20001444 	.word	0x20001444
 8006e7c:	40005c00 	.word	0x40005c00
 8006e80:	000186a0 	.word	0x000186a0

08006e84 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b088      	sub	sp, #32
 8006e88:	af04      	add	r7, sp, #16
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	71fb      	strb	r3, [r7, #7]
 8006e8e:	460b      	mov	r3, r1
 8006e90:	71bb      	strb	r3, [r7, #6]
 8006e92:	4613      	mov	r3, r2
 8006e94:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8006e96:	2300      	movs	r3, #0
 8006e98:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8006e9a:	79fb      	ldrb	r3, [r7, #7]
 8006e9c:	b299      	uxth	r1, r3
 8006e9e:	79bb      	ldrb	r3, [r7, #6]
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	4b0b      	ldr	r3, [pc, #44]	; (8006ed0 <I2Cx_WriteData+0x4c>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	9302      	str	r3, [sp, #8]
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	9301      	str	r3, [sp, #4]
 8006eac:	1d7b      	adds	r3, r7, #5
 8006eae:	9300      	str	r3, [sp, #0]
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	4808      	ldr	r0, [pc, #32]	; (8006ed4 <I2Cx_WriteData+0x50>)
 8006eb4:	f7fb fb66 	bl	8002584 <HAL_I2C_Mem_Write>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8006ebc:	7bfb      	ldrb	r3, [r7, #15]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d001      	beq.n	8006ec6 <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8006ec2:	f000 f835 	bl	8006f30 <I2Cx_Error>
  }        
}
 8006ec6:	bf00      	nop
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	20000028 	.word	0x20000028
 8006ed4:	20001444 	.word	0x20001444

08006ed8 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b088      	sub	sp, #32
 8006edc:	af04      	add	r7, sp, #16
 8006ede:	4603      	mov	r3, r0
 8006ee0:	460a      	mov	r2, r1
 8006ee2:	71fb      	strb	r3, [r7, #7]
 8006ee4:	4613      	mov	r3, r2
 8006ee6:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8006eec:	2300      	movs	r3, #0
 8006eee:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8006ef0:	79fb      	ldrb	r3, [r7, #7]
 8006ef2:	b299      	uxth	r1, r3
 8006ef4:	79bb      	ldrb	r3, [r7, #6]
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	4b0b      	ldr	r3, [pc, #44]	; (8006f28 <I2Cx_ReadData+0x50>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	9302      	str	r3, [sp, #8]
 8006efe:	2301      	movs	r3, #1
 8006f00:	9301      	str	r3, [sp, #4]
 8006f02:	f107 030e 	add.w	r3, r7, #14
 8006f06:	9300      	str	r3, [sp, #0]
 8006f08:	2301      	movs	r3, #1
 8006f0a:	4808      	ldr	r0, [pc, #32]	; (8006f2c <I2Cx_ReadData+0x54>)
 8006f0c:	f7fb fc34 	bl	8002778 <HAL_I2C_Mem_Read>
 8006f10:	4603      	mov	r3, r0
 8006f12:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8006f14:	7bfb      	ldrb	r3, [r7, #15]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d001      	beq.n	8006f1e <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8006f1a:	f000 f809 	bl	8006f30 <I2Cx_Error>
  
  }
  return value;
 8006f1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3710      	adds	r7, #16
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	20000028 	.word	0x20000028
 8006f2c:	20001444 	.word	0x20001444

08006f30 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8006f34:	4803      	ldr	r0, [pc, #12]	; (8006f44 <I2Cx_Error+0x14>)
 8006f36:	f7fb faeb 	bl	8002510 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 8006f3a:	f7ff ff71 	bl	8006e20 <I2Cx_Init>
}
 8006f3e:	bf00      	nop
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	20001444 	.word	0x20001444

08006f48 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8006f4c:	4819      	ldr	r0, [pc, #100]	; (8006fb4 <SPIx_Init+0x6c>)
 8006f4e:	f7fe f83e 	bl	8004fce <HAL_SPI_GetState>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d12b      	bne.n	8006fb0 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8006f58:	4b16      	ldr	r3, [pc, #88]	; (8006fb4 <SPIx_Init+0x6c>)
 8006f5a:	4a17      	ldr	r2, [pc, #92]	; (8006fb8 <SPIx_Init+0x70>)
 8006f5c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8006f5e:	4b15      	ldr	r3, [pc, #84]	; (8006fb4 <SPIx_Init+0x6c>)
 8006f60:	2218      	movs	r2, #24
 8006f62:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8006f64:	4b13      	ldr	r3, [pc, #76]	; (8006fb4 <SPIx_Init+0x6c>)
 8006f66:	2200      	movs	r2, #0
 8006f68:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8006f6a:	4b12      	ldr	r3, [pc, #72]	; (8006fb4 <SPIx_Init+0x6c>)
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8006f70:	4b10      	ldr	r3, [pc, #64]	; (8006fb4 <SPIx_Init+0x6c>)
 8006f72:	2200      	movs	r2, #0
 8006f74:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8006f76:	4b0f      	ldr	r3, [pc, #60]	; (8006fb4 <SPIx_Init+0x6c>)
 8006f78:	2200      	movs	r2, #0
 8006f7a:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8006f7c:	4b0d      	ldr	r3, [pc, #52]	; (8006fb4 <SPIx_Init+0x6c>)
 8006f7e:	2207      	movs	r2, #7
 8006f80:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8006f82:	4b0c      	ldr	r3, [pc, #48]	; (8006fb4 <SPIx_Init+0x6c>)
 8006f84:	2200      	movs	r2, #0
 8006f86:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8006f88:	4b0a      	ldr	r3, [pc, #40]	; (8006fb4 <SPIx_Init+0x6c>)
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8006f8e:	4b09      	ldr	r3, [pc, #36]	; (8006fb4 <SPIx_Init+0x6c>)
 8006f90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f94:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8006f96:	4b07      	ldr	r3, [pc, #28]	; (8006fb4 <SPIx_Init+0x6c>)
 8006f98:	2200      	movs	r2, #0
 8006f9a:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8006f9c:	4b05      	ldr	r3, [pc, #20]	; (8006fb4 <SPIx_Init+0x6c>)
 8006f9e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006fa2:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8006fa4:	4803      	ldr	r0, [pc, #12]	; (8006fb4 <SPIx_Init+0x6c>)
 8006fa6:	f000 f833 	bl	8007010 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8006faa:	4802      	ldr	r0, [pc, #8]	; (8006fb4 <SPIx_Init+0x6c>)
 8006fac:	f7fd fcad 	bl	800490a <HAL_SPI_Init>
  } 
}
 8006fb0:	bf00      	nop
 8006fb2:	bd80      	pop	{r7, pc}
 8006fb4:	20001498 	.word	0x20001498
 8006fb8:	40015000 	.word	0x40015000

08006fbc <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8006fca:	4b09      	ldr	r3, [pc, #36]	; (8006ff0 <SPIx_Write+0x34>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	1db9      	adds	r1, r7, #6
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	4808      	ldr	r0, [pc, #32]	; (8006ff4 <SPIx_Write+0x38>)
 8006fd4:	f7fd fd25 	bl	8004a22 <HAL_SPI_Transmit>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8006fdc:	7bfb      	ldrb	r3, [r7, #15]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d001      	beq.n	8006fe6 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8006fe2:	f000 f809 	bl	8006ff8 <SPIx_Error>
  }
}
 8006fe6:	bf00      	nop
 8006fe8:	3710      	adds	r7, #16
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	2000002c 	.word	0x2000002c
 8006ff4:	20001498 	.word	0x20001498

08006ff8 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8006ffc:	4803      	ldr	r0, [pc, #12]	; (800700c <SPIx_Error+0x14>)
 8006ffe:	f7fd fce8 	bl	80049d2 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8007002:	f7ff ffa1 	bl	8006f48 <SPIx_Init>
}
 8007006:	bf00      	nop
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	20001498 	.word	0x20001498

08007010 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b08a      	sub	sp, #40	; 0x28
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8007018:	2300      	movs	r3, #0
 800701a:	613b      	str	r3, [r7, #16]
 800701c:	4b17      	ldr	r3, [pc, #92]	; (800707c <SPIx_MspInit+0x6c>)
 800701e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007020:	4a16      	ldr	r2, [pc, #88]	; (800707c <SPIx_MspInit+0x6c>)
 8007022:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007026:	6453      	str	r3, [r2, #68]	; 0x44
 8007028:	4b14      	ldr	r3, [pc, #80]	; (800707c <SPIx_MspInit+0x6c>)
 800702a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800702c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007030:	613b      	str	r3, [r7, #16]
 8007032:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8007034:	2300      	movs	r3, #0
 8007036:	60fb      	str	r3, [r7, #12]
 8007038:	4b10      	ldr	r3, [pc, #64]	; (800707c <SPIx_MspInit+0x6c>)
 800703a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800703c:	4a0f      	ldr	r2, [pc, #60]	; (800707c <SPIx_MspInit+0x6c>)
 800703e:	f043 0320 	orr.w	r3, r3, #32
 8007042:	6313      	str	r3, [r2, #48]	; 0x30
 8007044:	4b0d      	ldr	r3, [pc, #52]	; (800707c <SPIx_MspInit+0x6c>)
 8007046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007048:	f003 0320 	and.w	r3, r3, #32
 800704c:	60fb      	str	r3, [r7, #12]
 800704e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8007050:	f44f 7360 	mov.w	r3, #896	; 0x380
 8007054:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8007056:	2302      	movs	r3, #2
 8007058:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800705a:	2302      	movs	r3, #2
 800705c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800705e:	2301      	movs	r3, #1
 8007060:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8007062:	2305      	movs	r3, #5
 8007064:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8007066:	f107 0314 	add.w	r3, r7, #20
 800706a:	4619      	mov	r1, r3
 800706c:	4804      	ldr	r0, [pc, #16]	; (8007080 <SPIx_MspInit+0x70>)
 800706e:	f7fa fe21 	bl	8001cb4 <HAL_GPIO_Init>
}
 8007072:	bf00      	nop
 8007074:	3728      	adds	r7, #40	; 0x28
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop
 800707c:	40023800 	.word	0x40023800
 8007080:	40021400 	.word	0x40021400

08007084 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b088      	sub	sp, #32
 8007088:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 800708a:	4b36      	ldr	r3, [pc, #216]	; (8007164 <LCD_IO_Init+0xe0>)
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d164      	bne.n	800715c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8007092:	4b34      	ldr	r3, [pc, #208]	; (8007164 <LCD_IO_Init+0xe0>)
 8007094:	2201      	movs	r2, #1
 8007096:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8007098:	2300      	movs	r3, #0
 800709a:	60bb      	str	r3, [r7, #8]
 800709c:	4b32      	ldr	r3, [pc, #200]	; (8007168 <LCD_IO_Init+0xe4>)
 800709e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a0:	4a31      	ldr	r2, [pc, #196]	; (8007168 <LCD_IO_Init+0xe4>)
 80070a2:	f043 0308 	orr.w	r3, r3, #8
 80070a6:	6313      	str	r3, [r2, #48]	; 0x30
 80070a8:	4b2f      	ldr	r3, [pc, #188]	; (8007168 <LCD_IO_Init+0xe4>)
 80070aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ac:	f003 0308 	and.w	r3, r3, #8
 80070b0:	60bb      	str	r3, [r7, #8]
 80070b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80070b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80070b8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80070ba:	2301      	movs	r3, #1
 80070bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80070be:	2300      	movs	r3, #0
 80070c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80070c2:	2302      	movs	r3, #2
 80070c4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80070c6:	f107 030c 	add.w	r3, r7, #12
 80070ca:	4619      	mov	r1, r3
 80070cc:	4827      	ldr	r0, [pc, #156]	; (800716c <LCD_IO_Init+0xe8>)
 80070ce:	f7fa fdf1 	bl	8001cb4 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80070d2:	2300      	movs	r3, #0
 80070d4:	607b      	str	r3, [r7, #4]
 80070d6:	4b24      	ldr	r3, [pc, #144]	; (8007168 <LCD_IO_Init+0xe4>)
 80070d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070da:	4a23      	ldr	r2, [pc, #140]	; (8007168 <LCD_IO_Init+0xe4>)
 80070dc:	f043 0308 	orr.w	r3, r3, #8
 80070e0:	6313      	str	r3, [r2, #48]	; 0x30
 80070e2:	4b21      	ldr	r3, [pc, #132]	; (8007168 <LCD_IO_Init+0xe4>)
 80070e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e6:	f003 0308 	and.w	r3, r3, #8
 80070ea:	607b      	str	r3, [r7, #4]
 80070ec:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80070ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80070f4:	2301      	movs	r3, #1
 80070f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80070f8:	2300      	movs	r3, #0
 80070fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80070fc:	2302      	movs	r3, #2
 80070fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8007100:	f107 030c 	add.w	r3, r7, #12
 8007104:	4619      	mov	r1, r3
 8007106:	4819      	ldr	r0, [pc, #100]	; (800716c <LCD_IO_Init+0xe8>)
 8007108:	f7fa fdd4 	bl	8001cb4 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 800710c:	2300      	movs	r3, #0
 800710e:	603b      	str	r3, [r7, #0]
 8007110:	4b15      	ldr	r3, [pc, #84]	; (8007168 <LCD_IO_Init+0xe4>)
 8007112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007114:	4a14      	ldr	r2, [pc, #80]	; (8007168 <LCD_IO_Init+0xe4>)
 8007116:	f043 0304 	orr.w	r3, r3, #4
 800711a:	6313      	str	r3, [r2, #48]	; 0x30
 800711c:	4b12      	ldr	r3, [pc, #72]	; (8007168 <LCD_IO_Init+0xe4>)
 800711e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007120:	f003 0304 	and.w	r3, r3, #4
 8007124:	603b      	str	r3, [r7, #0]
 8007126:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8007128:	2304      	movs	r3, #4
 800712a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800712c:	2301      	movs	r3, #1
 800712e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8007130:	2300      	movs	r3, #0
 8007132:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8007134:	2302      	movs	r3, #2
 8007136:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8007138:	f107 030c 	add.w	r3, r7, #12
 800713c:	4619      	mov	r1, r3
 800713e:	480c      	ldr	r0, [pc, #48]	; (8007170 <LCD_IO_Init+0xec>)
 8007140:	f7fa fdb8 	bl	8001cb4 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8007144:	2200      	movs	r2, #0
 8007146:	2104      	movs	r1, #4
 8007148:	4809      	ldr	r0, [pc, #36]	; (8007170 <LCD_IO_Init+0xec>)
 800714a:	f7fb f883 	bl	8002254 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800714e:	2201      	movs	r2, #1
 8007150:	2104      	movs	r1, #4
 8007152:	4807      	ldr	r0, [pc, #28]	; (8007170 <LCD_IO_Init+0xec>)
 8007154:	f7fb f87e 	bl	8002254 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8007158:	f7ff fef6 	bl	8006f48 <SPIx_Init>
  }
}
 800715c:	bf00      	nop
 800715e:	3720      	adds	r7, #32
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}
 8007164:	200014f0 	.word	0x200014f0
 8007168:	40023800 	.word	0x40023800
 800716c:	40020c00 	.word	0x40020c00
 8007170:	40020800 	.word	0x40020800

08007174 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
 800717a:	4603      	mov	r3, r0
 800717c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800717e:	2201      	movs	r2, #1
 8007180:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007184:	480a      	ldr	r0, [pc, #40]	; (80071b0 <LCD_IO_WriteData+0x3c>)
 8007186:	f7fb f865 	bl	8002254 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 800718a:	2200      	movs	r2, #0
 800718c:	2104      	movs	r1, #4
 800718e:	4809      	ldr	r0, [pc, #36]	; (80071b4 <LCD_IO_WriteData+0x40>)
 8007190:	f7fb f860 	bl	8002254 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8007194:	88fb      	ldrh	r3, [r7, #6]
 8007196:	4618      	mov	r0, r3
 8007198:	f7ff ff10 	bl	8006fbc <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800719c:	2201      	movs	r2, #1
 800719e:	2104      	movs	r1, #4
 80071a0:	4804      	ldr	r0, [pc, #16]	; (80071b4 <LCD_IO_WriteData+0x40>)
 80071a2:	f7fb f857 	bl	8002254 <HAL_GPIO_WritePin>
}
 80071a6:	bf00      	nop
 80071a8:	3708      	adds	r7, #8
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	40020c00 	.word	0x40020c00
 80071b4:	40020800 	.word	0x40020800

080071b8 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
 80071be:	4603      	mov	r3, r0
 80071c0:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80071c2:	2200      	movs	r2, #0
 80071c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80071c8:	480a      	ldr	r0, [pc, #40]	; (80071f4 <LCD_IO_WriteReg+0x3c>)
 80071ca:	f7fb f843 	bl	8002254 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80071ce:	2200      	movs	r2, #0
 80071d0:	2104      	movs	r1, #4
 80071d2:	4809      	ldr	r0, [pc, #36]	; (80071f8 <LCD_IO_WriteReg+0x40>)
 80071d4:	f7fb f83e 	bl	8002254 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80071d8:	79fb      	ldrb	r3, [r7, #7]
 80071da:	b29b      	uxth	r3, r3
 80071dc:	4618      	mov	r0, r3
 80071de:	f7ff feed 	bl	8006fbc <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80071e2:	2201      	movs	r2, #1
 80071e4:	2104      	movs	r1, #4
 80071e6:	4804      	ldr	r0, [pc, #16]	; (80071f8 <LCD_IO_WriteReg+0x40>)
 80071e8:	f7fb f834 	bl	8002254 <HAL_GPIO_WritePin>
}
 80071ec:	bf00      	nop
 80071ee:	3708      	adds	r7, #8
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	40020c00 	.word	0x40020c00
 80071f8:	40020800 	.word	0x40020800

080071fc <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b082      	sub	sp, #8
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f7f9 fccf 	bl	8000ba8 <HAL_Delay>
}
 800720a:	bf00      	nop
 800720c:	3708      	adds	r7, #8
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8007212:	b580      	push	{r7, lr}
 8007214:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8007216:	f7ff fe03 	bl	8006e20 <I2Cx_Init>
}
 800721a:	bf00      	nop
 800721c:	bd80      	pop	{r7, pc}

0800721e <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800721e:	b580      	push	{r7, lr}
 8007220:	b082      	sub	sp, #8
 8007222:	af00      	add	r7, sp, #0
 8007224:	4603      	mov	r3, r0
 8007226:	71fb      	strb	r3, [r7, #7]
 8007228:	460b      	mov	r3, r1
 800722a:	71bb      	strb	r3, [r7, #6]
 800722c:	4613      	mov	r3, r2
 800722e:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8007230:	797a      	ldrb	r2, [r7, #5]
 8007232:	79b9      	ldrb	r1, [r7, #6]
 8007234:	79fb      	ldrb	r3, [r7, #7]
 8007236:	4618      	mov	r0, r3
 8007238:	f7ff fe24 	bl	8006e84 <I2Cx_WriteData>
}
 800723c:	bf00      	nop
 800723e:	3708      	adds	r7, #8
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
 800724a:	4603      	mov	r3, r0
 800724c:	460a      	mov	r2, r1
 800724e:	71fb      	strb	r3, [r7, #7]
 8007250:	4613      	mov	r3, r2
 8007252:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8007254:	79ba      	ldrb	r2, [r7, #6]
 8007256:	79fb      	ldrb	r3, [r7, #7]
 8007258:	4611      	mov	r1, r2
 800725a:	4618      	mov	r0, r3
 800725c:	f7ff fe3c 	bl	8006ed8 <I2Cx_ReadData>
 8007260:	4603      	mov	r3, r0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3708      	adds	r7, #8
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 800726a:	b580      	push	{r7, lr}
 800726c:	b082      	sub	sp, #8
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f7f9 fc98 	bl	8000ba8 <HAL_Delay>
}
 8007278:	bf00      	nop
 800727a:	3708      	adds	r7, #8
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8007284:	4b29      	ldr	r3, [pc, #164]	; (800732c <BSP_SDRAM_Init+0xac>)
 8007286:	4a2a      	ldr	r2, [pc, #168]	; (8007330 <BSP_SDRAM_Init+0xb0>)
 8007288:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 800728a:	4b2a      	ldr	r3, [pc, #168]	; (8007334 <BSP_SDRAM_Init+0xb4>)
 800728c:	2202      	movs	r2, #2
 800728e:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8007290:	4b28      	ldr	r3, [pc, #160]	; (8007334 <BSP_SDRAM_Init+0xb4>)
 8007292:	2207      	movs	r2, #7
 8007294:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8007296:	4b27      	ldr	r3, [pc, #156]	; (8007334 <BSP_SDRAM_Init+0xb4>)
 8007298:	2204      	movs	r2, #4
 800729a:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 800729c:	4b25      	ldr	r3, [pc, #148]	; (8007334 <BSP_SDRAM_Init+0xb4>)
 800729e:	2207      	movs	r2, #7
 80072a0:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 80072a2:	4b24      	ldr	r3, [pc, #144]	; (8007334 <BSP_SDRAM_Init+0xb4>)
 80072a4:	2202      	movs	r2, #2
 80072a6:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 80072a8:	4b22      	ldr	r3, [pc, #136]	; (8007334 <BSP_SDRAM_Init+0xb4>)
 80072aa:	2202      	movs	r2, #2
 80072ac:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80072ae:	4b21      	ldr	r3, [pc, #132]	; (8007334 <BSP_SDRAM_Init+0xb4>)
 80072b0:	2202      	movs	r2, #2
 80072b2:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80072b4:	4b1d      	ldr	r3, [pc, #116]	; (800732c <BSP_SDRAM_Init+0xac>)
 80072b6:	2201      	movs	r2, #1
 80072b8:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80072ba:	4b1c      	ldr	r3, [pc, #112]	; (800732c <BSP_SDRAM_Init+0xac>)
 80072bc:	2200      	movs	r2, #0
 80072be:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80072c0:	4b1a      	ldr	r3, [pc, #104]	; (800732c <BSP_SDRAM_Init+0xac>)
 80072c2:	2204      	movs	r2, #4
 80072c4:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80072c6:	4b19      	ldr	r3, [pc, #100]	; (800732c <BSP_SDRAM_Init+0xac>)
 80072c8:	2210      	movs	r2, #16
 80072ca:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80072cc:	4b17      	ldr	r3, [pc, #92]	; (800732c <BSP_SDRAM_Init+0xac>)
 80072ce:	2240      	movs	r2, #64	; 0x40
 80072d0:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80072d2:	4b16      	ldr	r3, [pc, #88]	; (800732c <BSP_SDRAM_Init+0xac>)
 80072d4:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80072d8:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80072da:	4b14      	ldr	r3, [pc, #80]	; (800732c <BSP_SDRAM_Init+0xac>)
 80072dc:	2200      	movs	r2, #0
 80072de:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80072e0:	4b12      	ldr	r3, [pc, #72]	; (800732c <BSP_SDRAM_Init+0xac>)
 80072e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072e6:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80072e8:	4b10      	ldr	r3, [pc, #64]	; (800732c <BSP_SDRAM_Init+0xac>)
 80072ea:	2200      	movs	r2, #0
 80072ec:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80072ee:	4b0f      	ldr	r3, [pc, #60]	; (800732c <BSP_SDRAM_Init+0xac>)
 80072f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80072f4:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80072f6:	2100      	movs	r1, #0
 80072f8:	480c      	ldr	r0, [pc, #48]	; (800732c <BSP_SDRAM_Init+0xac>)
 80072fa:	f000 f87f 	bl	80073fc <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80072fe:	490d      	ldr	r1, [pc, #52]	; (8007334 <BSP_SDRAM_Init+0xb4>)
 8007300:	480a      	ldr	r0, [pc, #40]	; (800732c <BSP_SDRAM_Init+0xac>)
 8007302:	f7fd fa79 	bl	80047f8 <HAL_SDRAM_Init>
 8007306:	4603      	mov	r3, r0
 8007308:	2b00      	cmp	r3, #0
 800730a:	d003      	beq.n	8007314 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 800730c:	4b0a      	ldr	r3, [pc, #40]	; (8007338 <BSP_SDRAM_Init+0xb8>)
 800730e:	2201      	movs	r2, #1
 8007310:	701a      	strb	r2, [r3, #0]
 8007312:	e002      	b.n	800731a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8007314:	4b08      	ldr	r3, [pc, #32]	; (8007338 <BSP_SDRAM_Init+0xb8>)
 8007316:	2200      	movs	r2, #0
 8007318:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800731a:	f240 506a 	movw	r0, #1386	; 0x56a
 800731e:	f000 f80d 	bl	800733c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8007322:	4b05      	ldr	r3, [pc, #20]	; (8007338 <BSP_SDRAM_Init+0xb8>)
 8007324:	781b      	ldrb	r3, [r3, #0]
}
 8007326:	4618      	mov	r0, r3
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	200014f4 	.word	0x200014f4
 8007330:	a0000140 	.word	0xa0000140
 8007334:	20001528 	.word	0x20001528
 8007338:	20000030 	.word	0x20000030

0800733c <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8007344:	2300      	movs	r3, #0
 8007346:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8007348:	4b2a      	ldr	r3, [pc, #168]	; (80073f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800734a:	2201      	movs	r2, #1
 800734c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800734e:	4b29      	ldr	r3, [pc, #164]	; (80073f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007350:	2208      	movs	r2, #8
 8007352:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8007354:	4b27      	ldr	r3, [pc, #156]	; (80073f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007356:	2201      	movs	r2, #1
 8007358:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800735a:	4b26      	ldr	r3, [pc, #152]	; (80073f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800735c:	2200      	movs	r2, #0
 800735e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8007360:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007364:	4923      	ldr	r1, [pc, #140]	; (80073f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007366:	4824      	ldr	r0, [pc, #144]	; (80073f8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8007368:	f7fd fa84 	bl	8004874 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800736c:	2001      	movs	r0, #1
 800736e:	f7f9 fc1b 	bl	8000ba8 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8007372:	4b20      	ldr	r3, [pc, #128]	; (80073f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007374:	2202      	movs	r2, #2
 8007376:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8007378:	4b1e      	ldr	r3, [pc, #120]	; (80073f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800737a:	2208      	movs	r2, #8
 800737c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800737e:	4b1d      	ldr	r3, [pc, #116]	; (80073f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007380:	2201      	movs	r2, #1
 8007382:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8007384:	4b1b      	ldr	r3, [pc, #108]	; (80073f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007386:	2200      	movs	r2, #0
 8007388:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 800738a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800738e:	4919      	ldr	r1, [pc, #100]	; (80073f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007390:	4819      	ldr	r0, [pc, #100]	; (80073f8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8007392:	f7fd fa6f 	bl	8004874 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8007396:	4b17      	ldr	r3, [pc, #92]	; (80073f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007398:	2203      	movs	r2, #3
 800739a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800739c:	4b15      	ldr	r3, [pc, #84]	; (80073f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800739e:	2208      	movs	r2, #8
 80073a0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 80073a2:	4b14      	ldr	r3, [pc, #80]	; (80073f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80073a4:	2204      	movs	r2, #4
 80073a6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80073a8:	4b12      	ldr	r3, [pc, #72]	; (80073f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80073aa:	2200      	movs	r2, #0
 80073ac:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80073ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80073b2:	4910      	ldr	r1, [pc, #64]	; (80073f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80073b4:	4810      	ldr	r0, [pc, #64]	; (80073f8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80073b6:	f7fd fa5d 	bl	8004874 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80073ba:	f44f 730c 	mov.w	r3, #560	; 0x230
 80073be:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80073c0:	4b0c      	ldr	r3, [pc, #48]	; (80073f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80073c2:	2204      	movs	r2, #4
 80073c4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80073c6:	4b0b      	ldr	r3, [pc, #44]	; (80073f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80073c8:	2208      	movs	r2, #8
 80073ca:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80073cc:	4b09      	ldr	r3, [pc, #36]	; (80073f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80073ce:	2201      	movs	r2, #1
 80073d0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	4a07      	ldr	r2, [pc, #28]	; (80073f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80073d6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80073d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80073dc:	4905      	ldr	r1, [pc, #20]	; (80073f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80073de:	4806      	ldr	r0, [pc, #24]	; (80073f8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80073e0:	f7fd fa48 	bl	8004874 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 80073e4:	6879      	ldr	r1, [r7, #4]
 80073e6:	4804      	ldr	r0, [pc, #16]	; (80073f8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80073e8:	f7fd fa6f 	bl	80048ca <HAL_SDRAM_ProgramRefreshRate>
}
 80073ec:	bf00      	nop
 80073ee:	3710      	adds	r7, #16
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}
 80073f4:	20001544 	.word	0x20001544
 80073f8:	200014f4 	.word	0x200014f4

080073fc <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b090      	sub	sp, #64	; 0x40
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2b00      	cmp	r3, #0
 800740a:	f000 80ec 	beq.w	80075e6 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800740e:	2300      	movs	r3, #0
 8007410:	62bb      	str	r3, [r7, #40]	; 0x28
 8007412:	4b77      	ldr	r3, [pc, #476]	; (80075f0 <BSP_SDRAM_MspInit+0x1f4>)
 8007414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007416:	4a76      	ldr	r2, [pc, #472]	; (80075f0 <BSP_SDRAM_MspInit+0x1f4>)
 8007418:	f043 0301 	orr.w	r3, r3, #1
 800741c:	6393      	str	r3, [r2, #56]	; 0x38
 800741e:	4b74      	ldr	r3, [pc, #464]	; (80075f0 <BSP_SDRAM_MspInit+0x1f4>)
 8007420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007422:	f003 0301 	and.w	r3, r3, #1
 8007426:	62bb      	str	r3, [r7, #40]	; 0x28
 8007428:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800742a:	2300      	movs	r3, #0
 800742c:	627b      	str	r3, [r7, #36]	; 0x24
 800742e:	4b70      	ldr	r3, [pc, #448]	; (80075f0 <BSP_SDRAM_MspInit+0x1f4>)
 8007430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007432:	4a6f      	ldr	r2, [pc, #444]	; (80075f0 <BSP_SDRAM_MspInit+0x1f4>)
 8007434:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007438:	6313      	str	r3, [r2, #48]	; 0x30
 800743a:	4b6d      	ldr	r3, [pc, #436]	; (80075f0 <BSP_SDRAM_MspInit+0x1f4>)
 800743c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800743e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007442:	627b      	str	r3, [r7, #36]	; 0x24
 8007444:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007446:	2300      	movs	r3, #0
 8007448:	623b      	str	r3, [r7, #32]
 800744a:	4b69      	ldr	r3, [pc, #420]	; (80075f0 <BSP_SDRAM_MspInit+0x1f4>)
 800744c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800744e:	4a68      	ldr	r2, [pc, #416]	; (80075f0 <BSP_SDRAM_MspInit+0x1f4>)
 8007450:	f043 0302 	orr.w	r3, r3, #2
 8007454:	6313      	str	r3, [r2, #48]	; 0x30
 8007456:	4b66      	ldr	r3, [pc, #408]	; (80075f0 <BSP_SDRAM_MspInit+0x1f4>)
 8007458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800745a:	f003 0302 	and.w	r3, r3, #2
 800745e:	623b      	str	r3, [r7, #32]
 8007460:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007462:	2300      	movs	r3, #0
 8007464:	61fb      	str	r3, [r7, #28]
 8007466:	4b62      	ldr	r3, [pc, #392]	; (80075f0 <BSP_SDRAM_MspInit+0x1f4>)
 8007468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800746a:	4a61      	ldr	r2, [pc, #388]	; (80075f0 <BSP_SDRAM_MspInit+0x1f4>)
 800746c:	f043 0304 	orr.w	r3, r3, #4
 8007470:	6313      	str	r3, [r2, #48]	; 0x30
 8007472:	4b5f      	ldr	r3, [pc, #380]	; (80075f0 <BSP_SDRAM_MspInit+0x1f4>)
 8007474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007476:	f003 0304 	and.w	r3, r3, #4
 800747a:	61fb      	str	r3, [r7, #28]
 800747c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800747e:	2300      	movs	r3, #0
 8007480:	61bb      	str	r3, [r7, #24]
 8007482:	4b5b      	ldr	r3, [pc, #364]	; (80075f0 <BSP_SDRAM_MspInit+0x1f4>)
 8007484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007486:	4a5a      	ldr	r2, [pc, #360]	; (80075f0 <BSP_SDRAM_MspInit+0x1f4>)
 8007488:	f043 0308 	orr.w	r3, r3, #8
 800748c:	6313      	str	r3, [r2, #48]	; 0x30
 800748e:	4b58      	ldr	r3, [pc, #352]	; (80075f0 <BSP_SDRAM_MspInit+0x1f4>)
 8007490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007492:	f003 0308 	and.w	r3, r3, #8
 8007496:	61bb      	str	r3, [r7, #24]
 8007498:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800749a:	2300      	movs	r3, #0
 800749c:	617b      	str	r3, [r7, #20]
 800749e:	4b54      	ldr	r3, [pc, #336]	; (80075f0 <BSP_SDRAM_MspInit+0x1f4>)
 80074a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a2:	4a53      	ldr	r2, [pc, #332]	; (80075f0 <BSP_SDRAM_MspInit+0x1f4>)
 80074a4:	f043 0310 	orr.w	r3, r3, #16
 80074a8:	6313      	str	r3, [r2, #48]	; 0x30
 80074aa:	4b51      	ldr	r3, [pc, #324]	; (80075f0 <BSP_SDRAM_MspInit+0x1f4>)
 80074ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ae:	f003 0310 	and.w	r3, r3, #16
 80074b2:	617b      	str	r3, [r7, #20]
 80074b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80074b6:	2300      	movs	r3, #0
 80074b8:	613b      	str	r3, [r7, #16]
 80074ba:	4b4d      	ldr	r3, [pc, #308]	; (80075f0 <BSP_SDRAM_MspInit+0x1f4>)
 80074bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074be:	4a4c      	ldr	r2, [pc, #304]	; (80075f0 <BSP_SDRAM_MspInit+0x1f4>)
 80074c0:	f043 0320 	orr.w	r3, r3, #32
 80074c4:	6313      	str	r3, [r2, #48]	; 0x30
 80074c6:	4b4a      	ldr	r3, [pc, #296]	; (80075f0 <BSP_SDRAM_MspInit+0x1f4>)
 80074c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ca:	f003 0320 	and.w	r3, r3, #32
 80074ce:	613b      	str	r3, [r7, #16]
 80074d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80074d2:	2300      	movs	r3, #0
 80074d4:	60fb      	str	r3, [r7, #12]
 80074d6:	4b46      	ldr	r3, [pc, #280]	; (80075f0 <BSP_SDRAM_MspInit+0x1f4>)
 80074d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074da:	4a45      	ldr	r2, [pc, #276]	; (80075f0 <BSP_SDRAM_MspInit+0x1f4>)
 80074dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074e0:	6313      	str	r3, [r2, #48]	; 0x30
 80074e2:	4b43      	ldr	r3, [pc, #268]	; (80075f0 <BSP_SDRAM_MspInit+0x1f4>)
 80074e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ea:	60fb      	str	r3, [r7, #12]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80074ee:	2302      	movs	r3, #2
 80074f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80074f2:	2302      	movs	r3, #2
 80074f4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80074f6:	2300      	movs	r3, #0
 80074f8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80074fa:	230c      	movs	r3, #12
 80074fc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80074fe:	2360      	movs	r3, #96	; 0x60
 8007500:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8007502:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007506:	4619      	mov	r1, r3
 8007508:	483a      	ldr	r0, [pc, #232]	; (80075f4 <BSP_SDRAM_MspInit+0x1f8>)
 800750a:	f7fa fbd3 	bl	8001cb4 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 800750e:	2301      	movs	r3, #1
 8007510:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8007512:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007516:	4619      	mov	r1, r3
 8007518:	4837      	ldr	r0, [pc, #220]	; (80075f8 <BSP_SDRAM_MspInit+0x1fc>)
 800751a:	f7fa fbcb 	bl	8001cb4 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 800751e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8007522:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8007524:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007528:	4619      	mov	r1, r3
 800752a:	4834      	ldr	r0, [pc, #208]	; (80075fc <BSP_SDRAM_MspInit+0x200>)
 800752c:	f7fa fbc2 	bl	8001cb4 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8007530:	f64f 7383 	movw	r3, #65411	; 0xff83
 8007534:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8007536:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800753a:	4619      	mov	r1, r3
 800753c:	4830      	ldr	r0, [pc, #192]	; (8007600 <BSP_SDRAM_MspInit+0x204>)
 800753e:	f7fa fbb9 	bl	8001cb4 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8007542:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8007546:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8007548:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800754c:	4619      	mov	r1, r3
 800754e:	482d      	ldr	r0, [pc, #180]	; (8007604 <BSP_SDRAM_MspInit+0x208>)
 8007550:	f7fa fbb0 	bl	8001cb4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8007554:	f248 1333 	movw	r3, #33075	; 0x8133
 8007558:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800755a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800755e:	4619      	mov	r1, r3
 8007560:	4829      	ldr	r0, [pc, #164]	; (8007608 <BSP_SDRAM_MspInit+0x20c>)
 8007562:	f7fa fba7 	bl	8001cb4 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8007566:	4b29      	ldr	r3, [pc, #164]	; (800760c <BSP_SDRAM_MspInit+0x210>)
 8007568:	2200      	movs	r2, #0
 800756a:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800756c:	4b27      	ldr	r3, [pc, #156]	; (800760c <BSP_SDRAM_MspInit+0x210>)
 800756e:	2280      	movs	r2, #128	; 0x80
 8007570:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8007572:	4b26      	ldr	r3, [pc, #152]	; (800760c <BSP_SDRAM_MspInit+0x210>)
 8007574:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007578:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800757a:	4b24      	ldr	r3, [pc, #144]	; (800760c <BSP_SDRAM_MspInit+0x210>)
 800757c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007580:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007582:	4b22      	ldr	r3, [pc, #136]	; (800760c <BSP_SDRAM_MspInit+0x210>)
 8007584:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007588:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800758a:	4b20      	ldr	r3, [pc, #128]	; (800760c <BSP_SDRAM_MspInit+0x210>)
 800758c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007590:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8007592:	4b1e      	ldr	r3, [pc, #120]	; (800760c <BSP_SDRAM_MspInit+0x210>)
 8007594:	2200      	movs	r2, #0
 8007596:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8007598:	4b1c      	ldr	r3, [pc, #112]	; (800760c <BSP_SDRAM_MspInit+0x210>)
 800759a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800759e:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80075a0:	4b1a      	ldr	r3, [pc, #104]	; (800760c <BSP_SDRAM_MspInit+0x210>)
 80075a2:	2200      	movs	r2, #0
 80075a4:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80075a6:	4b19      	ldr	r3, [pc, #100]	; (800760c <BSP_SDRAM_MspInit+0x210>)
 80075a8:	2203      	movs	r2, #3
 80075aa:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80075ac:	4b17      	ldr	r3, [pc, #92]	; (800760c <BSP_SDRAM_MspInit+0x210>)
 80075ae:	2200      	movs	r2, #0
 80075b0:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80075b2:	4b16      	ldr	r3, [pc, #88]	; (800760c <BSP_SDRAM_MspInit+0x210>)
 80075b4:	2200      	movs	r2, #0
 80075b6:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 80075b8:	4b14      	ldr	r3, [pc, #80]	; (800760c <BSP_SDRAM_MspInit+0x210>)
 80075ba:	4a15      	ldr	r2, [pc, #84]	; (8007610 <BSP_SDRAM_MspInit+0x214>)
 80075bc:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4a12      	ldr	r2, [pc, #72]	; (800760c <BSP_SDRAM_MspInit+0x210>)
 80075c2:	631a      	str	r2, [r3, #48]	; 0x30
 80075c4:	4a11      	ldr	r2, [pc, #68]	; (800760c <BSP_SDRAM_MspInit+0x210>)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 80075ca:	4810      	ldr	r0, [pc, #64]	; (800760c <BSP_SDRAM_MspInit+0x210>)
 80075cc:	f7f9 fcd0 	bl	8000f70 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 80075d0:	480e      	ldr	r0, [pc, #56]	; (800760c <BSP_SDRAM_MspInit+0x210>)
 80075d2:	f7f9 fc1f 	bl	8000e14 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80075d6:	2200      	movs	r2, #0
 80075d8:	210f      	movs	r1, #15
 80075da:	2038      	movs	r0, #56	; 0x38
 80075dc:	f7f9 fbe3 	bl	8000da6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80075e0:	2038      	movs	r0, #56	; 0x38
 80075e2:	f7f9 fbfc 	bl	8000dde <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 80075e6:	bf00      	nop
 80075e8:	3740      	adds	r7, #64	; 0x40
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	bf00      	nop
 80075f0:	40023800 	.word	0x40023800
 80075f4:	40020400 	.word	0x40020400
 80075f8:	40020800 	.word	0x40020800
 80075fc:	40020c00 	.word	0x40020c00
 8007600:	40021000 	.word	0x40021000
 8007604:	40021400 	.word	0x40021400
 8007608:	40021800 	.word	0x40021800
 800760c:	20001554 	.word	0x20001554
 8007610:	40026410 	.word	0x40026410

08007614 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800761a:	2300      	movs	r3, #0
 800761c:	607b      	str	r3, [r7, #4]
 800761e:	4b12      	ldr	r3, [pc, #72]	; (8007668 <HAL_MspInit+0x54>)
 8007620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007622:	4a11      	ldr	r2, [pc, #68]	; (8007668 <HAL_MspInit+0x54>)
 8007624:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007628:	6453      	str	r3, [r2, #68]	; 0x44
 800762a:	4b0f      	ldr	r3, [pc, #60]	; (8007668 <HAL_MspInit+0x54>)
 800762c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800762e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007632:	607b      	str	r3, [r7, #4]
 8007634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007636:	2300      	movs	r3, #0
 8007638:	603b      	str	r3, [r7, #0]
 800763a:	4b0b      	ldr	r3, [pc, #44]	; (8007668 <HAL_MspInit+0x54>)
 800763c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763e:	4a0a      	ldr	r2, [pc, #40]	; (8007668 <HAL_MspInit+0x54>)
 8007640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007644:	6413      	str	r3, [r2, #64]	; 0x40
 8007646:	4b08      	ldr	r3, [pc, #32]	; (8007668 <HAL_MspInit+0x54>)
 8007648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800764e:	603b      	str	r3, [r7, #0]
 8007650:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007652:	2200      	movs	r2, #0
 8007654:	210f      	movs	r1, #15
 8007656:	f06f 0001 	mvn.w	r0, #1
 800765a:	f7f9 fba4 	bl	8000da6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800765e:	bf00      	nop
 8007660:	3708      	adds	r7, #8
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	40023800 	.word	0x40023800

0800766c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b08a      	sub	sp, #40	; 0x28
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007674:	f107 0314 	add.w	r3, r7, #20
 8007678:	2200      	movs	r2, #0
 800767a:	601a      	str	r2, [r3, #0]
 800767c:	605a      	str	r2, [r3, #4]
 800767e:	609a      	str	r2, [r3, #8]
 8007680:	60da      	str	r2, [r3, #12]
 8007682:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a19      	ldr	r2, [pc, #100]	; (80076f0 <HAL_SPI_MspInit+0x84>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d12b      	bne.n	80076e6 <HAL_SPI_MspInit+0x7a>
  {
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800768e:	2300      	movs	r3, #0
 8007690:	613b      	str	r3, [r7, #16]
 8007692:	4b18      	ldr	r3, [pc, #96]	; (80076f4 <HAL_SPI_MspInit+0x88>)
 8007694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007696:	4a17      	ldr	r2, [pc, #92]	; (80076f4 <HAL_SPI_MspInit+0x88>)
 8007698:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800769c:	6453      	str	r3, [r2, #68]	; 0x44
 800769e:	4b15      	ldr	r3, [pc, #84]	; (80076f4 <HAL_SPI_MspInit+0x88>)
 80076a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076a6:	613b      	str	r3, [r7, #16]
 80076a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80076aa:	2300      	movs	r3, #0
 80076ac:	60fb      	str	r3, [r7, #12]
 80076ae:	4b11      	ldr	r3, [pc, #68]	; (80076f4 <HAL_SPI_MspInit+0x88>)
 80076b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b2:	4a10      	ldr	r2, [pc, #64]	; (80076f4 <HAL_SPI_MspInit+0x88>)
 80076b4:	f043 0310 	orr.w	r3, r3, #16
 80076b8:	6313      	str	r3, [r2, #48]	; 0x30
 80076ba:	4b0e      	ldr	r3, [pc, #56]	; (80076f4 <HAL_SPI_MspInit+0x88>)
 80076bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076be:	f003 0310 	and.w	r3, r3, #16
 80076c2:	60fb      	str	r3, [r7, #12]
 80076c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80076c6:	2364      	movs	r3, #100	; 0x64
 80076c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076ca:	2302      	movs	r3, #2
 80076cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076ce:	2300      	movs	r3, #0
 80076d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80076d2:	2303      	movs	r3, #3
 80076d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80076d6:	2305      	movs	r3, #5
 80076d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80076da:	f107 0314 	add.w	r3, r7, #20
 80076de:	4619      	mov	r1, r3
 80076e0:	4805      	ldr	r0, [pc, #20]	; (80076f8 <HAL_SPI_MspInit+0x8c>)
 80076e2:	f7fa fae7 	bl	8001cb4 <HAL_GPIO_Init>

  }
}
 80076e6:	bf00      	nop
 80076e8:	3728      	adds	r7, #40	; 0x28
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	bf00      	nop
 80076f0:	40013400 	.word	0x40013400
 80076f4:	40023800 	.word	0x40023800
 80076f8:	40021000 	.word	0x40021000

080076fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b08a      	sub	sp, #40	; 0x28
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007704:	f107 0314 	add.w	r3, r7, #20
 8007708:	2200      	movs	r2, #0
 800770a:	601a      	str	r2, [r3, #0]
 800770c:	605a      	str	r2, [r3, #4]
 800770e:	609a      	str	r2, [r3, #8]
 8007710:	60da      	str	r2, [r3, #12]
 8007712:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a29      	ldr	r2, [pc, #164]	; (80077c0 <HAL_I2C_MspInit+0xc4>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d14b      	bne.n	80077b6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800771e:	2300      	movs	r3, #0
 8007720:	613b      	str	r3, [r7, #16]
 8007722:	4b28      	ldr	r3, [pc, #160]	; (80077c4 <HAL_I2C_MspInit+0xc8>)
 8007724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007726:	4a27      	ldr	r2, [pc, #156]	; (80077c4 <HAL_I2C_MspInit+0xc8>)
 8007728:	f043 0304 	orr.w	r3, r3, #4
 800772c:	6313      	str	r3, [r2, #48]	; 0x30
 800772e:	4b25      	ldr	r3, [pc, #148]	; (80077c4 <HAL_I2C_MspInit+0xc8>)
 8007730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007732:	f003 0304 	and.w	r3, r3, #4
 8007736:	613b      	str	r3, [r7, #16]
 8007738:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800773a:	2300      	movs	r3, #0
 800773c:	60fb      	str	r3, [r7, #12]
 800773e:	4b21      	ldr	r3, [pc, #132]	; (80077c4 <HAL_I2C_MspInit+0xc8>)
 8007740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007742:	4a20      	ldr	r2, [pc, #128]	; (80077c4 <HAL_I2C_MspInit+0xc8>)
 8007744:	f043 0301 	orr.w	r3, r3, #1
 8007748:	6313      	str	r3, [r2, #48]	; 0x30
 800774a:	4b1e      	ldr	r3, [pc, #120]	; (80077c4 <HAL_I2C_MspInit+0xc8>)
 800774c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800774e:	f003 0301 	and.w	r3, r3, #1
 8007752:	60fb      	str	r3, [r7, #12]
 8007754:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8007756:	f44f 7300 	mov.w	r3, #512	; 0x200
 800775a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800775c:	2312      	movs	r3, #18
 800775e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007760:	2301      	movs	r3, #1
 8007762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007764:	2300      	movs	r3, #0
 8007766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8007768:	2304      	movs	r3, #4
 800776a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800776c:	f107 0314 	add.w	r3, r7, #20
 8007770:	4619      	mov	r1, r3
 8007772:	4815      	ldr	r0, [pc, #84]	; (80077c8 <HAL_I2C_MspInit+0xcc>)
 8007774:	f7fa fa9e 	bl	8001cb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8007778:	f44f 7380 	mov.w	r3, #256	; 0x100
 800777c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800777e:	2312      	movs	r3, #18
 8007780:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007782:	2301      	movs	r3, #1
 8007784:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007786:	2300      	movs	r3, #0
 8007788:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800778a:	2304      	movs	r3, #4
 800778c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800778e:	f107 0314 	add.w	r3, r7, #20
 8007792:	4619      	mov	r1, r3
 8007794:	480d      	ldr	r0, [pc, #52]	; (80077cc <HAL_I2C_MspInit+0xd0>)
 8007796:	f7fa fa8d 	bl	8001cb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800779a:	2300      	movs	r3, #0
 800779c:	60bb      	str	r3, [r7, #8]
 800779e:	4b09      	ldr	r3, [pc, #36]	; (80077c4 <HAL_I2C_MspInit+0xc8>)
 80077a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a2:	4a08      	ldr	r2, [pc, #32]	; (80077c4 <HAL_I2C_MspInit+0xc8>)
 80077a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80077a8:	6413      	str	r3, [r2, #64]	; 0x40
 80077aa:	4b06      	ldr	r3, [pc, #24]	; (80077c4 <HAL_I2C_MspInit+0xc8>)
 80077ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077b2:	60bb      	str	r3, [r7, #8]
 80077b4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80077b6:	bf00      	nop
 80077b8:	3728      	adds	r7, #40	; 0x28
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	40005c00 	.word	0x40005c00
 80077c4:	40023800 	.word	0x40023800
 80077c8:	40020800 	.word	0x40020800
 80077cc:	40020000 	.word	0x40020000

080077d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b08a      	sub	sp, #40	; 0x28
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077d8:	f107 0314 	add.w	r3, r7, #20
 80077dc:	2200      	movs	r2, #0
 80077de:	601a      	str	r2, [r3, #0]
 80077e0:	605a      	str	r2, [r3, #4]
 80077e2:	609a      	str	r2, [r3, #8]
 80077e4:	60da      	str	r2, [r3, #12]
 80077e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a19      	ldr	r2, [pc, #100]	; (8007854 <HAL_UART_MspInit+0x84>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d12c      	bne.n	800784c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80077f2:	2300      	movs	r3, #0
 80077f4:	613b      	str	r3, [r7, #16]
 80077f6:	4b18      	ldr	r3, [pc, #96]	; (8007858 <HAL_UART_MspInit+0x88>)
 80077f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077fa:	4a17      	ldr	r2, [pc, #92]	; (8007858 <HAL_UART_MspInit+0x88>)
 80077fc:	f043 0310 	orr.w	r3, r3, #16
 8007800:	6453      	str	r3, [r2, #68]	; 0x44
 8007802:	4b15      	ldr	r3, [pc, #84]	; (8007858 <HAL_UART_MspInit+0x88>)
 8007804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007806:	f003 0310 	and.w	r3, r3, #16
 800780a:	613b      	str	r3, [r7, #16]
 800780c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800780e:	2300      	movs	r3, #0
 8007810:	60fb      	str	r3, [r7, #12]
 8007812:	4b11      	ldr	r3, [pc, #68]	; (8007858 <HAL_UART_MspInit+0x88>)
 8007814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007816:	4a10      	ldr	r2, [pc, #64]	; (8007858 <HAL_UART_MspInit+0x88>)
 8007818:	f043 0301 	orr.w	r3, r3, #1
 800781c:	6313      	str	r3, [r2, #48]	; 0x30
 800781e:	4b0e      	ldr	r3, [pc, #56]	; (8007858 <HAL_UART_MspInit+0x88>)
 8007820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007822:	f003 0301 	and.w	r3, r3, #1
 8007826:	60fb      	str	r3, [r7, #12]
 8007828:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800782a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800782e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007830:	2302      	movs	r3, #2
 8007832:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007834:	2300      	movs	r3, #0
 8007836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007838:	2303      	movs	r3, #3
 800783a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800783c:	2307      	movs	r3, #7
 800783e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007840:	f107 0314 	add.w	r3, r7, #20
 8007844:	4619      	mov	r1, r3
 8007846:	4805      	ldr	r0, [pc, #20]	; (800785c <HAL_UART_MspInit+0x8c>)
 8007848:	f7fa fa34 	bl	8001cb4 <HAL_GPIO_Init>

  }

}
 800784c:	bf00      	nop
 800784e:	3728      	adds	r7, #40	; 0x28
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}
 8007854:	40011000 	.word	0x40011000
 8007858:	40023800 	.word	0x40023800
 800785c:	40020000 	.word	0x40020000

08007860 <HAL_SPI_MspDeInit>:

}


void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI4)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a08      	ldr	r2, [pc, #32]	; (8007890 <HAL_SPI_MspDeInit+0x30>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d109      	bne.n	8007886 <HAL_SPI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN SPI4_MspDeInit 0 */

  /* USER CODE END SPI4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI4_CLK_DISABLE();
 8007872:	4b08      	ldr	r3, [pc, #32]	; (8007894 <HAL_SPI_MspDeInit+0x34>)
 8007874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007876:	4a07      	ldr	r2, [pc, #28]	; (8007894 <HAL_SPI_MspDeInit+0x34>)
 8007878:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800787c:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6);
 800787e:	2164      	movs	r1, #100	; 0x64
 8007880:	4805      	ldr	r0, [pc, #20]	; (8007898 <HAL_SPI_MspDeInit+0x38>)
 8007882:	f7fa fbc3 	bl	800200c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
#endif
}
 8007886:	bf00      	nop
 8007888:	3708      	adds	r7, #8
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	40013400 	.word	0x40013400
 8007894:	40023800 	.word	0x40023800
 8007898:	40021000 	.word	0x40021000

0800789c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800789c:	b480      	push	{r7}
 800789e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80078a0:	bf00      	nop
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr

080078aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80078aa:	b480      	push	{r7}
 80078ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80078ae:	e7fe      	b.n	80078ae <HardFault_Handler+0x4>

080078b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80078b0:	b480      	push	{r7}
 80078b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80078b4:	e7fe      	b.n	80078b4 <MemManage_Handler+0x4>

080078b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80078b6:	b480      	push	{r7}
 80078b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80078ba:	e7fe      	b.n	80078ba <BusFault_Handler+0x4>

080078bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80078bc:	b480      	push	{r7}
 80078be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80078c0:	e7fe      	b.n	80078c0 <UsageFault_Handler+0x4>

080078c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80078c2:	b480      	push	{r7}
 80078c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80078c6:	bf00      	nop
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80078d0:	b480      	push	{r7}
 80078d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80078d4:	bf00      	nop
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr

080078de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80078de:	b480      	push	{r7}
 80078e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80078e2:	bf00      	nop
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 80078f0:	4b0b      	ldr	r3, [pc, #44]	; (8007920 <SysTick_Handler+0x34>)
 80078f2:	881b      	ldrh	r3, [r3, #0]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d005      	beq.n	8007904 <SysTick_Handler+0x18>
				Timer1--;
 80078f8:	4b09      	ldr	r3, [pc, #36]	; (8007920 <SysTick_Handler+0x34>)
 80078fa:	881b      	ldrh	r3, [r3, #0]
 80078fc:	3b01      	subs	r3, #1
 80078fe:	b29a      	uxth	r2, r3
 8007900:	4b07      	ldr	r3, [pc, #28]	; (8007920 <SysTick_Handler+0x34>)
 8007902:	801a      	strh	r2, [r3, #0]
			if(Timer2 > 0)
 8007904:	4b07      	ldr	r3, [pc, #28]	; (8007924 <SysTick_Handler+0x38>)
 8007906:	881b      	ldrh	r3, [r3, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d005      	beq.n	8007918 <SysTick_Handler+0x2c>
				Timer2--;
 800790c:	4b05      	ldr	r3, [pc, #20]	; (8007924 <SysTick_Handler+0x38>)
 800790e:	881b      	ldrh	r3, [r3, #0]
 8007910:	3b01      	subs	r3, #1
 8007912:	b29a      	uxth	r2, r3
 8007914:	4b03      	ldr	r3, [pc, #12]	; (8007924 <SysTick_Handler+0x38>)
 8007916:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8007918:	f7f9 f926 	bl	8000b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800791c:	bf00      	nop
 800791e:	bd80      	pop	{r7, pc}
 8007920:	200015d0 	.word	0x200015d0
 8007924:	200015d2 	.word	0x200015d2

08007928 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007928:	b480      	push	{r7}
 800792a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800792c:	4b08      	ldr	r3, [pc, #32]	; (8007950 <SystemInit+0x28>)
 800792e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007932:	4a07      	ldr	r2, [pc, #28]	; (8007950 <SystemInit+0x28>)
 8007934:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007938:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800793c:	4b04      	ldr	r3, [pc, #16]	; (8007950 <SystemInit+0x28>)
 800793e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007942:	609a      	str	r2, [r3, #8]
#endif
}
 8007944:	bf00      	nop
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	e000ed00 	.word	0xe000ed00

08007954 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8007954:	f8df d034 	ldr.w	sp, [pc, #52]	; 800798c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007958:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800795a:	e003      	b.n	8007964 <LoopCopyDataInit>

0800795c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800795c:	4b0c      	ldr	r3, [pc, #48]	; (8007990 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800795e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007960:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007962:	3104      	adds	r1, #4

08007964 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007964:	480b      	ldr	r0, [pc, #44]	; (8007994 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007966:	4b0c      	ldr	r3, [pc, #48]	; (8007998 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007968:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800796a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800796c:	d3f6      	bcc.n	800795c <CopyDataInit>
  ldr  r2, =_sbss
 800796e:	4a0b      	ldr	r2, [pc, #44]	; (800799c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007970:	e002      	b.n	8007978 <LoopFillZerobss>

08007972 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007972:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007974:	f842 3b04 	str.w	r3, [r2], #4

08007978 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007978:	4b09      	ldr	r3, [pc, #36]	; (80079a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800797a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800797c:	d3f9      	bcc.n	8007972 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800797e:	f7ff ffd3 	bl	8007928 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007982:	f004 fa13 	bl	800bdac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007986:	f7f8 fee9 	bl	800075c <main>
  bx  lr    
 800798a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800798c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8007990:	0800c708 	.word	0x0800c708
  ldr  r0, =_sdata
 8007994:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007998:	20000050 	.word	0x20000050
  ldr  r2, =_sbss
 800799c:	20000050 	.word	0x20000050
  ldr  r3, = _ebss
 80079a0:	2000160c 	.word	0x2000160c

080079a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80079a4:	e7fe      	b.n	80079a4 <ADC_IRQHandler>
	...

080079a8 <GamePad_Init>:
#define GAMEPAD_PORT    GPIOB

//Functions definitions 

void GamePad_Init(void) 
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b086      	sub	sp, #24
 80079ac:	af00      	add	r7, sp, #0

	*(u8*)(&(GamePad.button)) = 0xFF ;
 80079ae:	4b15      	ldr	r3, [pc, #84]	; (8007a04 <GamePad_Init+0x5c>)
 80079b0:	22ff      	movs	r2, #255	; 0xff
 80079b2:	701a      	strb	r2, [r3, #0]
	GamePad.Prev_rd = 0xFF ;
 80079b4:	4b14      	ldr	r3, [pc, #80]	; (8007a08 <GamePad_Init+0x60>)
 80079b6:	22ff      	movs	r2, #255	; 0xff
 80079b8:	705a      	strb	r2, [r3, #1]

	memset(GamePad.BtnDebouceCounter , 0 , GAMEPAD_NO_BTN) ;
 80079ba:	2208      	movs	r2, #8
 80079bc:	2100      	movs	r1, #0
 80079be:	4813      	ldr	r0, [pc, #76]	; (8007a0c <GamePad_Init+0x64>)
 80079c0:	f004 fa18 	bl	800bdf4 <memset>
  GPIO_InitTypeDef GPIO_InitStruct;
	
  GPIO_InitStruct.Pin = GAMEPAD_SH_LD|GAMEPAD_CLK;
 80079c4:	2318      	movs	r3, #24
 80079c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80079c8:	2301      	movs	r3, #1
 80079ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079cc:	2300      	movs	r3, #0
 80079ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH   ;
 80079d0:	2302      	movs	r3, #2
 80079d2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GAMEPAD_PORT, &GPIO_InitStruct);
 80079d4:	1d3b      	adds	r3, r7, #4
 80079d6:	4619      	mov	r1, r3
 80079d8:	480d      	ldr	r0, [pc, #52]	; (8007a10 <GamePad_Init+0x68>)
 80079da:	f7fa f96b 	bl	8001cb4 <HAL_GPIO_Init>
	
  GPIO_InitStruct.Pin = GAMEPAD_DATAIN0;
 80079de:	2380      	movs	r3, #128	; 0x80
 80079e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80079e2:	2300      	movs	r3, #0
 80079e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80079e6:	2302      	movs	r3, #2
 80079e8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GAMEPAD_PORT, &GPIO_InitStruct);
 80079ea:	1d3b      	adds	r3, r7, #4
 80079ec:	4619      	mov	r1, r3
 80079ee:	4808      	ldr	r0, [pc, #32]	; (8007a10 <GamePad_Init+0x68>)
 80079f0:	f7fa f960 	bl	8001cb4 <HAL_GPIO_Init>
	
	GAMEPAD_PORT->ODR = 0 ;
 80079f4:	4b06      	ldr	r3, [pc, #24]	; (8007a10 <GamePad_Init+0x68>)
 80079f6:	2200      	movs	r2, #0
 80079f8:	615a      	str	r2, [r3, #20]
	
}
 80079fa:	bf00      	nop
 80079fc:	3718      	adds	r7, #24
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	200015b6 	.word	0x200015b6
 8007a08:	200015b4 	.word	0x200015b4
 8007a0c:	200015b7 	.word	0x200015b7
 8007a10:	40020400 	.word	0x40020400

08007a14 <GamePad_Read>:

GAMEPAD_BUTTON GamePad_Read(void)
{
 8007a14:	b590      	push	{r4, r7, lr}
 8007a16:	b085      	sub	sp, #20
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
	u8 currState ;
	for(u8 i = 0 ; i < GAMEPAD_NO_BTN ; i++)
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	73fb      	strb	r3, [r7, #15]
 8007a20:	e051      	b.n	8007ac6 <GamePad_Read+0xb2>
	{
	 currState = ReadCurrentState() ;
 8007a22:	f000 f863 	bl	8007aec <ReadCurrentState>
 8007a26:	4603      	mov	r3, r0
 8007a28:	73bb      	strb	r3, [r7, #14]
	 if(currState == 0) // All button released
 8007a2a:	7bbb      	ldrb	r3, [r7, #14]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d102      	bne.n	8007a36 <GamePad_Read+0x22>
	 {
		 *(u8*)(&(GamePad.button)) = 0xFF ;
 8007a30:	4b2c      	ldr	r3, [pc, #176]	; (8007ae4 <GamePad_Read+0xd0>)
 8007a32:	22ff      	movs	r2, #255	; 0xff
 8007a34:	701a      	strb	r2, [r3, #0]
	 }
		if( currState & (1<< i) ) //this button pressed?
 8007a36:	7bba      	ldrb	r2, [r7, #14]
 8007a38:	7bfb      	ldrb	r3, [r7, #15]
 8007a3a:	fa42 f303 	asr.w	r3, r2, r3
 8007a3e:	f003 0301 	and.w	r3, r3, #1
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d01c      	beq.n	8007a80 <GamePad_Read+0x6c>
		{
			if(( currState & (1<< i)) == (GamePad.Prev_rd & (1<<i))  )
 8007a46:	4b28      	ldr	r3, [pc, #160]	; (8007ae8 <GamePad_Read+0xd4>)
 8007a48:	785a      	ldrb	r2, [r3, #1]
 8007a4a:	7bbb      	ldrb	r3, [r7, #14]
 8007a4c:	4053      	eors	r3, r2
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	461a      	mov	r2, r3
 8007a52:	7bfb      	ldrb	r3, [r7, #15]
 8007a54:	fa42 f303 	asr.w	r3, r2, r3
 8007a58:	f003 0301 	and.w	r3, r3, #1
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d10a      	bne.n	8007a76 <GamePad_Read+0x62>
			{
				  GamePad.BtnDebouceCounter[i]++ ;
 8007a60:	7bfb      	ldrb	r3, [r7, #15]
 8007a62:	4a21      	ldr	r2, [pc, #132]	; (8007ae8 <GamePad_Read+0xd4>)
 8007a64:	441a      	add	r2, r3
 8007a66:	78d2      	ldrb	r2, [r2, #3]
 8007a68:	3201      	adds	r2, #1
 8007a6a:	b2d1      	uxtb	r1, r2
 8007a6c:	4a1e      	ldr	r2, [pc, #120]	; (8007ae8 <GamePad_Read+0xd4>)
 8007a6e:	4413      	add	r3, r2
 8007a70:	460a      	mov	r2, r1
 8007a72:	70da      	strb	r2, [r3, #3]
 8007a74:	e004      	b.n	8007a80 <GamePad_Read+0x6c>
			}
			else
				{
				  GamePad.BtnDebouceCounter[i] = 0 ;
 8007a76:	7bfb      	ldrb	r3, [r7, #15]
 8007a78:	4a1b      	ldr	r2, [pc, #108]	; (8007ae8 <GamePad_Read+0xd4>)
 8007a7a:	4413      	add	r3, r2
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	70da      	strb	r2, [r3, #3]
				}

		}


		if(GamePad.BtnDebouceCounter[i] >= MAX_DEBOUNCE_COUNT)
 8007a80:	7bfb      	ldrb	r3, [r7, #15]
 8007a82:	4a19      	ldr	r2, [pc, #100]	; (8007ae8 <GamePad_Read+0xd4>)
 8007a84:	4413      	add	r3, r2
 8007a86:	78db      	ldrb	r3, [r3, #3]
 8007a88:	2b04      	cmp	r3, #4
 8007a8a:	d916      	bls.n	8007aba <GamePad_Read+0xa6>
		{
			*(u8*)(&(GamePad.button)) = 0xFF ;
 8007a8c:	4b15      	ldr	r3, [pc, #84]	; (8007ae4 <GamePad_Read+0xd0>)
 8007a8e:	22ff      	movs	r2, #255	; 0xff
 8007a90:	701a      	strb	r2, [r3, #0]
			(*(u8*)(&(GamePad.button))) &= ~(1<<i) ;   // set 0 means pressed
 8007a92:	4b14      	ldr	r3, [pc, #80]	; (8007ae4 <GamePad_Read+0xd0>)
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	b25a      	sxtb	r2, r3
 8007a98:	7bfb      	ldrb	r3, [r7, #15]
 8007a9a:	2101      	movs	r1, #1
 8007a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8007aa0:	b25b      	sxtb	r3, r3
 8007aa2:	43db      	mvns	r3, r3
 8007aa4:	b25b      	sxtb	r3, r3
 8007aa6:	4013      	ands	r3, r2
 8007aa8:	b25a      	sxtb	r2, r3
 8007aaa:	4b0e      	ldr	r3, [pc, #56]	; (8007ae4 <GamePad_Read+0xd0>)
 8007aac:	b2d2      	uxtb	r2, r2
 8007aae:	701a      	strb	r2, [r3, #0]
			GamePad.BtnDebouceCounter[i] = 0 ;
 8007ab0:	7bfb      	ldrb	r3, [r7, #15]
 8007ab2:	4a0d      	ldr	r2, [pc, #52]	; (8007ae8 <GamePad_Read+0xd4>)
 8007ab4:	4413      	add	r3, r2
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	70da      	strb	r2, [r3, #3]
		}
		GamePad.Prev_rd = currState ;
 8007aba:	4a0b      	ldr	r2, [pc, #44]	; (8007ae8 <GamePad_Read+0xd4>)
 8007abc:	7bbb      	ldrb	r3, [r7, #14]
 8007abe:	7053      	strb	r3, [r2, #1]
	for(u8 i = 0 ; i < GAMEPAD_NO_BTN ; i++)
 8007ac0:	7bfb      	ldrb	r3, [r7, #15]
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	73fb      	strb	r3, [r7, #15]
 8007ac6:	7bfb      	ldrb	r3, [r7, #15]
 8007ac8:	2b07      	cmp	r3, #7
 8007aca:	d9aa      	bls.n	8007a22 <GamePad_Read+0xe>
	}

	return GamePad ;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4a06      	ldr	r2, [pc, #24]	; (8007ae8 <GamePad_Read+0xd4>)
 8007ad0:	461c      	mov	r4, r3
 8007ad2:	4613      	mov	r3, r2
 8007ad4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007ad6:	6020      	str	r0, [r4, #0]
 8007ad8:	6061      	str	r1, [r4, #4]
 8007ada:	60a2      	str	r2, [r4, #8]
}
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	3714      	adds	r7, #20
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd90      	pop	{r4, r7, pc}
 8007ae4:	200015b6 	.word	0x200015b6
 8007ae8:	200015b4 	.word	0x200015b4

08007aec <ReadCurrentState>:

static u8 ReadCurrentState(void)
{
 8007aec:	b590      	push	{r4, r7, lr}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
	u8 current =0 ;
 8007af2:	2300      	movs	r3, #0
 8007af4:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(GAMEPAD_PORT , GAMEPAD_CLK , GPIO_PIN_RESET) ;
 8007af6:	2200      	movs	r2, #0
 8007af8:	2110      	movs	r1, #16
 8007afa:	4820      	ldr	r0, [pc, #128]	; (8007b7c <ReadCurrentState+0x90>)
 8007afc:	f7fa fbaa 	bl	8002254 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GAMEPAD_PORT , GAMEPAD_SH_LD , GPIO_PIN_RESET) ;
 8007b00:	2200      	movs	r2, #0
 8007b02:	2108      	movs	r1, #8
 8007b04:	481d      	ldr	r0, [pc, #116]	; (8007b7c <ReadCurrentState+0x90>)
 8007b06:	f7fa fba5 	bl	8002254 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GAMEPAD_PORT , GAMEPAD_SH_LD , GPIO_PIN_SET) ;
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	2108      	movs	r1, #8
 8007b0e:	481b      	ldr	r0, [pc, #108]	; (8007b7c <ReadCurrentState+0x90>)
 8007b10:	f7fa fba0 	bl	8002254 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GAMEPAD_PORT , GAMEPAD_SH_LD , GPIO_PIN_RESET) ;
 8007b14:	2200      	movs	r2, #0
 8007b16:	2108      	movs	r1, #8
 8007b18:	4818      	ldr	r0, [pc, #96]	; (8007b7c <ReadCurrentState+0x90>)
 8007b1a:	f7fa fb9b 	bl	8002254 <HAL_GPIO_WritePin>

	for ( u8 i = 0 ;  i < GAMEPAD_NO_BTN ; i++)
 8007b1e:	2300      	movs	r3, #0
 8007b20:	71bb      	strb	r3, [r7, #6]
 8007b22:	e018      	b.n	8007b56 <ReadCurrentState+0x6a>
		{
		current = (current <<1)| HAL_GPIO_ReadPin(GAMEPAD_PORT , GAMEPAD_DATAIN0) ;
 8007b24:	79fb      	ldrb	r3, [r7, #7]
 8007b26:	005b      	lsls	r3, r3, #1
 8007b28:	b25c      	sxtb	r4, r3
 8007b2a:	2180      	movs	r1, #128	; 0x80
 8007b2c:	4813      	ldr	r0, [pc, #76]	; (8007b7c <ReadCurrentState+0x90>)
 8007b2e:	f7fa fb79 	bl	8002224 <HAL_GPIO_ReadPin>
 8007b32:	4603      	mov	r3, r0
 8007b34:	b25b      	sxtb	r3, r3
 8007b36:	4323      	orrs	r3, r4
 8007b38:	b25b      	sxtb	r3, r3
 8007b3a:	71fb      	strb	r3, [r7, #7]

			//clock
			HAL_GPIO_WritePin(GAMEPAD_PORT , GAMEPAD_CLK  , GPIO_PIN_SET)   ;
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	2110      	movs	r1, #16
 8007b40:	480e      	ldr	r0, [pc, #56]	; (8007b7c <ReadCurrentState+0x90>)
 8007b42:	f7fa fb87 	bl	8002254 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GAMEPAD_PORT , GAMEPAD_CLK  , GPIO_PIN_RESET) ;
 8007b46:	2200      	movs	r2, #0
 8007b48:	2110      	movs	r1, #16
 8007b4a:	480c      	ldr	r0, [pc, #48]	; (8007b7c <ReadCurrentState+0x90>)
 8007b4c:	f7fa fb82 	bl	8002254 <HAL_GPIO_WritePin>
	for ( u8 i = 0 ;  i < GAMEPAD_NO_BTN ; i++)
 8007b50:	79bb      	ldrb	r3, [r7, #6]
 8007b52:	3301      	adds	r3, #1
 8007b54:	71bb      	strb	r3, [r7, #6]
 8007b56:	79bb      	ldrb	r3, [r7, #6]
 8007b58:	2b07      	cmp	r3, #7
 8007b5a:	d9e3      	bls.n	8007b24 <ReadCurrentState+0x38>
		}
	GamePad.Connection = current ?GP_CONNECTED: GP_NOT_CONNECTED ;
 8007b5c:	79fb      	ldrb	r3, [r7, #7]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	bf14      	ite	ne
 8007b62:	2301      	movne	r3, #1
 8007b64:	2300      	moveq	r3, #0
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	461a      	mov	r2, r3
 8007b6a:	4b05      	ldr	r3, [pc, #20]	; (8007b80 <ReadCurrentState+0x94>)
 8007b6c:	72da      	strb	r2, [r3, #11]
	return ~current ;
 8007b6e:	79fb      	ldrb	r3, [r7, #7]
 8007b70:	43db      	mvns	r3, r3
 8007b72:	b2db      	uxtb	r3, r3
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd90      	pop	{r4, r7, pc}
 8007b7c:	40020400 	.word	0x40020400
 8007b80:	200015b4 	.word	0x200015b4

08007b84 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8007b8e:	88fb      	ldrh	r3, [r7, #6]
 8007b90:	4618      	mov	r0, r3
 8007b92:	f000 f8d9 	bl	8007d48 <stmpe811_GetInstance>
 8007b96:	4603      	mov	r3, r0
 8007b98:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8007b9a:	7bfb      	ldrb	r3, [r7, #15]
 8007b9c:	2bff      	cmp	r3, #255	; 0xff
 8007b9e:	d112      	bne.n	8007bc6 <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8007ba0:	2000      	movs	r0, #0
 8007ba2:	f000 f8d1 	bl	8007d48 <stmpe811_GetInstance>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8007baa:	7bbb      	ldrb	r3, [r7, #14]
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d80a      	bhi.n	8007bc6 <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8007bb0:	7bbb      	ldrb	r3, [r7, #14]
 8007bb2:	88fa      	ldrh	r2, [r7, #6]
 8007bb4:	b2d1      	uxtb	r1, r2
 8007bb6:	4a06      	ldr	r2, [pc, #24]	; (8007bd0 <stmpe811_Init+0x4c>)
 8007bb8:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init();
 8007bba:	f7ff fb2a 	bl	8007212 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8007bbe:	88fb      	ldrh	r3, [r7, #6]
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f000 f807 	bl	8007bd4 <stmpe811_Reset>
    }
  }
}
 8007bc6:	bf00      	nop
 8007bc8:	3710      	adds	r7, #16
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	200015c0 	.word	0x200015c0

08007bd4 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b082      	sub	sp, #8
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	4603      	mov	r3, r0
 8007bdc:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8007bde:	88fb      	ldrh	r3, [r7, #6]
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	2202      	movs	r2, #2
 8007be4:	2103      	movs	r1, #3
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7ff fb19 	bl	800721e <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8007bec:	200a      	movs	r0, #10
 8007bee:	f7ff fb3c 	bl	800726a <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8007bf2:	88fb      	ldrh	r3, [r7, #6]
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	2103      	movs	r1, #3
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7ff fb0f 	bl	800721e <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8007c00:	2002      	movs	r0, #2
 8007c02:	f7ff fb32 	bl	800726a <IOE_Delay>
}
 8007c06:	bf00      	nop
 8007c08:	3708      	adds	r7, #8
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}

08007c0e <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8007c0e:	b580      	push	{r7, lr}
 8007c10:	b084      	sub	sp, #16
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	4603      	mov	r3, r0
 8007c16:	6039      	str	r1, [r7, #0]
 8007c18:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8007c1e:	88fb      	ldrh	r3, [r7, #6]
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	2117      	movs	r1, #23
 8007c24:	4618      	mov	r0, r3
 8007c26:	f7ff fb0d 	bl	8007244 <IOE_Read>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	b25b      	sxtb	r3, r3
 8007c32:	43db      	mvns	r3, r3
 8007c34:	b25a      	sxtb	r2, r3
 8007c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c3a:	4013      	ands	r3, r2
 8007c3c:	b25b      	sxtb	r3, r3
 8007c3e:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8007c40:	88fb      	ldrh	r3, [r7, #6]
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	7bfa      	ldrb	r2, [r7, #15]
 8007c46:	2117      	movs	r1, #23
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f7ff fae8 	bl	800721e <IOE_Write>
}
 8007c4e:	bf00      	nop
 8007c50:	3710      	adds	r7, #16
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b084      	sub	sp, #16
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8007c60:	88fb      	ldrh	r3, [r7, #6]
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	2104      	movs	r1, #4
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7ff faec 	bl	8007244 <IOE_Read>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8007c70:	7bfb      	ldrb	r3, [r7, #15]
 8007c72:	f023 0304 	bic.w	r3, r3, #4
 8007c76:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8007c78:	88fb      	ldrh	r3, [r7, #6]
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	7bfa      	ldrb	r2, [r7, #15]
 8007c7e:	2104      	movs	r1, #4
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7ff facc 	bl	800721e <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8007c86:	88fb      	ldrh	r3, [r7, #6]
 8007c88:	21f0      	movs	r1, #240	; 0xf0
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7ff ffbf 	bl	8007c0e <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8007c90:	7bfb      	ldrb	r3, [r7, #15]
 8007c92:	f023 0303 	bic.w	r3, r3, #3
 8007c96:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8007c98:	88fb      	ldrh	r3, [r7, #6]
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	7bfa      	ldrb	r2, [r7, #15]
 8007c9e:	2104      	movs	r1, #4
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f7ff fabc 	bl	800721e <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8007ca6:	88fb      	ldrh	r3, [r7, #6]
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	2249      	movs	r2, #73	; 0x49
 8007cac:	2120      	movs	r1, #32
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f7ff fab5 	bl	800721e <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8007cb4:	2002      	movs	r0, #2
 8007cb6:	f7ff fad8 	bl	800726a <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8007cba:	88fb      	ldrh	r3, [r7, #6]
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	2121      	movs	r1, #33	; 0x21
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f7ff faab 	bl	800721e <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8007cc8:	88fb      	ldrh	r3, [r7, #6]
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	229a      	movs	r2, #154	; 0x9a
 8007cce:	2141      	movs	r1, #65	; 0x41
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f7ff faa4 	bl	800721e <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8007cd6:	88fb      	ldrh	r3, [r7, #6]
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	2201      	movs	r2, #1
 8007cdc:	214a      	movs	r1, #74	; 0x4a
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7ff fa9d 	bl	800721e <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8007ce4:	88fb      	ldrh	r3, [r7, #6]
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	2201      	movs	r2, #1
 8007cea:	214b      	movs	r1, #75	; 0x4b
 8007cec:	4618      	mov	r0, r3
 8007cee:	f7ff fa96 	bl	800721e <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8007cf2:	88fb      	ldrh	r3, [r7, #6]
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	214b      	movs	r1, #75	; 0x4b
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7ff fa8f 	bl	800721e <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8007d00:	88fb      	ldrh	r3, [r7, #6]
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	2201      	movs	r2, #1
 8007d06:	2156      	movs	r1, #86	; 0x56
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f7ff fa88 	bl	800721e <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8007d0e:	88fb      	ldrh	r3, [r7, #6]
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	2201      	movs	r2, #1
 8007d14:	2158      	movs	r1, #88	; 0x58
 8007d16:	4618      	mov	r0, r3
 8007d18:	f7ff fa81 	bl	800721e <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8007d1c:	88fb      	ldrh	r3, [r7, #6]
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	2201      	movs	r2, #1
 8007d22:	2140      	movs	r1, #64	; 0x40
 8007d24:	4618      	mov	r0, r3
 8007d26:	f7ff fa7a 	bl	800721e <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8007d2a:	88fb      	ldrh	r3, [r7, #6]
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	22ff      	movs	r2, #255	; 0xff
 8007d30:	210b      	movs	r1, #11
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7ff fa73 	bl	800721e <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8007d38:	2002      	movs	r0, #2
 8007d3a:	f7ff fa96 	bl	800726a <IOE_Delay>
}
 8007d3e:	bf00      	nop
 8007d40:	3710      	adds	r7, #16
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
	...

08007d48 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b085      	sub	sp, #20
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	4603      	mov	r3, r0
 8007d50:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8007d52:	2300      	movs	r3, #0
 8007d54:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8007d56:	2300      	movs	r3, #0
 8007d58:	73fb      	strb	r3, [r7, #15]
 8007d5a:	e00b      	b.n	8007d74 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8007d5c:	7bfb      	ldrb	r3, [r7, #15]
 8007d5e:	4a0a      	ldr	r2, [pc, #40]	; (8007d88 <stmpe811_GetInstance+0x40>)
 8007d60:	5cd3      	ldrb	r3, [r2, r3]
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	88fa      	ldrh	r2, [r7, #6]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d101      	bne.n	8007d6e <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8007d6a:	7bfb      	ldrb	r3, [r7, #15]
 8007d6c:	e006      	b.n	8007d7c <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8007d6e:	7bfb      	ldrb	r3, [r7, #15]
 8007d70:	3301      	adds	r3, #1
 8007d72:	73fb      	strb	r3, [r7, #15]
 8007d74:	7bfb      	ldrb	r3, [r7, #15]
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d9f0      	bls.n	8007d5c <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8007d7a:	23ff      	movs	r3, #255	; 0xff
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3714      	adds	r7, #20
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr
 8007d88:	200015c0 	.word	0x200015c0

08007d8c <touchpad_init>:
static TC_Panel TC_status ;

static uint8_t touchpad_get_xy(int16_t *x, int16_t *y);

void touchpad_init(void)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	af00      	add	r7, sp, #0
	stmpe811_Init(TS_I2C_ADDRESS);
 8007d90:	2082      	movs	r0, #130	; 0x82
 8007d92:	f7ff fef7 	bl	8007b84 <stmpe811_Init>
	stmpe811_TS_Start(TS_I2C_ADDRESS);
 8007d96:	2082      	movs	r0, #130	; 0x82
 8007d98:	f7ff ff5d 	bl	8007c56 <stmpe811_TS_Start>
}
 8007d9c:	bf00      	nop
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <Get_AuxiliaryStatus>:
{
	aux_var.SmallTasks = fun ;
}

Aux *Get_AuxiliaryStatus(void)
{
 8007da0:	b480      	push	{r7}
 8007da2:	af00      	add	r7, sp, #0
	return &aux_var ;
 8007da4:	4b02      	ldr	r3, [pc, #8]	; (8007db0 <Get_AuxiliaryStatus+0x10>)
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr
 8007db0:	200015c4 	.word	0x200015c4

08007db4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b085      	sub	sp, #20
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	4603      	mov	r3, r0
 8007dbc:	6039      	str	r1, [r7, #0]
 8007dbe:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007dc0:	88fb      	ldrh	r3, [r7, #6]
 8007dc2:	2b7f      	cmp	r3, #127	; 0x7f
 8007dc4:	d802      	bhi.n	8007dcc <ff_convert+0x18>
		c = chr;
 8007dc6:	88fb      	ldrh	r3, [r7, #6]
 8007dc8:	81fb      	strh	r3, [r7, #14]
 8007dca:	e025      	b.n	8007e18 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d00b      	beq.n	8007dea <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007dd2:	88fb      	ldrh	r3, [r7, #6]
 8007dd4:	2bff      	cmp	r3, #255	; 0xff
 8007dd6:	d805      	bhi.n	8007de4 <ff_convert+0x30>
 8007dd8:	88fb      	ldrh	r3, [r7, #6]
 8007dda:	3b80      	subs	r3, #128	; 0x80
 8007ddc:	4a12      	ldr	r2, [pc, #72]	; (8007e28 <ff_convert+0x74>)
 8007dde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007de2:	e000      	b.n	8007de6 <ff_convert+0x32>
 8007de4:	2300      	movs	r3, #0
 8007de6:	81fb      	strh	r3, [r7, #14]
 8007de8:	e016      	b.n	8007e18 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8007dea:	2300      	movs	r3, #0
 8007dec:	81fb      	strh	r3, [r7, #14]
 8007dee:	e009      	b.n	8007e04 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007df0:	89fb      	ldrh	r3, [r7, #14]
 8007df2:	4a0d      	ldr	r2, [pc, #52]	; (8007e28 <ff_convert+0x74>)
 8007df4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007df8:	88fa      	ldrh	r2, [r7, #6]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d006      	beq.n	8007e0c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8007dfe:	89fb      	ldrh	r3, [r7, #14]
 8007e00:	3301      	adds	r3, #1
 8007e02:	81fb      	strh	r3, [r7, #14]
 8007e04:	89fb      	ldrh	r3, [r7, #14]
 8007e06:	2b7f      	cmp	r3, #127	; 0x7f
 8007e08:	d9f2      	bls.n	8007df0 <ff_convert+0x3c>
 8007e0a:	e000      	b.n	8007e0e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007e0c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8007e0e:	89fb      	ldrh	r3, [r7, #14]
 8007e10:	3380      	adds	r3, #128	; 0x80
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007e18:	89fb      	ldrh	r3, [r7, #14]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3714      	adds	r7, #20
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr
 8007e26:	bf00      	nop
 8007e28:	0800c2b8 	.word	0x0800c2b8

08007e2c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b087      	sub	sp, #28
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	4603      	mov	r3, r0
 8007e34:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8007e36:	88fb      	ldrh	r3, [r7, #6]
 8007e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e3c:	d201      	bcs.n	8007e42 <ff_wtoupper+0x16>
 8007e3e:	4b3e      	ldr	r3, [pc, #248]	; (8007f38 <ff_wtoupper+0x10c>)
 8007e40:	e000      	b.n	8007e44 <ff_wtoupper+0x18>
 8007e42:	4b3e      	ldr	r3, [pc, #248]	; (8007f3c <ff_wtoupper+0x110>)
 8007e44:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	1c9a      	adds	r2, r3, #2
 8007e4a:	617a      	str	r2, [r7, #20]
 8007e4c:	881b      	ldrh	r3, [r3, #0]
 8007e4e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8007e50:	8a7b      	ldrh	r3, [r7, #18]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d068      	beq.n	8007f28 <ff_wtoupper+0xfc>
 8007e56:	88fa      	ldrh	r2, [r7, #6]
 8007e58:	8a7b      	ldrh	r3, [r7, #18]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d364      	bcc.n	8007f28 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	1c9a      	adds	r2, r3, #2
 8007e62:	617a      	str	r2, [r7, #20]
 8007e64:	881b      	ldrh	r3, [r3, #0]
 8007e66:	823b      	strh	r3, [r7, #16]
 8007e68:	8a3b      	ldrh	r3, [r7, #16]
 8007e6a:	0a1b      	lsrs	r3, r3, #8
 8007e6c:	81fb      	strh	r3, [r7, #14]
 8007e6e:	8a3b      	ldrh	r3, [r7, #16]
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8007e74:	88fa      	ldrh	r2, [r7, #6]
 8007e76:	8a79      	ldrh	r1, [r7, #18]
 8007e78:	8a3b      	ldrh	r3, [r7, #16]
 8007e7a:	440b      	add	r3, r1
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	da49      	bge.n	8007f14 <ff_wtoupper+0xe8>
			switch (cmd) {
 8007e80:	89fb      	ldrh	r3, [r7, #14]
 8007e82:	2b08      	cmp	r3, #8
 8007e84:	d84f      	bhi.n	8007f26 <ff_wtoupper+0xfa>
 8007e86:	a201      	add	r2, pc, #4	; (adr r2, 8007e8c <ff_wtoupper+0x60>)
 8007e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e8c:	08007eb1 	.word	0x08007eb1
 8007e90:	08007ec3 	.word	0x08007ec3
 8007e94:	08007ed9 	.word	0x08007ed9
 8007e98:	08007ee1 	.word	0x08007ee1
 8007e9c:	08007ee9 	.word	0x08007ee9
 8007ea0:	08007ef1 	.word	0x08007ef1
 8007ea4:	08007ef9 	.word	0x08007ef9
 8007ea8:	08007f01 	.word	0x08007f01
 8007eac:	08007f09 	.word	0x08007f09
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007eb0:	88fa      	ldrh	r2, [r7, #6]
 8007eb2:	8a7b      	ldrh	r3, [r7, #18]
 8007eb4:	1ad3      	subs	r3, r2, r3
 8007eb6:	005b      	lsls	r3, r3, #1
 8007eb8:	697a      	ldr	r2, [r7, #20]
 8007eba:	4413      	add	r3, r2
 8007ebc:	881b      	ldrh	r3, [r3, #0]
 8007ebe:	80fb      	strh	r3, [r7, #6]
 8007ec0:	e027      	b.n	8007f12 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8007ec2:	88fa      	ldrh	r2, [r7, #6]
 8007ec4:	8a7b      	ldrh	r3, [r7, #18]
 8007ec6:	1ad3      	subs	r3, r2, r3
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	f003 0301 	and.w	r3, r3, #1
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	88fa      	ldrh	r2, [r7, #6]
 8007ed2:	1ad3      	subs	r3, r2, r3
 8007ed4:	80fb      	strh	r3, [r7, #6]
 8007ed6:	e01c      	b.n	8007f12 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007ed8:	88fb      	ldrh	r3, [r7, #6]
 8007eda:	3b10      	subs	r3, #16
 8007edc:	80fb      	strh	r3, [r7, #6]
 8007ede:	e018      	b.n	8007f12 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007ee0:	88fb      	ldrh	r3, [r7, #6]
 8007ee2:	3b20      	subs	r3, #32
 8007ee4:	80fb      	strh	r3, [r7, #6]
 8007ee6:	e014      	b.n	8007f12 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007ee8:	88fb      	ldrh	r3, [r7, #6]
 8007eea:	3b30      	subs	r3, #48	; 0x30
 8007eec:	80fb      	strh	r3, [r7, #6]
 8007eee:	e010      	b.n	8007f12 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8007ef0:	88fb      	ldrh	r3, [r7, #6]
 8007ef2:	3b1a      	subs	r3, #26
 8007ef4:	80fb      	strh	r3, [r7, #6]
 8007ef6:	e00c      	b.n	8007f12 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007ef8:	88fb      	ldrh	r3, [r7, #6]
 8007efa:	3308      	adds	r3, #8
 8007efc:	80fb      	strh	r3, [r7, #6]
 8007efe:	e008      	b.n	8007f12 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8007f00:	88fb      	ldrh	r3, [r7, #6]
 8007f02:	3b50      	subs	r3, #80	; 0x50
 8007f04:	80fb      	strh	r3, [r7, #6]
 8007f06:	e004      	b.n	8007f12 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8007f08:	88fb      	ldrh	r3, [r7, #6]
 8007f0a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8007f0e:	80fb      	strh	r3, [r7, #6]
 8007f10:	bf00      	nop
			}
			break;
 8007f12:	e008      	b.n	8007f26 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8007f14:	89fb      	ldrh	r3, [r7, #14]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d195      	bne.n	8007e46 <ff_wtoupper+0x1a>
 8007f1a:	8a3b      	ldrh	r3, [r7, #16]
 8007f1c:	005b      	lsls	r3, r3, #1
 8007f1e:	697a      	ldr	r2, [r7, #20]
 8007f20:	4413      	add	r3, r2
 8007f22:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8007f24:	e78f      	b.n	8007e46 <ff_wtoupper+0x1a>
			break;
 8007f26:	bf00      	nop
	}

	return chr;
 8007f28:	88fb      	ldrh	r3, [r7, #6]
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	371c      	adds	r7, #28
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr
 8007f36:	bf00      	nop
 8007f38:	0800c3b8 	.word	0x0800c3b8
 8007f3c:	0800c5ac 	.word	0x0800c5ac

08007f40 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b084      	sub	sp, #16
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	4603      	mov	r3, r0
 8007f48:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007f4a:	79fb      	ldrb	r3, [r7, #7]
 8007f4c:	4a08      	ldr	r2, [pc, #32]	; (8007f70 <disk_status+0x30>)
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	4413      	add	r3, r2
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	79fa      	ldrb	r2, [r7, #7]
 8007f58:	4905      	ldr	r1, [pc, #20]	; (8007f70 <disk_status+0x30>)
 8007f5a:	440a      	add	r2, r1
 8007f5c:	7a12      	ldrb	r2, [r2, #8]
 8007f5e:	4610      	mov	r0, r2
 8007f60:	4798      	blx	r3
 8007f62:	4603      	mov	r3, r0
 8007f64:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3710      	adds	r7, #16
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	20001600 	.word	0x20001600

08007f74 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007f82:	79fb      	ldrb	r3, [r7, #7]
 8007f84:	4a0d      	ldr	r2, [pc, #52]	; (8007fbc <disk_initialize+0x48>)
 8007f86:	5cd3      	ldrb	r3, [r2, r3]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d111      	bne.n	8007fb0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007f8c:	79fb      	ldrb	r3, [r7, #7]
 8007f8e:	4a0b      	ldr	r2, [pc, #44]	; (8007fbc <disk_initialize+0x48>)
 8007f90:	2101      	movs	r1, #1
 8007f92:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007f94:	79fb      	ldrb	r3, [r7, #7]
 8007f96:	4a09      	ldr	r2, [pc, #36]	; (8007fbc <disk_initialize+0x48>)
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	4413      	add	r3, r2
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	79fa      	ldrb	r2, [r7, #7]
 8007fa2:	4906      	ldr	r1, [pc, #24]	; (8007fbc <disk_initialize+0x48>)
 8007fa4:	440a      	add	r2, r1
 8007fa6:	7a12      	ldrb	r2, [r2, #8]
 8007fa8:	4610      	mov	r0, r2
 8007faa:	4798      	blx	r3
 8007fac:	4603      	mov	r3, r0
 8007fae:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3710      	adds	r7, #16
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	20001600 	.word	0x20001600

08007fc0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007fc0:	b590      	push	{r4, r7, lr}
 8007fc2:	b087      	sub	sp, #28
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	60b9      	str	r1, [r7, #8]
 8007fc8:	607a      	str	r2, [r7, #4]
 8007fca:	603b      	str	r3, [r7, #0]
 8007fcc:	4603      	mov	r3, r0
 8007fce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007fd0:	7bfb      	ldrb	r3, [r7, #15]
 8007fd2:	4a0a      	ldr	r2, [pc, #40]	; (8007ffc <disk_read+0x3c>)
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	4413      	add	r3, r2
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	689c      	ldr	r4, [r3, #8]
 8007fdc:	7bfb      	ldrb	r3, [r7, #15]
 8007fde:	4a07      	ldr	r2, [pc, #28]	; (8007ffc <disk_read+0x3c>)
 8007fe0:	4413      	add	r3, r2
 8007fe2:	7a18      	ldrb	r0, [r3, #8]
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	68b9      	ldr	r1, [r7, #8]
 8007fea:	47a0      	blx	r4
 8007fec:	4603      	mov	r3, r0
 8007fee:	75fb      	strb	r3, [r7, #23]
  return res;
 8007ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	371c      	adds	r7, #28
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd90      	pop	{r4, r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	20001600 	.word	0x20001600

08008000 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008000:	b590      	push	{r4, r7, lr}
 8008002:	b087      	sub	sp, #28
 8008004:	af00      	add	r7, sp, #0
 8008006:	60b9      	str	r1, [r7, #8]
 8008008:	607a      	str	r2, [r7, #4]
 800800a:	603b      	str	r3, [r7, #0]
 800800c:	4603      	mov	r3, r0
 800800e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008010:	7bfb      	ldrb	r3, [r7, #15]
 8008012:	4a0a      	ldr	r2, [pc, #40]	; (800803c <disk_write+0x3c>)
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	4413      	add	r3, r2
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	68dc      	ldr	r4, [r3, #12]
 800801c:	7bfb      	ldrb	r3, [r7, #15]
 800801e:	4a07      	ldr	r2, [pc, #28]	; (800803c <disk_write+0x3c>)
 8008020:	4413      	add	r3, r2
 8008022:	7a18      	ldrb	r0, [r3, #8]
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	68b9      	ldr	r1, [r7, #8]
 800802a:	47a0      	blx	r4
 800802c:	4603      	mov	r3, r0
 800802e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008030:	7dfb      	ldrb	r3, [r7, #23]
}
 8008032:	4618      	mov	r0, r3
 8008034:	371c      	adds	r7, #28
 8008036:	46bd      	mov	sp, r7
 8008038:	bd90      	pop	{r4, r7, pc}
 800803a:	bf00      	nop
 800803c:	20001600 	.word	0x20001600

08008040 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	4603      	mov	r3, r0
 8008048:	603a      	str	r2, [r7, #0]
 800804a:	71fb      	strb	r3, [r7, #7]
 800804c:	460b      	mov	r3, r1
 800804e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008050:	79fb      	ldrb	r3, [r7, #7]
 8008052:	4a09      	ldr	r2, [pc, #36]	; (8008078 <disk_ioctl+0x38>)
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	4413      	add	r3, r2
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	691b      	ldr	r3, [r3, #16]
 800805c:	79fa      	ldrb	r2, [r7, #7]
 800805e:	4906      	ldr	r1, [pc, #24]	; (8008078 <disk_ioctl+0x38>)
 8008060:	440a      	add	r2, r1
 8008062:	7a10      	ldrb	r0, [r2, #8]
 8008064:	79b9      	ldrb	r1, [r7, #6]
 8008066:	683a      	ldr	r2, [r7, #0]
 8008068:	4798      	blx	r3
 800806a:	4603      	mov	r3, r0
 800806c:	73fb      	strb	r3, [r7, #15]
  return res;
 800806e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008070:	4618      	mov	r0, r3
 8008072:	3710      	adds	r7, #16
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}
 8008078:	20001600 	.word	0x20001600

0800807c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008080:	4904      	ldr	r1, [pc, #16]	; (8008094 <MX_FATFS_Init+0x18>)
 8008082:	4805      	ldr	r0, [pc, #20]	; (8008098 <MX_FATFS_Init+0x1c>)
 8008084:	f003 fe28 	bl	800bcd8 <FATFS_LinkDriver>
 8008088:	4603      	mov	r3, r0
 800808a:	461a      	mov	r2, r3
 800808c:	4b03      	ldr	r3, [pc, #12]	; (800809c <MX_FATFS_Init+0x20>)
 800808e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008090:	bf00      	nop
 8008092:	bd80      	pop	{r7, pc}
 8008094:	200015cc 	.word	0x200015cc
 8008098:	2000003c 	.word	0x2000003c
 800809c:	200015c8 	.word	0x200015c8

080080a0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80080a0:	b480      	push	{r7}
 80080a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80080a4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80080b4:	2200      	movs	r2, #0
 80080b6:	2108      	movs	r1, #8
 80080b8:	4803      	ldr	r0, [pc, #12]	; (80080c8 <SELECT+0x18>)
 80080ba:	f7fa f8cb 	bl	8002254 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80080be:	2001      	movs	r0, #1
 80080c0:	f7f8 fd72 	bl	8000ba8 <HAL_Delay>
}
 80080c4:	bf00      	nop
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	40021000 	.word	0x40021000

080080cc <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80080d0:	2201      	movs	r2, #1
 80080d2:	2108      	movs	r1, #8
 80080d4:	4803      	ldr	r0, [pc, #12]	; (80080e4 <DESELECT+0x18>)
 80080d6:	f7fa f8bd 	bl	8002254 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80080da:	2001      	movs	r0, #1
 80080dc:	f7f8 fd64 	bl	8000ba8 <HAL_Delay>
}
 80080e0:	bf00      	nop
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	40021000 	.word	0x40021000

080080e8 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	4603      	mov	r3, r0
 80080f0:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80080f2:	bf00      	nop
 80080f4:	4b08      	ldr	r3, [pc, #32]	; (8008118 <SPI_TxByte+0x30>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	f003 0302 	and.w	r3, r3, #2
 80080fe:	2b02      	cmp	r3, #2
 8008100:	d1f8      	bne.n	80080f4 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8008102:	1df9      	adds	r1, r7, #7
 8008104:	2364      	movs	r3, #100	; 0x64
 8008106:	2201      	movs	r2, #1
 8008108:	4803      	ldr	r0, [pc, #12]	; (8008118 <SPI_TxByte+0x30>)
 800810a:	f7fc fc8a 	bl	8004a22 <HAL_SPI_Transmit>
}
 800810e:	bf00      	nop
 8008110:	3708      	adds	r7, #8
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	200013ec 	.word	0x200013ec

0800811c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	460b      	mov	r3, r1
 8008126:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8008128:	bf00      	nop
 800812a:	4b08      	ldr	r3, [pc, #32]	; (800814c <SPI_TxBuffer+0x30>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	f003 0302 	and.w	r3, r3, #2
 8008134:	2b02      	cmp	r3, #2
 8008136:	d1f8      	bne.n	800812a <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8008138:	887a      	ldrh	r2, [r7, #2]
 800813a:	2364      	movs	r3, #100	; 0x64
 800813c:	6879      	ldr	r1, [r7, #4]
 800813e:	4803      	ldr	r0, [pc, #12]	; (800814c <SPI_TxBuffer+0x30>)
 8008140:	f7fc fc6f 	bl	8004a22 <HAL_SPI_Transmit>
}
 8008144:	bf00      	nop
 8008146:	3708      	adds	r7, #8
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}
 800814c:	200013ec 	.word	0x200013ec

08008150 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b084      	sub	sp, #16
 8008154:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8008156:	23ff      	movs	r3, #255	; 0xff
 8008158:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800815a:	bf00      	nop
 800815c:	4b09      	ldr	r3, [pc, #36]	; (8008184 <SPI_RxByte+0x34>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	f003 0302 	and.w	r3, r3, #2
 8008166:	2b02      	cmp	r3, #2
 8008168:	d1f8      	bne.n	800815c <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800816a:	1dba      	adds	r2, r7, #6
 800816c:	1df9      	adds	r1, r7, #7
 800816e:	2364      	movs	r3, #100	; 0x64
 8008170:	9300      	str	r3, [sp, #0]
 8008172:	2301      	movs	r3, #1
 8008174:	4803      	ldr	r0, [pc, #12]	; (8008184 <SPI_RxByte+0x34>)
 8008176:	f7fc fd88 	bl	8004c8a <HAL_SPI_TransmitReceive>

	return data;
 800817a:	79bb      	ldrb	r3, [r7, #6]
}
 800817c:	4618      	mov	r0, r3
 800817e:	3708      	adds	r7, #8
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}
 8008184:	200013ec 	.word	0x200013ec

08008188 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8008190:	f7ff ffde 	bl	8008150 <SPI_RxByte>
 8008194:	4603      	mov	r3, r0
 8008196:	461a      	mov	r2, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	701a      	strb	r2, [r3, #0]
}
 800819c:	bf00      	nop
 800819e:	3708      	adds	r7, #8
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80081aa:	4b0a      	ldr	r3, [pc, #40]	; (80081d4 <SD_ReadyWait+0x30>)
 80081ac:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80081b0:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80081b2:	f7ff ffcd 	bl	8008150 <SPI_RxByte>
 80081b6:	4603      	mov	r3, r0
 80081b8:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80081ba:	79fb      	ldrb	r3, [r7, #7]
 80081bc:	2bff      	cmp	r3, #255	; 0xff
 80081be:	d003      	beq.n	80081c8 <SD_ReadyWait+0x24>
 80081c0:	4b04      	ldr	r3, [pc, #16]	; (80081d4 <SD_ReadyWait+0x30>)
 80081c2:	881b      	ldrh	r3, [r3, #0]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d1f4      	bne.n	80081b2 <SD_ReadyWait+0xe>

	return res;
 80081c8:	79fb      	ldrb	r3, [r7, #7]
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3708      	adds	r7, #8
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop
 80081d4:	200015d2 	.word	0x200015d2

080081d8 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80081de:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80081e2:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80081e4:	f7ff ff72 	bl	80080cc <DESELECT>
	for(int i = 0; i < 10; i++)
 80081e8:	2300      	movs	r3, #0
 80081ea:	60bb      	str	r3, [r7, #8]
 80081ec:	e005      	b.n	80081fa <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80081ee:	20ff      	movs	r0, #255	; 0xff
 80081f0:	f7ff ff7a 	bl	80080e8 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	3301      	adds	r3, #1
 80081f8:	60bb      	str	r3, [r7, #8]
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	2b09      	cmp	r3, #9
 80081fe:	ddf6      	ble.n	80081ee <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8008200:	f7ff ff56 	bl	80080b0 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8008204:	2340      	movs	r3, #64	; 0x40
 8008206:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8008208:	2300      	movs	r3, #0
 800820a:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 800820c:	2300      	movs	r3, #0
 800820e:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8008210:	2300      	movs	r3, #0
 8008212:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8008214:	2300      	movs	r3, #0
 8008216:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8008218:	2395      	movs	r3, #149	; 0x95
 800821a:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 800821c:	463b      	mov	r3, r7
 800821e:	2106      	movs	r1, #6
 8008220:	4618      	mov	r0, r3
 8008222:	f7ff ff7b 	bl	800811c <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8008226:	e002      	b.n	800822e <SD_PowerOn+0x56>
	{
		cnt--;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	3b01      	subs	r3, #1
 800822c:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800822e:	f7ff ff8f 	bl	8008150 <SPI_RxByte>
 8008232:	4603      	mov	r3, r0
 8008234:	2b01      	cmp	r3, #1
 8008236:	d002      	beq.n	800823e <SD_PowerOn+0x66>
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d1f4      	bne.n	8008228 <SD_PowerOn+0x50>
	}

	DESELECT();
 800823e:	f7ff ff45 	bl	80080cc <DESELECT>
	SPI_TxByte(0XFF);
 8008242:	20ff      	movs	r0, #255	; 0xff
 8008244:	f7ff ff50 	bl	80080e8 <SPI_TxByte>

	PowerFlag = 1;
 8008248:	4b03      	ldr	r3, [pc, #12]	; (8008258 <SD_PowerOn+0x80>)
 800824a:	2201      	movs	r2, #1
 800824c:	701a      	strb	r2, [r3, #0]
}
 800824e:	bf00      	nop
 8008250:	3710      	adds	r7, #16
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	200015d5 	.word	0x200015d5

0800825c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 800825c:	b480      	push	{r7}
 800825e:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8008260:	4b03      	ldr	r3, [pc, #12]	; (8008270 <SD_PowerOff+0x14>)
 8008262:	2200      	movs	r2, #0
 8008264:	701a      	strb	r2, [r3, #0]
}
 8008266:	bf00      	nop
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr
 8008270:	200015d5 	.word	0x200015d5

08008274 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8008274:	b480      	push	{r7}
 8008276:	af00      	add	r7, sp, #0
	return PowerFlag;
 8008278:	4b03      	ldr	r3, [pc, #12]	; (8008288 <SD_CheckPower+0x14>)
 800827a:	781b      	ldrb	r3, [r3, #0]
}
 800827c:	4618      	mov	r0, r3
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr
 8008286:	bf00      	nop
 8008288:	200015d5 	.word	0x200015d5

0800828c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8008296:	4b13      	ldr	r3, [pc, #76]	; (80082e4 <SD_RxDataBlock+0x58>)
 8008298:	22c8      	movs	r2, #200	; 0xc8
 800829a:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 800829c:	f7ff ff58 	bl	8008150 <SPI_RxByte>
 80082a0:	4603      	mov	r3, r0
 80082a2:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80082a4:	7bfb      	ldrb	r3, [r7, #15]
 80082a6:	2bff      	cmp	r3, #255	; 0xff
 80082a8:	d103      	bne.n	80082b2 <SD_RxDataBlock+0x26>
 80082aa:	4b0e      	ldr	r3, [pc, #56]	; (80082e4 <SD_RxDataBlock+0x58>)
 80082ac:	881b      	ldrh	r3, [r3, #0]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d1f4      	bne.n	800829c <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80082b2:	7bfb      	ldrb	r3, [r7, #15]
 80082b4:	2bfe      	cmp	r3, #254	; 0xfe
 80082b6:	d001      	beq.n	80082bc <SD_RxDataBlock+0x30>
 80082b8:	2300      	movs	r3, #0
 80082ba:	e00f      	b.n	80082dc <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	1c5a      	adds	r2, r3, #1
 80082c0:	607a      	str	r2, [r7, #4]
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7ff ff60 	bl	8008188 <SPI_RxBytePtr>
	} while(len--);
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	1e5a      	subs	r2, r3, #1
 80082cc:	603a      	str	r2, [r7, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d1f4      	bne.n	80082bc <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 80082d2:	f7ff ff3d 	bl	8008150 <SPI_RxByte>
	SPI_RxByte();
 80082d6:	f7ff ff3b 	bl	8008150 <SPI_RxByte>

	return TRUE;
 80082da:	2301      	movs	r3, #1
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3710      	adds	r7, #16
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}
 80082e4:	200015d0 	.word	0x200015d0

080082e8 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	460b      	mov	r3, r1
 80082f2:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80082f4:	2300      	movs	r3, #0
 80082f6:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80082f8:	f7ff ff54 	bl	80081a4 <SD_ReadyWait>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2bff      	cmp	r3, #255	; 0xff
 8008300:	d001      	beq.n	8008306 <SD_TxDataBlock+0x1e>
 8008302:	2300      	movs	r3, #0
 8008304:	e02f      	b.n	8008366 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8008306:	78fb      	ldrb	r3, [r7, #3]
 8008308:	4618      	mov	r0, r3
 800830a:	f7ff feed 	bl	80080e8 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800830e:	78fb      	ldrb	r3, [r7, #3]
 8008310:	2bfd      	cmp	r3, #253	; 0xfd
 8008312:	d020      	beq.n	8008356 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8008314:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f7ff feff 	bl	800811c <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800831e:	f7ff ff17 	bl	8008150 <SPI_RxByte>
		SPI_RxByte();
 8008322:	f7ff ff15 	bl	8008150 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8008326:	e00b      	b.n	8008340 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8008328:	f7ff ff12 	bl	8008150 <SPI_RxByte>
 800832c:	4603      	mov	r3, r0
 800832e:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8008330:	7bfb      	ldrb	r3, [r7, #15]
 8008332:	f003 031f 	and.w	r3, r3, #31
 8008336:	2b05      	cmp	r3, #5
 8008338:	d006      	beq.n	8008348 <SD_TxDataBlock+0x60>
			i++;
 800833a:	7bbb      	ldrb	r3, [r7, #14]
 800833c:	3301      	adds	r3, #1
 800833e:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8008340:	7bbb      	ldrb	r3, [r7, #14]
 8008342:	2b40      	cmp	r3, #64	; 0x40
 8008344:	d9f0      	bls.n	8008328 <SD_TxDataBlock+0x40>
 8008346:	e000      	b.n	800834a <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8008348:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800834a:	bf00      	nop
 800834c:	f7ff ff00 	bl	8008150 <SPI_RxByte>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d0fa      	beq.n	800834c <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8008356:	7bfb      	ldrb	r3, [r7, #15]
 8008358:	f003 031f 	and.w	r3, r3, #31
 800835c:	2b05      	cmp	r3, #5
 800835e:	d101      	bne.n	8008364 <SD_TxDataBlock+0x7c>
 8008360:	2301      	movs	r3, #1
 8008362:	e000      	b.n	8008366 <SD_TxDataBlock+0x7e>

	return FALSE;
 8008364:	2300      	movs	r3, #0
}
 8008366:	4618      	mov	r0, r3
 8008368:	3710      	adds	r7, #16
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}

0800836e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800836e:	b580      	push	{r7, lr}
 8008370:	b084      	sub	sp, #16
 8008372:	af00      	add	r7, sp, #0
 8008374:	4603      	mov	r3, r0
 8008376:	6039      	str	r1, [r7, #0]
 8008378:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800837a:	f7ff ff13 	bl	80081a4 <SD_ReadyWait>
 800837e:	4603      	mov	r3, r0
 8008380:	2bff      	cmp	r3, #255	; 0xff
 8008382:	d001      	beq.n	8008388 <SD_SendCmd+0x1a>
 8008384:	23ff      	movs	r3, #255	; 0xff
 8008386:	e042      	b.n	800840e <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8008388:	79fb      	ldrb	r3, [r7, #7]
 800838a:	4618      	mov	r0, r3
 800838c:	f7ff feac 	bl	80080e8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	0e1b      	lsrs	r3, r3, #24
 8008394:	b2db      	uxtb	r3, r3
 8008396:	4618      	mov	r0, r3
 8008398:	f7ff fea6 	bl	80080e8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	0c1b      	lsrs	r3, r3, #16
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	4618      	mov	r0, r3
 80083a4:	f7ff fea0 	bl	80080e8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	0a1b      	lsrs	r3, r3, #8
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	4618      	mov	r0, r3
 80083b0:	f7ff fe9a 	bl	80080e8 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	4618      	mov	r0, r3
 80083ba:	f7ff fe95 	bl	80080e8 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80083be:	79fb      	ldrb	r3, [r7, #7]
 80083c0:	2b40      	cmp	r3, #64	; 0x40
 80083c2:	d102      	bne.n	80083ca <SD_SendCmd+0x5c>
 80083c4:	2395      	movs	r3, #149	; 0x95
 80083c6:	73fb      	strb	r3, [r7, #15]
 80083c8:	e007      	b.n	80083da <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80083ca:	79fb      	ldrb	r3, [r7, #7]
 80083cc:	2b48      	cmp	r3, #72	; 0x48
 80083ce:	d102      	bne.n	80083d6 <SD_SendCmd+0x68>
 80083d0:	2387      	movs	r3, #135	; 0x87
 80083d2:	73fb      	strb	r3, [r7, #15]
 80083d4:	e001      	b.n	80083da <SD_SendCmd+0x6c>
	else crc = 1;
 80083d6:	2301      	movs	r3, #1
 80083d8:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80083da:	7bfb      	ldrb	r3, [r7, #15]
 80083dc:	4618      	mov	r0, r3
 80083de:	f7ff fe83 	bl	80080e8 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80083e2:	79fb      	ldrb	r3, [r7, #7]
 80083e4:	2b4c      	cmp	r3, #76	; 0x4c
 80083e6:	d101      	bne.n	80083ec <SD_SendCmd+0x7e>
 80083e8:	f7ff feb2 	bl	8008150 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80083ec:	230a      	movs	r3, #10
 80083ee:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80083f0:	f7ff feae 	bl	8008150 <SPI_RxByte>
 80083f4:	4603      	mov	r3, r0
 80083f6:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80083f8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	da05      	bge.n	800840c <SD_SendCmd+0x9e>
 8008400:	7bbb      	ldrb	r3, [r7, #14]
 8008402:	3b01      	subs	r3, #1
 8008404:	73bb      	strb	r3, [r7, #14]
 8008406:	7bbb      	ldrb	r3, [r7, #14]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d1f1      	bne.n	80083f0 <SD_SendCmd+0x82>

	return res;
 800840c:	7b7b      	ldrb	r3, [r7, #13]
}
 800840e:	4618      	mov	r0, r3
 8008410:	3710      	adds	r7, #16
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
	...

08008418 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8008418:	b590      	push	{r4, r7, lr}
 800841a:	b085      	sub	sp, #20
 800841c:	af00      	add	r7, sp, #0
 800841e:	4603      	mov	r3, r0
 8008420:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8008422:	79fb      	ldrb	r3, [r7, #7]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d001      	beq.n	800842c <SD_disk_initialize+0x14>
 8008428:	2301      	movs	r3, #1
 800842a:	e0d1      	b.n	80085d0 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 800842c:	4b6a      	ldr	r3, [pc, #424]	; (80085d8 <SD_disk_initialize+0x1c0>)
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	b2db      	uxtb	r3, r3
 8008432:	f003 0302 	and.w	r3, r3, #2
 8008436:	2b00      	cmp	r3, #0
 8008438:	d003      	beq.n	8008442 <SD_disk_initialize+0x2a>
 800843a:	4b67      	ldr	r3, [pc, #412]	; (80085d8 <SD_disk_initialize+0x1c0>)
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	b2db      	uxtb	r3, r3
 8008440:	e0c6      	b.n	80085d0 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8008442:	f7ff fec9 	bl	80081d8 <SD_PowerOn>

	/* slave select */
	SELECT();
 8008446:	f7ff fe33 	bl	80080b0 <SELECT>

	/* check disk type */
	type = 0;
 800844a:	2300      	movs	r3, #0
 800844c:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800844e:	2100      	movs	r1, #0
 8008450:	2040      	movs	r0, #64	; 0x40
 8008452:	f7ff ff8c 	bl	800836e <SD_SendCmd>
 8008456:	4603      	mov	r3, r0
 8008458:	2b01      	cmp	r3, #1
 800845a:	f040 80a1 	bne.w	80085a0 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800845e:	4b5f      	ldr	r3, [pc, #380]	; (80085dc <SD_disk_initialize+0x1c4>)
 8008460:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008464:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8008466:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800846a:	2048      	movs	r0, #72	; 0x48
 800846c:	f7ff ff7f 	bl	800836e <SD_SendCmd>
 8008470:	4603      	mov	r3, r0
 8008472:	2b01      	cmp	r3, #1
 8008474:	d155      	bne.n	8008522 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8008476:	2300      	movs	r3, #0
 8008478:	73fb      	strb	r3, [r7, #15]
 800847a:	e00c      	b.n	8008496 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 800847c:	7bfc      	ldrb	r4, [r7, #15]
 800847e:	f7ff fe67 	bl	8008150 <SPI_RxByte>
 8008482:	4603      	mov	r3, r0
 8008484:	461a      	mov	r2, r3
 8008486:	f104 0310 	add.w	r3, r4, #16
 800848a:	443b      	add	r3, r7
 800848c:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8008490:	7bfb      	ldrb	r3, [r7, #15]
 8008492:	3301      	adds	r3, #1
 8008494:	73fb      	strb	r3, [r7, #15]
 8008496:	7bfb      	ldrb	r3, [r7, #15]
 8008498:	2b03      	cmp	r3, #3
 800849a:	d9ef      	bls.n	800847c <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800849c:	7abb      	ldrb	r3, [r7, #10]
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d17e      	bne.n	80085a0 <SD_disk_initialize+0x188>
 80084a2:	7afb      	ldrb	r3, [r7, #11]
 80084a4:	2baa      	cmp	r3, #170	; 0xaa
 80084a6:	d17b      	bne.n	80085a0 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80084a8:	2100      	movs	r1, #0
 80084aa:	2077      	movs	r0, #119	; 0x77
 80084ac:	f7ff ff5f 	bl	800836e <SD_SendCmd>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b01      	cmp	r3, #1
 80084b4:	d807      	bhi.n	80084c6 <SD_disk_initialize+0xae>
 80084b6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80084ba:	2069      	movs	r0, #105	; 0x69
 80084bc:	f7ff ff57 	bl	800836e <SD_SendCmd>
 80084c0:	4603      	mov	r3, r0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d004      	beq.n	80084d0 <SD_disk_initialize+0xb8>
				} while (Timer1);
 80084c6:	4b45      	ldr	r3, [pc, #276]	; (80085dc <SD_disk_initialize+0x1c4>)
 80084c8:	881b      	ldrh	r3, [r3, #0]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d1ec      	bne.n	80084a8 <SD_disk_initialize+0x90>
 80084ce:	e000      	b.n	80084d2 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80084d0:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80084d2:	4b42      	ldr	r3, [pc, #264]	; (80085dc <SD_disk_initialize+0x1c4>)
 80084d4:	881b      	ldrh	r3, [r3, #0]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d062      	beq.n	80085a0 <SD_disk_initialize+0x188>
 80084da:	2100      	movs	r1, #0
 80084dc:	207a      	movs	r0, #122	; 0x7a
 80084de:	f7ff ff46 	bl	800836e <SD_SendCmd>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d15b      	bne.n	80085a0 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80084e8:	2300      	movs	r3, #0
 80084ea:	73fb      	strb	r3, [r7, #15]
 80084ec:	e00c      	b.n	8008508 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80084ee:	7bfc      	ldrb	r4, [r7, #15]
 80084f0:	f7ff fe2e 	bl	8008150 <SPI_RxByte>
 80084f4:	4603      	mov	r3, r0
 80084f6:	461a      	mov	r2, r3
 80084f8:	f104 0310 	add.w	r3, r4, #16
 80084fc:	443b      	add	r3, r7
 80084fe:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8008502:	7bfb      	ldrb	r3, [r7, #15]
 8008504:	3301      	adds	r3, #1
 8008506:	73fb      	strb	r3, [r7, #15]
 8008508:	7bfb      	ldrb	r3, [r7, #15]
 800850a:	2b03      	cmp	r3, #3
 800850c:	d9ef      	bls.n	80084ee <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800850e:	7a3b      	ldrb	r3, [r7, #8]
 8008510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008514:	2b00      	cmp	r3, #0
 8008516:	d001      	beq.n	800851c <SD_disk_initialize+0x104>
 8008518:	230c      	movs	r3, #12
 800851a:	e000      	b.n	800851e <SD_disk_initialize+0x106>
 800851c:	2304      	movs	r3, #4
 800851e:	73bb      	strb	r3, [r7, #14]
 8008520:	e03e      	b.n	80085a0 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8008522:	2100      	movs	r1, #0
 8008524:	2077      	movs	r0, #119	; 0x77
 8008526:	f7ff ff22 	bl	800836e <SD_SendCmd>
 800852a:	4603      	mov	r3, r0
 800852c:	2b01      	cmp	r3, #1
 800852e:	d808      	bhi.n	8008542 <SD_disk_initialize+0x12a>
 8008530:	2100      	movs	r1, #0
 8008532:	2069      	movs	r0, #105	; 0x69
 8008534:	f7ff ff1b 	bl	800836e <SD_SendCmd>
 8008538:	4603      	mov	r3, r0
 800853a:	2b01      	cmp	r3, #1
 800853c:	d801      	bhi.n	8008542 <SD_disk_initialize+0x12a>
 800853e:	2302      	movs	r3, #2
 8008540:	e000      	b.n	8008544 <SD_disk_initialize+0x12c>
 8008542:	2301      	movs	r3, #1
 8008544:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8008546:	7bbb      	ldrb	r3, [r7, #14]
 8008548:	2b02      	cmp	r3, #2
 800854a:	d10e      	bne.n	800856a <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800854c:	2100      	movs	r1, #0
 800854e:	2077      	movs	r0, #119	; 0x77
 8008550:	f7ff ff0d 	bl	800836e <SD_SendCmd>
 8008554:	4603      	mov	r3, r0
 8008556:	2b01      	cmp	r3, #1
 8008558:	d80e      	bhi.n	8008578 <SD_disk_initialize+0x160>
 800855a:	2100      	movs	r1, #0
 800855c:	2069      	movs	r0, #105	; 0x69
 800855e:	f7ff ff06 	bl	800836e <SD_SendCmd>
 8008562:	4603      	mov	r3, r0
 8008564:	2b00      	cmp	r3, #0
 8008566:	d107      	bne.n	8008578 <SD_disk_initialize+0x160>
 8008568:	e00c      	b.n	8008584 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800856a:	2100      	movs	r1, #0
 800856c:	2041      	movs	r0, #65	; 0x41
 800856e:	f7ff fefe 	bl	800836e <SD_SendCmd>
 8008572:	4603      	mov	r3, r0
 8008574:	2b00      	cmp	r3, #0
 8008576:	d004      	beq.n	8008582 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8008578:	4b18      	ldr	r3, [pc, #96]	; (80085dc <SD_disk_initialize+0x1c4>)
 800857a:	881b      	ldrh	r3, [r3, #0]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d1e2      	bne.n	8008546 <SD_disk_initialize+0x12e>
 8008580:	e000      	b.n	8008584 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8008582:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8008584:	4b15      	ldr	r3, [pc, #84]	; (80085dc <SD_disk_initialize+0x1c4>)
 8008586:	881b      	ldrh	r3, [r3, #0]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d007      	beq.n	800859c <SD_disk_initialize+0x184>
 800858c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008590:	2050      	movs	r0, #80	; 0x50
 8008592:	f7ff feec 	bl	800836e <SD_SendCmd>
 8008596:	4603      	mov	r3, r0
 8008598:	2b00      	cmp	r3, #0
 800859a:	d001      	beq.n	80085a0 <SD_disk_initialize+0x188>
 800859c:	2300      	movs	r3, #0
 800859e:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80085a0:	4a0f      	ldr	r2, [pc, #60]	; (80085e0 <SD_disk_initialize+0x1c8>)
 80085a2:	7bbb      	ldrb	r3, [r7, #14]
 80085a4:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80085a6:	f7ff fd91 	bl	80080cc <DESELECT>
	SPI_RxByte();
 80085aa:	f7ff fdd1 	bl	8008150 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80085ae:	7bbb      	ldrb	r3, [r7, #14]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d008      	beq.n	80085c6 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 80085b4:	4b08      	ldr	r3, [pc, #32]	; (80085d8 <SD_disk_initialize+0x1c0>)
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	f023 0301 	bic.w	r3, r3, #1
 80085be:	b2da      	uxtb	r2, r3
 80085c0:	4b05      	ldr	r3, [pc, #20]	; (80085d8 <SD_disk_initialize+0x1c0>)
 80085c2:	701a      	strb	r2, [r3, #0]
 80085c4:	e001      	b.n	80085ca <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80085c6:	f7ff fe49 	bl	800825c <SD_PowerOff>
	}

	return Stat;
 80085ca:	4b03      	ldr	r3, [pc, #12]	; (80085d8 <SD_disk_initialize+0x1c0>)
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	b2db      	uxtb	r3, r3
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3714      	adds	r7, #20
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd90      	pop	{r4, r7, pc}
 80085d8:	20000038 	.word	0x20000038
 80085dc:	200015d0 	.word	0x200015d0
 80085e0:	200015d4 	.word	0x200015d4

080085e4 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80085e4:	b480      	push	{r7}
 80085e6:	b083      	sub	sp, #12
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	4603      	mov	r3, r0
 80085ec:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80085ee:	79fb      	ldrb	r3, [r7, #7]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d001      	beq.n	80085f8 <SD_disk_status+0x14>
 80085f4:	2301      	movs	r3, #1
 80085f6:	e002      	b.n	80085fe <SD_disk_status+0x1a>
	return Stat;
 80085f8:	4b04      	ldr	r3, [pc, #16]	; (800860c <SD_disk_status+0x28>)
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	b2db      	uxtb	r3, r3
}
 80085fe:	4618      	mov	r0, r3
 8008600:	370c      	adds	r7, #12
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr
 800860a:	bf00      	nop
 800860c:	20000038 	.word	0x20000038

08008610 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b084      	sub	sp, #16
 8008614:	af00      	add	r7, sp, #0
 8008616:	60b9      	str	r1, [r7, #8]
 8008618:	607a      	str	r2, [r7, #4]
 800861a:	603b      	str	r3, [r7, #0]
 800861c:	4603      	mov	r3, r0
 800861e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8008620:	7bfb      	ldrb	r3, [r7, #15]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d102      	bne.n	800862c <SD_disk_read+0x1c>
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d101      	bne.n	8008630 <SD_disk_read+0x20>
 800862c:	2304      	movs	r3, #4
 800862e:	e051      	b.n	80086d4 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008630:	4b2a      	ldr	r3, [pc, #168]	; (80086dc <SD_disk_read+0xcc>)
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	b2db      	uxtb	r3, r3
 8008636:	f003 0301 	and.w	r3, r3, #1
 800863a:	2b00      	cmp	r3, #0
 800863c:	d001      	beq.n	8008642 <SD_disk_read+0x32>
 800863e:	2303      	movs	r3, #3
 8008640:	e048      	b.n	80086d4 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8008642:	4b27      	ldr	r3, [pc, #156]	; (80086e0 <SD_disk_read+0xd0>)
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	f003 0304 	and.w	r3, r3, #4
 800864a:	2b00      	cmp	r3, #0
 800864c:	d102      	bne.n	8008654 <SD_disk_read+0x44>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	025b      	lsls	r3, r3, #9
 8008652:	607b      	str	r3, [r7, #4]

	SELECT();
 8008654:	f7ff fd2c 	bl	80080b0 <SELECT>

	if (count == 1)
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	2b01      	cmp	r3, #1
 800865c:	d111      	bne.n	8008682 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800865e:	6879      	ldr	r1, [r7, #4]
 8008660:	2051      	movs	r0, #81	; 0x51
 8008662:	f7ff fe84 	bl	800836e <SD_SendCmd>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d129      	bne.n	80086c0 <SD_disk_read+0xb0>
 800866c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008670:	68b8      	ldr	r0, [r7, #8]
 8008672:	f7ff fe0b 	bl	800828c <SD_RxDataBlock>
 8008676:	4603      	mov	r3, r0
 8008678:	2b00      	cmp	r3, #0
 800867a:	d021      	beq.n	80086c0 <SD_disk_read+0xb0>
 800867c:	2300      	movs	r3, #0
 800867e:	603b      	str	r3, [r7, #0]
 8008680:	e01e      	b.n	80086c0 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8008682:	6879      	ldr	r1, [r7, #4]
 8008684:	2052      	movs	r0, #82	; 0x52
 8008686:	f7ff fe72 	bl	800836e <SD_SendCmd>
 800868a:	4603      	mov	r3, r0
 800868c:	2b00      	cmp	r3, #0
 800868e:	d117      	bne.n	80086c0 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8008690:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008694:	68b8      	ldr	r0, [r7, #8]
 8008696:	f7ff fdf9 	bl	800828c <SD_RxDataBlock>
 800869a:	4603      	mov	r3, r0
 800869c:	2b00      	cmp	r3, #0
 800869e:	d00a      	beq.n	80086b6 <SD_disk_read+0xa6>
				buff += 512;
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80086a6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	3b01      	subs	r3, #1
 80086ac:	603b      	str	r3, [r7, #0]
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d1ed      	bne.n	8008690 <SD_disk_read+0x80>
 80086b4:	e000      	b.n	80086b8 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80086b6:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80086b8:	2100      	movs	r1, #0
 80086ba:	204c      	movs	r0, #76	; 0x4c
 80086bc:	f7ff fe57 	bl	800836e <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80086c0:	f7ff fd04 	bl	80080cc <DESELECT>
	SPI_RxByte();
 80086c4:	f7ff fd44 	bl	8008150 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	bf14      	ite	ne
 80086ce:	2301      	movne	r3, #1
 80086d0:	2300      	moveq	r3, #0
 80086d2:	b2db      	uxtb	r3, r3
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3710      	adds	r7, #16
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}
 80086dc:	20000038 	.word	0x20000038
 80086e0:	200015d4 	.word	0x200015d4

080086e4 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b084      	sub	sp, #16
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	60b9      	str	r1, [r7, #8]
 80086ec:	607a      	str	r2, [r7, #4]
 80086ee:	603b      	str	r3, [r7, #0]
 80086f0:	4603      	mov	r3, r0
 80086f2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80086f4:	7bfb      	ldrb	r3, [r7, #15]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d102      	bne.n	8008700 <SD_disk_write+0x1c>
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d101      	bne.n	8008704 <SD_disk_write+0x20>
 8008700:	2304      	movs	r3, #4
 8008702:	e06b      	b.n	80087dc <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008704:	4b37      	ldr	r3, [pc, #220]	; (80087e4 <SD_disk_write+0x100>)
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	b2db      	uxtb	r3, r3
 800870a:	f003 0301 	and.w	r3, r3, #1
 800870e:	2b00      	cmp	r3, #0
 8008710:	d001      	beq.n	8008716 <SD_disk_write+0x32>
 8008712:	2303      	movs	r3, #3
 8008714:	e062      	b.n	80087dc <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8008716:	4b33      	ldr	r3, [pc, #204]	; (80087e4 <SD_disk_write+0x100>)
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	b2db      	uxtb	r3, r3
 800871c:	f003 0304 	and.w	r3, r3, #4
 8008720:	2b00      	cmp	r3, #0
 8008722:	d001      	beq.n	8008728 <SD_disk_write+0x44>
 8008724:	2302      	movs	r3, #2
 8008726:	e059      	b.n	80087dc <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8008728:	4b2f      	ldr	r3, [pc, #188]	; (80087e8 <SD_disk_write+0x104>)
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	f003 0304 	and.w	r3, r3, #4
 8008730:	2b00      	cmp	r3, #0
 8008732:	d102      	bne.n	800873a <SD_disk_write+0x56>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	025b      	lsls	r3, r3, #9
 8008738:	607b      	str	r3, [r7, #4]

	SELECT();
 800873a:	f7ff fcb9 	bl	80080b0 <SELECT>

	if (count == 1)
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	2b01      	cmp	r3, #1
 8008742:	d110      	bne.n	8008766 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8008744:	6879      	ldr	r1, [r7, #4]
 8008746:	2058      	movs	r0, #88	; 0x58
 8008748:	f7ff fe11 	bl	800836e <SD_SendCmd>
 800874c:	4603      	mov	r3, r0
 800874e:	2b00      	cmp	r3, #0
 8008750:	d13a      	bne.n	80087c8 <SD_disk_write+0xe4>
 8008752:	21fe      	movs	r1, #254	; 0xfe
 8008754:	68b8      	ldr	r0, [r7, #8]
 8008756:	f7ff fdc7 	bl	80082e8 <SD_TxDataBlock>
 800875a:	4603      	mov	r3, r0
 800875c:	2b00      	cmp	r3, #0
 800875e:	d033      	beq.n	80087c8 <SD_disk_write+0xe4>
			count = 0;
 8008760:	2300      	movs	r3, #0
 8008762:	603b      	str	r3, [r7, #0]
 8008764:	e030      	b.n	80087c8 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8008766:	4b20      	ldr	r3, [pc, #128]	; (80087e8 <SD_disk_write+0x104>)
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	f003 0302 	and.w	r3, r3, #2
 800876e:	2b00      	cmp	r3, #0
 8008770:	d007      	beq.n	8008782 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8008772:	2100      	movs	r1, #0
 8008774:	2077      	movs	r0, #119	; 0x77
 8008776:	f7ff fdfa 	bl	800836e <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800877a:	6839      	ldr	r1, [r7, #0]
 800877c:	2057      	movs	r0, #87	; 0x57
 800877e:	f7ff fdf6 	bl	800836e <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8008782:	6879      	ldr	r1, [r7, #4]
 8008784:	2059      	movs	r0, #89	; 0x59
 8008786:	f7ff fdf2 	bl	800836e <SD_SendCmd>
 800878a:	4603      	mov	r3, r0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d11b      	bne.n	80087c8 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8008790:	21fc      	movs	r1, #252	; 0xfc
 8008792:	68b8      	ldr	r0, [r7, #8]
 8008794:	f7ff fda8 	bl	80082e8 <SD_TxDataBlock>
 8008798:	4603      	mov	r3, r0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d00a      	beq.n	80087b4 <SD_disk_write+0xd0>
				buff += 512;
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80087a4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	3b01      	subs	r3, #1
 80087aa:	603b      	str	r3, [r7, #0]
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d1ee      	bne.n	8008790 <SD_disk_write+0xac>
 80087b2:	e000      	b.n	80087b6 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80087b4:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80087b6:	21fd      	movs	r1, #253	; 0xfd
 80087b8:	2000      	movs	r0, #0
 80087ba:	f7ff fd95 	bl	80082e8 <SD_TxDataBlock>
 80087be:	4603      	mov	r3, r0
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d101      	bne.n	80087c8 <SD_disk_write+0xe4>
			{
				count = 1;
 80087c4:	2301      	movs	r3, #1
 80087c6:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80087c8:	f7ff fc80 	bl	80080cc <DESELECT>
	SPI_RxByte();
 80087cc:	f7ff fcc0 	bl	8008150 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	bf14      	ite	ne
 80087d6:	2301      	movne	r3, #1
 80087d8:	2300      	moveq	r3, #0
 80087da:	b2db      	uxtb	r3, r3
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3710      	adds	r7, #16
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}
 80087e4:	20000038 	.word	0x20000038
 80087e8:	200015d4 	.word	0x200015d4

080087ec <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80087ec:	b590      	push	{r4, r7, lr}
 80087ee:	b08b      	sub	sp, #44	; 0x2c
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	4603      	mov	r3, r0
 80087f4:	603a      	str	r2, [r7, #0]
 80087f6:	71fb      	strb	r3, [r7, #7]
 80087f8:	460b      	mov	r3, r1
 80087fa:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8008800:	79fb      	ldrb	r3, [r7, #7]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d001      	beq.n	800880a <SD_disk_ioctl+0x1e>
 8008806:	2304      	movs	r3, #4
 8008808:	e115      	b.n	8008a36 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 800880a:	2301      	movs	r3, #1
 800880c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8008810:	79bb      	ldrb	r3, [r7, #6]
 8008812:	2b05      	cmp	r3, #5
 8008814:	d124      	bne.n	8008860 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8008816:	6a3b      	ldr	r3, [r7, #32]
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	2b02      	cmp	r3, #2
 800881c:	d012      	beq.n	8008844 <SD_disk_ioctl+0x58>
 800881e:	2b02      	cmp	r3, #2
 8008820:	dc1a      	bgt.n	8008858 <SD_disk_ioctl+0x6c>
 8008822:	2b00      	cmp	r3, #0
 8008824:	d002      	beq.n	800882c <SD_disk_ioctl+0x40>
 8008826:	2b01      	cmp	r3, #1
 8008828:	d006      	beq.n	8008838 <SD_disk_ioctl+0x4c>
 800882a:	e015      	b.n	8008858 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 800882c:	f7ff fd16 	bl	800825c <SD_PowerOff>
			res = RES_OK;
 8008830:	2300      	movs	r3, #0
 8008832:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8008836:	e0fc      	b.n	8008a32 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8008838:	f7ff fcce 	bl	80081d8 <SD_PowerOn>
			res = RES_OK;
 800883c:	2300      	movs	r3, #0
 800883e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8008842:	e0f6      	b.n	8008a32 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8008844:	6a3b      	ldr	r3, [r7, #32]
 8008846:	1c5c      	adds	r4, r3, #1
 8008848:	f7ff fd14 	bl	8008274 <SD_CheckPower>
 800884c:	4603      	mov	r3, r0
 800884e:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8008850:	2300      	movs	r3, #0
 8008852:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8008856:	e0ec      	b.n	8008a32 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8008858:	2304      	movs	r3, #4
 800885a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800885e:	e0e8      	b.n	8008a32 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008860:	4b77      	ldr	r3, [pc, #476]	; (8008a40 <SD_disk_ioctl+0x254>)
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	b2db      	uxtb	r3, r3
 8008866:	f003 0301 	and.w	r3, r3, #1
 800886a:	2b00      	cmp	r3, #0
 800886c:	d001      	beq.n	8008872 <SD_disk_ioctl+0x86>
 800886e:	2303      	movs	r3, #3
 8008870:	e0e1      	b.n	8008a36 <SD_disk_ioctl+0x24a>

		SELECT();
 8008872:	f7ff fc1d 	bl	80080b0 <SELECT>

		switch (ctrl)
 8008876:	79bb      	ldrb	r3, [r7, #6]
 8008878:	2b0d      	cmp	r3, #13
 800887a:	f200 80cb 	bhi.w	8008a14 <SD_disk_ioctl+0x228>
 800887e:	a201      	add	r2, pc, #4	; (adr r2, 8008884 <SD_disk_ioctl+0x98>)
 8008880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008884:	0800897f 	.word	0x0800897f
 8008888:	080088bd 	.word	0x080088bd
 800888c:	0800896f 	.word	0x0800896f
 8008890:	08008a15 	.word	0x08008a15
 8008894:	08008a15 	.word	0x08008a15
 8008898:	08008a15 	.word	0x08008a15
 800889c:	08008a15 	.word	0x08008a15
 80088a0:	08008a15 	.word	0x08008a15
 80088a4:	08008a15 	.word	0x08008a15
 80088a8:	08008a15 	.word	0x08008a15
 80088ac:	08008a15 	.word	0x08008a15
 80088b0:	08008991 	.word	0x08008991
 80088b4:	080089b5 	.word	0x080089b5
 80088b8:	080089d9 	.word	0x080089d9
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80088bc:	2100      	movs	r1, #0
 80088be:	2049      	movs	r0, #73	; 0x49
 80088c0:	f7ff fd55 	bl	800836e <SD_SendCmd>
 80088c4:	4603      	mov	r3, r0
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	f040 80a8 	bne.w	8008a1c <SD_disk_ioctl+0x230>
 80088cc:	f107 030c 	add.w	r3, r7, #12
 80088d0:	2110      	movs	r1, #16
 80088d2:	4618      	mov	r0, r3
 80088d4:	f7ff fcda 	bl	800828c <SD_RxDataBlock>
 80088d8:	4603      	mov	r3, r0
 80088da:	2b00      	cmp	r3, #0
 80088dc:	f000 809e 	beq.w	8008a1c <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80088e0:	7b3b      	ldrb	r3, [r7, #12]
 80088e2:	099b      	lsrs	r3, r3, #6
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d10e      	bne.n	8008908 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80088ea:	7d7b      	ldrb	r3, [r7, #21]
 80088ec:	b29a      	uxth	r2, r3
 80088ee:	7d3b      	ldrb	r3, [r7, #20]
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	021b      	lsls	r3, r3, #8
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	4413      	add	r3, r2
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	3301      	adds	r3, #1
 80088fc:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80088fe:	8bfb      	ldrh	r3, [r7, #30]
 8008900:	029a      	lsls	r2, r3, #10
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	601a      	str	r2, [r3, #0]
 8008906:	e02e      	b.n	8008966 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8008908:	7c7b      	ldrb	r3, [r7, #17]
 800890a:	f003 030f 	and.w	r3, r3, #15
 800890e:	b2da      	uxtb	r2, r3
 8008910:	7dbb      	ldrb	r3, [r7, #22]
 8008912:	09db      	lsrs	r3, r3, #7
 8008914:	b2db      	uxtb	r3, r3
 8008916:	4413      	add	r3, r2
 8008918:	b2da      	uxtb	r2, r3
 800891a:	7d7b      	ldrb	r3, [r7, #21]
 800891c:	005b      	lsls	r3, r3, #1
 800891e:	b2db      	uxtb	r3, r3
 8008920:	f003 0306 	and.w	r3, r3, #6
 8008924:	b2db      	uxtb	r3, r3
 8008926:	4413      	add	r3, r2
 8008928:	b2db      	uxtb	r3, r3
 800892a:	3302      	adds	r3, #2
 800892c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8008930:	7d3b      	ldrb	r3, [r7, #20]
 8008932:	099b      	lsrs	r3, r3, #6
 8008934:	b2db      	uxtb	r3, r3
 8008936:	b29a      	uxth	r2, r3
 8008938:	7cfb      	ldrb	r3, [r7, #19]
 800893a:	b29b      	uxth	r3, r3
 800893c:	009b      	lsls	r3, r3, #2
 800893e:	b29b      	uxth	r3, r3
 8008940:	4413      	add	r3, r2
 8008942:	b29a      	uxth	r2, r3
 8008944:	7cbb      	ldrb	r3, [r7, #18]
 8008946:	029b      	lsls	r3, r3, #10
 8008948:	b29b      	uxth	r3, r3
 800894a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800894e:	b29b      	uxth	r3, r3
 8008950:	4413      	add	r3, r2
 8008952:	b29b      	uxth	r3, r3
 8008954:	3301      	adds	r3, #1
 8008956:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8008958:	8bfa      	ldrh	r2, [r7, #30]
 800895a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800895e:	3b09      	subs	r3, #9
 8008960:	409a      	lsls	r2, r3
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8008966:	2300      	movs	r3, #0
 8008968:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 800896c:	e056      	b.n	8008a1c <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008974:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8008976:	2300      	movs	r3, #0
 8008978:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800897c:	e055      	b.n	8008a2a <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800897e:	f7ff fc11 	bl	80081a4 <SD_ReadyWait>
 8008982:	4603      	mov	r3, r0
 8008984:	2bff      	cmp	r3, #255	; 0xff
 8008986:	d14b      	bne.n	8008a20 <SD_disk_ioctl+0x234>
 8008988:	2300      	movs	r3, #0
 800898a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800898e:	e047      	b.n	8008a20 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8008990:	2100      	movs	r1, #0
 8008992:	2049      	movs	r0, #73	; 0x49
 8008994:	f7ff fceb 	bl	800836e <SD_SendCmd>
 8008998:	4603      	mov	r3, r0
 800899a:	2b00      	cmp	r3, #0
 800899c:	d142      	bne.n	8008a24 <SD_disk_ioctl+0x238>
 800899e:	2110      	movs	r1, #16
 80089a0:	6a38      	ldr	r0, [r7, #32]
 80089a2:	f7ff fc73 	bl	800828c <SD_RxDataBlock>
 80089a6:	4603      	mov	r3, r0
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d03b      	beq.n	8008a24 <SD_disk_ioctl+0x238>
 80089ac:	2300      	movs	r3, #0
 80089ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80089b2:	e037      	b.n	8008a24 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80089b4:	2100      	movs	r1, #0
 80089b6:	204a      	movs	r0, #74	; 0x4a
 80089b8:	f7ff fcd9 	bl	800836e <SD_SendCmd>
 80089bc:	4603      	mov	r3, r0
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d132      	bne.n	8008a28 <SD_disk_ioctl+0x23c>
 80089c2:	2110      	movs	r1, #16
 80089c4:	6a38      	ldr	r0, [r7, #32]
 80089c6:	f7ff fc61 	bl	800828c <SD_RxDataBlock>
 80089ca:	4603      	mov	r3, r0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d02b      	beq.n	8008a28 <SD_disk_ioctl+0x23c>
 80089d0:	2300      	movs	r3, #0
 80089d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80089d6:	e027      	b.n	8008a28 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80089d8:	2100      	movs	r1, #0
 80089da:	207a      	movs	r0, #122	; 0x7a
 80089dc:	f7ff fcc7 	bl	800836e <SD_SendCmd>
 80089e0:	4603      	mov	r3, r0
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d116      	bne.n	8008a14 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80089e6:	2300      	movs	r3, #0
 80089e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80089ec:	e00b      	b.n	8008a06 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80089ee:	6a3c      	ldr	r4, [r7, #32]
 80089f0:	1c63      	adds	r3, r4, #1
 80089f2:	623b      	str	r3, [r7, #32]
 80089f4:	f7ff fbac 	bl	8008150 <SPI_RxByte>
 80089f8:	4603      	mov	r3, r0
 80089fa:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80089fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008a00:	3301      	adds	r3, #1
 8008a02:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008a06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008a0a:	2b03      	cmp	r3, #3
 8008a0c:	d9ef      	bls.n	80089ee <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8008a14:	2304      	movs	r3, #4
 8008a16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008a1a:	e006      	b.n	8008a2a <SD_disk_ioctl+0x23e>
			break;
 8008a1c:	bf00      	nop
 8008a1e:	e004      	b.n	8008a2a <SD_disk_ioctl+0x23e>
			break;
 8008a20:	bf00      	nop
 8008a22:	e002      	b.n	8008a2a <SD_disk_ioctl+0x23e>
			break;
 8008a24:	bf00      	nop
 8008a26:	e000      	b.n	8008a2a <SD_disk_ioctl+0x23e>
			break;
 8008a28:	bf00      	nop
		}

		DESELECT();
 8008a2a:	f7ff fb4f 	bl	80080cc <DESELECT>
		SPI_RxByte();
 8008a2e:	f7ff fb8f 	bl	8008150 <SPI_RxByte>
	}

	return res;
 8008a32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	372c      	adds	r7, #44	; 0x2c
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd90      	pop	{r4, r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	20000038 	.word	0x20000038

08008a44 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008a44:	b480      	push	{r7}
 8008a46:	b085      	sub	sp, #20
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	3301      	adds	r3, #1
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008a54:	89fb      	ldrh	r3, [r7, #14]
 8008a56:	021b      	lsls	r3, r3, #8
 8008a58:	b21a      	sxth	r2, r3
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	b21b      	sxth	r3, r3
 8008a60:	4313      	orrs	r3, r2
 8008a62:	b21b      	sxth	r3, r3
 8008a64:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008a66:	89fb      	ldrh	r3, [r7, #14]
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3714      	adds	r7, #20
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr

08008a74 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008a74:	b480      	push	{r7}
 8008a76:	b085      	sub	sp, #20
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	3303      	adds	r3, #3
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	021b      	lsls	r3, r3, #8
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	3202      	adds	r2, #2
 8008a8c:	7812      	ldrb	r2, [r2, #0]
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	021b      	lsls	r3, r3, #8
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	3201      	adds	r2, #1
 8008a9a:	7812      	ldrb	r2, [r2, #0]
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	021b      	lsls	r3, r3, #8
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	7812      	ldrb	r2, [r2, #0]
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	60fb      	str	r3, [r7, #12]
	return rv;
 8008aac:	68fb      	ldr	r3, [r7, #12]
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3714      	adds	r7, #20
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr

08008aba <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008aba:	b480      	push	{r7}
 8008abc:	b083      	sub	sp, #12
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
 8008ac2:	460b      	mov	r3, r1
 8008ac4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	1c5a      	adds	r2, r3, #1
 8008aca:	607a      	str	r2, [r7, #4]
 8008acc:	887a      	ldrh	r2, [r7, #2]
 8008ace:	b2d2      	uxtb	r2, r2
 8008ad0:	701a      	strb	r2, [r3, #0]
 8008ad2:	887b      	ldrh	r3, [r7, #2]
 8008ad4:	0a1b      	lsrs	r3, r3, #8
 8008ad6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	1c5a      	adds	r2, r3, #1
 8008adc:	607a      	str	r2, [r7, #4]
 8008ade:	887a      	ldrh	r2, [r7, #2]
 8008ae0:	b2d2      	uxtb	r2, r2
 8008ae2:	701a      	strb	r2, [r3, #0]
}
 8008ae4:	bf00      	nop
 8008ae6:	370c      	adds	r7, #12
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr

08008af0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008af0:	b480      	push	{r7}
 8008af2:	b083      	sub	sp, #12
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	1c5a      	adds	r2, r3, #1
 8008afe:	607a      	str	r2, [r7, #4]
 8008b00:	683a      	ldr	r2, [r7, #0]
 8008b02:	b2d2      	uxtb	r2, r2
 8008b04:	701a      	strb	r2, [r3, #0]
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	0a1b      	lsrs	r3, r3, #8
 8008b0a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	1c5a      	adds	r2, r3, #1
 8008b10:	607a      	str	r2, [r7, #4]
 8008b12:	683a      	ldr	r2, [r7, #0]
 8008b14:	b2d2      	uxtb	r2, r2
 8008b16:	701a      	strb	r2, [r3, #0]
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	0a1b      	lsrs	r3, r3, #8
 8008b1c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	1c5a      	adds	r2, r3, #1
 8008b22:	607a      	str	r2, [r7, #4]
 8008b24:	683a      	ldr	r2, [r7, #0]
 8008b26:	b2d2      	uxtb	r2, r2
 8008b28:	701a      	strb	r2, [r3, #0]
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	0a1b      	lsrs	r3, r3, #8
 8008b2e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	1c5a      	adds	r2, r3, #1
 8008b34:	607a      	str	r2, [r7, #4]
 8008b36:	683a      	ldr	r2, [r7, #0]
 8008b38:	b2d2      	uxtb	r2, r2
 8008b3a:	701a      	strb	r2, [r3, #0]
}
 8008b3c:	bf00      	nop
 8008b3e:	370c      	adds	r7, #12
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr

08008b48 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008b48:	b480      	push	{r7}
 8008b4a:	b087      	sub	sp, #28
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	60f8      	str	r0, [r7, #12]
 8008b50:	60b9      	str	r1, [r7, #8]
 8008b52:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d00d      	beq.n	8008b7e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008b62:	693a      	ldr	r2, [r7, #16]
 8008b64:	1c53      	adds	r3, r2, #1
 8008b66:	613b      	str	r3, [r7, #16]
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	1c59      	adds	r1, r3, #1
 8008b6c:	6179      	str	r1, [r7, #20]
 8008b6e:	7812      	ldrb	r2, [r2, #0]
 8008b70:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	3b01      	subs	r3, #1
 8008b76:	607b      	str	r3, [r7, #4]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d1f1      	bne.n	8008b62 <mem_cpy+0x1a>
	}
}
 8008b7e:	bf00      	nop
 8008b80:	371c      	adds	r7, #28
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr

08008b8a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008b8a:	b480      	push	{r7}
 8008b8c:	b087      	sub	sp, #28
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	60f8      	str	r0, [r7, #12]
 8008b92:	60b9      	str	r1, [r7, #8]
 8008b94:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	1c5a      	adds	r2, r3, #1
 8008b9e:	617a      	str	r2, [r7, #20]
 8008ba0:	68ba      	ldr	r2, [r7, #8]
 8008ba2:	b2d2      	uxtb	r2, r2
 8008ba4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	3b01      	subs	r3, #1
 8008baa:	607b      	str	r3, [r7, #4]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d1f3      	bne.n	8008b9a <mem_set+0x10>
}
 8008bb2:	bf00      	nop
 8008bb4:	bf00      	nop
 8008bb6:	371c      	adds	r7, #28
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr

08008bc0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008bc0:	b480      	push	{r7}
 8008bc2:	b089      	sub	sp, #36	; 0x24
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	60f8      	str	r0, [r7, #12]
 8008bc8:	60b9      	str	r1, [r7, #8]
 8008bca:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	61fb      	str	r3, [r7, #28]
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008bd8:	69fb      	ldr	r3, [r7, #28]
 8008bda:	1c5a      	adds	r2, r3, #1
 8008bdc:	61fa      	str	r2, [r7, #28]
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	4619      	mov	r1, r3
 8008be2:	69bb      	ldr	r3, [r7, #24]
 8008be4:	1c5a      	adds	r2, r3, #1
 8008be6:	61ba      	str	r2, [r7, #24]
 8008be8:	781b      	ldrb	r3, [r3, #0]
 8008bea:	1acb      	subs	r3, r1, r3
 8008bec:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	3b01      	subs	r3, #1
 8008bf2:	607b      	str	r3, [r7, #4]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d002      	beq.n	8008c00 <mem_cmp+0x40>
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d0eb      	beq.n	8008bd8 <mem_cmp+0x18>

	return r;
 8008c00:	697b      	ldr	r3, [r7, #20]
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3724      	adds	r7, #36	; 0x24
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr

08008c0e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008c0e:	b480      	push	{r7}
 8008c10:	b083      	sub	sp, #12
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
 8008c16:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008c18:	e002      	b.n	8008c20 <chk_chr+0x12>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	3301      	adds	r3, #1
 8008c1e:	607b      	str	r3, [r7, #4]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d005      	beq.n	8008c34 <chk_chr+0x26>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d1f2      	bne.n	8008c1a <chk_chr+0xc>
	return *str;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	781b      	ldrb	r3, [r3, #0]
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	370c      	adds	r7, #12
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr

08008c44 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b085      	sub	sp, #20
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008c4e:	2300      	movs	r3, #0
 8008c50:	60bb      	str	r3, [r7, #8]
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	60fb      	str	r3, [r7, #12]
 8008c56:	e029      	b.n	8008cac <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008c58:	4a27      	ldr	r2, [pc, #156]	; (8008cf8 <chk_lock+0xb4>)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	011b      	lsls	r3, r3, #4
 8008c5e:	4413      	add	r3, r2
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d01d      	beq.n	8008ca2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008c66:	4a24      	ldr	r2, [pc, #144]	; (8008cf8 <chk_lock+0xb4>)
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	011b      	lsls	r3, r3, #4
 8008c6c:	4413      	add	r3, r2
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d116      	bne.n	8008ca6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008c78:	4a1f      	ldr	r2, [pc, #124]	; (8008cf8 <chk_lock+0xb4>)
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	011b      	lsls	r3, r3, #4
 8008c7e:	4413      	add	r3, r2
 8008c80:	3304      	adds	r3, #4
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d10c      	bne.n	8008ca6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008c8c:	4a1a      	ldr	r2, [pc, #104]	; (8008cf8 <chk_lock+0xb4>)
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	011b      	lsls	r3, r3, #4
 8008c92:	4413      	add	r3, r2
 8008c94:	3308      	adds	r3, #8
 8008c96:	681a      	ldr	r2, [r3, #0]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d102      	bne.n	8008ca6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008ca0:	e007      	b.n	8008cb2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	3301      	adds	r3, #1
 8008caa:	60fb      	str	r3, [r7, #12]
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2b01      	cmp	r3, #1
 8008cb0:	d9d2      	bls.n	8008c58 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2b02      	cmp	r3, #2
 8008cb6:	d109      	bne.n	8008ccc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d102      	bne.n	8008cc4 <chk_lock+0x80>
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	2b02      	cmp	r3, #2
 8008cc2:	d101      	bne.n	8008cc8 <chk_lock+0x84>
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	e010      	b.n	8008cea <chk_lock+0xa6>
 8008cc8:	2312      	movs	r3, #18
 8008cca:	e00e      	b.n	8008cea <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d108      	bne.n	8008ce4 <chk_lock+0xa0>
 8008cd2:	4a09      	ldr	r2, [pc, #36]	; (8008cf8 <chk_lock+0xb4>)
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	011b      	lsls	r3, r3, #4
 8008cd8:	4413      	add	r3, r2
 8008cda:	330c      	adds	r3, #12
 8008cdc:	881b      	ldrh	r3, [r3, #0]
 8008cde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ce2:	d101      	bne.n	8008ce8 <chk_lock+0xa4>
 8008ce4:	2310      	movs	r3, #16
 8008ce6:	e000      	b.n	8008cea <chk_lock+0xa6>
 8008ce8:	2300      	movs	r3, #0
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3714      	adds	r7, #20
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr
 8008cf6:	bf00      	nop
 8008cf8:	200015e0 	.word	0x200015e0

08008cfc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008d02:	2300      	movs	r3, #0
 8008d04:	607b      	str	r3, [r7, #4]
 8008d06:	e002      	b.n	8008d0e <enq_lock+0x12>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	607b      	str	r3, [r7, #4]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	d806      	bhi.n	8008d22 <enq_lock+0x26>
 8008d14:	4a09      	ldr	r2, [pc, #36]	; (8008d3c <enq_lock+0x40>)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	011b      	lsls	r3, r3, #4
 8008d1a:	4413      	add	r3, r2
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d1f2      	bne.n	8008d08 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2b02      	cmp	r3, #2
 8008d26:	bf14      	ite	ne
 8008d28:	2301      	movne	r3, #1
 8008d2a:	2300      	moveq	r3, #0
 8008d2c:	b2db      	uxtb	r3, r3
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	370c      	adds	r7, #12
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr
 8008d3a:	bf00      	nop
 8008d3c:	200015e0 	.word	0x200015e0

08008d40 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b085      	sub	sp, #20
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	60fb      	str	r3, [r7, #12]
 8008d4e:	e01f      	b.n	8008d90 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008d50:	4a41      	ldr	r2, [pc, #260]	; (8008e58 <inc_lock+0x118>)
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	011b      	lsls	r3, r3, #4
 8008d56:	4413      	add	r3, r2
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d113      	bne.n	8008d8a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008d62:	4a3d      	ldr	r2, [pc, #244]	; (8008e58 <inc_lock+0x118>)
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	011b      	lsls	r3, r3, #4
 8008d68:	4413      	add	r3, r2
 8008d6a:	3304      	adds	r3, #4
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d109      	bne.n	8008d8a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008d76:	4a38      	ldr	r2, [pc, #224]	; (8008e58 <inc_lock+0x118>)
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	011b      	lsls	r3, r3, #4
 8008d7c:	4413      	add	r3, r2
 8008d7e:	3308      	adds	r3, #8
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d006      	beq.n	8008d98 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	60fb      	str	r3, [r7, #12]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2b01      	cmp	r3, #1
 8008d94:	d9dc      	bls.n	8008d50 <inc_lock+0x10>
 8008d96:	e000      	b.n	8008d9a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008d98:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2b02      	cmp	r3, #2
 8008d9e:	d132      	bne.n	8008e06 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008da0:	2300      	movs	r3, #0
 8008da2:	60fb      	str	r3, [r7, #12]
 8008da4:	e002      	b.n	8008dac <inc_lock+0x6c>
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	3301      	adds	r3, #1
 8008daa:	60fb      	str	r3, [r7, #12]
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2b01      	cmp	r3, #1
 8008db0:	d806      	bhi.n	8008dc0 <inc_lock+0x80>
 8008db2:	4a29      	ldr	r2, [pc, #164]	; (8008e58 <inc_lock+0x118>)
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	011b      	lsls	r3, r3, #4
 8008db8:	4413      	add	r3, r2
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d1f2      	bne.n	8008da6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2b02      	cmp	r3, #2
 8008dc4:	d101      	bne.n	8008dca <inc_lock+0x8a>
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	e040      	b.n	8008e4c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	4922      	ldr	r1, [pc, #136]	; (8008e58 <inc_lock+0x118>)
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	011b      	lsls	r3, r3, #4
 8008dd4:	440b      	add	r3, r1
 8008dd6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	689a      	ldr	r2, [r3, #8]
 8008ddc:	491e      	ldr	r1, [pc, #120]	; (8008e58 <inc_lock+0x118>)
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	011b      	lsls	r3, r3, #4
 8008de2:	440b      	add	r3, r1
 8008de4:	3304      	adds	r3, #4
 8008de6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	695a      	ldr	r2, [r3, #20]
 8008dec:	491a      	ldr	r1, [pc, #104]	; (8008e58 <inc_lock+0x118>)
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	011b      	lsls	r3, r3, #4
 8008df2:	440b      	add	r3, r1
 8008df4:	3308      	adds	r3, #8
 8008df6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008df8:	4a17      	ldr	r2, [pc, #92]	; (8008e58 <inc_lock+0x118>)
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	011b      	lsls	r3, r3, #4
 8008dfe:	4413      	add	r3, r2
 8008e00:	330c      	adds	r3, #12
 8008e02:	2200      	movs	r2, #0
 8008e04:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d009      	beq.n	8008e20 <inc_lock+0xe0>
 8008e0c:	4a12      	ldr	r2, [pc, #72]	; (8008e58 <inc_lock+0x118>)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	011b      	lsls	r3, r3, #4
 8008e12:	4413      	add	r3, r2
 8008e14:	330c      	adds	r3, #12
 8008e16:	881b      	ldrh	r3, [r3, #0]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d001      	beq.n	8008e20 <inc_lock+0xe0>
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	e015      	b.n	8008e4c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d108      	bne.n	8008e38 <inc_lock+0xf8>
 8008e26:	4a0c      	ldr	r2, [pc, #48]	; (8008e58 <inc_lock+0x118>)
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	011b      	lsls	r3, r3, #4
 8008e2c:	4413      	add	r3, r2
 8008e2e:	330c      	adds	r3, #12
 8008e30:	881b      	ldrh	r3, [r3, #0]
 8008e32:	3301      	adds	r3, #1
 8008e34:	b29a      	uxth	r2, r3
 8008e36:	e001      	b.n	8008e3c <inc_lock+0xfc>
 8008e38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e3c:	4906      	ldr	r1, [pc, #24]	; (8008e58 <inc_lock+0x118>)
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	011b      	lsls	r3, r3, #4
 8008e42:	440b      	add	r3, r1
 8008e44:	330c      	adds	r3, #12
 8008e46:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	3301      	adds	r3, #1
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3714      	adds	r7, #20
 8008e50:	46bd      	mov	sp, r7
 8008e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e56:	4770      	bx	lr
 8008e58:	200015e0 	.word	0x200015e0

08008e5c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b085      	sub	sp, #20
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	3b01      	subs	r3, #1
 8008e68:	607b      	str	r3, [r7, #4]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d825      	bhi.n	8008ebc <dec_lock+0x60>
		n = Files[i].ctr;
 8008e70:	4a17      	ldr	r2, [pc, #92]	; (8008ed0 <dec_lock+0x74>)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	011b      	lsls	r3, r3, #4
 8008e76:	4413      	add	r3, r2
 8008e78:	330c      	adds	r3, #12
 8008e7a:	881b      	ldrh	r3, [r3, #0]
 8008e7c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008e7e:	89fb      	ldrh	r3, [r7, #14]
 8008e80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e84:	d101      	bne.n	8008e8a <dec_lock+0x2e>
 8008e86:	2300      	movs	r3, #0
 8008e88:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008e8a:	89fb      	ldrh	r3, [r7, #14]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d002      	beq.n	8008e96 <dec_lock+0x3a>
 8008e90:	89fb      	ldrh	r3, [r7, #14]
 8008e92:	3b01      	subs	r3, #1
 8008e94:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008e96:	4a0e      	ldr	r2, [pc, #56]	; (8008ed0 <dec_lock+0x74>)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	011b      	lsls	r3, r3, #4
 8008e9c:	4413      	add	r3, r2
 8008e9e:	330c      	adds	r3, #12
 8008ea0:	89fa      	ldrh	r2, [r7, #14]
 8008ea2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008ea4:	89fb      	ldrh	r3, [r7, #14]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d105      	bne.n	8008eb6 <dec_lock+0x5a>
 8008eaa:	4a09      	ldr	r2, [pc, #36]	; (8008ed0 <dec_lock+0x74>)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	011b      	lsls	r3, r3, #4
 8008eb0:	4413      	add	r3, r2
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	737b      	strb	r3, [r7, #13]
 8008eba:	e001      	b.n	8008ec0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008ebc:	2302      	movs	r3, #2
 8008ebe:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008ec0:	7b7b      	ldrb	r3, [r7, #13]
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3714      	adds	r7, #20
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr
 8008ece:	bf00      	nop
 8008ed0:	200015e0 	.word	0x200015e0

08008ed4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b085      	sub	sp, #20
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008edc:	2300      	movs	r3, #0
 8008ede:	60fb      	str	r3, [r7, #12]
 8008ee0:	e010      	b.n	8008f04 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008ee2:	4a0d      	ldr	r2, [pc, #52]	; (8008f18 <clear_lock+0x44>)
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	011b      	lsls	r3, r3, #4
 8008ee8:	4413      	add	r3, r2
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	687a      	ldr	r2, [r7, #4]
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d105      	bne.n	8008efe <clear_lock+0x2a>
 8008ef2:	4a09      	ldr	r2, [pc, #36]	; (8008f18 <clear_lock+0x44>)
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	011b      	lsls	r3, r3, #4
 8008ef8:	4413      	add	r3, r2
 8008efa:	2200      	movs	r2, #0
 8008efc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	3301      	adds	r3, #1
 8008f02:	60fb      	str	r3, [r7, #12]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d9eb      	bls.n	8008ee2 <clear_lock+0xe>
	}
}
 8008f0a:	bf00      	nop
 8008f0c:	bf00      	nop
 8008f0e:	3714      	adds	r7, #20
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr
 8008f18:	200015e0 	.word	0x200015e0

08008f1c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b086      	sub	sp, #24
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008f24:	2300      	movs	r3, #0
 8008f26:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	78db      	ldrb	r3, [r3, #3]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d034      	beq.n	8008f9a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f34:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	7858      	ldrb	r0, [r3, #1]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008f40:	2301      	movs	r3, #1
 8008f42:	697a      	ldr	r2, [r7, #20]
 8008f44:	f7ff f85c 	bl	8008000 <disk_write>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d002      	beq.n	8008f54 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	73fb      	strb	r3, [r7, #15]
 8008f52:	e022      	b.n	8008f9a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2200      	movs	r2, #0
 8008f58:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f5e:	697a      	ldr	r2, [r7, #20]
 8008f60:	1ad2      	subs	r2, r2, r3
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6a1b      	ldr	r3, [r3, #32]
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d217      	bcs.n	8008f9a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	789b      	ldrb	r3, [r3, #2]
 8008f6e:	613b      	str	r3, [r7, #16]
 8008f70:	e010      	b.n	8008f94 <sync_window+0x78>
					wsect += fs->fsize;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6a1b      	ldr	r3, [r3, #32]
 8008f76:	697a      	ldr	r2, [r7, #20]
 8008f78:	4413      	add	r3, r2
 8008f7a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	7858      	ldrb	r0, [r3, #1]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008f86:	2301      	movs	r3, #1
 8008f88:	697a      	ldr	r2, [r7, #20]
 8008f8a:	f7ff f839 	bl	8008000 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	3b01      	subs	r3, #1
 8008f92:	613b      	str	r3, [r7, #16]
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d8eb      	bhi.n	8008f72 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3718      	adds	r7, #24
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b084      	sub	sp, #16
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fb6:	683a      	ldr	r2, [r7, #0]
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d01b      	beq.n	8008ff4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f7ff ffad 	bl	8008f1c <sync_window>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008fc6:	7bfb      	ldrb	r3, [r7, #15]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d113      	bne.n	8008ff4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	7858      	ldrb	r0, [r3, #1]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	683a      	ldr	r2, [r7, #0]
 8008fda:	f7fe fff1 	bl	8007fc0 <disk_read>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d004      	beq.n	8008fee <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8008fe8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008fea:	2301      	movs	r3, #1
 8008fec:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	683a      	ldr	r2, [r7, #0]
 8008ff2:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8008ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3710      	adds	r7, #16
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
	...

08009000 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f7ff ff87 	bl	8008f1c <sync_window>
 800900e:	4603      	mov	r3, r0
 8009010:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009012:	7bfb      	ldrb	r3, [r7, #15]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d159      	bne.n	80090cc <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	781b      	ldrb	r3, [r3, #0]
 800901c:	2b03      	cmp	r3, #3
 800901e:	d149      	bne.n	80090b4 <sync_fs+0xb4>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	791b      	ldrb	r3, [r3, #4]
 8009024:	2b01      	cmp	r3, #1
 8009026:	d145      	bne.n	80090b4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	899b      	ldrh	r3, [r3, #12]
 8009032:	461a      	mov	r2, r3
 8009034:	2100      	movs	r1, #0
 8009036:	f7ff fda8 	bl	8008b8a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	3338      	adds	r3, #56	; 0x38
 800903e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009042:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009046:	4618      	mov	r0, r3
 8009048:	f7ff fd37 	bl	8008aba <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	3338      	adds	r3, #56	; 0x38
 8009050:	4921      	ldr	r1, [pc, #132]	; (80090d8 <sync_fs+0xd8>)
 8009052:	4618      	mov	r0, r3
 8009054:	f7ff fd4c 	bl	8008af0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	3338      	adds	r3, #56	; 0x38
 800905c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009060:	491e      	ldr	r1, [pc, #120]	; (80090dc <sync_fs+0xdc>)
 8009062:	4618      	mov	r0, r3
 8009064:	f7ff fd44 	bl	8008af0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	3338      	adds	r3, #56	; 0x38
 800906c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	699b      	ldr	r3, [r3, #24]
 8009074:	4619      	mov	r1, r3
 8009076:	4610      	mov	r0, r2
 8009078:	f7ff fd3a 	bl	8008af0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	3338      	adds	r3, #56	; 0x38
 8009080:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	695b      	ldr	r3, [r3, #20]
 8009088:	4619      	mov	r1, r3
 800908a:	4610      	mov	r0, r2
 800908c:	f7ff fd30 	bl	8008af0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009094:	1c5a      	adds	r2, r3, #1
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	7858      	ldrb	r0, [r3, #1]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090a8:	2301      	movs	r3, #1
 80090aa:	f7fe ffa9 	bl	8008000 <disk_write>
			fs->fsi_flag = 0;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	785b      	ldrb	r3, [r3, #1]
 80090b8:	2200      	movs	r2, #0
 80090ba:	2100      	movs	r1, #0
 80090bc:	4618      	mov	r0, r3
 80090be:	f7fe ffbf 	bl	8008040 <disk_ioctl>
 80090c2:	4603      	mov	r3, r0
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d001      	beq.n	80090cc <sync_fs+0xcc>
 80090c8:	2301      	movs	r3, #1
 80090ca:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80090cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3710      	adds	r7, #16
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
 80090d6:	bf00      	nop
 80090d8:	41615252 	.word	0x41615252
 80090dc:	61417272 	.word	0x61417272

080090e0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b083      	sub	sp, #12
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
 80090e8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	3b02      	subs	r3, #2
 80090ee:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	69db      	ldr	r3, [r3, #28]
 80090f4:	3b02      	subs	r3, #2
 80090f6:	683a      	ldr	r2, [r7, #0]
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d301      	bcc.n	8009100 <clust2sect+0x20>
 80090fc:	2300      	movs	r3, #0
 80090fe:	e008      	b.n	8009112 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	895b      	ldrh	r3, [r3, #10]
 8009104:	461a      	mov	r2, r3
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	fb03 f202 	mul.w	r2, r3, r2
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009110:	4413      	add	r3, r2
}
 8009112:	4618      	mov	r0, r3
 8009114:	370c      	adds	r7, #12
 8009116:	46bd      	mov	sp, r7
 8009118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911c:	4770      	bx	lr

0800911e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800911e:	b580      	push	{r7, lr}
 8009120:	b086      	sub	sp, #24
 8009122:	af00      	add	r7, sp, #0
 8009124:	6078      	str	r0, [r7, #4]
 8009126:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	2b01      	cmp	r3, #1
 8009132:	d904      	bls.n	800913e <get_fat+0x20>
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	69db      	ldr	r3, [r3, #28]
 8009138:	683a      	ldr	r2, [r7, #0]
 800913a:	429a      	cmp	r2, r3
 800913c:	d302      	bcc.n	8009144 <get_fat+0x26>
		val = 1;	/* Internal error */
 800913e:	2301      	movs	r3, #1
 8009140:	617b      	str	r3, [r7, #20]
 8009142:	e0bb      	b.n	80092bc <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009144:	f04f 33ff 	mov.w	r3, #4294967295
 8009148:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	781b      	ldrb	r3, [r3, #0]
 800914e:	2b03      	cmp	r3, #3
 8009150:	f000 8083 	beq.w	800925a <get_fat+0x13c>
 8009154:	2b03      	cmp	r3, #3
 8009156:	f300 80a7 	bgt.w	80092a8 <get_fat+0x18a>
 800915a:	2b01      	cmp	r3, #1
 800915c:	d002      	beq.n	8009164 <get_fat+0x46>
 800915e:	2b02      	cmp	r3, #2
 8009160:	d056      	beq.n	8009210 <get_fat+0xf2>
 8009162:	e0a1      	b.n	80092a8 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	60fb      	str	r3, [r7, #12]
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	085b      	lsrs	r3, r3, #1
 800916c:	68fa      	ldr	r2, [r7, #12]
 800916e:	4413      	add	r3, r2
 8009170:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	899b      	ldrh	r3, [r3, #12]
 800917a:	4619      	mov	r1, r3
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009182:	4413      	add	r3, r2
 8009184:	4619      	mov	r1, r3
 8009186:	6938      	ldr	r0, [r7, #16]
 8009188:	f7ff ff0c 	bl	8008fa4 <move_window>
 800918c:	4603      	mov	r3, r0
 800918e:	2b00      	cmp	r3, #0
 8009190:	f040 808d 	bne.w	80092ae <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	1c5a      	adds	r2, r3, #1
 8009198:	60fa      	str	r2, [r7, #12]
 800919a:	693a      	ldr	r2, [r7, #16]
 800919c:	8992      	ldrh	r2, [r2, #12]
 800919e:	fbb3 f1f2 	udiv	r1, r3, r2
 80091a2:	fb01 f202 	mul.w	r2, r1, r2
 80091a6:	1a9b      	subs	r3, r3, r2
 80091a8:	693a      	ldr	r2, [r7, #16]
 80091aa:	4413      	add	r3, r2
 80091ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80091b0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	899b      	ldrh	r3, [r3, #12]
 80091ba:	4619      	mov	r1, r3
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	fbb3 f3f1 	udiv	r3, r3, r1
 80091c2:	4413      	add	r3, r2
 80091c4:	4619      	mov	r1, r3
 80091c6:	6938      	ldr	r0, [r7, #16]
 80091c8:	f7ff feec 	bl	8008fa4 <move_window>
 80091cc:	4603      	mov	r3, r0
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d16f      	bne.n	80092b2 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	899b      	ldrh	r3, [r3, #12]
 80091d6:	461a      	mov	r2, r3
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	fbb3 f1f2 	udiv	r1, r3, r2
 80091de:	fb01 f202 	mul.w	r2, r1, r2
 80091e2:	1a9b      	subs	r3, r3, r2
 80091e4:	693a      	ldr	r2, [r7, #16]
 80091e6:	4413      	add	r3, r2
 80091e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80091ec:	021b      	lsls	r3, r3, #8
 80091ee:	461a      	mov	r2, r3
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	4313      	orrs	r3, r2
 80091f4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	f003 0301 	and.w	r3, r3, #1
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d002      	beq.n	8009206 <get_fat+0xe8>
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	091b      	lsrs	r3, r3, #4
 8009204:	e002      	b.n	800920c <get_fat+0xee>
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800920c:	617b      	str	r3, [r7, #20]
			break;
 800920e:	e055      	b.n	80092bc <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	899b      	ldrh	r3, [r3, #12]
 8009218:	085b      	lsrs	r3, r3, #1
 800921a:	b29b      	uxth	r3, r3
 800921c:	4619      	mov	r1, r3
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	fbb3 f3f1 	udiv	r3, r3, r1
 8009224:	4413      	add	r3, r2
 8009226:	4619      	mov	r1, r3
 8009228:	6938      	ldr	r0, [r7, #16]
 800922a:	f7ff febb 	bl	8008fa4 <move_window>
 800922e:	4603      	mov	r3, r0
 8009230:	2b00      	cmp	r3, #0
 8009232:	d140      	bne.n	80092b6 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	005b      	lsls	r3, r3, #1
 800923e:	693a      	ldr	r2, [r7, #16]
 8009240:	8992      	ldrh	r2, [r2, #12]
 8009242:	fbb3 f0f2 	udiv	r0, r3, r2
 8009246:	fb00 f202 	mul.w	r2, r0, r2
 800924a:	1a9b      	subs	r3, r3, r2
 800924c:	440b      	add	r3, r1
 800924e:	4618      	mov	r0, r3
 8009250:	f7ff fbf8 	bl	8008a44 <ld_word>
 8009254:	4603      	mov	r3, r0
 8009256:	617b      	str	r3, [r7, #20]
			break;
 8009258:	e030      	b.n	80092bc <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	899b      	ldrh	r3, [r3, #12]
 8009262:	089b      	lsrs	r3, r3, #2
 8009264:	b29b      	uxth	r3, r3
 8009266:	4619      	mov	r1, r3
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	fbb3 f3f1 	udiv	r3, r3, r1
 800926e:	4413      	add	r3, r2
 8009270:	4619      	mov	r1, r3
 8009272:	6938      	ldr	r0, [r7, #16]
 8009274:	f7ff fe96 	bl	8008fa4 <move_window>
 8009278:	4603      	mov	r3, r0
 800927a:	2b00      	cmp	r3, #0
 800927c:	d11d      	bne.n	80092ba <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	693a      	ldr	r2, [r7, #16]
 800928a:	8992      	ldrh	r2, [r2, #12]
 800928c:	fbb3 f0f2 	udiv	r0, r3, r2
 8009290:	fb00 f202 	mul.w	r2, r0, r2
 8009294:	1a9b      	subs	r3, r3, r2
 8009296:	440b      	add	r3, r1
 8009298:	4618      	mov	r0, r3
 800929a:	f7ff fbeb 	bl	8008a74 <ld_dword>
 800929e:	4603      	mov	r3, r0
 80092a0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80092a4:	617b      	str	r3, [r7, #20]
			break;
 80092a6:	e009      	b.n	80092bc <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80092a8:	2301      	movs	r3, #1
 80092aa:	617b      	str	r3, [r7, #20]
 80092ac:	e006      	b.n	80092bc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80092ae:	bf00      	nop
 80092b0:	e004      	b.n	80092bc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80092b2:	bf00      	nop
 80092b4:	e002      	b.n	80092bc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80092b6:	bf00      	nop
 80092b8:	e000      	b.n	80092bc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80092ba:	bf00      	nop
		}
	}

	return val;
 80092bc:	697b      	ldr	r3, [r7, #20]
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3718      	adds	r7, #24
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}

080092c6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80092c6:	b590      	push	{r4, r7, lr}
 80092c8:	b089      	sub	sp, #36	; 0x24
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	60f8      	str	r0, [r7, #12]
 80092ce:	60b9      	str	r1, [r7, #8]
 80092d0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80092d2:	2302      	movs	r3, #2
 80092d4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	2b01      	cmp	r3, #1
 80092da:	f240 8102 	bls.w	80094e2 <put_fat+0x21c>
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	69db      	ldr	r3, [r3, #28]
 80092e2:	68ba      	ldr	r2, [r7, #8]
 80092e4:	429a      	cmp	r2, r3
 80092e6:	f080 80fc 	bcs.w	80094e2 <put_fat+0x21c>
		switch (fs->fs_type) {
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	2b03      	cmp	r3, #3
 80092f0:	f000 80b6 	beq.w	8009460 <put_fat+0x19a>
 80092f4:	2b03      	cmp	r3, #3
 80092f6:	f300 80fd 	bgt.w	80094f4 <put_fat+0x22e>
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	d003      	beq.n	8009306 <put_fat+0x40>
 80092fe:	2b02      	cmp	r3, #2
 8009300:	f000 8083 	beq.w	800940a <put_fat+0x144>
 8009304:	e0f6      	b.n	80094f4 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	61bb      	str	r3, [r7, #24]
 800930a:	69bb      	ldr	r3, [r7, #24]
 800930c:	085b      	lsrs	r3, r3, #1
 800930e:	69ba      	ldr	r2, [r7, #24]
 8009310:	4413      	add	r3, r2
 8009312:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	899b      	ldrh	r3, [r3, #12]
 800931c:	4619      	mov	r1, r3
 800931e:	69bb      	ldr	r3, [r7, #24]
 8009320:	fbb3 f3f1 	udiv	r3, r3, r1
 8009324:	4413      	add	r3, r2
 8009326:	4619      	mov	r1, r3
 8009328:	68f8      	ldr	r0, [r7, #12]
 800932a:	f7ff fe3b 	bl	8008fa4 <move_window>
 800932e:	4603      	mov	r3, r0
 8009330:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009332:	7ffb      	ldrb	r3, [r7, #31]
 8009334:	2b00      	cmp	r3, #0
 8009336:	f040 80d6 	bne.w	80094e6 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009340:	69bb      	ldr	r3, [r7, #24]
 8009342:	1c5a      	adds	r2, r3, #1
 8009344:	61ba      	str	r2, [r7, #24]
 8009346:	68fa      	ldr	r2, [r7, #12]
 8009348:	8992      	ldrh	r2, [r2, #12]
 800934a:	fbb3 f0f2 	udiv	r0, r3, r2
 800934e:	fb00 f202 	mul.w	r2, r0, r2
 8009352:	1a9b      	subs	r3, r3, r2
 8009354:	440b      	add	r3, r1
 8009356:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	f003 0301 	and.w	r3, r3, #1
 800935e:	2b00      	cmp	r3, #0
 8009360:	d00d      	beq.n	800937e <put_fat+0xb8>
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	b25b      	sxtb	r3, r3
 8009368:	f003 030f 	and.w	r3, r3, #15
 800936c:	b25a      	sxtb	r2, r3
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	b2db      	uxtb	r3, r3
 8009372:	011b      	lsls	r3, r3, #4
 8009374:	b25b      	sxtb	r3, r3
 8009376:	4313      	orrs	r3, r2
 8009378:	b25b      	sxtb	r3, r3
 800937a:	b2db      	uxtb	r3, r3
 800937c:	e001      	b.n	8009382 <put_fat+0xbc>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	b2db      	uxtb	r3, r3
 8009382:	697a      	ldr	r2, [r7, #20]
 8009384:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2201      	movs	r2, #1
 800938a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	899b      	ldrh	r3, [r3, #12]
 8009394:	4619      	mov	r1, r3
 8009396:	69bb      	ldr	r3, [r7, #24]
 8009398:	fbb3 f3f1 	udiv	r3, r3, r1
 800939c:	4413      	add	r3, r2
 800939e:	4619      	mov	r1, r3
 80093a0:	68f8      	ldr	r0, [r7, #12]
 80093a2:	f7ff fdff 	bl	8008fa4 <move_window>
 80093a6:	4603      	mov	r3, r0
 80093a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80093aa:	7ffb      	ldrb	r3, [r7, #31]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	f040 809c 	bne.w	80094ea <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	899b      	ldrh	r3, [r3, #12]
 80093bc:	461a      	mov	r2, r3
 80093be:	69bb      	ldr	r3, [r7, #24]
 80093c0:	fbb3 f0f2 	udiv	r0, r3, r2
 80093c4:	fb00 f202 	mul.w	r2, r0, r2
 80093c8:	1a9b      	subs	r3, r3, r2
 80093ca:	440b      	add	r3, r1
 80093cc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	f003 0301 	and.w	r3, r3, #1
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d003      	beq.n	80093e0 <put_fat+0x11a>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	091b      	lsrs	r3, r3, #4
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	e00e      	b.n	80093fe <put_fat+0x138>
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	b25b      	sxtb	r3, r3
 80093e6:	f023 030f 	bic.w	r3, r3, #15
 80093ea:	b25a      	sxtb	r2, r3
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	0a1b      	lsrs	r3, r3, #8
 80093f0:	b25b      	sxtb	r3, r3
 80093f2:	f003 030f 	and.w	r3, r3, #15
 80093f6:	b25b      	sxtb	r3, r3
 80093f8:	4313      	orrs	r3, r2
 80093fa:	b25b      	sxtb	r3, r3
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	697a      	ldr	r2, [r7, #20]
 8009400:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2201      	movs	r2, #1
 8009406:	70da      	strb	r2, [r3, #3]
			break;
 8009408:	e074      	b.n	80094f4 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	899b      	ldrh	r3, [r3, #12]
 8009412:	085b      	lsrs	r3, r3, #1
 8009414:	b29b      	uxth	r3, r3
 8009416:	4619      	mov	r1, r3
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	fbb3 f3f1 	udiv	r3, r3, r1
 800941e:	4413      	add	r3, r2
 8009420:	4619      	mov	r1, r3
 8009422:	68f8      	ldr	r0, [r7, #12]
 8009424:	f7ff fdbe 	bl	8008fa4 <move_window>
 8009428:	4603      	mov	r3, r0
 800942a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800942c:	7ffb      	ldrb	r3, [r7, #31]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d15d      	bne.n	80094ee <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	005b      	lsls	r3, r3, #1
 800943c:	68fa      	ldr	r2, [r7, #12]
 800943e:	8992      	ldrh	r2, [r2, #12]
 8009440:	fbb3 f0f2 	udiv	r0, r3, r2
 8009444:	fb00 f202 	mul.w	r2, r0, r2
 8009448:	1a9b      	subs	r3, r3, r2
 800944a:	440b      	add	r3, r1
 800944c:	687a      	ldr	r2, [r7, #4]
 800944e:	b292      	uxth	r2, r2
 8009450:	4611      	mov	r1, r2
 8009452:	4618      	mov	r0, r3
 8009454:	f7ff fb31 	bl	8008aba <st_word>
			fs->wflag = 1;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2201      	movs	r2, #1
 800945c:	70da      	strb	r2, [r3, #3]
			break;
 800945e:	e049      	b.n	80094f4 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	899b      	ldrh	r3, [r3, #12]
 8009468:	089b      	lsrs	r3, r3, #2
 800946a:	b29b      	uxth	r3, r3
 800946c:	4619      	mov	r1, r3
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	fbb3 f3f1 	udiv	r3, r3, r1
 8009474:	4413      	add	r3, r2
 8009476:	4619      	mov	r1, r3
 8009478:	68f8      	ldr	r0, [r7, #12]
 800947a:	f7ff fd93 	bl	8008fa4 <move_window>
 800947e:	4603      	mov	r3, r0
 8009480:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009482:	7ffb      	ldrb	r3, [r7, #31]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d134      	bne.n	80094f2 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	009b      	lsls	r3, r3, #2
 8009498:	68fa      	ldr	r2, [r7, #12]
 800949a:	8992      	ldrh	r2, [r2, #12]
 800949c:	fbb3 f0f2 	udiv	r0, r3, r2
 80094a0:	fb00 f202 	mul.w	r2, r0, r2
 80094a4:	1a9b      	subs	r3, r3, r2
 80094a6:	440b      	add	r3, r1
 80094a8:	4618      	mov	r0, r3
 80094aa:	f7ff fae3 	bl	8008a74 <ld_dword>
 80094ae:	4603      	mov	r3, r0
 80094b0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80094b4:	4323      	orrs	r3, r4
 80094b6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	009b      	lsls	r3, r3, #2
 80094c2:	68fa      	ldr	r2, [r7, #12]
 80094c4:	8992      	ldrh	r2, [r2, #12]
 80094c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80094ca:	fb00 f202 	mul.w	r2, r0, r2
 80094ce:	1a9b      	subs	r3, r3, r2
 80094d0:	440b      	add	r3, r1
 80094d2:	6879      	ldr	r1, [r7, #4]
 80094d4:	4618      	mov	r0, r3
 80094d6:	f7ff fb0b 	bl	8008af0 <st_dword>
			fs->wflag = 1;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2201      	movs	r2, #1
 80094de:	70da      	strb	r2, [r3, #3]
			break;
 80094e0:	e008      	b.n	80094f4 <put_fat+0x22e>
		}
	}
 80094e2:	bf00      	nop
 80094e4:	e006      	b.n	80094f4 <put_fat+0x22e>
			if (res != FR_OK) break;
 80094e6:	bf00      	nop
 80094e8:	e004      	b.n	80094f4 <put_fat+0x22e>
			if (res != FR_OK) break;
 80094ea:	bf00      	nop
 80094ec:	e002      	b.n	80094f4 <put_fat+0x22e>
			if (res != FR_OK) break;
 80094ee:	bf00      	nop
 80094f0:	e000      	b.n	80094f4 <put_fat+0x22e>
			if (res != FR_OK) break;
 80094f2:	bf00      	nop
	return res;
 80094f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3724      	adds	r7, #36	; 0x24
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd90      	pop	{r4, r7, pc}

080094fe <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80094fe:	b580      	push	{r7, lr}
 8009500:	b088      	sub	sp, #32
 8009502:	af00      	add	r7, sp, #0
 8009504:	60f8      	str	r0, [r7, #12]
 8009506:	60b9      	str	r1, [r7, #8]
 8009508:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800950a:	2300      	movs	r3, #0
 800950c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	2b01      	cmp	r3, #1
 8009518:	d904      	bls.n	8009524 <remove_chain+0x26>
 800951a:	69bb      	ldr	r3, [r7, #24]
 800951c:	69db      	ldr	r3, [r3, #28]
 800951e:	68ba      	ldr	r2, [r7, #8]
 8009520:	429a      	cmp	r2, r3
 8009522:	d301      	bcc.n	8009528 <remove_chain+0x2a>
 8009524:	2302      	movs	r3, #2
 8009526:	e04b      	b.n	80095c0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d00c      	beq.n	8009548 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800952e:	f04f 32ff 	mov.w	r2, #4294967295
 8009532:	6879      	ldr	r1, [r7, #4]
 8009534:	69b8      	ldr	r0, [r7, #24]
 8009536:	f7ff fec6 	bl	80092c6 <put_fat>
 800953a:	4603      	mov	r3, r0
 800953c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800953e:	7ffb      	ldrb	r3, [r7, #31]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d001      	beq.n	8009548 <remove_chain+0x4a>
 8009544:	7ffb      	ldrb	r3, [r7, #31]
 8009546:	e03b      	b.n	80095c0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009548:	68b9      	ldr	r1, [r7, #8]
 800954a:	68f8      	ldr	r0, [r7, #12]
 800954c:	f7ff fde7 	bl	800911e <get_fat>
 8009550:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d031      	beq.n	80095bc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	2b01      	cmp	r3, #1
 800955c:	d101      	bne.n	8009562 <remove_chain+0x64>
 800955e:	2302      	movs	r3, #2
 8009560:	e02e      	b.n	80095c0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009568:	d101      	bne.n	800956e <remove_chain+0x70>
 800956a:	2301      	movs	r3, #1
 800956c:	e028      	b.n	80095c0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800956e:	2200      	movs	r2, #0
 8009570:	68b9      	ldr	r1, [r7, #8]
 8009572:	69b8      	ldr	r0, [r7, #24]
 8009574:	f7ff fea7 	bl	80092c6 <put_fat>
 8009578:	4603      	mov	r3, r0
 800957a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800957c:	7ffb      	ldrb	r3, [r7, #31]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d001      	beq.n	8009586 <remove_chain+0x88>
 8009582:	7ffb      	ldrb	r3, [r7, #31]
 8009584:	e01c      	b.n	80095c0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009586:	69bb      	ldr	r3, [r7, #24]
 8009588:	699a      	ldr	r2, [r3, #24]
 800958a:	69bb      	ldr	r3, [r7, #24]
 800958c:	69db      	ldr	r3, [r3, #28]
 800958e:	3b02      	subs	r3, #2
 8009590:	429a      	cmp	r2, r3
 8009592:	d20b      	bcs.n	80095ac <remove_chain+0xae>
			fs->free_clst++;
 8009594:	69bb      	ldr	r3, [r7, #24]
 8009596:	699b      	ldr	r3, [r3, #24]
 8009598:	1c5a      	adds	r2, r3, #1
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800959e:	69bb      	ldr	r3, [r7, #24]
 80095a0:	791b      	ldrb	r3, [r3, #4]
 80095a2:	f043 0301 	orr.w	r3, r3, #1
 80095a6:	b2da      	uxtb	r2, r3
 80095a8:	69bb      	ldr	r3, [r7, #24]
 80095aa:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80095b0:	69bb      	ldr	r3, [r7, #24]
 80095b2:	69db      	ldr	r3, [r3, #28]
 80095b4:	68ba      	ldr	r2, [r7, #8]
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d3c6      	bcc.n	8009548 <remove_chain+0x4a>
 80095ba:	e000      	b.n	80095be <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80095bc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80095be:	2300      	movs	r3, #0
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3720      	adds	r7, #32
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b088      	sub	sp, #32
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d10d      	bne.n	80095fa <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	695b      	ldr	r3, [r3, #20]
 80095e2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80095e4:	69bb      	ldr	r3, [r7, #24]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d004      	beq.n	80095f4 <create_chain+0x2c>
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	69db      	ldr	r3, [r3, #28]
 80095ee:	69ba      	ldr	r2, [r7, #24]
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d31b      	bcc.n	800962c <create_chain+0x64>
 80095f4:	2301      	movs	r3, #1
 80095f6:	61bb      	str	r3, [r7, #24]
 80095f8:	e018      	b.n	800962c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80095fa:	6839      	ldr	r1, [r7, #0]
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f7ff fd8e 	bl	800911e <get_fat>
 8009602:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2b01      	cmp	r3, #1
 8009608:	d801      	bhi.n	800960e <create_chain+0x46>
 800960a:	2301      	movs	r3, #1
 800960c:	e070      	b.n	80096f0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009614:	d101      	bne.n	800961a <create_chain+0x52>
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	e06a      	b.n	80096f0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	69db      	ldr	r3, [r3, #28]
 800961e:	68fa      	ldr	r2, [r7, #12]
 8009620:	429a      	cmp	r2, r3
 8009622:	d201      	bcs.n	8009628 <create_chain+0x60>
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	e063      	b.n	80096f0 <create_chain+0x128>
		scl = clst;
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800962c:	69bb      	ldr	r3, [r7, #24]
 800962e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009630:	69fb      	ldr	r3, [r7, #28]
 8009632:	3301      	adds	r3, #1
 8009634:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	69db      	ldr	r3, [r3, #28]
 800963a:	69fa      	ldr	r2, [r7, #28]
 800963c:	429a      	cmp	r2, r3
 800963e:	d307      	bcc.n	8009650 <create_chain+0x88>
				ncl = 2;
 8009640:	2302      	movs	r3, #2
 8009642:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009644:	69fa      	ldr	r2, [r7, #28]
 8009646:	69bb      	ldr	r3, [r7, #24]
 8009648:	429a      	cmp	r2, r3
 800964a:	d901      	bls.n	8009650 <create_chain+0x88>
 800964c:	2300      	movs	r3, #0
 800964e:	e04f      	b.n	80096f0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009650:	69f9      	ldr	r1, [r7, #28]
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f7ff fd63 	bl	800911e <get_fat>
 8009658:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d00e      	beq.n	800967e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2b01      	cmp	r3, #1
 8009664:	d003      	beq.n	800966e <create_chain+0xa6>
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800966c:	d101      	bne.n	8009672 <create_chain+0xaa>
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	e03e      	b.n	80096f0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009672:	69fa      	ldr	r2, [r7, #28]
 8009674:	69bb      	ldr	r3, [r7, #24]
 8009676:	429a      	cmp	r2, r3
 8009678:	d1da      	bne.n	8009630 <create_chain+0x68>
 800967a:	2300      	movs	r3, #0
 800967c:	e038      	b.n	80096f0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800967e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009680:	f04f 32ff 	mov.w	r2, #4294967295
 8009684:	69f9      	ldr	r1, [r7, #28]
 8009686:	6938      	ldr	r0, [r7, #16]
 8009688:	f7ff fe1d 	bl	80092c6 <put_fat>
 800968c:	4603      	mov	r3, r0
 800968e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009690:	7dfb      	ldrb	r3, [r7, #23]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d109      	bne.n	80096aa <create_chain+0xe2>
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d006      	beq.n	80096aa <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800969c:	69fa      	ldr	r2, [r7, #28]
 800969e:	6839      	ldr	r1, [r7, #0]
 80096a0:	6938      	ldr	r0, [r7, #16]
 80096a2:	f7ff fe10 	bl	80092c6 <put_fat>
 80096a6:	4603      	mov	r3, r0
 80096a8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80096aa:	7dfb      	ldrb	r3, [r7, #23]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d116      	bne.n	80096de <create_chain+0x116>
		fs->last_clst = ncl;
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	69fa      	ldr	r2, [r7, #28]
 80096b4:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	699a      	ldr	r2, [r3, #24]
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	69db      	ldr	r3, [r3, #28]
 80096be:	3b02      	subs	r3, #2
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d804      	bhi.n	80096ce <create_chain+0x106>
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	699b      	ldr	r3, [r3, #24]
 80096c8:	1e5a      	subs	r2, r3, #1
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	791b      	ldrb	r3, [r3, #4]
 80096d2:	f043 0301 	orr.w	r3, r3, #1
 80096d6:	b2da      	uxtb	r2, r3
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	711a      	strb	r2, [r3, #4]
 80096dc:	e007      	b.n	80096ee <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80096de:	7dfb      	ldrb	r3, [r7, #23]
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d102      	bne.n	80096ea <create_chain+0x122>
 80096e4:	f04f 33ff 	mov.w	r3, #4294967295
 80096e8:	e000      	b.n	80096ec <create_chain+0x124>
 80096ea:	2301      	movs	r3, #1
 80096ec:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80096ee:	69fb      	ldr	r3, [r7, #28]
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3720      	adds	r7, #32
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b087      	sub	sp, #28
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800970c:	3304      	adds	r3, #4
 800970e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	899b      	ldrh	r3, [r3, #12]
 8009714:	461a      	mov	r2, r3
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	fbb3 f3f2 	udiv	r3, r3, r2
 800971c:	68fa      	ldr	r2, [r7, #12]
 800971e:	8952      	ldrh	r2, [r2, #10]
 8009720:	fbb3 f3f2 	udiv	r3, r3, r2
 8009724:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	1d1a      	adds	r2, r3, #4
 800972a:	613a      	str	r2, [r7, #16]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d101      	bne.n	800973a <clmt_clust+0x42>
 8009736:	2300      	movs	r3, #0
 8009738:	e010      	b.n	800975c <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800973a:	697a      	ldr	r2, [r7, #20]
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	429a      	cmp	r2, r3
 8009740:	d307      	bcc.n	8009752 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8009742:	697a      	ldr	r2, [r7, #20]
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	1ad3      	subs	r3, r2, r3
 8009748:	617b      	str	r3, [r7, #20]
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	3304      	adds	r3, #4
 800974e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009750:	e7e9      	b.n	8009726 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8009752:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	4413      	add	r3, r2
}
 800975c:	4618      	mov	r0, r3
 800975e:	371c      	adds	r7, #28
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr

08009768 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b086      	sub	sp, #24
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800977e:	d204      	bcs.n	800978a <dir_sdi+0x22>
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	f003 031f 	and.w	r3, r3, #31
 8009786:	2b00      	cmp	r3, #0
 8009788:	d001      	beq.n	800978e <dir_sdi+0x26>
		return FR_INT_ERR;
 800978a:	2302      	movs	r3, #2
 800978c:	e071      	b.n	8009872 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	683a      	ldr	r2, [r7, #0]
 8009792:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	689b      	ldr	r3, [r3, #8]
 8009798:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d106      	bne.n	80097ae <dir_sdi+0x46>
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	2b02      	cmp	r3, #2
 80097a6:	d902      	bls.n	80097ae <dir_sdi+0x46>
		clst = fs->dirbase;
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ac:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d10c      	bne.n	80097ce <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	095b      	lsrs	r3, r3, #5
 80097b8:	693a      	ldr	r2, [r7, #16]
 80097ba:	8912      	ldrh	r2, [r2, #8]
 80097bc:	4293      	cmp	r3, r2
 80097be:	d301      	bcc.n	80097c4 <dir_sdi+0x5c>
 80097c0:	2302      	movs	r3, #2
 80097c2:	e056      	b.n	8009872 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	61da      	str	r2, [r3, #28]
 80097cc:	e02d      	b.n	800982a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	895b      	ldrh	r3, [r3, #10]
 80097d2:	461a      	mov	r2, r3
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	899b      	ldrh	r3, [r3, #12]
 80097d8:	fb02 f303 	mul.w	r3, r2, r3
 80097dc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80097de:	e019      	b.n	8009814 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6979      	ldr	r1, [r7, #20]
 80097e4:	4618      	mov	r0, r3
 80097e6:	f7ff fc9a 	bl	800911e <get_fat>
 80097ea:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097f2:	d101      	bne.n	80097f8 <dir_sdi+0x90>
 80097f4:	2301      	movs	r3, #1
 80097f6:	e03c      	b.n	8009872 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	2b01      	cmp	r3, #1
 80097fc:	d904      	bls.n	8009808 <dir_sdi+0xa0>
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	69db      	ldr	r3, [r3, #28]
 8009802:	697a      	ldr	r2, [r7, #20]
 8009804:	429a      	cmp	r2, r3
 8009806:	d301      	bcc.n	800980c <dir_sdi+0xa4>
 8009808:	2302      	movs	r3, #2
 800980a:	e032      	b.n	8009872 <dir_sdi+0x10a>
			ofs -= csz;
 800980c:	683a      	ldr	r2, [r7, #0]
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	1ad3      	subs	r3, r2, r3
 8009812:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009814:	683a      	ldr	r2, [r7, #0]
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	429a      	cmp	r2, r3
 800981a:	d2e1      	bcs.n	80097e0 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800981c:	6979      	ldr	r1, [r7, #20]
 800981e:	6938      	ldr	r0, [r7, #16]
 8009820:	f7ff fc5e 	bl	80090e0 <clust2sect>
 8009824:	4602      	mov	r2, r0
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	697a      	ldr	r2, [r7, #20]
 800982e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	69db      	ldr	r3, [r3, #28]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d101      	bne.n	800983c <dir_sdi+0xd4>
 8009838:	2302      	movs	r3, #2
 800983a:	e01a      	b.n	8009872 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	69da      	ldr	r2, [r3, #28]
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	899b      	ldrh	r3, [r3, #12]
 8009844:	4619      	mov	r1, r3
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	fbb3 f3f1 	udiv	r3, r3, r1
 800984c:	441a      	add	r2, r3
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	899b      	ldrh	r3, [r3, #12]
 800985c:	461a      	mov	r2, r3
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	fbb3 f0f2 	udiv	r0, r3, r2
 8009864:	fb00 f202 	mul.w	r2, r0, r2
 8009868:	1a9b      	subs	r3, r3, r2
 800986a:	18ca      	adds	r2, r1, r3
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009870:	2300      	movs	r3, #0
}
 8009872:	4618      	mov	r0, r3
 8009874:	3718      	adds	r7, #24
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}

0800987a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800987a:	b580      	push	{r7, lr}
 800987c:	b086      	sub	sp, #24
 800987e:	af00      	add	r7, sp, #0
 8009880:	6078      	str	r0, [r7, #4]
 8009882:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	695b      	ldr	r3, [r3, #20]
 800988e:	3320      	adds	r3, #32
 8009890:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	69db      	ldr	r3, [r3, #28]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d003      	beq.n	80098a2 <dir_next+0x28>
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80098a0:	d301      	bcc.n	80098a6 <dir_next+0x2c>
 80098a2:	2304      	movs	r3, #4
 80098a4:	e0bb      	b.n	8009a1e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	899b      	ldrh	r3, [r3, #12]
 80098aa:	461a      	mov	r2, r3
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80098b2:	fb01 f202 	mul.w	r2, r1, r2
 80098b6:	1a9b      	subs	r3, r3, r2
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	f040 809d 	bne.w	80099f8 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	69db      	ldr	r3, [r3, #28]
 80098c2:	1c5a      	adds	r2, r3, #1
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	699b      	ldr	r3, [r3, #24]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d10b      	bne.n	80098e8 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	095b      	lsrs	r3, r3, #5
 80098d4:	68fa      	ldr	r2, [r7, #12]
 80098d6:	8912      	ldrh	r2, [r2, #8]
 80098d8:	4293      	cmp	r3, r2
 80098da:	f0c0 808d 	bcc.w	80099f8 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2200      	movs	r2, #0
 80098e2:	61da      	str	r2, [r3, #28]
 80098e4:	2304      	movs	r3, #4
 80098e6:	e09a      	b.n	8009a1e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	899b      	ldrh	r3, [r3, #12]
 80098ec:	461a      	mov	r2, r3
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80098f4:	68fa      	ldr	r2, [r7, #12]
 80098f6:	8952      	ldrh	r2, [r2, #10]
 80098f8:	3a01      	subs	r2, #1
 80098fa:	4013      	ands	r3, r2
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d17b      	bne.n	80099f8 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	699b      	ldr	r3, [r3, #24]
 8009906:	4619      	mov	r1, r3
 8009908:	4610      	mov	r0, r2
 800990a:	f7ff fc08 	bl	800911e <get_fat>
 800990e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	2b01      	cmp	r3, #1
 8009914:	d801      	bhi.n	800991a <dir_next+0xa0>
 8009916:	2302      	movs	r3, #2
 8009918:	e081      	b.n	8009a1e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009920:	d101      	bne.n	8009926 <dir_next+0xac>
 8009922:	2301      	movs	r3, #1
 8009924:	e07b      	b.n	8009a1e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	69db      	ldr	r3, [r3, #28]
 800992a:	697a      	ldr	r2, [r7, #20]
 800992c:	429a      	cmp	r2, r3
 800992e:	d359      	bcc.n	80099e4 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d104      	bne.n	8009940 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2200      	movs	r2, #0
 800993a:	61da      	str	r2, [r3, #28]
 800993c:	2304      	movs	r3, #4
 800993e:	e06e      	b.n	8009a1e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	699b      	ldr	r3, [r3, #24]
 8009946:	4619      	mov	r1, r3
 8009948:	4610      	mov	r0, r2
 800994a:	f7ff fe3d 	bl	80095c8 <create_chain>
 800994e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d101      	bne.n	800995a <dir_next+0xe0>
 8009956:	2307      	movs	r3, #7
 8009958:	e061      	b.n	8009a1e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	2b01      	cmp	r3, #1
 800995e:	d101      	bne.n	8009964 <dir_next+0xea>
 8009960:	2302      	movs	r3, #2
 8009962:	e05c      	b.n	8009a1e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800996a:	d101      	bne.n	8009970 <dir_next+0xf6>
 800996c:	2301      	movs	r3, #1
 800996e:	e056      	b.n	8009a1e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009970:	68f8      	ldr	r0, [r7, #12]
 8009972:	f7ff fad3 	bl	8008f1c <sync_window>
 8009976:	4603      	mov	r3, r0
 8009978:	2b00      	cmp	r3, #0
 800997a:	d001      	beq.n	8009980 <dir_next+0x106>
 800997c:	2301      	movs	r3, #1
 800997e:	e04e      	b.n	8009a1e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	899b      	ldrh	r3, [r3, #12]
 800998a:	461a      	mov	r2, r3
 800998c:	2100      	movs	r1, #0
 800998e:	f7ff f8fc 	bl	8008b8a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009992:	2300      	movs	r3, #0
 8009994:	613b      	str	r3, [r7, #16]
 8009996:	6979      	ldr	r1, [r7, #20]
 8009998:	68f8      	ldr	r0, [r7, #12]
 800999a:	f7ff fba1 	bl	80090e0 <clust2sect>
 800999e:	4602      	mov	r2, r0
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	635a      	str	r2, [r3, #52]	; 0x34
 80099a4:	e012      	b.n	80099cc <dir_next+0x152>
						fs->wflag = 1;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2201      	movs	r2, #1
 80099aa:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80099ac:	68f8      	ldr	r0, [r7, #12]
 80099ae:	f7ff fab5 	bl	8008f1c <sync_window>
 80099b2:	4603      	mov	r3, r0
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d001      	beq.n	80099bc <dir_next+0x142>
 80099b8:	2301      	movs	r3, #1
 80099ba:	e030      	b.n	8009a1e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	3301      	adds	r3, #1
 80099c0:	613b      	str	r3, [r7, #16]
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099c6:	1c5a      	adds	r2, r3, #1
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	635a      	str	r2, [r3, #52]	; 0x34
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	895b      	ldrh	r3, [r3, #10]
 80099d0:	461a      	mov	r2, r3
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d3e6      	bcc.n	80099a6 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	1ad2      	subs	r2, r2, r3
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	697a      	ldr	r2, [r7, #20]
 80099e8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80099ea:	6979      	ldr	r1, [r7, #20]
 80099ec:	68f8      	ldr	r0, [r7, #12]
 80099ee:	f7ff fb77 	bl	80090e0 <clust2sect>
 80099f2:	4602      	mov	r2, r0
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	68ba      	ldr	r2, [r7, #8]
 80099fc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	899b      	ldrh	r3, [r3, #12]
 8009a08:	461a      	mov	r2, r3
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	fbb3 f0f2 	udiv	r0, r3, r2
 8009a10:	fb00 f202 	mul.w	r2, r0, r2
 8009a14:	1a9b      	subs	r3, r3, r2
 8009a16:	18ca      	adds	r2, r1, r3
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009a1c:	2300      	movs	r3, #0
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3718      	adds	r7, #24
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}

08009a26 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009a26:	b580      	push	{r7, lr}
 8009a28:	b086      	sub	sp, #24
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	6078      	str	r0, [r7, #4]
 8009a2e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009a36:	2100      	movs	r1, #0
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f7ff fe95 	bl	8009768 <dir_sdi>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009a42:	7dfb      	ldrb	r3, [r7, #23]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d12b      	bne.n	8009aa0 <dir_alloc+0x7a>
		n = 0;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	69db      	ldr	r3, [r3, #28]
 8009a50:	4619      	mov	r1, r3
 8009a52:	68f8      	ldr	r0, [r7, #12]
 8009a54:	f7ff faa6 	bl	8008fa4 <move_window>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009a5c:	7dfb      	ldrb	r3, [r7, #23]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d11d      	bne.n	8009a9e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6a1b      	ldr	r3, [r3, #32]
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	2be5      	cmp	r3, #229	; 0xe5
 8009a6a:	d004      	beq.n	8009a76 <dir_alloc+0x50>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6a1b      	ldr	r3, [r3, #32]
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d107      	bne.n	8009a86 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	3301      	adds	r3, #1
 8009a7a:	613b      	str	r3, [r7, #16]
 8009a7c:	693a      	ldr	r2, [r7, #16]
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d102      	bne.n	8009a8a <dir_alloc+0x64>
 8009a84:	e00c      	b.n	8009aa0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009a86:	2300      	movs	r3, #0
 8009a88:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009a8a:	2101      	movs	r1, #1
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f7ff fef4 	bl	800987a <dir_next>
 8009a92:	4603      	mov	r3, r0
 8009a94:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009a96:	7dfb      	ldrb	r3, [r7, #23]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d0d7      	beq.n	8009a4c <dir_alloc+0x26>
 8009a9c:	e000      	b.n	8009aa0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009a9e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009aa0:	7dfb      	ldrb	r3, [r7, #23]
 8009aa2:	2b04      	cmp	r3, #4
 8009aa4:	d101      	bne.n	8009aaa <dir_alloc+0x84>
 8009aa6:	2307      	movs	r3, #7
 8009aa8:	75fb      	strb	r3, [r7, #23]
	return res;
 8009aaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3718      	adds	r7, #24
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	331a      	adds	r3, #26
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7fe ffbe 	bl	8008a44 <ld_word>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	781b      	ldrb	r3, [r3, #0]
 8009ad0:	2b03      	cmp	r3, #3
 8009ad2:	d109      	bne.n	8009ae8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	3314      	adds	r3, #20
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f7fe ffb3 	bl	8008a44 <ld_word>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	041b      	lsls	r3, r3, #16
 8009ae2:	68fa      	ldr	r2, [r7, #12]
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3710      	adds	r7, #16
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}

08009af2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009af2:	b580      	push	{r7, lr}
 8009af4:	b084      	sub	sp, #16
 8009af6:	af00      	add	r7, sp, #0
 8009af8:	60f8      	str	r0, [r7, #12]
 8009afa:	60b9      	str	r1, [r7, #8]
 8009afc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	331a      	adds	r3, #26
 8009b02:	687a      	ldr	r2, [r7, #4]
 8009b04:	b292      	uxth	r2, r2
 8009b06:	4611      	mov	r1, r2
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f7fe ffd6 	bl	8008aba <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	781b      	ldrb	r3, [r3, #0]
 8009b12:	2b03      	cmp	r3, #3
 8009b14:	d109      	bne.n	8009b2a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	f103 0214 	add.w	r2, r3, #20
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	0c1b      	lsrs	r3, r3, #16
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	4619      	mov	r1, r3
 8009b24:	4610      	mov	r0, r2
 8009b26:	f7fe ffc8 	bl	8008aba <st_word>
	}
}
 8009b2a:	bf00      	nop
 8009b2c:	3710      	adds	r7, #16
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
	...

08009b34 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8009b34:	b590      	push	{r4, r7, lr}
 8009b36:	b087      	sub	sp, #28
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	331a      	adds	r3, #26
 8009b42:	4618      	mov	r0, r3
 8009b44:	f7fe ff7e 	bl	8008a44 <ld_word>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d001      	beq.n	8009b52 <cmp_lfn+0x1e>
 8009b4e:	2300      	movs	r3, #0
 8009b50:	e059      	b.n	8009c06 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	781b      	ldrb	r3, [r3, #0]
 8009b56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b5a:	1e5a      	subs	r2, r3, #1
 8009b5c:	4613      	mov	r3, r2
 8009b5e:	005b      	lsls	r3, r3, #1
 8009b60:	4413      	add	r3, r2
 8009b62:	009b      	lsls	r3, r3, #2
 8009b64:	4413      	add	r3, r2
 8009b66:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009b68:	2301      	movs	r3, #1
 8009b6a:	81fb      	strh	r3, [r7, #14]
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	613b      	str	r3, [r7, #16]
 8009b70:	e033      	b.n	8009bda <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8009b72:	4a27      	ldr	r2, [pc, #156]	; (8009c10 <cmp_lfn+0xdc>)
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	4413      	add	r3, r2
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	461a      	mov	r2, r3
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	4413      	add	r3, r2
 8009b80:	4618      	mov	r0, r3
 8009b82:	f7fe ff5f 	bl	8008a44 <ld_word>
 8009b86:	4603      	mov	r3, r0
 8009b88:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8009b8a:	89fb      	ldrh	r3, [r7, #14]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d01a      	beq.n	8009bc6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	2bfe      	cmp	r3, #254	; 0xfe
 8009b94:	d812      	bhi.n	8009bbc <cmp_lfn+0x88>
 8009b96:	89bb      	ldrh	r3, [r7, #12]
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f7fe f947 	bl	8007e2c <ff_wtoupper>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	461c      	mov	r4, r3
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	1c5a      	adds	r2, r3, #1
 8009ba6:	617a      	str	r2, [r7, #20]
 8009ba8:	005b      	lsls	r3, r3, #1
 8009baa:	687a      	ldr	r2, [r7, #4]
 8009bac:	4413      	add	r3, r2
 8009bae:	881b      	ldrh	r3, [r3, #0]
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f7fe f93b 	bl	8007e2c <ff_wtoupper>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	429c      	cmp	r4, r3
 8009bba:	d001      	beq.n	8009bc0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	e022      	b.n	8009c06 <cmp_lfn+0xd2>
			}
			wc = uc;
 8009bc0:	89bb      	ldrh	r3, [r7, #12]
 8009bc2:	81fb      	strh	r3, [r7, #14]
 8009bc4:	e006      	b.n	8009bd4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8009bc6:	89bb      	ldrh	r3, [r7, #12]
 8009bc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d001      	beq.n	8009bd4 <cmp_lfn+0xa0>
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	e018      	b.n	8009c06 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	613b      	str	r3, [r7, #16]
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	2b0c      	cmp	r3, #12
 8009bde:	d9c8      	bls.n	8009b72 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d00b      	beq.n	8009c04 <cmp_lfn+0xd0>
 8009bec:	89fb      	ldrh	r3, [r7, #14]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d008      	beq.n	8009c04 <cmp_lfn+0xd0>
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	005b      	lsls	r3, r3, #1
 8009bf6:	687a      	ldr	r2, [r7, #4]
 8009bf8:	4413      	add	r3, r2
 8009bfa:	881b      	ldrh	r3, [r3, #0]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d001      	beq.n	8009c04 <cmp_lfn+0xd0>
 8009c00:	2300      	movs	r3, #0
 8009c02:	e000      	b.n	8009c06 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8009c04:	2301      	movs	r3, #1
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	371c      	adds	r7, #28
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd90      	pop	{r4, r7, pc}
 8009c0e:	bf00      	nop
 8009c10:	0800c6e8 	.word	0x0800c6e8

08009c14 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b086      	sub	sp, #24
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	331a      	adds	r3, #26
 8009c22:	4618      	mov	r0, r3
 8009c24:	f7fe ff0e 	bl	8008a44 <ld_word>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d001      	beq.n	8009c32 <pick_lfn+0x1e>
 8009c2e:	2300      	movs	r3, #0
 8009c30:	e04d      	b.n	8009cce <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c3a:	1e5a      	subs	r2, r3, #1
 8009c3c:	4613      	mov	r3, r2
 8009c3e:	005b      	lsls	r3, r3, #1
 8009c40:	4413      	add	r3, r2
 8009c42:	009b      	lsls	r3, r3, #2
 8009c44:	4413      	add	r3, r2
 8009c46:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009c48:	2301      	movs	r3, #1
 8009c4a:	81fb      	strh	r3, [r7, #14]
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	613b      	str	r3, [r7, #16]
 8009c50:	e028      	b.n	8009ca4 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8009c52:	4a21      	ldr	r2, [pc, #132]	; (8009cd8 <pick_lfn+0xc4>)
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	4413      	add	r3, r2
 8009c58:	781b      	ldrb	r3, [r3, #0]
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	4413      	add	r3, r2
 8009c60:	4618      	mov	r0, r3
 8009c62:	f7fe feef 	bl	8008a44 <ld_word>
 8009c66:	4603      	mov	r3, r0
 8009c68:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8009c6a:	89fb      	ldrh	r3, [r7, #14]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d00f      	beq.n	8009c90 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	2bfe      	cmp	r3, #254	; 0xfe
 8009c74:	d901      	bls.n	8009c7a <pick_lfn+0x66>
 8009c76:	2300      	movs	r3, #0
 8009c78:	e029      	b.n	8009cce <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8009c7a:	89bb      	ldrh	r3, [r7, #12]
 8009c7c:	81fb      	strh	r3, [r7, #14]
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	1c5a      	adds	r2, r3, #1
 8009c82:	617a      	str	r2, [r7, #20]
 8009c84:	005b      	lsls	r3, r3, #1
 8009c86:	687a      	ldr	r2, [r7, #4]
 8009c88:	4413      	add	r3, r2
 8009c8a:	89fa      	ldrh	r2, [r7, #14]
 8009c8c:	801a      	strh	r2, [r3, #0]
 8009c8e:	e006      	b.n	8009c9e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8009c90:	89bb      	ldrh	r3, [r7, #12]
 8009c92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d001      	beq.n	8009c9e <pick_lfn+0x8a>
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	e017      	b.n	8009cce <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	613b      	str	r3, [r7, #16]
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	2b0c      	cmp	r3, #12
 8009ca8:	d9d3      	bls.n	8009c52 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	781b      	ldrb	r3, [r3, #0]
 8009cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d00a      	beq.n	8009ccc <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	2bfe      	cmp	r3, #254	; 0xfe
 8009cba:	d901      	bls.n	8009cc0 <pick_lfn+0xac>
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	e006      	b.n	8009cce <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	005b      	lsls	r3, r3, #1
 8009cc4:	687a      	ldr	r2, [r7, #4]
 8009cc6:	4413      	add	r3, r2
 8009cc8:	2200      	movs	r2, #0
 8009cca:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8009ccc:	2301      	movs	r3, #1
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3718      	adds	r7, #24
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
 8009cd6:	bf00      	nop
 8009cd8:	0800c6e8 	.word	0x0800c6e8

08009cdc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b088      	sub	sp, #32
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	60f8      	str	r0, [r7, #12]
 8009ce4:	60b9      	str	r1, [r7, #8]
 8009ce6:	4611      	mov	r1, r2
 8009ce8:	461a      	mov	r2, r3
 8009cea:	460b      	mov	r3, r1
 8009cec:	71fb      	strb	r3, [r7, #7]
 8009cee:	4613      	mov	r3, r2
 8009cf0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	330d      	adds	r3, #13
 8009cf6:	79ba      	ldrb	r2, [r7, #6]
 8009cf8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	330b      	adds	r3, #11
 8009cfe:	220f      	movs	r2, #15
 8009d00:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	330c      	adds	r3, #12
 8009d06:	2200      	movs	r2, #0
 8009d08:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	331a      	adds	r3, #26
 8009d0e:	2100      	movs	r1, #0
 8009d10:	4618      	mov	r0, r3
 8009d12:	f7fe fed2 	bl	8008aba <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8009d16:	79fb      	ldrb	r3, [r7, #7]
 8009d18:	1e5a      	subs	r2, r3, #1
 8009d1a:	4613      	mov	r3, r2
 8009d1c:	005b      	lsls	r3, r3, #1
 8009d1e:	4413      	add	r3, r2
 8009d20:	009b      	lsls	r3, r3, #2
 8009d22:	4413      	add	r3, r2
 8009d24:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8009d26:	2300      	movs	r3, #0
 8009d28:	82fb      	strh	r3, [r7, #22]
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8009d2e:	8afb      	ldrh	r3, [r7, #22]
 8009d30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d007      	beq.n	8009d48 <put_lfn+0x6c>
 8009d38:	69fb      	ldr	r3, [r7, #28]
 8009d3a:	1c5a      	adds	r2, r3, #1
 8009d3c:	61fa      	str	r2, [r7, #28]
 8009d3e:	005b      	lsls	r3, r3, #1
 8009d40:	68fa      	ldr	r2, [r7, #12]
 8009d42:	4413      	add	r3, r2
 8009d44:	881b      	ldrh	r3, [r3, #0]
 8009d46:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8009d48:	4a17      	ldr	r2, [pc, #92]	; (8009da8 <put_lfn+0xcc>)
 8009d4a:	69bb      	ldr	r3, [r7, #24]
 8009d4c:	4413      	add	r3, r2
 8009d4e:	781b      	ldrb	r3, [r3, #0]
 8009d50:	461a      	mov	r2, r3
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	4413      	add	r3, r2
 8009d56:	8afa      	ldrh	r2, [r7, #22]
 8009d58:	4611      	mov	r1, r2
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f7fe fead 	bl	8008aba <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8009d60:	8afb      	ldrh	r3, [r7, #22]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d102      	bne.n	8009d6c <put_lfn+0x90>
 8009d66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009d6a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8009d6c:	69bb      	ldr	r3, [r7, #24]
 8009d6e:	3301      	adds	r3, #1
 8009d70:	61bb      	str	r3, [r7, #24]
 8009d72:	69bb      	ldr	r3, [r7, #24]
 8009d74:	2b0c      	cmp	r3, #12
 8009d76:	d9da      	bls.n	8009d2e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8009d78:	8afb      	ldrh	r3, [r7, #22]
 8009d7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d006      	beq.n	8009d90 <put_lfn+0xb4>
 8009d82:	69fb      	ldr	r3, [r7, #28]
 8009d84:	005b      	lsls	r3, r3, #1
 8009d86:	68fa      	ldr	r2, [r7, #12]
 8009d88:	4413      	add	r3, r2
 8009d8a:	881b      	ldrh	r3, [r3, #0]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d103      	bne.n	8009d98 <put_lfn+0xbc>
 8009d90:	79fb      	ldrb	r3, [r7, #7]
 8009d92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d96:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	79fa      	ldrb	r2, [r7, #7]
 8009d9c:	701a      	strb	r2, [r3, #0]
}
 8009d9e:	bf00      	nop
 8009da0:	3720      	adds	r7, #32
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	bf00      	nop
 8009da8:	0800c6e8 	.word	0x0800c6e8

08009dac <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b08c      	sub	sp, #48	; 0x30
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	60b9      	str	r1, [r7, #8]
 8009db6:	607a      	str	r2, [r7, #4]
 8009db8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8009dba:	220b      	movs	r2, #11
 8009dbc:	68b9      	ldr	r1, [r7, #8]
 8009dbe:	68f8      	ldr	r0, [r7, #12]
 8009dc0:	f7fe fec2 	bl	8008b48 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	2b05      	cmp	r3, #5
 8009dc8:	d92b      	bls.n	8009e22 <gen_numname+0x76>
		sr = seq;
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8009dce:	e022      	b.n	8009e16 <gen_numname+0x6a>
			wc = *lfn++;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	1c9a      	adds	r2, r3, #2
 8009dd4:	607a      	str	r2, [r7, #4]
 8009dd6:	881b      	ldrh	r3, [r3, #0]
 8009dd8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8009dda:	2300      	movs	r3, #0
 8009ddc:	62bb      	str	r3, [r7, #40]	; 0x28
 8009dde:	e017      	b.n	8009e10 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8009de0:	69fb      	ldr	r3, [r7, #28]
 8009de2:	005a      	lsls	r2, r3, #1
 8009de4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009de6:	f003 0301 	and.w	r3, r3, #1
 8009dea:	4413      	add	r3, r2
 8009dec:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8009dee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009df0:	085b      	lsrs	r3, r3, #1
 8009df2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8009df4:	69fb      	ldr	r3, [r7, #28]
 8009df6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d005      	beq.n	8009e0a <gen_numname+0x5e>
 8009dfe:	69fb      	ldr	r3, [r7, #28]
 8009e00:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8009e04:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8009e08:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8009e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e0c:	3301      	adds	r3, #1
 8009e0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e12:	2b0f      	cmp	r3, #15
 8009e14:	d9e4      	bls.n	8009de0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	881b      	ldrh	r3, [r3, #0]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d1d8      	bne.n	8009dd0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8009e1e:	69fb      	ldr	r3, [r7, #28]
 8009e20:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8009e22:	2307      	movs	r3, #7
 8009e24:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	b2db      	uxtb	r3, r3
 8009e2a:	f003 030f 	and.w	r3, r3, #15
 8009e2e:	b2db      	uxtb	r3, r3
 8009e30:	3330      	adds	r3, #48	; 0x30
 8009e32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8009e36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009e3a:	2b39      	cmp	r3, #57	; 0x39
 8009e3c:	d904      	bls.n	8009e48 <gen_numname+0x9c>
 8009e3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009e42:	3307      	adds	r3, #7
 8009e44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8009e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e4a:	1e5a      	subs	r2, r3, #1
 8009e4c:	62ba      	str	r2, [r7, #40]	; 0x28
 8009e4e:	3330      	adds	r3, #48	; 0x30
 8009e50:	443b      	add	r3, r7
 8009e52:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009e56:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	091b      	lsrs	r3, r3, #4
 8009e5e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d1df      	bne.n	8009e26 <gen_numname+0x7a>
	ns[i] = '~';
 8009e66:	f107 0214 	add.w	r2, r7, #20
 8009e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e6c:	4413      	add	r3, r2
 8009e6e:	227e      	movs	r2, #126	; 0x7e
 8009e70:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009e72:	2300      	movs	r3, #0
 8009e74:	627b      	str	r3, [r7, #36]	; 0x24
 8009e76:	e002      	b.n	8009e7e <gen_numname+0xd2>
 8009e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8009e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d205      	bcs.n	8009e92 <gen_numname+0xe6>
 8009e86:	68fa      	ldr	r2, [r7, #12]
 8009e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8a:	4413      	add	r3, r2
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	2b20      	cmp	r3, #32
 8009e90:	d1f2      	bne.n	8009e78 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e94:	2b07      	cmp	r3, #7
 8009e96:	d807      	bhi.n	8009ea8 <gen_numname+0xfc>
 8009e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e9a:	1c5a      	adds	r2, r3, #1
 8009e9c:	62ba      	str	r2, [r7, #40]	; 0x28
 8009e9e:	3330      	adds	r3, #48	; 0x30
 8009ea0:	443b      	add	r3, r7
 8009ea2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8009ea6:	e000      	b.n	8009eaa <gen_numname+0xfe>
 8009ea8:	2120      	movs	r1, #32
 8009eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eac:	1c5a      	adds	r2, r3, #1
 8009eae:	627a      	str	r2, [r7, #36]	; 0x24
 8009eb0:	68fa      	ldr	r2, [r7, #12]
 8009eb2:	4413      	add	r3, r2
 8009eb4:	460a      	mov	r2, r1
 8009eb6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8009eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eba:	2b07      	cmp	r3, #7
 8009ebc:	d9e9      	bls.n	8009e92 <gen_numname+0xe6>
}
 8009ebe:	bf00      	nop
 8009ec0:	bf00      	nop
 8009ec2:	3730      	adds	r7, #48	; 0x30
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b085      	sub	sp, #20
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8009ed4:	230b      	movs	r3, #11
 8009ed6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8009ed8:	7bfb      	ldrb	r3, [r7, #15]
 8009eda:	b2da      	uxtb	r2, r3
 8009edc:	0852      	lsrs	r2, r2, #1
 8009ede:	01db      	lsls	r3, r3, #7
 8009ee0:	4313      	orrs	r3, r2
 8009ee2:	b2da      	uxtb	r2, r3
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	1c59      	adds	r1, r3, #1
 8009ee8:	6079      	str	r1, [r7, #4]
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	4413      	add	r3, r2
 8009eee:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	3b01      	subs	r3, #1
 8009ef4:	60bb      	str	r3, [r7, #8]
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d1ed      	bne.n	8009ed8 <sum_sfn+0x10>
	return sum;
 8009efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3714      	adds	r7, #20
 8009f02:	46bd      	mov	sp, r7
 8009f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f08:	4770      	bx	lr

08009f0a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8009f0a:	b580      	push	{r7, lr}
 8009f0c:	b086      	sub	sp, #24
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
 8009f12:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8009f14:	2304      	movs	r3, #4
 8009f16:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8009f1e:	23ff      	movs	r3, #255	; 0xff
 8009f20:	757b      	strb	r3, [r7, #21]
 8009f22:	23ff      	movs	r3, #255	; 0xff
 8009f24:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8009f26:	e081      	b.n	800a02c <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	69db      	ldr	r3, [r3, #28]
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	6938      	ldr	r0, [r7, #16]
 8009f30:	f7ff f838 	bl	8008fa4 <move_window>
 8009f34:	4603      	mov	r3, r0
 8009f36:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009f38:	7dfb      	ldrb	r3, [r7, #23]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d17c      	bne.n	800a038 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6a1b      	ldr	r3, [r3, #32]
 8009f42:	781b      	ldrb	r3, [r3, #0]
 8009f44:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8009f46:	7dbb      	ldrb	r3, [r7, #22]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d102      	bne.n	8009f52 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8009f4c:	2304      	movs	r3, #4
 8009f4e:	75fb      	strb	r3, [r7, #23]
 8009f50:	e077      	b.n	800a042 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6a1b      	ldr	r3, [r3, #32]
 8009f56:	330b      	adds	r3, #11
 8009f58:	781b      	ldrb	r3, [r3, #0]
 8009f5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f5e:	73fb      	strb	r3, [r7, #15]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	7bfa      	ldrb	r2, [r7, #15]
 8009f64:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8009f66:	7dbb      	ldrb	r3, [r7, #22]
 8009f68:	2be5      	cmp	r3, #229	; 0xe5
 8009f6a:	d00e      	beq.n	8009f8a <dir_read+0x80>
 8009f6c:	7dbb      	ldrb	r3, [r7, #22]
 8009f6e:	2b2e      	cmp	r3, #46	; 0x2e
 8009f70:	d00b      	beq.n	8009f8a <dir_read+0x80>
 8009f72:	7bfb      	ldrb	r3, [r7, #15]
 8009f74:	f023 0320 	bic.w	r3, r3, #32
 8009f78:	2b08      	cmp	r3, #8
 8009f7a:	bf0c      	ite	eq
 8009f7c:	2301      	moveq	r3, #1
 8009f7e:	2300      	movne	r3, #0
 8009f80:	b2db      	uxtb	r3, r3
 8009f82:	461a      	mov	r2, r3
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d002      	beq.n	8009f90 <dir_read+0x86>
				ord = 0xFF;
 8009f8a:	23ff      	movs	r3, #255	; 0xff
 8009f8c:	757b      	strb	r3, [r7, #21]
 8009f8e:	e044      	b.n	800a01a <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8009f90:	7bfb      	ldrb	r3, [r7, #15]
 8009f92:	2b0f      	cmp	r3, #15
 8009f94:	d12f      	bne.n	8009ff6 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8009f96:	7dbb      	ldrb	r3, [r7, #22]
 8009f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d00d      	beq.n	8009fbc <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6a1b      	ldr	r3, [r3, #32]
 8009fa4:	7b5b      	ldrb	r3, [r3, #13]
 8009fa6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8009fa8:	7dbb      	ldrb	r3, [r7, #22]
 8009faa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fae:	75bb      	strb	r3, [r7, #22]
 8009fb0:	7dbb      	ldrb	r3, [r7, #22]
 8009fb2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	695a      	ldr	r2, [r3, #20]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009fbc:	7dba      	ldrb	r2, [r7, #22]
 8009fbe:	7d7b      	ldrb	r3, [r7, #21]
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	d115      	bne.n	8009ff0 <dir_read+0xe6>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6a1b      	ldr	r3, [r3, #32]
 8009fc8:	330d      	adds	r3, #13
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	7d3a      	ldrb	r2, [r7, #20]
 8009fce:	429a      	cmp	r2, r3
 8009fd0:	d10e      	bne.n	8009ff0 <dir_read+0xe6>
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	691a      	ldr	r2, [r3, #16]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6a1b      	ldr	r3, [r3, #32]
 8009fda:	4619      	mov	r1, r3
 8009fdc:	4610      	mov	r0, r2
 8009fde:	f7ff fe19 	bl	8009c14 <pick_lfn>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d003      	beq.n	8009ff0 <dir_read+0xe6>
 8009fe8:	7d7b      	ldrb	r3, [r7, #21]
 8009fea:	3b01      	subs	r3, #1
 8009fec:	b2db      	uxtb	r3, r3
 8009fee:	e000      	b.n	8009ff2 <dir_read+0xe8>
 8009ff0:	23ff      	movs	r3, #255	; 0xff
 8009ff2:	757b      	strb	r3, [r7, #21]
 8009ff4:	e011      	b.n	800a01a <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8009ff6:	7d7b      	ldrb	r3, [r7, #21]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d109      	bne.n	800a010 <dir_read+0x106>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6a1b      	ldr	r3, [r3, #32]
 800a000:	4618      	mov	r0, r3
 800a002:	f7ff ff61 	bl	8009ec8 <sum_sfn>
 800a006:	4603      	mov	r3, r0
 800a008:	461a      	mov	r2, r3
 800a00a:	7d3b      	ldrb	r3, [r7, #20]
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d015      	beq.n	800a03c <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f04f 32ff 	mov.w	r2, #4294967295
 800a016:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800a018:	e010      	b.n	800a03c <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800a01a:	2100      	movs	r1, #0
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f7ff fc2c 	bl	800987a <dir_next>
 800a022:	4603      	mov	r3, r0
 800a024:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a026:	7dfb      	ldrb	r3, [r7, #23]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d109      	bne.n	800a040 <dir_read+0x136>
	while (dp->sect) {
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	69db      	ldr	r3, [r3, #28]
 800a030:	2b00      	cmp	r3, #0
 800a032:	f47f af79 	bne.w	8009f28 <dir_read+0x1e>
 800a036:	e004      	b.n	800a042 <dir_read+0x138>
		if (res != FR_OK) break;
 800a038:	bf00      	nop
 800a03a:	e002      	b.n	800a042 <dir_read+0x138>
					break;
 800a03c:	bf00      	nop
 800a03e:	e000      	b.n	800a042 <dir_read+0x138>
		if (res != FR_OK) break;
 800a040:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800a042:	7dfb      	ldrb	r3, [r7, #23]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d002      	beq.n	800a04e <dir_read+0x144>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2200      	movs	r2, #0
 800a04c:	61da      	str	r2, [r3, #28]
	return res;
 800a04e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a050:	4618      	mov	r0, r3
 800a052:	3718      	adds	r7, #24
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b086      	sub	sp, #24
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a066:	2100      	movs	r1, #0
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f7ff fb7d 	bl	8009768 <dir_sdi>
 800a06e:	4603      	mov	r3, r0
 800a070:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a072:	7dfb      	ldrb	r3, [r7, #23]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d001      	beq.n	800a07c <dir_find+0x24>
 800a078:	7dfb      	ldrb	r3, [r7, #23]
 800a07a:	e0a9      	b.n	800a1d0 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a07c:	23ff      	movs	r3, #255	; 0xff
 800a07e:	753b      	strb	r3, [r7, #20]
 800a080:	7d3b      	ldrb	r3, [r7, #20]
 800a082:	757b      	strb	r3, [r7, #21]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f04f 32ff 	mov.w	r2, #4294967295
 800a08a:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	69db      	ldr	r3, [r3, #28]
 800a090:	4619      	mov	r1, r3
 800a092:	6938      	ldr	r0, [r7, #16]
 800a094:	f7fe ff86 	bl	8008fa4 <move_window>
 800a098:	4603      	mov	r3, r0
 800a09a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a09c:	7dfb      	ldrb	r3, [r7, #23]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	f040 8090 	bne.w	800a1c4 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6a1b      	ldr	r3, [r3, #32]
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a0ac:	7dbb      	ldrb	r3, [r7, #22]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d102      	bne.n	800a0b8 <dir_find+0x60>
 800a0b2:	2304      	movs	r3, #4
 800a0b4:	75fb      	strb	r3, [r7, #23]
 800a0b6:	e08a      	b.n	800a1ce <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6a1b      	ldr	r3, [r3, #32]
 800a0bc:	330b      	adds	r3, #11
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a0c4:	73fb      	strb	r3, [r7, #15]
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	7bfa      	ldrb	r2, [r7, #15]
 800a0ca:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800a0cc:	7dbb      	ldrb	r3, [r7, #22]
 800a0ce:	2be5      	cmp	r3, #229	; 0xe5
 800a0d0:	d007      	beq.n	800a0e2 <dir_find+0x8a>
 800a0d2:	7bfb      	ldrb	r3, [r7, #15]
 800a0d4:	f003 0308 	and.w	r3, r3, #8
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d009      	beq.n	800a0f0 <dir_find+0x98>
 800a0dc:	7bfb      	ldrb	r3, [r7, #15]
 800a0de:	2b0f      	cmp	r3, #15
 800a0e0:	d006      	beq.n	800a0f0 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a0e2:	23ff      	movs	r3, #255	; 0xff
 800a0e4:	757b      	strb	r3, [r7, #21]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f04f 32ff 	mov.w	r2, #4294967295
 800a0ec:	631a      	str	r2, [r3, #48]	; 0x30
 800a0ee:	e05e      	b.n	800a1ae <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800a0f0:	7bfb      	ldrb	r3, [r7, #15]
 800a0f2:	2b0f      	cmp	r3, #15
 800a0f4:	d136      	bne.n	800a164 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a0fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a100:	2b00      	cmp	r3, #0
 800a102:	d154      	bne.n	800a1ae <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800a104:	7dbb      	ldrb	r3, [r7, #22]
 800a106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d00d      	beq.n	800a12a <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6a1b      	ldr	r3, [r3, #32]
 800a112:	7b5b      	ldrb	r3, [r3, #13]
 800a114:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800a116:	7dbb      	ldrb	r3, [r7, #22]
 800a118:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a11c:	75bb      	strb	r3, [r7, #22]
 800a11e:	7dbb      	ldrb	r3, [r7, #22]
 800a120:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	695a      	ldr	r2, [r3, #20]
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800a12a:	7dba      	ldrb	r2, [r7, #22]
 800a12c:	7d7b      	ldrb	r3, [r7, #21]
 800a12e:	429a      	cmp	r2, r3
 800a130:	d115      	bne.n	800a15e <dir_find+0x106>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6a1b      	ldr	r3, [r3, #32]
 800a136:	330d      	adds	r3, #13
 800a138:	781b      	ldrb	r3, [r3, #0]
 800a13a:	7d3a      	ldrb	r2, [r7, #20]
 800a13c:	429a      	cmp	r2, r3
 800a13e:	d10e      	bne.n	800a15e <dir_find+0x106>
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	691a      	ldr	r2, [r3, #16]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6a1b      	ldr	r3, [r3, #32]
 800a148:	4619      	mov	r1, r3
 800a14a:	4610      	mov	r0, r2
 800a14c:	f7ff fcf2 	bl	8009b34 <cmp_lfn>
 800a150:	4603      	mov	r3, r0
 800a152:	2b00      	cmp	r3, #0
 800a154:	d003      	beq.n	800a15e <dir_find+0x106>
 800a156:	7d7b      	ldrb	r3, [r7, #21]
 800a158:	3b01      	subs	r3, #1
 800a15a:	b2db      	uxtb	r3, r3
 800a15c:	e000      	b.n	800a160 <dir_find+0x108>
 800a15e:	23ff      	movs	r3, #255	; 0xff
 800a160:	757b      	strb	r3, [r7, #21]
 800a162:	e024      	b.n	800a1ae <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800a164:	7d7b      	ldrb	r3, [r7, #21]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d109      	bne.n	800a17e <dir_find+0x126>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6a1b      	ldr	r3, [r3, #32]
 800a16e:	4618      	mov	r0, r3
 800a170:	f7ff feaa 	bl	8009ec8 <sum_sfn>
 800a174:	4603      	mov	r3, r0
 800a176:	461a      	mov	r2, r3
 800a178:	7d3b      	ldrb	r3, [r7, #20]
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d024      	beq.n	800a1c8 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a184:	f003 0301 	and.w	r3, r3, #1
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d10a      	bne.n	800a1a2 <dir_find+0x14a>
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6a18      	ldr	r0, [r3, #32]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	3324      	adds	r3, #36	; 0x24
 800a194:	220b      	movs	r2, #11
 800a196:	4619      	mov	r1, r3
 800a198:	f7fe fd12 	bl	8008bc0 <mem_cmp>
 800a19c:	4603      	mov	r3, r0
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d014      	beq.n	800a1cc <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a1a2:	23ff      	movs	r3, #255	; 0xff
 800a1a4:	757b      	strb	r3, [r7, #21]
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f04f 32ff 	mov.w	r2, #4294967295
 800a1ac:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a1ae:	2100      	movs	r1, #0
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f7ff fb62 	bl	800987a <dir_next>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a1ba:	7dfb      	ldrb	r3, [r7, #23]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	f43f af65 	beq.w	800a08c <dir_find+0x34>
 800a1c2:	e004      	b.n	800a1ce <dir_find+0x176>
		if (res != FR_OK) break;
 800a1c4:	bf00      	nop
 800a1c6:	e002      	b.n	800a1ce <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800a1c8:	bf00      	nop
 800a1ca:	e000      	b.n	800a1ce <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800a1cc:	bf00      	nop

	return res;
 800a1ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3718      	adds	r7, #24
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}

0800a1d8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b08c      	sub	sp, #48	; 0x30
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a1ec:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d001      	beq.n	800a1f8 <dir_register+0x20>
 800a1f4:	2306      	movs	r3, #6
 800a1f6:	e0e0      	b.n	800a3ba <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	627b      	str	r3, [r7, #36]	; 0x24
 800a1fc:	e002      	b.n	800a204 <dir_register+0x2c>
 800a1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a200:	3301      	adds	r3, #1
 800a202:	627b      	str	r3, [r7, #36]	; 0x24
 800a204:	69fb      	ldr	r3, [r7, #28]
 800a206:	691a      	ldr	r2, [r3, #16]
 800a208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a20a:	005b      	lsls	r3, r3, #1
 800a20c:	4413      	add	r3, r2
 800a20e:	881b      	ldrh	r3, [r3, #0]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d1f4      	bne.n	800a1fe <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800a21a:	f107 030c 	add.w	r3, r7, #12
 800a21e:	220c      	movs	r2, #12
 800a220:	4618      	mov	r0, r3
 800a222:	f7fe fc91 	bl	8008b48 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800a226:	7dfb      	ldrb	r3, [r7, #23]
 800a228:	f003 0301 	and.w	r3, r3, #1
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d032      	beq.n	800a296 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2240      	movs	r2, #64	; 0x40
 800a234:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800a238:	2301      	movs	r3, #1
 800a23a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a23c:	e016      	b.n	800a26c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800a244:	69fb      	ldr	r3, [r7, #28]
 800a246:	691a      	ldr	r2, [r3, #16]
 800a248:	f107 010c 	add.w	r1, r7, #12
 800a24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a24e:	f7ff fdad 	bl	8009dac <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f7ff ff00 	bl	800a058 <dir_find>
 800a258:	4603      	mov	r3, r0
 800a25a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800a25e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a262:	2b00      	cmp	r3, #0
 800a264:	d106      	bne.n	800a274 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800a266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a268:	3301      	adds	r3, #1
 800a26a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a26e:	2b63      	cmp	r3, #99	; 0x63
 800a270:	d9e5      	bls.n	800a23e <dir_register+0x66>
 800a272:	e000      	b.n	800a276 <dir_register+0x9e>
			if (res != FR_OK) break;
 800a274:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800a276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a278:	2b64      	cmp	r3, #100	; 0x64
 800a27a:	d101      	bne.n	800a280 <dir_register+0xa8>
 800a27c:	2307      	movs	r3, #7
 800a27e:	e09c      	b.n	800a3ba <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800a280:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a284:	2b04      	cmp	r3, #4
 800a286:	d002      	beq.n	800a28e <dir_register+0xb6>
 800a288:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a28c:	e095      	b.n	800a3ba <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800a28e:	7dfa      	ldrb	r2, [r7, #23]
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800a296:	7dfb      	ldrb	r3, [r7, #23]
 800a298:	f003 0302 	and.w	r3, r3, #2
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d007      	beq.n	800a2b0 <dir_register+0xd8>
 800a2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a2:	330c      	adds	r3, #12
 800a2a4:	4a47      	ldr	r2, [pc, #284]	; (800a3c4 <dir_register+0x1ec>)
 800a2a6:	fba2 2303 	umull	r2, r3, r2, r3
 800a2aa:	089b      	lsrs	r3, r3, #2
 800a2ac:	3301      	adds	r3, #1
 800a2ae:	e000      	b.n	800a2b2 <dir_register+0xda>
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800a2b4:	6a39      	ldr	r1, [r7, #32]
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f7ff fbb5 	bl	8009a26 <dir_alloc>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800a2c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d148      	bne.n	800a35c <dir_register+0x184>
 800a2ca:	6a3b      	ldr	r3, [r7, #32]
 800a2cc:	3b01      	subs	r3, #1
 800a2ce:	623b      	str	r3, [r7, #32]
 800a2d0:	6a3b      	ldr	r3, [r7, #32]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d042      	beq.n	800a35c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	695a      	ldr	r2, [r3, #20]
 800a2da:	6a3b      	ldr	r3, [r7, #32]
 800a2dc:	015b      	lsls	r3, r3, #5
 800a2de:	1ad3      	subs	r3, r2, r3
 800a2e0:	4619      	mov	r1, r3
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f7ff fa40 	bl	8009768 <dir_sdi>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800a2ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d132      	bne.n	800a35c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	3324      	adds	r3, #36	; 0x24
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f7ff fde4 	bl	8009ec8 <sum_sfn>
 800a300:	4603      	mov	r3, r0
 800a302:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	69db      	ldr	r3, [r3, #28]
 800a308:	4619      	mov	r1, r3
 800a30a:	69f8      	ldr	r0, [r7, #28]
 800a30c:	f7fe fe4a 	bl	8008fa4 <move_window>
 800a310:	4603      	mov	r3, r0
 800a312:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800a316:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d11d      	bne.n	800a35a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800a31e:	69fb      	ldr	r3, [r7, #28]
 800a320:	6918      	ldr	r0, [r3, #16]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6a19      	ldr	r1, [r3, #32]
 800a326:	6a3b      	ldr	r3, [r7, #32]
 800a328:	b2da      	uxtb	r2, r3
 800a32a:	7efb      	ldrb	r3, [r7, #27]
 800a32c:	f7ff fcd6 	bl	8009cdc <put_lfn>
				fs->wflag = 1;
 800a330:	69fb      	ldr	r3, [r7, #28]
 800a332:	2201      	movs	r2, #1
 800a334:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800a336:	2100      	movs	r1, #0
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f7ff fa9e 	bl	800987a <dir_next>
 800a33e:	4603      	mov	r3, r0
 800a340:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800a344:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d107      	bne.n	800a35c <dir_register+0x184>
 800a34c:	6a3b      	ldr	r3, [r7, #32]
 800a34e:	3b01      	subs	r3, #1
 800a350:	623b      	str	r3, [r7, #32]
 800a352:	6a3b      	ldr	r3, [r7, #32]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d1d5      	bne.n	800a304 <dir_register+0x12c>
 800a358:	e000      	b.n	800a35c <dir_register+0x184>
				if (res != FR_OK) break;
 800a35a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a35c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a360:	2b00      	cmp	r3, #0
 800a362:	d128      	bne.n	800a3b6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	69db      	ldr	r3, [r3, #28]
 800a368:	4619      	mov	r1, r3
 800a36a:	69f8      	ldr	r0, [r7, #28]
 800a36c:	f7fe fe1a 	bl	8008fa4 <move_window>
 800a370:	4603      	mov	r3, r0
 800a372:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800a376:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d11b      	bne.n	800a3b6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6a1b      	ldr	r3, [r3, #32]
 800a382:	2220      	movs	r2, #32
 800a384:	2100      	movs	r1, #0
 800a386:	4618      	mov	r0, r3
 800a388:	f7fe fbff 	bl	8008b8a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6a18      	ldr	r0, [r3, #32]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	3324      	adds	r3, #36	; 0x24
 800a394:	220b      	movs	r2, #11
 800a396:	4619      	mov	r1, r3
 800a398:	f7fe fbd6 	bl	8008b48 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6a1b      	ldr	r3, [r3, #32]
 800a3a6:	330c      	adds	r3, #12
 800a3a8:	f002 0218 	and.w	r2, r2, #24
 800a3ac:	b2d2      	uxtb	r2, r2
 800a3ae:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800a3b0:	69fb      	ldr	r3, [r7, #28]
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a3b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3730      	adds	r7, #48	; 0x30
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
 800a3c2:	bf00      	nop
 800a3c4:	4ec4ec4f 	.word	0x4ec4ec4f

0800a3c8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b088      	sub	sp, #32
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	69db      	ldr	r3, [r3, #28]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	f000 80c9 	beq.w	800a57a <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3f0:	d032      	beq.n	800a458 <get_fileinfo+0x90>
			i = j = 0;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	61bb      	str	r3, [r7, #24]
 800a3f6:	69bb      	ldr	r3, [r7, #24]
 800a3f8:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800a3fa:	e01b      	b.n	800a434 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800a3fc:	89fb      	ldrh	r3, [r7, #14]
 800a3fe:	2100      	movs	r1, #0
 800a400:	4618      	mov	r0, r3
 800a402:	f7fd fcd7 	bl	8007db4 <ff_convert>
 800a406:	4603      	mov	r3, r0
 800a408:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800a40a:	89fb      	ldrh	r3, [r7, #14]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d102      	bne.n	800a416 <get_fileinfo+0x4e>
 800a410:	2300      	movs	r3, #0
 800a412:	61fb      	str	r3, [r7, #28]
 800a414:	e01a      	b.n	800a44c <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800a416:	69fb      	ldr	r3, [r7, #28]
 800a418:	2bfe      	cmp	r3, #254	; 0xfe
 800a41a:	d902      	bls.n	800a422 <get_fileinfo+0x5a>
 800a41c:	2300      	movs	r3, #0
 800a41e:	61fb      	str	r3, [r7, #28]
 800a420:	e014      	b.n	800a44c <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800a422:	69fb      	ldr	r3, [r7, #28]
 800a424:	1c5a      	adds	r2, r3, #1
 800a426:	61fa      	str	r2, [r7, #28]
 800a428:	89fa      	ldrh	r2, [r7, #14]
 800a42a:	b2d1      	uxtb	r1, r2
 800a42c:	683a      	ldr	r2, [r7, #0]
 800a42e:	4413      	add	r3, r2
 800a430:	460a      	mov	r2, r1
 800a432:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	691a      	ldr	r2, [r3, #16]
 800a438:	69bb      	ldr	r3, [r7, #24]
 800a43a:	1c59      	adds	r1, r3, #1
 800a43c:	61b9      	str	r1, [r7, #24]
 800a43e:	005b      	lsls	r3, r3, #1
 800a440:	4413      	add	r3, r2
 800a442:	881b      	ldrh	r3, [r3, #0]
 800a444:	81fb      	strh	r3, [r7, #14]
 800a446:	89fb      	ldrh	r3, [r7, #14]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d1d7      	bne.n	800a3fc <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800a44c:	683a      	ldr	r2, [r7, #0]
 800a44e:	69fb      	ldr	r3, [r7, #28]
 800a450:	4413      	add	r3, r2
 800a452:	3316      	adds	r3, #22
 800a454:	2200      	movs	r2, #0
 800a456:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800a458:	2300      	movs	r3, #0
 800a45a:	61bb      	str	r3, [r7, #24]
 800a45c:	69bb      	ldr	r3, [r7, #24]
 800a45e:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800a460:	683a      	ldr	r2, [r7, #0]
 800a462:	69fb      	ldr	r3, [r7, #28]
 800a464:	4413      	add	r3, r2
 800a466:	3316      	adds	r3, #22
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800a46c:	e04c      	b.n	800a508 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6a1a      	ldr	r2, [r3, #32]
 800a472:	69fb      	ldr	r3, [r7, #28]
 800a474:	1c59      	adds	r1, r3, #1
 800a476:	61f9      	str	r1, [r7, #28]
 800a478:	4413      	add	r3, r2
 800a47a:	781b      	ldrb	r3, [r3, #0]
 800a47c:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800a47e:	7dfb      	ldrb	r3, [r7, #23]
 800a480:	2b20      	cmp	r3, #32
 800a482:	d100      	bne.n	800a486 <get_fileinfo+0xbe>
 800a484:	e040      	b.n	800a508 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800a486:	7dfb      	ldrb	r3, [r7, #23]
 800a488:	2b05      	cmp	r3, #5
 800a48a:	d101      	bne.n	800a490 <get_fileinfo+0xc8>
 800a48c:	23e5      	movs	r3, #229	; 0xe5
 800a48e:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800a490:	69fb      	ldr	r3, [r7, #28]
 800a492:	2b09      	cmp	r3, #9
 800a494:	d10f      	bne.n	800a4b6 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800a496:	89bb      	ldrh	r3, [r7, #12]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d105      	bne.n	800a4a8 <get_fileinfo+0xe0>
 800a49c:	683a      	ldr	r2, [r7, #0]
 800a49e:	69bb      	ldr	r3, [r7, #24]
 800a4a0:	4413      	add	r3, r2
 800a4a2:	3316      	adds	r3, #22
 800a4a4:	222e      	movs	r2, #46	; 0x2e
 800a4a6:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800a4a8:	69bb      	ldr	r3, [r7, #24]
 800a4aa:	1c5a      	adds	r2, r3, #1
 800a4ac:	61ba      	str	r2, [r7, #24]
 800a4ae:	683a      	ldr	r2, [r7, #0]
 800a4b0:	4413      	add	r3, r2
 800a4b2:	222e      	movs	r2, #46	; 0x2e
 800a4b4:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800a4b6:	683a      	ldr	r2, [r7, #0]
 800a4b8:	69bb      	ldr	r3, [r7, #24]
 800a4ba:	4413      	add	r3, r2
 800a4bc:	3309      	adds	r3, #9
 800a4be:	7dfa      	ldrb	r2, [r7, #23]
 800a4c0:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800a4c2:	89bb      	ldrh	r3, [r7, #12]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d11c      	bne.n	800a502 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800a4c8:	7dfb      	ldrb	r3, [r7, #23]
 800a4ca:	2b40      	cmp	r3, #64	; 0x40
 800a4cc:	d913      	bls.n	800a4f6 <get_fileinfo+0x12e>
 800a4ce:	7dfb      	ldrb	r3, [r7, #23]
 800a4d0:	2b5a      	cmp	r3, #90	; 0x5a
 800a4d2:	d810      	bhi.n	800a4f6 <get_fileinfo+0x12e>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6a1b      	ldr	r3, [r3, #32]
 800a4d8:	330c      	adds	r3, #12
 800a4da:	781b      	ldrb	r3, [r3, #0]
 800a4dc:	461a      	mov	r2, r3
 800a4de:	69fb      	ldr	r3, [r7, #28]
 800a4e0:	2b08      	cmp	r3, #8
 800a4e2:	d901      	bls.n	800a4e8 <get_fileinfo+0x120>
 800a4e4:	2310      	movs	r3, #16
 800a4e6:	e000      	b.n	800a4ea <get_fileinfo+0x122>
 800a4e8:	2308      	movs	r3, #8
 800a4ea:	4013      	ands	r3, r2
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d002      	beq.n	800a4f6 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800a4f0:	7dfb      	ldrb	r3, [r7, #23]
 800a4f2:	3320      	adds	r3, #32
 800a4f4:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800a4f6:	683a      	ldr	r2, [r7, #0]
 800a4f8:	69bb      	ldr	r3, [r7, #24]
 800a4fa:	4413      	add	r3, r2
 800a4fc:	3316      	adds	r3, #22
 800a4fe:	7dfa      	ldrb	r2, [r7, #23]
 800a500:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800a502:	69bb      	ldr	r3, [r7, #24]
 800a504:	3301      	adds	r3, #1
 800a506:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800a508:	69fb      	ldr	r3, [r7, #28]
 800a50a:	2b0a      	cmp	r3, #10
 800a50c:	d9af      	bls.n	800a46e <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800a50e:	89bb      	ldrh	r3, [r7, #12]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d10d      	bne.n	800a530 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800a514:	683a      	ldr	r2, [r7, #0]
 800a516:	69bb      	ldr	r3, [r7, #24]
 800a518:	4413      	add	r3, r2
 800a51a:	3316      	adds	r3, #22
 800a51c:	2200      	movs	r2, #0
 800a51e:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6a1b      	ldr	r3, [r3, #32]
 800a524:	330c      	adds	r3, #12
 800a526:	781b      	ldrb	r3, [r3, #0]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d101      	bne.n	800a530 <get_fileinfo+0x168>
 800a52c:	2300      	movs	r3, #0
 800a52e:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800a530:	683a      	ldr	r2, [r7, #0]
 800a532:	69bb      	ldr	r3, [r7, #24]
 800a534:	4413      	add	r3, r2
 800a536:	3309      	adds	r3, #9
 800a538:	2200      	movs	r2, #0
 800a53a:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6a1b      	ldr	r3, [r3, #32]
 800a540:	7ada      	ldrb	r2, [r3, #11]
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6a1b      	ldr	r3, [r3, #32]
 800a54a:	331c      	adds	r3, #28
 800a54c:	4618      	mov	r0, r3
 800a54e:	f7fe fa91 	bl	8008a74 <ld_dword>
 800a552:	4602      	mov	r2, r0
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6a1b      	ldr	r3, [r3, #32]
 800a55c:	3316      	adds	r3, #22
 800a55e:	4618      	mov	r0, r3
 800a560:	f7fe fa88 	bl	8008a74 <ld_dword>
 800a564:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	b29a      	uxth	r2, r3
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	80da      	strh	r2, [r3, #6]
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	0c1b      	lsrs	r3, r3, #16
 800a572:	b29a      	uxth	r2, r3
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	809a      	strh	r2, [r3, #4]
 800a578:	e000      	b.n	800a57c <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800a57a:	bf00      	nop
}
 800a57c:	3720      	adds	r7, #32
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}
	...

0800a584 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b08a      	sub	sp, #40	; 0x28
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	613b      	str	r3, [r7, #16]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	691b      	ldr	r3, [r3, #16]
 800a59a:	60fb      	str	r3, [r7, #12]
 800a59c:	2300      	movs	r3, #0
 800a59e:	617b      	str	r3, [r7, #20]
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800a5a4:	69bb      	ldr	r3, [r7, #24]
 800a5a6:	1c5a      	adds	r2, r3, #1
 800a5a8:	61ba      	str	r2, [r7, #24]
 800a5aa:	693a      	ldr	r2, [r7, #16]
 800a5ac:	4413      	add	r3, r2
 800a5ae:	781b      	ldrb	r3, [r3, #0]
 800a5b0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800a5b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a5b4:	2b1f      	cmp	r3, #31
 800a5b6:	d940      	bls.n	800a63a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800a5b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a5ba:	2b2f      	cmp	r3, #47	; 0x2f
 800a5bc:	d006      	beq.n	800a5cc <create_name+0x48>
 800a5be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a5c0:	2b5c      	cmp	r3, #92	; 0x5c
 800a5c2:	d110      	bne.n	800a5e6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a5c4:	e002      	b.n	800a5cc <create_name+0x48>
 800a5c6:	69bb      	ldr	r3, [r7, #24]
 800a5c8:	3301      	adds	r3, #1
 800a5ca:	61bb      	str	r3, [r7, #24]
 800a5cc:	693a      	ldr	r2, [r7, #16]
 800a5ce:	69bb      	ldr	r3, [r7, #24]
 800a5d0:	4413      	add	r3, r2
 800a5d2:	781b      	ldrb	r3, [r3, #0]
 800a5d4:	2b2f      	cmp	r3, #47	; 0x2f
 800a5d6:	d0f6      	beq.n	800a5c6 <create_name+0x42>
 800a5d8:	693a      	ldr	r2, [r7, #16]
 800a5da:	69bb      	ldr	r3, [r7, #24]
 800a5dc:	4413      	add	r3, r2
 800a5de:	781b      	ldrb	r3, [r3, #0]
 800a5e0:	2b5c      	cmp	r3, #92	; 0x5c
 800a5e2:	d0f0      	beq.n	800a5c6 <create_name+0x42>
			break;
 800a5e4:	e02a      	b.n	800a63c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	2bfe      	cmp	r3, #254	; 0xfe
 800a5ea:	d901      	bls.n	800a5f0 <create_name+0x6c>
 800a5ec:	2306      	movs	r3, #6
 800a5ee:	e17d      	b.n	800a8ec <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800a5f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a5f2:	b2db      	uxtb	r3, r3
 800a5f4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800a5f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a5f8:	2101      	movs	r1, #1
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f7fd fbda 	bl	8007db4 <ff_convert>
 800a600:	4603      	mov	r3, r0
 800a602:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800a604:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a606:	2b00      	cmp	r3, #0
 800a608:	d101      	bne.n	800a60e <create_name+0x8a>
 800a60a:	2306      	movs	r3, #6
 800a60c:	e16e      	b.n	800a8ec <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800a60e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a610:	2b7f      	cmp	r3, #127	; 0x7f
 800a612:	d809      	bhi.n	800a628 <create_name+0xa4>
 800a614:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a616:	4619      	mov	r1, r3
 800a618:	488d      	ldr	r0, [pc, #564]	; (800a850 <create_name+0x2cc>)
 800a61a:	f7fe faf8 	bl	8008c0e <chk_chr>
 800a61e:	4603      	mov	r3, r0
 800a620:	2b00      	cmp	r3, #0
 800a622:	d001      	beq.n	800a628 <create_name+0xa4>
 800a624:	2306      	movs	r3, #6
 800a626:	e161      	b.n	800a8ec <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	1c5a      	adds	r2, r3, #1
 800a62c:	617a      	str	r2, [r7, #20]
 800a62e:	005b      	lsls	r3, r3, #1
 800a630:	68fa      	ldr	r2, [r7, #12]
 800a632:	4413      	add	r3, r2
 800a634:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a636:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800a638:	e7b4      	b.n	800a5a4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800a63a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800a63c:	693a      	ldr	r2, [r7, #16]
 800a63e:	69bb      	ldr	r3, [r7, #24]
 800a640:	441a      	add	r2, r3
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a646:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a648:	2b1f      	cmp	r3, #31
 800a64a:	d801      	bhi.n	800a650 <create_name+0xcc>
 800a64c:	2304      	movs	r3, #4
 800a64e:	e000      	b.n	800a652 <create_name+0xce>
 800a650:	2300      	movs	r3, #0
 800a652:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a656:	e011      	b.n	800a67c <create_name+0xf8>
		w = lfn[di - 1];
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a65e:	3b01      	subs	r3, #1
 800a660:	005b      	lsls	r3, r3, #1
 800a662:	68fa      	ldr	r2, [r7, #12]
 800a664:	4413      	add	r3, r2
 800a666:	881b      	ldrh	r3, [r3, #0]
 800a668:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800a66a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a66c:	2b20      	cmp	r3, #32
 800a66e:	d002      	beq.n	800a676 <create_name+0xf2>
 800a670:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a672:	2b2e      	cmp	r3, #46	; 0x2e
 800a674:	d106      	bne.n	800a684 <create_name+0x100>
		di--;
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	3b01      	subs	r3, #1
 800a67a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a67c:	697b      	ldr	r3, [r7, #20]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d1ea      	bne.n	800a658 <create_name+0xd4>
 800a682:	e000      	b.n	800a686 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800a684:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	005b      	lsls	r3, r3, #1
 800a68a:	68fa      	ldr	r2, [r7, #12]
 800a68c:	4413      	add	r3, r2
 800a68e:	2200      	movs	r2, #0
 800a690:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d101      	bne.n	800a69c <create_name+0x118>
 800a698:	2306      	movs	r3, #6
 800a69a:	e127      	b.n	800a8ec <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	3324      	adds	r3, #36	; 0x24
 800a6a0:	220b      	movs	r2, #11
 800a6a2:	2120      	movs	r1, #32
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f7fe fa70 	bl	8008b8a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	61bb      	str	r3, [r7, #24]
 800a6ae:	e002      	b.n	800a6b6 <create_name+0x132>
 800a6b0:	69bb      	ldr	r3, [r7, #24]
 800a6b2:	3301      	adds	r3, #1
 800a6b4:	61bb      	str	r3, [r7, #24]
 800a6b6:	69bb      	ldr	r3, [r7, #24]
 800a6b8:	005b      	lsls	r3, r3, #1
 800a6ba:	68fa      	ldr	r2, [r7, #12]
 800a6bc:	4413      	add	r3, r2
 800a6be:	881b      	ldrh	r3, [r3, #0]
 800a6c0:	2b20      	cmp	r3, #32
 800a6c2:	d0f5      	beq.n	800a6b0 <create_name+0x12c>
 800a6c4:	69bb      	ldr	r3, [r7, #24]
 800a6c6:	005b      	lsls	r3, r3, #1
 800a6c8:	68fa      	ldr	r2, [r7, #12]
 800a6ca:	4413      	add	r3, r2
 800a6cc:	881b      	ldrh	r3, [r3, #0]
 800a6ce:	2b2e      	cmp	r3, #46	; 0x2e
 800a6d0:	d0ee      	beq.n	800a6b0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800a6d2:	69bb      	ldr	r3, [r7, #24]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d009      	beq.n	800a6ec <create_name+0x168>
 800a6d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6dc:	f043 0303 	orr.w	r3, r3, #3
 800a6e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800a6e4:	e002      	b.n	800a6ec <create_name+0x168>
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	3b01      	subs	r3, #1
 800a6ea:	617b      	str	r3, [r7, #20]
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d009      	beq.n	800a706 <create_name+0x182>
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a6f8:	3b01      	subs	r3, #1
 800a6fa:	005b      	lsls	r3, r3, #1
 800a6fc:	68fa      	ldr	r2, [r7, #12]
 800a6fe:	4413      	add	r3, r2
 800a700:	881b      	ldrh	r3, [r3, #0]
 800a702:	2b2e      	cmp	r3, #46	; 0x2e
 800a704:	d1ef      	bne.n	800a6e6 <create_name+0x162>

	i = b = 0; ni = 8;
 800a706:	2300      	movs	r3, #0
 800a708:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a70c:	2300      	movs	r3, #0
 800a70e:	623b      	str	r3, [r7, #32]
 800a710:	2308      	movs	r3, #8
 800a712:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800a714:	69bb      	ldr	r3, [r7, #24]
 800a716:	1c5a      	adds	r2, r3, #1
 800a718:	61ba      	str	r2, [r7, #24]
 800a71a:	005b      	lsls	r3, r3, #1
 800a71c:	68fa      	ldr	r2, [r7, #12]
 800a71e:	4413      	add	r3, r2
 800a720:	881b      	ldrh	r3, [r3, #0]
 800a722:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800a724:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a726:	2b00      	cmp	r3, #0
 800a728:	f000 8090 	beq.w	800a84c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800a72c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a72e:	2b20      	cmp	r3, #32
 800a730:	d006      	beq.n	800a740 <create_name+0x1bc>
 800a732:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a734:	2b2e      	cmp	r3, #46	; 0x2e
 800a736:	d10a      	bne.n	800a74e <create_name+0x1ca>
 800a738:	69ba      	ldr	r2, [r7, #24]
 800a73a:	697b      	ldr	r3, [r7, #20]
 800a73c:	429a      	cmp	r2, r3
 800a73e:	d006      	beq.n	800a74e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800a740:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a744:	f043 0303 	orr.w	r3, r3, #3
 800a748:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a74c:	e07d      	b.n	800a84a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800a74e:	6a3a      	ldr	r2, [r7, #32]
 800a750:	69fb      	ldr	r3, [r7, #28]
 800a752:	429a      	cmp	r2, r3
 800a754:	d203      	bcs.n	800a75e <create_name+0x1da>
 800a756:	69ba      	ldr	r2, [r7, #24]
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d123      	bne.n	800a7a6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800a75e:	69fb      	ldr	r3, [r7, #28]
 800a760:	2b0b      	cmp	r3, #11
 800a762:	d106      	bne.n	800a772 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800a764:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a768:	f043 0303 	orr.w	r3, r3, #3
 800a76c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a770:	e075      	b.n	800a85e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800a772:	69ba      	ldr	r2, [r7, #24]
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	429a      	cmp	r2, r3
 800a778:	d005      	beq.n	800a786 <create_name+0x202>
 800a77a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a77e:	f043 0303 	orr.w	r3, r3, #3
 800a782:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800a786:	69ba      	ldr	r2, [r7, #24]
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	429a      	cmp	r2, r3
 800a78c:	d866      	bhi.n	800a85c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	61bb      	str	r3, [r7, #24]
 800a792:	2308      	movs	r3, #8
 800a794:	623b      	str	r3, [r7, #32]
 800a796:	230b      	movs	r3, #11
 800a798:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800a79a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a79e:	009b      	lsls	r3, r3, #2
 800a7a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a7a4:	e051      	b.n	800a84a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800a7a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7a8:	2b7f      	cmp	r3, #127	; 0x7f
 800a7aa:	d914      	bls.n	800a7d6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800a7ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7ae:	2100      	movs	r1, #0
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f7fd faff 	bl	8007db4 <ff_convert>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800a7ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d004      	beq.n	800a7ca <create_name+0x246>
 800a7c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7c2:	3b80      	subs	r3, #128	; 0x80
 800a7c4:	4a23      	ldr	r2, [pc, #140]	; (800a854 <create_name+0x2d0>)
 800a7c6:	5cd3      	ldrb	r3, [r2, r3]
 800a7c8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800a7ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a7ce:	f043 0302 	orr.w	r3, r3, #2
 800a7d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800a7d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d007      	beq.n	800a7ec <create_name+0x268>
 800a7dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7de:	4619      	mov	r1, r3
 800a7e0:	481d      	ldr	r0, [pc, #116]	; (800a858 <create_name+0x2d4>)
 800a7e2:	f7fe fa14 	bl	8008c0e <chk_chr>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d008      	beq.n	800a7fe <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800a7ec:	235f      	movs	r3, #95	; 0x5f
 800a7ee:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a7f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a7f4:	f043 0303 	orr.w	r3, r3, #3
 800a7f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a7fc:	e01b      	b.n	800a836 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800a7fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a800:	2b40      	cmp	r3, #64	; 0x40
 800a802:	d909      	bls.n	800a818 <create_name+0x294>
 800a804:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a806:	2b5a      	cmp	r3, #90	; 0x5a
 800a808:	d806      	bhi.n	800a818 <create_name+0x294>
					b |= 2;
 800a80a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a80e:	f043 0302 	orr.w	r3, r3, #2
 800a812:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a816:	e00e      	b.n	800a836 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800a818:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a81a:	2b60      	cmp	r3, #96	; 0x60
 800a81c:	d90b      	bls.n	800a836 <create_name+0x2b2>
 800a81e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a820:	2b7a      	cmp	r3, #122	; 0x7a
 800a822:	d808      	bhi.n	800a836 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800a824:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a828:	f043 0301 	orr.w	r3, r3, #1
 800a82c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a830:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a832:	3b20      	subs	r3, #32
 800a834:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800a836:	6a3b      	ldr	r3, [r7, #32]
 800a838:	1c5a      	adds	r2, r3, #1
 800a83a:	623a      	str	r2, [r7, #32]
 800a83c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a83e:	b2d1      	uxtb	r1, r2
 800a840:	687a      	ldr	r2, [r7, #4]
 800a842:	4413      	add	r3, r2
 800a844:	460a      	mov	r2, r1
 800a846:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800a84a:	e763      	b.n	800a714 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800a84c:	bf00      	nop
 800a84e:	e006      	b.n	800a85e <create_name+0x2da>
 800a850:	0800beb8 	.word	0x0800beb8
 800a854:	0800c668 	.word	0x0800c668
 800a858:	0800bec4 	.word	0x0800bec4
			if (si > di) break;			/* No extension */
 800a85c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a864:	2be5      	cmp	r3, #229	; 0xe5
 800a866:	d103      	bne.n	800a870 <create_name+0x2ec>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2205      	movs	r2, #5
 800a86c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800a870:	69fb      	ldr	r3, [r7, #28]
 800a872:	2b08      	cmp	r3, #8
 800a874:	d104      	bne.n	800a880 <create_name+0x2fc>
 800a876:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a87a:	009b      	lsls	r3, r3, #2
 800a87c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800a880:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a884:	f003 030c 	and.w	r3, r3, #12
 800a888:	2b0c      	cmp	r3, #12
 800a88a:	d005      	beq.n	800a898 <create_name+0x314>
 800a88c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a890:	f003 0303 	and.w	r3, r3, #3
 800a894:	2b03      	cmp	r3, #3
 800a896:	d105      	bne.n	800a8a4 <create_name+0x320>
 800a898:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a89c:	f043 0302 	orr.w	r3, r3, #2
 800a8a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800a8a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8a8:	f003 0302 	and.w	r3, r3, #2
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d117      	bne.n	800a8e0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800a8b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a8b4:	f003 0303 	and.w	r3, r3, #3
 800a8b8:	2b01      	cmp	r3, #1
 800a8ba:	d105      	bne.n	800a8c8 <create_name+0x344>
 800a8bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8c0:	f043 0310 	orr.w	r3, r3, #16
 800a8c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800a8c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a8cc:	f003 030c 	and.w	r3, r3, #12
 800a8d0:	2b04      	cmp	r3, #4
 800a8d2:	d105      	bne.n	800a8e0 <create_name+0x35c>
 800a8d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8d8:	f043 0308 	orr.w	r3, r3, #8
 800a8dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a8e6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800a8ea:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3728      	adds	r7, #40	; 0x28
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}

0800a8f4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b086      	sub	sp, #24
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a908:	e002      	b.n	800a910 <follow_path+0x1c>
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	3301      	adds	r3, #1
 800a90e:	603b      	str	r3, [r7, #0]
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	781b      	ldrb	r3, [r3, #0]
 800a914:	2b2f      	cmp	r3, #47	; 0x2f
 800a916:	d0f8      	beq.n	800a90a <follow_path+0x16>
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	781b      	ldrb	r3, [r3, #0]
 800a91c:	2b5c      	cmp	r3, #92	; 0x5c
 800a91e:	d0f4      	beq.n	800a90a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	2200      	movs	r2, #0
 800a924:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	781b      	ldrb	r3, [r3, #0]
 800a92a:	2b1f      	cmp	r3, #31
 800a92c:	d80a      	bhi.n	800a944 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2280      	movs	r2, #128	; 0x80
 800a932:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a936:	2100      	movs	r1, #0
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f7fe ff15 	bl	8009768 <dir_sdi>
 800a93e:	4603      	mov	r3, r0
 800a940:	75fb      	strb	r3, [r7, #23]
 800a942:	e048      	b.n	800a9d6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a944:	463b      	mov	r3, r7
 800a946:	4619      	mov	r1, r3
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f7ff fe1b 	bl	800a584 <create_name>
 800a94e:	4603      	mov	r3, r0
 800a950:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a952:	7dfb      	ldrb	r3, [r7, #23]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d139      	bne.n	800a9cc <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f7ff fb7d 	bl	800a058 <dir_find>
 800a95e:	4603      	mov	r3, r0
 800a960:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a968:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a96a:	7dfb      	ldrb	r3, [r7, #23]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d00a      	beq.n	800a986 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a970:	7dfb      	ldrb	r3, [r7, #23]
 800a972:	2b04      	cmp	r3, #4
 800a974:	d12c      	bne.n	800a9d0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a976:	7afb      	ldrb	r3, [r7, #11]
 800a978:	f003 0304 	and.w	r3, r3, #4
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d127      	bne.n	800a9d0 <follow_path+0xdc>
 800a980:	2305      	movs	r3, #5
 800a982:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a984:	e024      	b.n	800a9d0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a986:	7afb      	ldrb	r3, [r7, #11]
 800a988:	f003 0304 	and.w	r3, r3, #4
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d121      	bne.n	800a9d4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	799b      	ldrb	r3, [r3, #6]
 800a994:	f003 0310 	and.w	r3, r3, #16
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d102      	bne.n	800a9a2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a99c:	2305      	movs	r3, #5
 800a99e:	75fb      	strb	r3, [r7, #23]
 800a9a0:	e019      	b.n	800a9d6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	695b      	ldr	r3, [r3, #20]
 800a9ac:	68fa      	ldr	r2, [r7, #12]
 800a9ae:	8992      	ldrh	r2, [r2, #12]
 800a9b0:	fbb3 f0f2 	udiv	r0, r3, r2
 800a9b4:	fb00 f202 	mul.w	r2, r0, r2
 800a9b8:	1a9b      	subs	r3, r3, r2
 800a9ba:	440b      	add	r3, r1
 800a9bc:	4619      	mov	r1, r3
 800a9be:	68f8      	ldr	r0, [r7, #12]
 800a9c0:	f7ff f878 	bl	8009ab4 <ld_clust>
 800a9c4:	4602      	mov	r2, r0
 800a9c6:	693b      	ldr	r3, [r7, #16]
 800a9c8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a9ca:	e7bb      	b.n	800a944 <follow_path+0x50>
			if (res != FR_OK) break;
 800a9cc:	bf00      	nop
 800a9ce:	e002      	b.n	800a9d6 <follow_path+0xe2>
				break;
 800a9d0:	bf00      	nop
 800a9d2:	e000      	b.n	800a9d6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a9d4:	bf00      	nop
			}
		}
	}

	return res;
 800a9d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3718      	adds	r7, #24
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}

0800a9e0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b087      	sub	sp, #28
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a9e8:	f04f 33ff 	mov.w	r3, #4294967295
 800a9ec:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d031      	beq.n	800aa5a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	617b      	str	r3, [r7, #20]
 800a9fc:	e002      	b.n	800aa04 <get_ldnumber+0x24>
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	3301      	adds	r3, #1
 800aa02:	617b      	str	r3, [r7, #20]
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	781b      	ldrb	r3, [r3, #0]
 800aa08:	2b1f      	cmp	r3, #31
 800aa0a:	d903      	bls.n	800aa14 <get_ldnumber+0x34>
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	2b3a      	cmp	r3, #58	; 0x3a
 800aa12:	d1f4      	bne.n	800a9fe <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	781b      	ldrb	r3, [r3, #0]
 800aa18:	2b3a      	cmp	r3, #58	; 0x3a
 800aa1a:	d11c      	bne.n	800aa56 <get_ldnumber+0x76>
			tp = *path;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	1c5a      	adds	r2, r3, #1
 800aa26:	60fa      	str	r2, [r7, #12]
 800aa28:	781b      	ldrb	r3, [r3, #0]
 800aa2a:	3b30      	subs	r3, #48	; 0x30
 800aa2c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	2b09      	cmp	r3, #9
 800aa32:	d80e      	bhi.n	800aa52 <get_ldnumber+0x72>
 800aa34:	68fa      	ldr	r2, [r7, #12]
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d10a      	bne.n	800aa52 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d107      	bne.n	800aa52 <get_ldnumber+0x72>
					vol = (int)i;
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	3301      	adds	r3, #1
 800aa4a:	617b      	str	r3, [r7, #20]
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	697a      	ldr	r2, [r7, #20]
 800aa50:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	e002      	b.n	800aa5c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800aa56:	2300      	movs	r3, #0
 800aa58:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800aa5a:	693b      	ldr	r3, [r7, #16]
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	371c      	adds	r7, #28
 800aa60:	46bd      	mov	sp, r7
 800aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa66:	4770      	bx	lr

0800aa68 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b082      	sub	sp, #8
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2200      	movs	r2, #0
 800aa76:	70da      	strb	r2, [r3, #3]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f04f 32ff 	mov.w	r2, #4294967295
 800aa7e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800aa80:	6839      	ldr	r1, [r7, #0]
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f7fe fa8e 	bl	8008fa4 <move_window>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d001      	beq.n	800aa92 <check_fs+0x2a>
 800aa8e:	2304      	movs	r3, #4
 800aa90:	e038      	b.n	800ab04 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	3338      	adds	r3, #56	; 0x38
 800aa96:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f7fd ffd2 	bl	8008a44 <ld_word>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	d001      	beq.n	800aab0 <check_fs+0x48>
 800aaac:	2303      	movs	r3, #3
 800aaae:	e029      	b.n	800ab04 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800aab6:	2be9      	cmp	r3, #233	; 0xe9
 800aab8:	d009      	beq.n	800aace <check_fs+0x66>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800aac0:	2beb      	cmp	r3, #235	; 0xeb
 800aac2:	d11e      	bne.n	800ab02 <check_fs+0x9a>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800aaca:	2b90      	cmp	r3, #144	; 0x90
 800aacc:	d119      	bne.n	800ab02 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	3338      	adds	r3, #56	; 0x38
 800aad2:	3336      	adds	r3, #54	; 0x36
 800aad4:	4618      	mov	r0, r3
 800aad6:	f7fd ffcd 	bl	8008a74 <ld_dword>
 800aada:	4603      	mov	r3, r0
 800aadc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800aae0:	4a0a      	ldr	r2, [pc, #40]	; (800ab0c <check_fs+0xa4>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d101      	bne.n	800aaea <check_fs+0x82>
 800aae6:	2300      	movs	r3, #0
 800aae8:	e00c      	b.n	800ab04 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	3338      	adds	r3, #56	; 0x38
 800aaee:	3352      	adds	r3, #82	; 0x52
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f7fd ffbf 	bl	8008a74 <ld_dword>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	4a05      	ldr	r2, [pc, #20]	; (800ab10 <check_fs+0xa8>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d101      	bne.n	800ab02 <check_fs+0x9a>
 800aafe:	2300      	movs	r3, #0
 800ab00:	e000      	b.n	800ab04 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ab02:	2302      	movs	r3, #2
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3708      	adds	r7, #8
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}
 800ab0c:	00544146 	.word	0x00544146
 800ab10:	33544146 	.word	0x33544146

0800ab14 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b096      	sub	sp, #88	; 0x58
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	60f8      	str	r0, [r7, #12]
 800ab1c:	60b9      	str	r1, [r7, #8]
 800ab1e:	4613      	mov	r3, r2
 800ab20:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	2200      	movs	r2, #0
 800ab26:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ab28:	68f8      	ldr	r0, [r7, #12]
 800ab2a:	f7ff ff59 	bl	800a9e0 <get_ldnumber>
 800ab2e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ab30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	da01      	bge.n	800ab3a <find_volume+0x26>
 800ab36:	230b      	movs	r3, #11
 800ab38:	e262      	b.n	800b000 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ab3a:	4a9f      	ldr	r2, [pc, #636]	; (800adb8 <find_volume+0x2a4>)
 800ab3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab42:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ab44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d101      	bne.n	800ab4e <find_volume+0x3a>
 800ab4a:	230c      	movs	r3, #12
 800ab4c:	e258      	b.n	800b000 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab52:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ab54:	79fb      	ldrb	r3, [r7, #7]
 800ab56:	f023 0301 	bic.w	r3, r3, #1
 800ab5a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ab5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab5e:	781b      	ldrb	r3, [r3, #0]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d01a      	beq.n	800ab9a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ab64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab66:	785b      	ldrb	r3, [r3, #1]
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f7fd f9e9 	bl	8007f40 <disk_status>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ab74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ab78:	f003 0301 	and.w	r3, r3, #1
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d10c      	bne.n	800ab9a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ab80:	79fb      	ldrb	r3, [r7, #7]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d007      	beq.n	800ab96 <find_volume+0x82>
 800ab86:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ab8a:	f003 0304 	and.w	r3, r3, #4
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d001      	beq.n	800ab96 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ab92:	230a      	movs	r3, #10
 800ab94:	e234      	b.n	800b000 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800ab96:	2300      	movs	r3, #0
 800ab98:	e232      	b.n	800b000 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ab9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800aba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aba2:	b2da      	uxtb	r2, r3
 800aba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aba6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800aba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abaa:	785b      	ldrb	r3, [r3, #1]
 800abac:	4618      	mov	r0, r3
 800abae:	f7fd f9e1 	bl	8007f74 <disk_initialize>
 800abb2:	4603      	mov	r3, r0
 800abb4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800abb8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800abbc:	f003 0301 	and.w	r3, r3, #1
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d001      	beq.n	800abc8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800abc4:	2303      	movs	r3, #3
 800abc6:	e21b      	b.n	800b000 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800abc8:	79fb      	ldrb	r3, [r7, #7]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d007      	beq.n	800abde <find_volume+0xca>
 800abce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800abd2:	f003 0304 	and.w	r3, r3, #4
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d001      	beq.n	800abde <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800abda:	230a      	movs	r3, #10
 800abdc:	e210      	b.n	800b000 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800abde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abe0:	7858      	ldrb	r0, [r3, #1]
 800abe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abe4:	330c      	adds	r3, #12
 800abe6:	461a      	mov	r2, r3
 800abe8:	2102      	movs	r1, #2
 800abea:	f7fd fa29 	bl	8008040 <disk_ioctl>
 800abee:	4603      	mov	r3, r0
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d001      	beq.n	800abf8 <find_volume+0xe4>
 800abf4:	2301      	movs	r3, #1
 800abf6:	e203      	b.n	800b000 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800abf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abfa:	899b      	ldrh	r3, [r3, #12]
 800abfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac00:	d80d      	bhi.n	800ac1e <find_volume+0x10a>
 800ac02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac04:	899b      	ldrh	r3, [r3, #12]
 800ac06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac0a:	d308      	bcc.n	800ac1e <find_volume+0x10a>
 800ac0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac0e:	899b      	ldrh	r3, [r3, #12]
 800ac10:	461a      	mov	r2, r3
 800ac12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac14:	899b      	ldrh	r3, [r3, #12]
 800ac16:	3b01      	subs	r3, #1
 800ac18:	4013      	ands	r3, r2
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d001      	beq.n	800ac22 <find_volume+0x10e>
 800ac1e:	2301      	movs	r3, #1
 800ac20:	e1ee      	b.n	800b000 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ac22:	2300      	movs	r3, #0
 800ac24:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ac26:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ac28:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ac2a:	f7ff ff1d 	bl	800aa68 <check_fs>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ac34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ac38:	2b02      	cmp	r3, #2
 800ac3a:	d149      	bne.n	800acd0 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	643b      	str	r3, [r7, #64]	; 0x40
 800ac40:	e01e      	b.n	800ac80 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ac42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac44:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ac48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac4a:	011b      	lsls	r3, r3, #4
 800ac4c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ac50:	4413      	add	r3, r2
 800ac52:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ac54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac56:	3304      	adds	r3, #4
 800ac58:	781b      	ldrb	r3, [r3, #0]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d006      	beq.n	800ac6c <find_volume+0x158>
 800ac5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac60:	3308      	adds	r3, #8
 800ac62:	4618      	mov	r0, r3
 800ac64:	f7fd ff06 	bl	8008a74 <ld_dword>
 800ac68:	4602      	mov	r2, r0
 800ac6a:	e000      	b.n	800ac6e <find_volume+0x15a>
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac70:	009b      	lsls	r3, r3, #2
 800ac72:	3358      	adds	r3, #88	; 0x58
 800ac74:	443b      	add	r3, r7
 800ac76:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ac7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac7c:	3301      	adds	r3, #1
 800ac7e:	643b      	str	r3, [r7, #64]	; 0x40
 800ac80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac82:	2b03      	cmp	r3, #3
 800ac84:	d9dd      	bls.n	800ac42 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ac86:	2300      	movs	r3, #0
 800ac88:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ac8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d002      	beq.n	800ac96 <find_volume+0x182>
 800ac90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac92:	3b01      	subs	r3, #1
 800ac94:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ac96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac98:	009b      	lsls	r3, r3, #2
 800ac9a:	3358      	adds	r3, #88	; 0x58
 800ac9c:	443b      	add	r3, r7
 800ac9e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800aca2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800aca4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d005      	beq.n	800acb6 <find_volume+0x1a2>
 800acaa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800acac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800acae:	f7ff fedb 	bl	800aa68 <check_fs>
 800acb2:	4603      	mov	r3, r0
 800acb4:	e000      	b.n	800acb8 <find_volume+0x1a4>
 800acb6:	2303      	movs	r3, #3
 800acb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800acbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800acc0:	2b01      	cmp	r3, #1
 800acc2:	d905      	bls.n	800acd0 <find_volume+0x1bc>
 800acc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acc6:	3301      	adds	r3, #1
 800acc8:	643b      	str	r3, [r7, #64]	; 0x40
 800acca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800accc:	2b03      	cmp	r3, #3
 800acce:	d9e2      	bls.n	800ac96 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800acd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800acd4:	2b04      	cmp	r3, #4
 800acd6:	d101      	bne.n	800acdc <find_volume+0x1c8>
 800acd8:	2301      	movs	r3, #1
 800acda:	e191      	b.n	800b000 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800acdc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ace0:	2b01      	cmp	r3, #1
 800ace2:	d901      	bls.n	800ace8 <find_volume+0x1d4>
 800ace4:	230d      	movs	r3, #13
 800ace6:	e18b      	b.n	800b000 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ace8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acea:	3338      	adds	r3, #56	; 0x38
 800acec:	330b      	adds	r3, #11
 800acee:	4618      	mov	r0, r3
 800acf0:	f7fd fea8 	bl	8008a44 <ld_word>
 800acf4:	4603      	mov	r3, r0
 800acf6:	461a      	mov	r2, r3
 800acf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acfa:	899b      	ldrh	r3, [r3, #12]
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d001      	beq.n	800ad04 <find_volume+0x1f0>
 800ad00:	230d      	movs	r3, #13
 800ad02:	e17d      	b.n	800b000 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ad04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad06:	3338      	adds	r3, #56	; 0x38
 800ad08:	3316      	adds	r3, #22
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f7fd fe9a 	bl	8008a44 <ld_word>
 800ad10:	4603      	mov	r3, r0
 800ad12:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ad14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d106      	bne.n	800ad28 <find_volume+0x214>
 800ad1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad1c:	3338      	adds	r3, #56	; 0x38
 800ad1e:	3324      	adds	r3, #36	; 0x24
 800ad20:	4618      	mov	r0, r3
 800ad22:	f7fd fea7 	bl	8008a74 <ld_dword>
 800ad26:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800ad28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ad2c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ad2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad30:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800ad34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad36:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ad38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad3a:	789b      	ldrb	r3, [r3, #2]
 800ad3c:	2b01      	cmp	r3, #1
 800ad3e:	d005      	beq.n	800ad4c <find_volume+0x238>
 800ad40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad42:	789b      	ldrb	r3, [r3, #2]
 800ad44:	2b02      	cmp	r3, #2
 800ad46:	d001      	beq.n	800ad4c <find_volume+0x238>
 800ad48:	230d      	movs	r3, #13
 800ad4a:	e159      	b.n	800b000 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ad4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad4e:	789b      	ldrb	r3, [r3, #2]
 800ad50:	461a      	mov	r2, r3
 800ad52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad54:	fb02 f303 	mul.w	r3, r2, r3
 800ad58:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ad5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad60:	b29a      	uxth	r2, r3
 800ad62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad64:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ad66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad68:	895b      	ldrh	r3, [r3, #10]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d008      	beq.n	800ad80 <find_volume+0x26c>
 800ad6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad70:	895b      	ldrh	r3, [r3, #10]
 800ad72:	461a      	mov	r2, r3
 800ad74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad76:	895b      	ldrh	r3, [r3, #10]
 800ad78:	3b01      	subs	r3, #1
 800ad7a:	4013      	ands	r3, r2
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d001      	beq.n	800ad84 <find_volume+0x270>
 800ad80:	230d      	movs	r3, #13
 800ad82:	e13d      	b.n	800b000 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ad84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad86:	3338      	adds	r3, #56	; 0x38
 800ad88:	3311      	adds	r3, #17
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f7fd fe5a 	bl	8008a44 <ld_word>
 800ad90:	4603      	mov	r3, r0
 800ad92:	461a      	mov	r2, r3
 800ad94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad96:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ad98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad9a:	891b      	ldrh	r3, [r3, #8]
 800ad9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad9e:	8992      	ldrh	r2, [r2, #12]
 800ada0:	0952      	lsrs	r2, r2, #5
 800ada2:	b292      	uxth	r2, r2
 800ada4:	fbb3 f1f2 	udiv	r1, r3, r2
 800ada8:	fb01 f202 	mul.w	r2, r1, r2
 800adac:	1a9b      	subs	r3, r3, r2
 800adae:	b29b      	uxth	r3, r3
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d003      	beq.n	800adbc <find_volume+0x2a8>
 800adb4:	230d      	movs	r3, #13
 800adb6:	e123      	b.n	800b000 <find_volume+0x4ec>
 800adb8:	200015d8 	.word	0x200015d8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800adbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adbe:	3338      	adds	r3, #56	; 0x38
 800adc0:	3313      	adds	r3, #19
 800adc2:	4618      	mov	r0, r3
 800adc4:	f7fd fe3e 	bl	8008a44 <ld_word>
 800adc8:	4603      	mov	r3, r0
 800adca:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800adcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800adce:	2b00      	cmp	r3, #0
 800add0:	d106      	bne.n	800ade0 <find_volume+0x2cc>
 800add2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800add4:	3338      	adds	r3, #56	; 0x38
 800add6:	3320      	adds	r3, #32
 800add8:	4618      	mov	r0, r3
 800adda:	f7fd fe4b 	bl	8008a74 <ld_dword>
 800adde:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ade0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ade2:	3338      	adds	r3, #56	; 0x38
 800ade4:	330e      	adds	r3, #14
 800ade6:	4618      	mov	r0, r3
 800ade8:	f7fd fe2c 	bl	8008a44 <ld_word>
 800adec:	4603      	mov	r3, r0
 800adee:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800adf0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d101      	bne.n	800adfa <find_volume+0x2e6>
 800adf6:	230d      	movs	r3, #13
 800adf8:	e102      	b.n	800b000 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800adfa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800adfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adfe:	4413      	add	r3, r2
 800ae00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae02:	8911      	ldrh	r1, [r2, #8]
 800ae04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae06:	8992      	ldrh	r2, [r2, #12]
 800ae08:	0952      	lsrs	r2, r2, #5
 800ae0a:	b292      	uxth	r2, r2
 800ae0c:	fbb1 f2f2 	udiv	r2, r1, r2
 800ae10:	b292      	uxth	r2, r2
 800ae12:	4413      	add	r3, r2
 800ae14:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ae16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae1a:	429a      	cmp	r2, r3
 800ae1c:	d201      	bcs.n	800ae22 <find_volume+0x30e>
 800ae1e:	230d      	movs	r3, #13
 800ae20:	e0ee      	b.n	800b000 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ae22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae26:	1ad3      	subs	r3, r2, r3
 800ae28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae2a:	8952      	ldrh	r2, [r2, #10]
 800ae2c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae30:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ae32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d101      	bne.n	800ae3c <find_volume+0x328>
 800ae38:	230d      	movs	r3, #13
 800ae3a:	e0e1      	b.n	800b000 <find_volume+0x4ec>
		fmt = FS_FAT32;
 800ae3c:	2303      	movs	r3, #3
 800ae3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ae42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae44:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d802      	bhi.n	800ae52 <find_volume+0x33e>
 800ae4c:	2302      	movs	r3, #2
 800ae4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ae52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae54:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	d802      	bhi.n	800ae62 <find_volume+0x34e>
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ae62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae64:	1c9a      	adds	r2, r3, #2
 800ae66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae68:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800ae6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae6c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ae6e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ae70:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ae72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae74:	441a      	add	r2, r3
 800ae76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae78:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800ae7a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ae7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae7e:	441a      	add	r2, r3
 800ae80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae82:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800ae84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ae88:	2b03      	cmp	r3, #3
 800ae8a:	d11e      	bne.n	800aeca <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ae8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae8e:	3338      	adds	r3, #56	; 0x38
 800ae90:	332a      	adds	r3, #42	; 0x2a
 800ae92:	4618      	mov	r0, r3
 800ae94:	f7fd fdd6 	bl	8008a44 <ld_word>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d001      	beq.n	800aea2 <find_volume+0x38e>
 800ae9e:	230d      	movs	r3, #13
 800aea0:	e0ae      	b.n	800b000 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800aea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aea4:	891b      	ldrh	r3, [r3, #8]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d001      	beq.n	800aeae <find_volume+0x39a>
 800aeaa:	230d      	movs	r3, #13
 800aeac:	e0a8      	b.n	800b000 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800aeae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb0:	3338      	adds	r3, #56	; 0x38
 800aeb2:	332c      	adds	r3, #44	; 0x2c
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f7fd fddd 	bl	8008a74 <ld_dword>
 800aeba:	4602      	mov	r2, r0
 800aebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aebe:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800aec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aec2:	69db      	ldr	r3, [r3, #28]
 800aec4:	009b      	lsls	r3, r3, #2
 800aec6:	647b      	str	r3, [r7, #68]	; 0x44
 800aec8:	e01f      	b.n	800af0a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800aeca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aecc:	891b      	ldrh	r3, [r3, #8]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d101      	bne.n	800aed6 <find_volume+0x3c2>
 800aed2:	230d      	movs	r3, #13
 800aed4:	e094      	b.n	800b000 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800aed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aed8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aeda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aedc:	441a      	add	r2, r3
 800aede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aee0:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800aee2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aee6:	2b02      	cmp	r3, #2
 800aee8:	d103      	bne.n	800aef2 <find_volume+0x3de>
 800aeea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeec:	69db      	ldr	r3, [r3, #28]
 800aeee:	005b      	lsls	r3, r3, #1
 800aef0:	e00a      	b.n	800af08 <find_volume+0x3f4>
 800aef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aef4:	69da      	ldr	r2, [r3, #28]
 800aef6:	4613      	mov	r3, r2
 800aef8:	005b      	lsls	r3, r3, #1
 800aefa:	4413      	add	r3, r2
 800aefc:	085a      	lsrs	r2, r3, #1
 800aefe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af00:	69db      	ldr	r3, [r3, #28]
 800af02:	f003 0301 	and.w	r3, r3, #1
 800af06:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800af08:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800af0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af0c:	6a1a      	ldr	r2, [r3, #32]
 800af0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af10:	899b      	ldrh	r3, [r3, #12]
 800af12:	4619      	mov	r1, r3
 800af14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af16:	440b      	add	r3, r1
 800af18:	3b01      	subs	r3, #1
 800af1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800af1c:	8989      	ldrh	r1, [r1, #12]
 800af1e:	fbb3 f3f1 	udiv	r3, r3, r1
 800af22:	429a      	cmp	r2, r3
 800af24:	d201      	bcs.n	800af2a <find_volume+0x416>
 800af26:	230d      	movs	r3, #13
 800af28:	e06a      	b.n	800b000 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800af2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af2c:	f04f 32ff 	mov.w	r2, #4294967295
 800af30:	619a      	str	r2, [r3, #24]
 800af32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af34:	699a      	ldr	r2, [r3, #24]
 800af36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af38:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800af3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af3c:	2280      	movs	r2, #128	; 0x80
 800af3e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800af40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800af44:	2b03      	cmp	r3, #3
 800af46:	d149      	bne.n	800afdc <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800af48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af4a:	3338      	adds	r3, #56	; 0x38
 800af4c:	3330      	adds	r3, #48	; 0x30
 800af4e:	4618      	mov	r0, r3
 800af50:	f7fd fd78 	bl	8008a44 <ld_word>
 800af54:	4603      	mov	r3, r0
 800af56:	2b01      	cmp	r3, #1
 800af58:	d140      	bne.n	800afdc <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800af5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af5c:	3301      	adds	r3, #1
 800af5e:	4619      	mov	r1, r3
 800af60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800af62:	f7fe f81f 	bl	8008fa4 <move_window>
 800af66:	4603      	mov	r3, r0
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d137      	bne.n	800afdc <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800af6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af6e:	2200      	movs	r2, #0
 800af70:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800af72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af74:	3338      	adds	r3, #56	; 0x38
 800af76:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800af7a:	4618      	mov	r0, r3
 800af7c:	f7fd fd62 	bl	8008a44 <ld_word>
 800af80:	4603      	mov	r3, r0
 800af82:	461a      	mov	r2, r3
 800af84:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800af88:	429a      	cmp	r2, r3
 800af8a:	d127      	bne.n	800afdc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800af8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af8e:	3338      	adds	r3, #56	; 0x38
 800af90:	4618      	mov	r0, r3
 800af92:	f7fd fd6f 	bl	8008a74 <ld_dword>
 800af96:	4603      	mov	r3, r0
 800af98:	4a1b      	ldr	r2, [pc, #108]	; (800b008 <find_volume+0x4f4>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d11e      	bne.n	800afdc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800af9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa0:	3338      	adds	r3, #56	; 0x38
 800afa2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800afa6:	4618      	mov	r0, r3
 800afa8:	f7fd fd64 	bl	8008a74 <ld_dword>
 800afac:	4603      	mov	r3, r0
 800afae:	4a17      	ldr	r2, [pc, #92]	; (800b00c <find_volume+0x4f8>)
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d113      	bne.n	800afdc <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800afb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb6:	3338      	adds	r3, #56	; 0x38
 800afb8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800afbc:	4618      	mov	r0, r3
 800afbe:	f7fd fd59 	bl	8008a74 <ld_dword>
 800afc2:	4602      	mov	r2, r0
 800afc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afc6:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800afc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afca:	3338      	adds	r3, #56	; 0x38
 800afcc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800afd0:	4618      	mov	r0, r3
 800afd2:	f7fd fd4f 	bl	8008a74 <ld_dword>
 800afd6:	4602      	mov	r2, r0
 800afd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afda:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800afdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afde:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800afe2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800afe4:	4b0a      	ldr	r3, [pc, #40]	; (800b010 <find_volume+0x4fc>)
 800afe6:	881b      	ldrh	r3, [r3, #0]
 800afe8:	3301      	adds	r3, #1
 800afea:	b29a      	uxth	r2, r3
 800afec:	4b08      	ldr	r3, [pc, #32]	; (800b010 <find_volume+0x4fc>)
 800afee:	801a      	strh	r2, [r3, #0]
 800aff0:	4b07      	ldr	r3, [pc, #28]	; (800b010 <find_volume+0x4fc>)
 800aff2:	881a      	ldrh	r2, [r3, #0]
 800aff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800aff8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800affa:	f7fd ff6b 	bl	8008ed4 <clear_lock>
#endif
	return FR_OK;
 800affe:	2300      	movs	r3, #0
}
 800b000:	4618      	mov	r0, r3
 800b002:	3758      	adds	r7, #88	; 0x58
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}
 800b008:	41615252 	.word	0x41615252
 800b00c:	61417272 	.word	0x61417272
 800b010:	200015dc 	.word	0x200015dc

0800b014 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b084      	sub	sp, #16
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b01e:	2309      	movs	r3, #9
 800b020:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d01c      	beq.n	800b062 <validate+0x4e>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d018      	beq.n	800b062 <validate+0x4e>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	781b      	ldrb	r3, [r3, #0]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d013      	beq.n	800b062 <validate+0x4e>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	889a      	ldrh	r2, [r3, #4]
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	88db      	ldrh	r3, [r3, #6]
 800b044:	429a      	cmp	r2, r3
 800b046:	d10c      	bne.n	800b062 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	785b      	ldrb	r3, [r3, #1]
 800b04e:	4618      	mov	r0, r3
 800b050:	f7fc ff76 	bl	8007f40 <disk_status>
 800b054:	4603      	mov	r3, r0
 800b056:	f003 0301 	and.w	r3, r3, #1
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d101      	bne.n	800b062 <validate+0x4e>
			res = FR_OK;
 800b05e:	2300      	movs	r3, #0
 800b060:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b062:	7bfb      	ldrb	r3, [r7, #15]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d102      	bne.n	800b06e <validate+0x5a>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	e000      	b.n	800b070 <validate+0x5c>
 800b06e:	2300      	movs	r3, #0
 800b070:	683a      	ldr	r2, [r7, #0]
 800b072:	6013      	str	r3, [r2, #0]
	return res;
 800b074:	7bfb      	ldrb	r3, [r7, #15]
}
 800b076:	4618      	mov	r0, r3
 800b078:	3710      	adds	r7, #16
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}
	...

0800b080 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b088      	sub	sp, #32
 800b084:	af00      	add	r7, sp, #0
 800b086:	60f8      	str	r0, [r7, #12]
 800b088:	60b9      	str	r1, [r7, #8]
 800b08a:	4613      	mov	r3, r2
 800b08c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b092:	f107 0310 	add.w	r3, r7, #16
 800b096:	4618      	mov	r0, r3
 800b098:	f7ff fca2 	bl	800a9e0 <get_ldnumber>
 800b09c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b09e:	69fb      	ldr	r3, [r7, #28]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	da01      	bge.n	800b0a8 <f_mount+0x28>
 800b0a4:	230b      	movs	r3, #11
 800b0a6:	e02b      	b.n	800b100 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b0a8:	4a17      	ldr	r2, [pc, #92]	; (800b108 <f_mount+0x88>)
 800b0aa:	69fb      	ldr	r3, [r7, #28]
 800b0ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0b0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b0b2:	69bb      	ldr	r3, [r7, #24]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d005      	beq.n	800b0c4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b0b8:	69b8      	ldr	r0, [r7, #24]
 800b0ba:	f7fd ff0b 	bl	8008ed4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b0be:	69bb      	ldr	r3, [r7, #24]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d002      	beq.n	800b0d0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b0d0:	68fa      	ldr	r2, [r7, #12]
 800b0d2:	490d      	ldr	r1, [pc, #52]	; (800b108 <f_mount+0x88>)
 800b0d4:	69fb      	ldr	r3, [r7, #28]
 800b0d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d002      	beq.n	800b0e6 <f_mount+0x66>
 800b0e0:	79fb      	ldrb	r3, [r7, #7]
 800b0e2:	2b01      	cmp	r3, #1
 800b0e4:	d001      	beq.n	800b0ea <f_mount+0x6a>
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	e00a      	b.n	800b100 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b0ea:	f107 010c 	add.w	r1, r7, #12
 800b0ee:	f107 0308 	add.w	r3, r7, #8
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	f7ff fd0d 	bl	800ab14 <find_volume>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b0fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800b100:	4618      	mov	r0, r3
 800b102:	3720      	adds	r7, #32
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}
 800b108:	200015d8 	.word	0x200015d8

0800b10c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 800b112:	af00      	add	r7, sp, #0
 800b114:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b118:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b11c:	6018      	str	r0, [r3, #0]
 800b11e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b122:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800b126:	6019      	str	r1, [r3, #0]
 800b128:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b12c:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800b130:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b132:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b136:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d101      	bne.n	800b144 <f_open+0x38>
 800b140:	2309      	movs	r3, #9
 800b142:	e281      	b.n	800b648 <f_open+0x53c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b144:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b148:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800b14c:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800b150:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800b154:	7812      	ldrb	r2, [r2, #0]
 800b156:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800b15a:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 800b15c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b160:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800b164:	781a      	ldrb	r2, [r3, #0]
 800b166:	f507 7105 	add.w	r1, r7, #532	; 0x214
 800b16a:	f107 0308 	add.w	r3, r7, #8
 800b16e:	4618      	mov	r0, r3
 800b170:	f7ff fcd0 	bl	800ab14 <find_volume>
 800b174:	4603      	mov	r3, r0
 800b176:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 800b17a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800b17e:	2b00      	cmp	r3, #0
 800b180:	f040 8255 	bne.w	800b62e <f_open+0x522>
		dj.obj.fs = fs;
 800b184:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800b188:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 800b18c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800b190:	f107 0214 	add.w	r2, r7, #20
 800b194:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800b196:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b19a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800b19e:	681a      	ldr	r2, [r3, #0]
 800b1a0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800b1a4:	4611      	mov	r1, r2
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f7ff fba4 	bl	800a8f4 <follow_path>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b1b2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d11e      	bne.n	800b1f8 <f_open+0xec>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b1ba:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 800b1be:	b25b      	sxtb	r3, r3
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	da03      	bge.n	800b1cc <f_open+0xc0>
				res = FR_INVALID_NAME;
 800b1c4:	2306      	movs	r3, #6
 800b1c6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800b1ca:	e015      	b.n	800b1f8 <f_open+0xec>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b1cc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b1d0:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800b1d4:	781b      	ldrb	r3, [r3, #0]
 800b1d6:	f023 0301 	bic.w	r3, r3, #1
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	bf14      	ite	ne
 800b1de:	2301      	movne	r3, #1
 800b1e0:	2300      	moveq	r3, #0
 800b1e2:	b2db      	uxtb	r3, r3
 800b1e4:	461a      	mov	r2, r3
 800b1e6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800b1ea:	4611      	mov	r1, r2
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f7fd fd29 	bl	8008c44 <chk_lock>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b1f8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b1fc:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800b200:	781b      	ldrb	r3, [r3, #0]
 800b202:	f003 031c 	and.w	r3, r3, #28
 800b206:	2b00      	cmp	r3, #0
 800b208:	f000 80a7 	beq.w	800b35a <f_open+0x24e>
			if (res != FR_OK) {					/* No file, create new */
 800b20c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800b210:	2b00      	cmp	r3, #0
 800b212:	d01f      	beq.n	800b254 <f_open+0x148>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b214:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800b218:	2b04      	cmp	r3, #4
 800b21a:	d10e      	bne.n	800b23a <f_open+0x12e>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b21c:	f7fd fd6e 	bl	8008cfc <enq_lock>
 800b220:	4603      	mov	r3, r0
 800b222:	2b00      	cmp	r3, #0
 800b224:	d006      	beq.n	800b234 <f_open+0x128>
 800b226:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800b22a:	4618      	mov	r0, r3
 800b22c:	f7fe ffd4 	bl	800a1d8 <dir_register>
 800b230:	4603      	mov	r3, r0
 800b232:	e000      	b.n	800b236 <f_open+0x12a>
 800b234:	2312      	movs	r3, #18
 800b236:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b23a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b23e:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800b242:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800b246:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800b24a:	7812      	ldrb	r2, [r2, #0]
 800b24c:	f042 0208 	orr.w	r2, r2, #8
 800b250:	701a      	strb	r2, [r3, #0]
 800b252:	e015      	b.n	800b280 <f_open+0x174>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b254:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800b258:	f003 0311 	and.w	r3, r3, #17
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d003      	beq.n	800b268 <f_open+0x15c>
					res = FR_DENIED;
 800b260:	2307      	movs	r3, #7
 800b262:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800b266:	e00b      	b.n	800b280 <f_open+0x174>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b268:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b26c:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800b270:	781b      	ldrb	r3, [r3, #0]
 800b272:	f003 0304 	and.w	r3, r3, #4
 800b276:	2b00      	cmp	r3, #0
 800b278:	d002      	beq.n	800b280 <f_open+0x174>
 800b27a:	2308      	movs	r3, #8
 800b27c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b280:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800b284:	2b00      	cmp	r3, #0
 800b286:	f040 8088 	bne.w	800b39a <f_open+0x28e>
 800b28a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b28e:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800b292:	781b      	ldrb	r3, [r3, #0]
 800b294:	f003 0308 	and.w	r3, r3, #8
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d07e      	beq.n	800b39a <f_open+0x28e>
				dw = GET_FATTIME();
 800b29c:	f7fc ff00 	bl	80080a0 <get_fattime>
 800b2a0:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b2a4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800b2a8:	330e      	adds	r3, #14
 800b2aa:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f7fd fc1e 	bl	8008af0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b2b4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800b2b8:	3316      	adds	r3, #22
 800b2ba:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f7fd fc16 	bl	8008af0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b2c4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800b2c8:	330b      	adds	r3, #11
 800b2ca:	2220      	movs	r2, #32
 800b2cc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b2ce:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800b2d2:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800b2d6:	4611      	mov	r1, r2
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f7fe fbeb 	bl	8009ab4 <ld_clust>
 800b2de:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b2e2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800b2e6:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	f7fe fc00 	bl	8009af2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b2f2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800b2f6:	331c      	adds	r3, #28
 800b2f8:	2100      	movs	r1, #0
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f7fd fbf8 	bl	8008af0 <st_dword>
					fs->wflag = 1;
 800b300:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800b304:	2201      	movs	r2, #1
 800b306:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b308:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d044      	beq.n	800b39a <f_open+0x28e>
						dw = fs->winsect;
 800b310:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800b314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b316:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 800b31a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800b31e:	2200      	movs	r2, #0
 800b320:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 800b324:	4618      	mov	r0, r3
 800b326:	f7fe f8ea 	bl	80094fe <remove_chain>
 800b32a:	4603      	mov	r3, r0
 800b32c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 800b330:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800b334:	2b00      	cmp	r3, #0
 800b336:	d130      	bne.n	800b39a <f_open+0x28e>
							res = move_window(fs, dw);
 800b338:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800b33c:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800b340:	4618      	mov	r0, r3
 800b342:	f7fd fe2f 	bl	8008fa4 <move_window>
 800b346:	4603      	mov	r3, r0
 800b348:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b34c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800b350:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 800b354:	3a01      	subs	r2, #1
 800b356:	615a      	str	r2, [r3, #20]
 800b358:	e01f      	b.n	800b39a <f_open+0x28e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b35a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d11b      	bne.n	800b39a <f_open+0x28e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b362:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800b366:	f003 0310 	and.w	r3, r3, #16
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d003      	beq.n	800b376 <f_open+0x26a>
					res = FR_NO_FILE;
 800b36e:	2304      	movs	r3, #4
 800b370:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800b374:	e011      	b.n	800b39a <f_open+0x28e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b376:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b37a:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800b37e:	781b      	ldrb	r3, [r3, #0]
 800b380:	f003 0302 	and.w	r3, r3, #2
 800b384:	2b00      	cmp	r3, #0
 800b386:	d008      	beq.n	800b39a <f_open+0x28e>
 800b388:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800b38c:	f003 0301 	and.w	r3, r3, #1
 800b390:	2b00      	cmp	r3, #0
 800b392:	d002      	beq.n	800b39a <f_open+0x28e>
						res = FR_DENIED;
 800b394:	2307      	movs	r3, #7
 800b396:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 800b39a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d14a      	bne.n	800b438 <f_open+0x32c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b3a2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b3a6:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800b3aa:	781b      	ldrb	r3, [r3, #0]
 800b3ac:	f003 0308 	and.w	r3, r3, #8
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d00b      	beq.n	800b3cc <f_open+0x2c0>
				mode |= FA_MODIFIED;
 800b3b4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b3b8:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800b3bc:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800b3c0:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800b3c4:	7812      	ldrb	r2, [r2, #0]
 800b3c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b3ca:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b3cc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800b3d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b3d2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b3d6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b3de:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800b3e2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b3e6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b3ee:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b3f2:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800b3f6:	781b      	ldrb	r3, [r3, #0]
 800b3f8:	f023 0301 	bic.w	r3, r3, #1
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	bf14      	ite	ne
 800b400:	2301      	movne	r3, #1
 800b402:	2300      	moveq	r3, #0
 800b404:	b2db      	uxtb	r3, r3
 800b406:	461a      	mov	r2, r3
 800b408:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800b40c:	4611      	mov	r1, r2
 800b40e:	4618      	mov	r0, r3
 800b410:	f7fd fc96 	bl	8008d40 <inc_lock>
 800b414:	4602      	mov	r2, r0
 800b416:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b41a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b422:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b426:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	691b      	ldr	r3, [r3, #16]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d102      	bne.n	800b438 <f_open+0x32c>
 800b432:	2302      	movs	r3, #2
 800b434:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b438:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	f040 80f6 	bne.w	800b62e <f_open+0x522>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b442:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800b446:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800b44a:	4611      	mov	r1, r2
 800b44c:	4618      	mov	r0, r3
 800b44e:	f7fe fb31 	bl	8009ab4 <ld_clust>
 800b452:	4602      	mov	r2, r0
 800b454:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b458:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b460:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800b464:	331c      	adds	r3, #28
 800b466:	4618      	mov	r0, r3
 800b468:	f7fd fb04 	bl	8008a74 <ld_dword>
 800b46c:	4602      	mov	r2, r0
 800b46e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b472:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b47a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b47e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	2200      	movs	r2, #0
 800b486:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b488:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800b48c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b490:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b498:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800b49c:	88da      	ldrh	r2, [r3, #6]
 800b49e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b4a2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b4aa:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b4ae:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800b4b8:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800b4bc:	7812      	ldrb	r2, [r2, #0]
 800b4be:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b4c0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b4c4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b4ce:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b4d2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b4dc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b4e0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b4ea:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b4ee:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800b4f2:	781b      	ldrb	r3, [r3, #0]
 800b4f4:	f003 0320 	and.w	r3, r3, #32
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	f000 8098 	beq.w	800b62e <f_open+0x522>
 800b4fe:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b502:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	68db      	ldr	r3, [r3, #12]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	f000 808f 	beq.w	800b62e <f_open+0x522>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b510:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b514:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	68da      	ldr	r2, [r3, #12]
 800b51c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b520:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b528:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800b52c:	895b      	ldrh	r3, [r3, #10]
 800b52e:	461a      	mov	r2, r3
 800b530:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800b534:	899b      	ldrh	r3, [r3, #12]
 800b536:	fb02 f303 	mul.w	r3, r2, r3
 800b53a:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b53e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b542:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	689b      	ldr	r3, [r3, #8]
 800b54a:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b54e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b552:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	68db      	ldr	r3, [r3, #12]
 800b55a:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800b55e:	e021      	b.n	800b5a4 <f_open+0x498>
					clst = get_fat(&fp->obj, clst);
 800b560:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b564:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800b56e:	4618      	mov	r0, r3
 800b570:	f7fd fdd5 	bl	800911e <get_fat>
 800b574:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 800b578:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800b57c:	2b01      	cmp	r3, #1
 800b57e:	d802      	bhi.n	800b586 <f_open+0x47a>
 800b580:	2302      	movs	r3, #2
 800b582:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b586:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800b58a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b58e:	d102      	bne.n	800b596 <f_open+0x48a>
 800b590:	2301      	movs	r3, #1
 800b592:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b596:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800b59a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800b59e:	1ad3      	subs	r3, r2, r3
 800b5a0:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800b5a4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d105      	bne.n	800b5b8 <f_open+0x4ac>
 800b5ac:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800b5b0:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	d8d3      	bhi.n	800b560 <f_open+0x454>
				}
				fp->clust = clst;
 800b5b8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b5bc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 800b5c6:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b5c8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d12e      	bne.n	800b62e <f_open+0x522>
 800b5d0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800b5d4:	899b      	ldrh	r3, [r3, #12]
 800b5d6:	461a      	mov	r2, r3
 800b5d8:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800b5dc:	fbb3 f1f2 	udiv	r1, r3, r2
 800b5e0:	fb01 f202 	mul.w	r2, r1, r2
 800b5e4:	1a9b      	subs	r3, r3, r2
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d021      	beq.n	800b62e <f_open+0x522>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b5ea:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800b5ee:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f7fd fd74 	bl	80090e0 <clust2sect>
 800b5f8:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 800b5fc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800b600:	2b00      	cmp	r3, #0
 800b602:	d103      	bne.n	800b60c <f_open+0x500>
						res = FR_INT_ERR;
 800b604:	2302      	movs	r3, #2
 800b606:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800b60a:	e010      	b.n	800b62e <f_open+0x522>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b60c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800b610:	899b      	ldrh	r3, [r3, #12]
 800b612:	461a      	mov	r2, r3
 800b614:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800b618:	fbb3 f2f2 	udiv	r2, r3, r2
 800b61c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800b620:	441a      	add	r2, r3
 800b622:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b626:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	621a      	str	r2, [r3, #32]
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b62e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800b632:	2b00      	cmp	r3, #0
 800b634:	d006      	beq.n	800b644 <f_open+0x538>
 800b636:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b63a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	2200      	movs	r2, #0
 800b642:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b644:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 800b648:	4618      	mov	r0, r3
 800b64a:	f507 771a 	add.w	r7, r7, #616	; 0x268
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}

0800b652 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800b652:	b580      	push	{r7, lr}
 800b654:	b08e      	sub	sp, #56	; 0x38
 800b656:	af00      	add	r7, sp, #0
 800b658:	60f8      	str	r0, [r7, #12]
 800b65a:	60b9      	str	r1, [r7, #8]
 800b65c:	607a      	str	r2, [r7, #4]
 800b65e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	2200      	movs	r2, #0
 800b668:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	f107 0214 	add.w	r2, r7, #20
 800b670:	4611      	mov	r1, r2
 800b672:	4618      	mov	r0, r3
 800b674:	f7ff fcce 	bl	800b014 <validate>
 800b678:	4603      	mov	r3, r0
 800b67a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b67e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b682:	2b00      	cmp	r3, #0
 800b684:	d107      	bne.n	800b696 <f_read+0x44>
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	7d5b      	ldrb	r3, [r3, #21]
 800b68a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800b68e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b692:	2b00      	cmp	r3, #0
 800b694:	d002      	beq.n	800b69c <f_read+0x4a>
 800b696:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b69a:	e10f      	b.n	800b8bc <f_read+0x26a>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	7d1b      	ldrb	r3, [r3, #20]
 800b6a0:	f003 0301 	and.w	r3, r3, #1
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d101      	bne.n	800b6ac <f_read+0x5a>
 800b6a8:	2307      	movs	r3, #7
 800b6aa:	e107      	b.n	800b8bc <f_read+0x26a>
	remain = fp->obj.objsize - fp->fptr;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	68da      	ldr	r2, [r3, #12]
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	699b      	ldr	r3, [r3, #24]
 800b6b4:	1ad3      	subs	r3, r2, r3
 800b6b6:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800b6b8:	687a      	ldr	r2, [r7, #4]
 800b6ba:	6a3b      	ldr	r3, [r7, #32]
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	f240 80f8 	bls.w	800b8b2 <f_read+0x260>
 800b6c2:	6a3b      	ldr	r3, [r7, #32]
 800b6c4:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800b6c6:	e0f4      	b.n	800b8b2 <f_read+0x260>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	699b      	ldr	r3, [r3, #24]
 800b6cc:	697a      	ldr	r2, [r7, #20]
 800b6ce:	8992      	ldrh	r2, [r2, #12]
 800b6d0:	fbb3 f1f2 	udiv	r1, r3, r2
 800b6d4:	fb01 f202 	mul.w	r2, r1, r2
 800b6d8:	1a9b      	subs	r3, r3, r2
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	f040 80a0 	bne.w	800b820 <f_read+0x1ce>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	699b      	ldr	r3, [r3, #24]
 800b6e4:	697a      	ldr	r2, [r7, #20]
 800b6e6:	8992      	ldrh	r2, [r2, #12]
 800b6e8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b6ec:	697a      	ldr	r2, [r7, #20]
 800b6ee:	8952      	ldrh	r2, [r2, #10]
 800b6f0:	3a01      	subs	r2, #1
 800b6f2:	4013      	ands	r3, r2
 800b6f4:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800b6f6:	69fb      	ldr	r3, [r7, #28]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d12f      	bne.n	800b75c <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	699b      	ldr	r3, [r3, #24]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d103      	bne.n	800b70c <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	689b      	ldr	r3, [r3, #8]
 800b708:	633b      	str	r3, [r7, #48]	; 0x30
 800b70a:	e013      	b.n	800b734 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b710:	2b00      	cmp	r3, #0
 800b712:	d007      	beq.n	800b724 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	699b      	ldr	r3, [r3, #24]
 800b718:	4619      	mov	r1, r3
 800b71a:	68f8      	ldr	r0, [r7, #12]
 800b71c:	f7fd ffec 	bl	80096f8 <clmt_clust>
 800b720:	6338      	str	r0, [r7, #48]	; 0x30
 800b722:	e007      	b.n	800b734 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800b724:	68fa      	ldr	r2, [r7, #12]
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	69db      	ldr	r3, [r3, #28]
 800b72a:	4619      	mov	r1, r3
 800b72c:	4610      	mov	r0, r2
 800b72e:	f7fd fcf6 	bl	800911e <get_fat>
 800b732:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800b734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b736:	2b01      	cmp	r3, #1
 800b738:	d804      	bhi.n	800b744 <f_read+0xf2>
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	2202      	movs	r2, #2
 800b73e:	755a      	strb	r2, [r3, #21]
 800b740:	2302      	movs	r3, #2
 800b742:	e0bb      	b.n	800b8bc <f_read+0x26a>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b74a:	d104      	bne.n	800b756 <f_read+0x104>
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	2201      	movs	r2, #1
 800b750:	755a      	strb	r2, [r3, #21]
 800b752:	2301      	movs	r3, #1
 800b754:	e0b2      	b.n	800b8bc <f_read+0x26a>
				fp->clust = clst;				/* Update current cluster */
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b75a:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b75c:	697a      	ldr	r2, [r7, #20]
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	69db      	ldr	r3, [r3, #28]
 800b762:	4619      	mov	r1, r3
 800b764:	4610      	mov	r0, r2
 800b766:	f7fd fcbb 	bl	80090e0 <clust2sect>
 800b76a:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b76c:	69bb      	ldr	r3, [r7, #24]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d104      	bne.n	800b77c <f_read+0x12a>
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	2202      	movs	r2, #2
 800b776:	755a      	strb	r2, [r3, #21]
 800b778:	2302      	movs	r3, #2
 800b77a:	e09f      	b.n	800b8bc <f_read+0x26a>
			sect += csect;
 800b77c:	69ba      	ldr	r2, [r7, #24]
 800b77e:	69fb      	ldr	r3, [r7, #28]
 800b780:	4413      	add	r3, r2
 800b782:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800b784:	697b      	ldr	r3, [r7, #20]
 800b786:	899b      	ldrh	r3, [r3, #12]
 800b788:	461a      	mov	r2, r3
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b790:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800b792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b794:	2b00      	cmp	r3, #0
 800b796:	d040      	beq.n	800b81a <f_read+0x1c8>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b798:	69fa      	ldr	r2, [r7, #28]
 800b79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b79c:	4413      	add	r3, r2
 800b79e:	697a      	ldr	r2, [r7, #20]
 800b7a0:	8952      	ldrh	r2, [r2, #10]
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	d905      	bls.n	800b7b2 <f_read+0x160>
					cc = fs->csize - csect;
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	895b      	ldrh	r3, [r3, #10]
 800b7aa:	461a      	mov	r2, r3
 800b7ac:	69fb      	ldr	r3, [r7, #28]
 800b7ae:	1ad3      	subs	r3, r2, r3
 800b7b0:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	7858      	ldrb	r0, [r3, #1]
 800b7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7b8:	69ba      	ldr	r2, [r7, #24]
 800b7ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b7bc:	f7fc fc00 	bl	8007fc0 <disk_read>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d004      	beq.n	800b7d0 <f_read+0x17e>
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	755a      	strb	r2, [r3, #21]
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	e075      	b.n	800b8bc <f_read+0x26a>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	78db      	ldrb	r3, [r3, #3]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d018      	beq.n	800b80a <f_read+0x1b8>
 800b7d8:	697b      	ldr	r3, [r7, #20]
 800b7da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b7dc:	69bb      	ldr	r3, [r7, #24]
 800b7de:	1ad3      	subs	r3, r2, r3
 800b7e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7e2:	429a      	cmp	r2, r3
 800b7e4:	d911      	bls.n	800b80a <f_read+0x1b8>
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
 800b7e6:	697b      	ldr	r3, [r7, #20]
 800b7e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b7ea:	69bb      	ldr	r3, [r7, #24]
 800b7ec:	1ad3      	subs	r3, r2, r3
 800b7ee:	697a      	ldr	r2, [r7, #20]
 800b7f0:	8992      	ldrh	r2, [r2, #12]
 800b7f2:	fb02 f303 	mul.w	r3, r2, r3
 800b7f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7f8:	18d0      	adds	r0, r2, r3
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b800:	697b      	ldr	r3, [r7, #20]
 800b802:	899b      	ldrh	r3, [r3, #12]
 800b804:	461a      	mov	r2, r3
 800b806:	f7fd f99f 	bl	8008b48 <mem_cpy>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800b80a:	697b      	ldr	r3, [r7, #20]
 800b80c:	899b      	ldrh	r3, [r3, #12]
 800b80e:	461a      	mov	r2, r3
 800b810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b812:	fb02 f303 	mul.w	r3, r2, r3
 800b816:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800b818:	e037      	b.n	800b88a <f_read+0x238>
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
			}
#endif
			fp->sect = sect;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	69ba      	ldr	r2, [r7, #24]
 800b81e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b820:	697b      	ldr	r3, [r7, #20]
 800b822:	899b      	ldrh	r3, [r3, #12]
 800b824:	4618      	mov	r0, r3
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	699b      	ldr	r3, [r3, #24]
 800b82a:	697a      	ldr	r2, [r7, #20]
 800b82c:	8992      	ldrh	r2, [r2, #12]
 800b82e:	fbb3 f1f2 	udiv	r1, r3, r2
 800b832:	fb01 f202 	mul.w	r2, r1, r2
 800b836:	1a9b      	subs	r3, r3, r2
 800b838:	1ac3      	subs	r3, r0, r3
 800b83a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800b83c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	429a      	cmp	r2, r3
 800b842:	d901      	bls.n	800b848 <f_read+0x1f6>
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
 800b848:	697a      	ldr	r2, [r7, #20]
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	6a1b      	ldr	r3, [r3, #32]
 800b84e:	4619      	mov	r1, r3
 800b850:	4610      	mov	r0, r2
 800b852:	f7fd fba7 	bl	8008fa4 <move_window>
 800b856:	4603      	mov	r3, r0
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d004      	beq.n	800b866 <f_read+0x214>
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	2201      	movs	r2, #1
 800b860:	755a      	strb	r2, [r3, #21]
 800b862:	2301      	movs	r3, #1
 800b864:	e02a      	b.n	800b8bc <f_read+0x26a>
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	699b      	ldr	r3, [r3, #24]
 800b870:	697a      	ldr	r2, [r7, #20]
 800b872:	8992      	ldrh	r2, [r2, #12]
 800b874:	fbb3 f0f2 	udiv	r0, r3, r2
 800b878:	fb00 f202 	mul.w	r2, r0, r2
 800b87c:	1a9b      	subs	r3, r3, r2
 800b87e:	440b      	add	r3, r1
 800b880:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b882:	4619      	mov	r1, r3
 800b884:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b886:	f7fd f95f 	bl	8008b48 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800b88a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b88e:	4413      	add	r3, r2
 800b890:	627b      	str	r3, [r7, #36]	; 0x24
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	699a      	ldr	r2, [r3, #24]
 800b896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b898:	441a      	add	r2, r3
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	619a      	str	r2, [r3, #24]
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	681a      	ldr	r2, [r3, #0]
 800b8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8a4:	441a      	add	r2, r3
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	601a      	str	r2, [r3, #0]
 800b8aa:	687a      	ldr	r2, [r7, #4]
 800b8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ae:	1ad3      	subs	r3, r2, r3
 800b8b0:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	f47f af07 	bne.w	800b6c8 <f_read+0x76>
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800b8ba:	2300      	movs	r3, #0
}
 800b8bc:	4618      	mov	r0, r3
 800b8be:	3738      	adds	r7, #56	; 0x38
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}

0800b8c4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b086      	sub	sp, #24
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f107 0208 	add.w	r2, r7, #8
 800b8d2:	4611      	mov	r1, r2
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f7ff fb9d 	bl	800b014 <validate>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b8de:	7dfb      	ldrb	r3, [r7, #23]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d14d      	bne.n	800b980 <f_sync+0xbc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	7d1b      	ldrb	r3, [r3, #20]
 800b8e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d047      	beq.n	800b980 <f_sync+0xbc>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b8f0:	f7fc fbd6 	bl	80080a0 <get_fattime>
 800b8f4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b8f6:	68ba      	ldr	r2, [r7, #8]
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8fc:	4619      	mov	r1, r3
 800b8fe:	4610      	mov	r0, r2
 800b900:	f7fd fb50 	bl	8008fa4 <move_window>
 800b904:	4603      	mov	r3, r0
 800b906:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b908:	7dfb      	ldrb	r3, [r7, #23]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d138      	bne.n	800b980 <f_sync+0xbc>
					dir = fp->dir_ptr;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b912:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	330b      	adds	r3, #11
 800b918:	781a      	ldrb	r2, [r3, #0]
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	330b      	adds	r3, #11
 800b91e:	f042 0220 	orr.w	r2, r2, #32
 800b922:	b2d2      	uxtb	r2, r2
 800b924:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6818      	ldr	r0, [r3, #0]
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	689b      	ldr	r3, [r3, #8]
 800b92e:	461a      	mov	r2, r3
 800b930:	68f9      	ldr	r1, [r7, #12]
 800b932:	f7fe f8de 	bl	8009af2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	f103 021c 	add.w	r2, r3, #28
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	68db      	ldr	r3, [r3, #12]
 800b940:	4619      	mov	r1, r3
 800b942:	4610      	mov	r0, r2
 800b944:	f7fd f8d4 	bl	8008af0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	3316      	adds	r3, #22
 800b94c:	6939      	ldr	r1, [r7, #16]
 800b94e:	4618      	mov	r0, r3
 800b950:	f7fd f8ce 	bl	8008af0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	3312      	adds	r3, #18
 800b958:	2100      	movs	r1, #0
 800b95a:	4618      	mov	r0, r3
 800b95c:	f7fd f8ad 	bl	8008aba <st_word>
					fs->wflag = 1;
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	2201      	movs	r2, #1
 800b964:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	4618      	mov	r0, r3
 800b96a:	f7fd fb49 	bl	8009000 <sync_fs>
 800b96e:	4603      	mov	r3, r0
 800b970:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	7d1b      	ldrb	r3, [r3, #20]
 800b976:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b97a:	b2da      	uxtb	r2, r3
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b980:	7dfb      	ldrb	r3, [r7, #23]
}
 800b982:	4618      	mov	r0, r3
 800b984:	3718      	adds	r7, #24
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}

0800b98a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b98a:	b580      	push	{r7, lr}
 800b98c:	b084      	sub	sp, #16
 800b98e:	af00      	add	r7, sp, #0
 800b990:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f7ff ff96 	bl	800b8c4 <f_sync>
 800b998:	4603      	mov	r3, r0
 800b99a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b99c:	7bfb      	ldrb	r3, [r7, #15]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d118      	bne.n	800b9d4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f107 0208 	add.w	r2, r7, #8
 800b9a8:	4611      	mov	r1, r2
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f7ff fb32 	bl	800b014 <validate>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b9b4:	7bfb      	ldrb	r3, [r7, #15]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d10c      	bne.n	800b9d4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	691b      	ldr	r3, [r3, #16]
 800b9be:	4618      	mov	r0, r3
 800b9c0:	f7fd fa4c 	bl	8008e5c <dec_lock>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b9c8:	7bfb      	ldrb	r3, [r7, #15]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d102      	bne.n	800b9d4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b9d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	3710      	adds	r7, #16
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd80      	pop	{r7, pc}

0800b9de <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800b9de:	b580      	push	{r7, lr}
 800b9e0:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800b9ea:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800b9ee:	6018      	str	r0, [r3, #0]
 800b9f0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800b9f4:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800b9f8:	6019      	str	r1, [r3, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800b9fa:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800b9fe:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d101      	bne.n	800ba0c <f_opendir+0x2e>
 800ba08:	2309      	movs	r3, #9
 800ba0a:	e0a0      	b.n	800bb4e <f_opendir+0x170>

	/* Get logical drive */
	obj = &dp->obj;
 800ba0c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800ba10:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	res = find_volume(&path, &fs, 0);
 800ba1a:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 800ba1e:	463b      	mov	r3, r7
 800ba20:	2200      	movs	r2, #0
 800ba22:	4618      	mov	r0, r3
 800ba24:	f7ff f876 	bl	800ab14 <find_volume>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	if (res == FR_OK) {
 800ba2e:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	f040 8081 	bne.w	800bb3a <f_opendir+0x15c>
		obj->fs = fs;
 800ba38:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800ba3c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800ba40:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 800ba42:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800ba46:	f107 020c 	add.w	r2, r7, #12
 800ba4a:	611a      	str	r2, [r3, #16]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800ba4c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800ba50:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800ba54:	681a      	ldr	r2, [r3, #0]
 800ba56:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800ba5a:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800ba5e:	4611      	mov	r1, r2
 800ba60:	6818      	ldr	r0, [r3, #0]
 800ba62:	f7fe ff47 	bl	800a8f4 <follow_path>
 800ba66:	4603      	mov	r3, r0
 800ba68:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		if (res == FR_OK) {						/* Follow completed */
 800ba6c:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d15b      	bne.n	800bb2c <f_opendir+0x14e>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800ba74:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800ba78:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ba82:	b25b      	sxtb	r3, r3
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	db1a      	blt.n	800babe <f_opendir+0xe0>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800ba88:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800ba8c:	799b      	ldrb	r3, [r3, #6]
 800ba8e:	f003 0310 	and.w	r3, r3, #16
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d010      	beq.n	800bab8 <f_opendir+0xda>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800ba96:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800ba9a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800ba9e:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	6a1b      	ldr	r3, [r3, #32]
 800baa6:	4619      	mov	r1, r3
 800baa8:	4610      	mov	r0, r2
 800baaa:	f7fe f803 	bl	8009ab4 <ld_clust>
 800baae:	4602      	mov	r2, r0
 800bab0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800bab4:	609a      	str	r2, [r3, #8]
 800bab6:	e002      	b.n	800babe <f_opendir+0xe0>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800bab8:	2305      	movs	r3, #5
 800baba:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
				}
			}
			if (res == FR_OK) {
 800babe:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d132      	bne.n	800bb2c <f_opendir+0x14e>
				obj->id = fs->id;
 800bac6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800baca:	88da      	ldrh	r2, [r3, #6]
 800bacc:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800bad0:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800bad2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800bad6:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800bada:	2100      	movs	r1, #0
 800badc:	6818      	ldr	r0, [r3, #0]
 800bade:	f7fd fe43 	bl	8009768 <dir_sdi>
 800bae2:	4603      	mov	r3, r0
 800bae4:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800bae8:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800baec:	2b00      	cmp	r3, #0
 800baee:	d11d      	bne.n	800bb2c <f_opendir+0x14e>
					if (obj->sclust) {
 800baf0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800baf4:	689b      	ldr	r3, [r3, #8]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d014      	beq.n	800bb24 <f_opendir+0x146>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800bafa:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800bafe:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800bb02:	2100      	movs	r1, #0
 800bb04:	6818      	ldr	r0, [r3, #0]
 800bb06:	f7fd f91b 	bl	8008d40 <inc_lock>
 800bb0a:	4602      	mov	r2, r0
 800bb0c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800bb10:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800bb12:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800bb16:	691b      	ldr	r3, [r3, #16]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d107      	bne.n	800bb2c <f_opendir+0x14e>
 800bb1c:	2312      	movs	r3, #18
 800bb1e:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
 800bb22:	e003      	b.n	800bb2c <f_opendir+0x14e>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800bb24:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800bb28:	2200      	movs	r2, #0
 800bb2a:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800bb2c:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800bb30:	2b04      	cmp	r3, #4
 800bb32:	d102      	bne.n	800bb3a <f_opendir+0x15c>
 800bb34:	2305      	movs	r3, #5
 800bb36:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800bb3a:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d003      	beq.n	800bb4a <f_opendir+0x16c>
 800bb42:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800bb46:	2200      	movs	r2, #0
 800bb48:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800bb4a:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f507 7706 	add.w	r7, r7, #536	; 0x218
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}

0800bb58 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 800bb5e:	af00      	add	r7, sp, #0
 800bb60:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800bb64:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800bb68:	6018      	str	r0, [r3, #0]
 800bb6a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800bb6e:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800bb72:	6019      	str	r1, [r3, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800bb74:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800bb78:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800bb82:	4611      	mov	r1, r2
 800bb84:	4618      	mov	r0, r3
 800bb86:	f7ff fa45 	bl	800b014 <validate>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	if (res == FR_OK) {
 800bb90:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d14b      	bne.n	800bc30 <f_readdir+0xd8>
		if (!fno) {
 800bb98:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800bb9c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d10b      	bne.n	800bbbe <f_readdir+0x66>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800bba6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800bbaa:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800bbae:	2100      	movs	r1, #0
 800bbb0:	6818      	ldr	r0, [r3, #0]
 800bbb2:	f7fd fdd9 	bl	8009768 <dir_sdi>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 800bbbc:	e038      	b.n	800bc30 <f_readdir+0xd8>
		} else {
			INIT_NAMBUF(fs);
 800bbbe:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800bbc2:	f107 0208 	add.w	r2, r7, #8
 800bbc6:	611a      	str	r2, [r3, #16]
			res = dir_read(dp, 0);			/* Read an item */
 800bbc8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800bbcc:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800bbd0:	2100      	movs	r1, #0
 800bbd2:	6818      	ldr	r0, [r3, #0]
 800bbd4:	f7fe f999 	bl	8009f0a <dir_read>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800bbde:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800bbe2:	2b04      	cmp	r3, #4
 800bbe4:	d102      	bne.n	800bbec <f_readdir+0x94>
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			if (res == FR_OK) {				/* A valid entry is found */
 800bbec:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d11d      	bne.n	800bc30 <f_readdir+0xd8>
				get_fileinfo(dp, fno);		/* Get the object information */
 800bbf4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800bbf8:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 800bbfc:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800bc00:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800bc04:	6811      	ldr	r1, [r2, #0]
 800bc06:	6818      	ldr	r0, [r3, #0]
 800bc08:	f7fe fbde 	bl	800a3c8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800bc0c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800bc10:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800bc14:	2100      	movs	r1, #0
 800bc16:	6818      	ldr	r0, [r3, #0]
 800bc18:	f7fd fe2f 	bl	800987a <dir_next>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800bc22:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800bc26:	2b04      	cmp	r3, #4
 800bc28:	d102      	bne.n	800bc30 <f_readdir+0xd8>
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800bc30:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	f507 7704 	add.w	r7, r7, #528	; 0x210
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}
	...

0800bc40 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bc40:	b480      	push	{r7}
 800bc42:	b087      	sub	sp, #28
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	60f8      	str	r0, [r7, #12]
 800bc48:	60b9      	str	r1, [r7, #8]
 800bc4a:	4613      	mov	r3, r2
 800bc4c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bc4e:	2301      	movs	r3, #1
 800bc50:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bc52:	2300      	movs	r3, #0
 800bc54:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bc56:	4b1f      	ldr	r3, [pc, #124]	; (800bcd4 <FATFS_LinkDriverEx+0x94>)
 800bc58:	7a5b      	ldrb	r3, [r3, #9]
 800bc5a:	b2db      	uxtb	r3, r3
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d131      	bne.n	800bcc4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bc60:	4b1c      	ldr	r3, [pc, #112]	; (800bcd4 <FATFS_LinkDriverEx+0x94>)
 800bc62:	7a5b      	ldrb	r3, [r3, #9]
 800bc64:	b2db      	uxtb	r3, r3
 800bc66:	461a      	mov	r2, r3
 800bc68:	4b1a      	ldr	r3, [pc, #104]	; (800bcd4 <FATFS_LinkDriverEx+0x94>)
 800bc6a:	2100      	movs	r1, #0
 800bc6c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bc6e:	4b19      	ldr	r3, [pc, #100]	; (800bcd4 <FATFS_LinkDriverEx+0x94>)
 800bc70:	7a5b      	ldrb	r3, [r3, #9]
 800bc72:	b2db      	uxtb	r3, r3
 800bc74:	4a17      	ldr	r2, [pc, #92]	; (800bcd4 <FATFS_LinkDriverEx+0x94>)
 800bc76:	009b      	lsls	r3, r3, #2
 800bc78:	4413      	add	r3, r2
 800bc7a:	68fa      	ldr	r2, [r7, #12]
 800bc7c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bc7e:	4b15      	ldr	r3, [pc, #84]	; (800bcd4 <FATFS_LinkDriverEx+0x94>)
 800bc80:	7a5b      	ldrb	r3, [r3, #9]
 800bc82:	b2db      	uxtb	r3, r3
 800bc84:	461a      	mov	r2, r3
 800bc86:	4b13      	ldr	r3, [pc, #76]	; (800bcd4 <FATFS_LinkDriverEx+0x94>)
 800bc88:	4413      	add	r3, r2
 800bc8a:	79fa      	ldrb	r2, [r7, #7]
 800bc8c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bc8e:	4b11      	ldr	r3, [pc, #68]	; (800bcd4 <FATFS_LinkDriverEx+0x94>)
 800bc90:	7a5b      	ldrb	r3, [r3, #9]
 800bc92:	b2db      	uxtb	r3, r3
 800bc94:	1c5a      	adds	r2, r3, #1
 800bc96:	b2d1      	uxtb	r1, r2
 800bc98:	4a0e      	ldr	r2, [pc, #56]	; (800bcd4 <FATFS_LinkDriverEx+0x94>)
 800bc9a:	7251      	strb	r1, [r2, #9]
 800bc9c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bc9e:	7dbb      	ldrb	r3, [r7, #22]
 800bca0:	3330      	adds	r3, #48	; 0x30
 800bca2:	b2da      	uxtb	r2, r3
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	3301      	adds	r3, #1
 800bcac:	223a      	movs	r2, #58	; 0x3a
 800bcae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	3302      	adds	r3, #2
 800bcb4:	222f      	movs	r2, #47	; 0x2f
 800bcb6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	3303      	adds	r3, #3
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bcc4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	371c      	adds	r7, #28
 800bcca:	46bd      	mov	sp, r7
 800bccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd0:	4770      	bx	lr
 800bcd2:	bf00      	nop
 800bcd4:	20001600 	.word	0x20001600

0800bcd8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b082      	sub	sp, #8
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
 800bce0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bce2:	2200      	movs	r2, #0
 800bce4:	6839      	ldr	r1, [r7, #0]
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f7ff ffaa 	bl	800bc40 <FATFS_LinkDriverEx>
 800bcec:	4603      	mov	r3, r0
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	3708      	adds	r7, #8
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}

0800bcf6 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800bcf6:	b580      	push	{r7, lr}
 800bcf8:	b082      	sub	sp, #8
 800bcfa:	af00      	add	r7, sp, #0
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800bd00:	79fb      	ldrb	r3, [r7, #7]
 800bd02:	4618      	mov	r0, r3
 800bd04:	f7fc fb88 	bl	8008418 <SD_disk_initialize>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3708      	adds	r7, #8
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}

0800bd14 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b082      	sub	sp, #8
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
   return SD_disk_status(pdrv) ;
 800bd1e:	79fb      	ldrb	r3, [r7, #7]
 800bd20:	4618      	mov	r0, r3
 800bd22:	f7fc fc5f 	bl	80085e4 <SD_disk_status>
 800bd26:	4603      	mov	r3, r0
 800bd28:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3708      	adds	r7, #8
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}

0800bd32 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800bd32:	b580      	push	{r7, lr}
 800bd34:	b084      	sub	sp, #16
 800bd36:	af00      	add	r7, sp, #0
 800bd38:	60b9      	str	r1, [r7, #8]
 800bd3a:	607a      	str	r2, [r7, #4]
 800bd3c:	603b      	str	r3, [r7, #0]
 800bd3e:	4603      	mov	r3, r0
 800bd40:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800bd42:	7bf8      	ldrb	r0, [r7, #15]
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	687a      	ldr	r2, [r7, #4]
 800bd48:	68b9      	ldr	r1, [r7, #8]
 800bd4a:	f7fc fc61 	bl	8008610 <SD_disk_read>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	3710      	adds	r7, #16
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}

0800bd5a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800bd5a:	b580      	push	{r7, lr}
 800bd5c:	b084      	sub	sp, #16
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	60b9      	str	r1, [r7, #8]
 800bd62:	607a      	str	r2, [r7, #4]
 800bd64:	603b      	str	r3, [r7, #0]
 800bd66:	4603      	mov	r3, r0
 800bd68:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800bd6a:	7bf8      	ldrb	r0, [r7, #15]
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	687a      	ldr	r2, [r7, #4]
 800bd70:	68b9      	ldr	r1, [r7, #8]
 800bd72:	f7fc fcb7 	bl	80086e4 <SD_disk_write>
 800bd76:	4603      	mov	r3, r0
 800bd78:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	3710      	adds	r7, #16
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	bd80      	pop	{r7, pc}

0800bd82 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800bd82:	b580      	push	{r7, lr}
 800bd84:	b082      	sub	sp, #8
 800bd86:	af00      	add	r7, sp, #0
 800bd88:	4603      	mov	r3, r0
 800bd8a:	603a      	str	r2, [r7, #0]
 800bd8c:	71fb      	strb	r3, [r7, #7]
 800bd8e:	460b      	mov	r3, r1
 800bd90:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */

    return SD_disk_ioctl(pdrv, cmd, buff);
 800bd92:	79fb      	ldrb	r3, [r7, #7]
 800bd94:	79b9      	ldrb	r1, [r7, #6]
 800bd96:	683a      	ldr	r2, [r7, #0]
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f7fc fd27 	bl	80087ec <SD_disk_ioctl>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	3708      	adds	r7, #8
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}
	...

0800bdac <__libc_init_array>:
 800bdac:	b570      	push	{r4, r5, r6, lr}
 800bdae:	4d0d      	ldr	r5, [pc, #52]	; (800bde4 <__libc_init_array+0x38>)
 800bdb0:	4c0d      	ldr	r4, [pc, #52]	; (800bde8 <__libc_init_array+0x3c>)
 800bdb2:	1b64      	subs	r4, r4, r5
 800bdb4:	10a4      	asrs	r4, r4, #2
 800bdb6:	2600      	movs	r6, #0
 800bdb8:	42a6      	cmp	r6, r4
 800bdba:	d109      	bne.n	800bdd0 <__libc_init_array+0x24>
 800bdbc:	4d0b      	ldr	r5, [pc, #44]	; (800bdec <__libc_init_array+0x40>)
 800bdbe:	4c0c      	ldr	r4, [pc, #48]	; (800bdf0 <__libc_init_array+0x44>)
 800bdc0:	f000 f842 	bl	800be48 <_init>
 800bdc4:	1b64      	subs	r4, r4, r5
 800bdc6:	10a4      	asrs	r4, r4, #2
 800bdc8:	2600      	movs	r6, #0
 800bdca:	42a6      	cmp	r6, r4
 800bdcc:	d105      	bne.n	800bdda <__libc_init_array+0x2e>
 800bdce:	bd70      	pop	{r4, r5, r6, pc}
 800bdd0:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdd4:	4798      	blx	r3
 800bdd6:	3601      	adds	r6, #1
 800bdd8:	e7ee      	b.n	800bdb8 <__libc_init_array+0xc>
 800bdda:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdde:	4798      	blx	r3
 800bde0:	3601      	adds	r6, #1
 800bde2:	e7f2      	b.n	800bdca <__libc_init_array+0x1e>
 800bde4:	0800c700 	.word	0x0800c700
 800bde8:	0800c700 	.word	0x0800c700
 800bdec:	0800c700 	.word	0x0800c700
 800bdf0:	0800c704 	.word	0x0800c704

0800bdf4 <memset>:
 800bdf4:	4402      	add	r2, r0
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	4293      	cmp	r3, r2
 800bdfa:	d100      	bne.n	800bdfe <memset+0xa>
 800bdfc:	4770      	bx	lr
 800bdfe:	f803 1b01 	strb.w	r1, [r3], #1
 800be02:	e7f9      	b.n	800bdf8 <memset+0x4>

0800be04 <strcat>:
 800be04:	b510      	push	{r4, lr}
 800be06:	4602      	mov	r2, r0
 800be08:	7814      	ldrb	r4, [r2, #0]
 800be0a:	4613      	mov	r3, r2
 800be0c:	3201      	adds	r2, #1
 800be0e:	2c00      	cmp	r4, #0
 800be10:	d1fa      	bne.n	800be08 <strcat+0x4>
 800be12:	3b01      	subs	r3, #1
 800be14:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be18:	f803 2f01 	strb.w	r2, [r3, #1]!
 800be1c:	2a00      	cmp	r2, #0
 800be1e:	d1f9      	bne.n	800be14 <strcat+0x10>
 800be20:	bd10      	pop	{r4, pc}

0800be22 <strncpy>:
 800be22:	b510      	push	{r4, lr}
 800be24:	3901      	subs	r1, #1
 800be26:	4603      	mov	r3, r0
 800be28:	b132      	cbz	r2, 800be38 <strncpy+0x16>
 800be2a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800be2e:	f803 4b01 	strb.w	r4, [r3], #1
 800be32:	3a01      	subs	r2, #1
 800be34:	2c00      	cmp	r4, #0
 800be36:	d1f7      	bne.n	800be28 <strncpy+0x6>
 800be38:	441a      	add	r2, r3
 800be3a:	2100      	movs	r1, #0
 800be3c:	4293      	cmp	r3, r2
 800be3e:	d100      	bne.n	800be42 <strncpy+0x20>
 800be40:	bd10      	pop	{r4, pc}
 800be42:	f803 1b01 	strb.w	r1, [r3], #1
 800be46:	e7f9      	b.n	800be3c <strncpy+0x1a>

0800be48 <_init>:
 800be48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be4a:	bf00      	nop
 800be4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be4e:	bc08      	pop	{r3}
 800be50:	469e      	mov	lr, r3
 800be52:	4770      	bx	lr

0800be54 <_fini>:
 800be54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be56:	bf00      	nop
 800be58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be5a:	bc08      	pop	{r3}
 800be5c:	469e      	mov	lr, r3
 800be5e:	4770      	bx	lr
