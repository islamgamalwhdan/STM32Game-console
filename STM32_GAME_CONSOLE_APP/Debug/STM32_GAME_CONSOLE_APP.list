
STM32_GAME_CONSOLE_APP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .SDRAM1       00025800  d0000000  d0000000  00070000  2**2
                  ALLOC
  2 .SDRAM2       00025800  d0200000  d0200000  00070000  2**2
                  ALLOC
  3 .SDRAM3       00019000  d0400000  d0400000  00070000  2**2
                  ALLOC
  4 .text         000098c4  080401b0  080401b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .rodata       00037778  08049a78  08049a78  00019a78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  080811f0  080811f0  000600a4  2**0
                  CONTENTS
  7 .ARM          00000008  080811f0  080811f0  000511f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  080811f8  080811f8  000600a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000004  080811f8  080811f8  000511f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000004  080811fc  080811fc  000511fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         000000a4  20000000  08081200  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00006014  200000a4  080812a4  000600a4  2**2
                  ALLOC
 13 ._user_heap_stack 00000600  200060b8  080812a4  000660b8  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  000600a4  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001669e  00000000  00000000  000600d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00003ffb  00000000  00000000  00076772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000014e8  00000000  00000000  0007a770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00001308  00000000  00000000  0007bc58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00027516  00000000  00000000  0007cf60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001a68f  00000000  00000000  000a4476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000e1bfb  00000000  00000000  000beb05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  001a0700  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00005988  00000000  00000000  001a0750  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080401b0 <__do_global_dtors_aux>:
 80401b0:	b510      	push	{r4, lr}
 80401b2:	4c05      	ldr	r4, [pc, #20]	; (80401c8 <__do_global_dtors_aux+0x18>)
 80401b4:	7823      	ldrb	r3, [r4, #0]
 80401b6:	b933      	cbnz	r3, 80401c6 <__do_global_dtors_aux+0x16>
 80401b8:	4b04      	ldr	r3, [pc, #16]	; (80401cc <__do_global_dtors_aux+0x1c>)
 80401ba:	b113      	cbz	r3, 80401c2 <__do_global_dtors_aux+0x12>
 80401bc:	4804      	ldr	r0, [pc, #16]	; (80401d0 <__do_global_dtors_aux+0x20>)
 80401be:	f3af 8000 	nop.w
 80401c2:	2301      	movs	r3, #1
 80401c4:	7023      	strb	r3, [r4, #0]
 80401c6:	bd10      	pop	{r4, pc}
 80401c8:	200000a4 	.word	0x200000a4
 80401cc:	00000000 	.word	0x00000000
 80401d0:	08049a5c 	.word	0x08049a5c

080401d4 <frame_dummy>:
 80401d4:	b508      	push	{r3, lr}
 80401d6:	4b03      	ldr	r3, [pc, #12]	; (80401e4 <frame_dummy+0x10>)
 80401d8:	b11b      	cbz	r3, 80401e2 <frame_dummy+0xe>
 80401da:	4903      	ldr	r1, [pc, #12]	; (80401e8 <frame_dummy+0x14>)
 80401dc:	4803      	ldr	r0, [pc, #12]	; (80401ec <frame_dummy+0x18>)
 80401de:	f3af 8000 	nop.w
 80401e2:	bd08      	pop	{r3, pc}
 80401e4:	00000000 	.word	0x00000000
 80401e8:	200000a8 	.word	0x200000a8
 80401ec:	08049a5c 	.word	0x08049a5c

080401f0 <__aeabi_drsub>:
 80401f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80401f4:	e002      	b.n	80401fc <__adddf3>
 80401f6:	bf00      	nop

080401f8 <__aeabi_dsub>:
 80401f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080401fc <__adddf3>:
 80401fc:	b530      	push	{r4, r5, lr}
 80401fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8040202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8040206:	ea94 0f05 	teq	r4, r5
 804020a:	bf08      	it	eq
 804020c:	ea90 0f02 	teqeq	r0, r2
 8040210:	bf1f      	itttt	ne
 8040212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8040216:	ea55 0c02 	orrsne.w	ip, r5, r2
 804021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 804021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8040222:	f000 80e2 	beq.w	80403ea <__adddf3+0x1ee>
 8040226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 804022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 804022e:	bfb8      	it	lt
 8040230:	426d      	neglt	r5, r5
 8040232:	dd0c      	ble.n	804024e <__adddf3+0x52>
 8040234:	442c      	add	r4, r5
 8040236:	ea80 0202 	eor.w	r2, r0, r2
 804023a:	ea81 0303 	eor.w	r3, r1, r3
 804023e:	ea82 0000 	eor.w	r0, r2, r0
 8040242:	ea83 0101 	eor.w	r1, r3, r1
 8040246:	ea80 0202 	eor.w	r2, r0, r2
 804024a:	ea81 0303 	eor.w	r3, r1, r3
 804024e:	2d36      	cmp	r5, #54	; 0x36
 8040250:	bf88      	it	hi
 8040252:	bd30      	pophi	{r4, r5, pc}
 8040254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8040258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 804025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8040260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8040264:	d002      	beq.n	804026c <__adddf3+0x70>
 8040266:	4240      	negs	r0, r0
 8040268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 804026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8040270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8040274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8040278:	d002      	beq.n	8040280 <__adddf3+0x84>
 804027a:	4252      	negs	r2, r2
 804027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8040280:	ea94 0f05 	teq	r4, r5
 8040284:	f000 80a7 	beq.w	80403d6 <__adddf3+0x1da>
 8040288:	f1a4 0401 	sub.w	r4, r4, #1
 804028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8040290:	db0d      	blt.n	80402ae <__adddf3+0xb2>
 8040292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8040296:	fa22 f205 	lsr.w	r2, r2, r5
 804029a:	1880      	adds	r0, r0, r2
 804029c:	f141 0100 	adc.w	r1, r1, #0
 80402a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80402a4:	1880      	adds	r0, r0, r2
 80402a6:	fa43 f305 	asr.w	r3, r3, r5
 80402aa:	4159      	adcs	r1, r3
 80402ac:	e00e      	b.n	80402cc <__adddf3+0xd0>
 80402ae:	f1a5 0520 	sub.w	r5, r5, #32
 80402b2:	f10e 0e20 	add.w	lr, lr, #32
 80402b6:	2a01      	cmp	r2, #1
 80402b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80402bc:	bf28      	it	cs
 80402be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80402c2:	fa43 f305 	asr.w	r3, r3, r5
 80402c6:	18c0      	adds	r0, r0, r3
 80402c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80402cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80402d0:	d507      	bpl.n	80402e2 <__adddf3+0xe6>
 80402d2:	f04f 0e00 	mov.w	lr, #0
 80402d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80402da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80402de:	eb6e 0101 	sbc.w	r1, lr, r1
 80402e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80402e6:	d31b      	bcc.n	8040320 <__adddf3+0x124>
 80402e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80402ec:	d30c      	bcc.n	8040308 <__adddf3+0x10c>
 80402ee:	0849      	lsrs	r1, r1, #1
 80402f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80402f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80402f8:	f104 0401 	add.w	r4, r4, #1
 80402fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8040300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8040304:	f080 809a 	bcs.w	804043c <__adddf3+0x240>
 8040308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 804030c:	bf08      	it	eq
 804030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8040312:	f150 0000 	adcs.w	r0, r0, #0
 8040316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 804031a:	ea41 0105 	orr.w	r1, r1, r5
 804031e:	bd30      	pop	{r4, r5, pc}
 8040320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8040324:	4140      	adcs	r0, r0
 8040326:	eb41 0101 	adc.w	r1, r1, r1
 804032a:	3c01      	subs	r4, #1
 804032c:	bf28      	it	cs
 804032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8040332:	d2e9      	bcs.n	8040308 <__adddf3+0x10c>
 8040334:	f091 0f00 	teq	r1, #0
 8040338:	bf04      	itt	eq
 804033a:	4601      	moveq	r1, r0
 804033c:	2000      	moveq	r0, #0
 804033e:	fab1 f381 	clz	r3, r1
 8040342:	bf08      	it	eq
 8040344:	3320      	addeq	r3, #32
 8040346:	f1a3 030b 	sub.w	r3, r3, #11
 804034a:	f1b3 0220 	subs.w	r2, r3, #32
 804034e:	da0c      	bge.n	804036a <__adddf3+0x16e>
 8040350:	320c      	adds	r2, #12
 8040352:	dd08      	ble.n	8040366 <__adddf3+0x16a>
 8040354:	f102 0c14 	add.w	ip, r2, #20
 8040358:	f1c2 020c 	rsb	r2, r2, #12
 804035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8040360:	fa21 f102 	lsr.w	r1, r1, r2
 8040364:	e00c      	b.n	8040380 <__adddf3+0x184>
 8040366:	f102 0214 	add.w	r2, r2, #20
 804036a:	bfd8      	it	le
 804036c:	f1c2 0c20 	rsble	ip, r2, #32
 8040370:	fa01 f102 	lsl.w	r1, r1, r2
 8040374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8040378:	bfdc      	itt	le
 804037a:	ea41 010c 	orrle.w	r1, r1, ip
 804037e:	4090      	lslle	r0, r2
 8040380:	1ae4      	subs	r4, r4, r3
 8040382:	bfa2      	ittt	ge
 8040384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8040388:	4329      	orrge	r1, r5
 804038a:	bd30      	popge	{r4, r5, pc}
 804038c:	ea6f 0404 	mvn.w	r4, r4
 8040390:	3c1f      	subs	r4, #31
 8040392:	da1c      	bge.n	80403ce <__adddf3+0x1d2>
 8040394:	340c      	adds	r4, #12
 8040396:	dc0e      	bgt.n	80403b6 <__adddf3+0x1ba>
 8040398:	f104 0414 	add.w	r4, r4, #20
 804039c:	f1c4 0220 	rsb	r2, r4, #32
 80403a0:	fa20 f004 	lsr.w	r0, r0, r4
 80403a4:	fa01 f302 	lsl.w	r3, r1, r2
 80403a8:	ea40 0003 	orr.w	r0, r0, r3
 80403ac:	fa21 f304 	lsr.w	r3, r1, r4
 80403b0:	ea45 0103 	orr.w	r1, r5, r3
 80403b4:	bd30      	pop	{r4, r5, pc}
 80403b6:	f1c4 040c 	rsb	r4, r4, #12
 80403ba:	f1c4 0220 	rsb	r2, r4, #32
 80403be:	fa20 f002 	lsr.w	r0, r0, r2
 80403c2:	fa01 f304 	lsl.w	r3, r1, r4
 80403c6:	ea40 0003 	orr.w	r0, r0, r3
 80403ca:	4629      	mov	r1, r5
 80403cc:	bd30      	pop	{r4, r5, pc}
 80403ce:	fa21 f004 	lsr.w	r0, r1, r4
 80403d2:	4629      	mov	r1, r5
 80403d4:	bd30      	pop	{r4, r5, pc}
 80403d6:	f094 0f00 	teq	r4, #0
 80403da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80403de:	bf06      	itte	eq
 80403e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80403e4:	3401      	addeq	r4, #1
 80403e6:	3d01      	subne	r5, #1
 80403e8:	e74e      	b.n	8040288 <__adddf3+0x8c>
 80403ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80403ee:	bf18      	it	ne
 80403f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80403f4:	d029      	beq.n	804044a <__adddf3+0x24e>
 80403f6:	ea94 0f05 	teq	r4, r5
 80403fa:	bf08      	it	eq
 80403fc:	ea90 0f02 	teqeq	r0, r2
 8040400:	d005      	beq.n	804040e <__adddf3+0x212>
 8040402:	ea54 0c00 	orrs.w	ip, r4, r0
 8040406:	bf04      	itt	eq
 8040408:	4619      	moveq	r1, r3
 804040a:	4610      	moveq	r0, r2
 804040c:	bd30      	pop	{r4, r5, pc}
 804040e:	ea91 0f03 	teq	r1, r3
 8040412:	bf1e      	ittt	ne
 8040414:	2100      	movne	r1, #0
 8040416:	2000      	movne	r0, #0
 8040418:	bd30      	popne	{r4, r5, pc}
 804041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 804041e:	d105      	bne.n	804042c <__adddf3+0x230>
 8040420:	0040      	lsls	r0, r0, #1
 8040422:	4149      	adcs	r1, r1
 8040424:	bf28      	it	cs
 8040426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 804042a:	bd30      	pop	{r4, r5, pc}
 804042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8040430:	bf3c      	itt	cc
 8040432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8040436:	bd30      	popcc	{r4, r5, pc}
 8040438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 804043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8040440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8040444:	f04f 0000 	mov.w	r0, #0
 8040448:	bd30      	pop	{r4, r5, pc}
 804044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 804044e:	bf1a      	itte	ne
 8040450:	4619      	movne	r1, r3
 8040452:	4610      	movne	r0, r2
 8040454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8040458:	bf1c      	itt	ne
 804045a:	460b      	movne	r3, r1
 804045c:	4602      	movne	r2, r0
 804045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8040462:	bf06      	itte	eq
 8040464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8040468:	ea91 0f03 	teqeq	r1, r3
 804046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8040470:	bd30      	pop	{r4, r5, pc}
 8040472:	bf00      	nop

08040474 <__aeabi_ui2d>:
 8040474:	f090 0f00 	teq	r0, #0
 8040478:	bf04      	itt	eq
 804047a:	2100      	moveq	r1, #0
 804047c:	4770      	bxeq	lr
 804047e:	b530      	push	{r4, r5, lr}
 8040480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8040484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8040488:	f04f 0500 	mov.w	r5, #0
 804048c:	f04f 0100 	mov.w	r1, #0
 8040490:	e750      	b.n	8040334 <__adddf3+0x138>
 8040492:	bf00      	nop

08040494 <__aeabi_i2d>:
 8040494:	f090 0f00 	teq	r0, #0
 8040498:	bf04      	itt	eq
 804049a:	2100      	moveq	r1, #0
 804049c:	4770      	bxeq	lr
 804049e:	b530      	push	{r4, r5, lr}
 80404a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80404a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80404a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80404ac:	bf48      	it	mi
 80404ae:	4240      	negmi	r0, r0
 80404b0:	f04f 0100 	mov.w	r1, #0
 80404b4:	e73e      	b.n	8040334 <__adddf3+0x138>
 80404b6:	bf00      	nop

080404b8 <__aeabi_f2d>:
 80404b8:	0042      	lsls	r2, r0, #1
 80404ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80404be:	ea4f 0131 	mov.w	r1, r1, rrx
 80404c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80404c6:	bf1f      	itttt	ne
 80404c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80404cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80404d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80404d4:	4770      	bxne	lr
 80404d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80404da:	bf08      	it	eq
 80404dc:	4770      	bxeq	lr
 80404de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80404e2:	bf04      	itt	eq
 80404e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80404e8:	4770      	bxeq	lr
 80404ea:	b530      	push	{r4, r5, lr}
 80404ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80404f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80404f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80404f8:	e71c      	b.n	8040334 <__adddf3+0x138>
 80404fa:	bf00      	nop

080404fc <__aeabi_ul2d>:
 80404fc:	ea50 0201 	orrs.w	r2, r0, r1
 8040500:	bf08      	it	eq
 8040502:	4770      	bxeq	lr
 8040504:	b530      	push	{r4, r5, lr}
 8040506:	f04f 0500 	mov.w	r5, #0
 804050a:	e00a      	b.n	8040522 <__aeabi_l2d+0x16>

0804050c <__aeabi_l2d>:
 804050c:	ea50 0201 	orrs.w	r2, r0, r1
 8040510:	bf08      	it	eq
 8040512:	4770      	bxeq	lr
 8040514:	b530      	push	{r4, r5, lr}
 8040516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 804051a:	d502      	bpl.n	8040522 <__aeabi_l2d+0x16>
 804051c:	4240      	negs	r0, r0
 804051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8040522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8040526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 804052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 804052e:	f43f aed8 	beq.w	80402e2 <__adddf3+0xe6>
 8040532:	f04f 0203 	mov.w	r2, #3
 8040536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 804053a:	bf18      	it	ne
 804053c:	3203      	addne	r2, #3
 804053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8040542:	bf18      	it	ne
 8040544:	3203      	addne	r2, #3
 8040546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 804054a:	f1c2 0320 	rsb	r3, r2, #32
 804054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8040552:	fa20 f002 	lsr.w	r0, r0, r2
 8040556:	fa01 fe03 	lsl.w	lr, r1, r3
 804055a:	ea40 000e 	orr.w	r0, r0, lr
 804055e:	fa21 f102 	lsr.w	r1, r1, r2
 8040562:	4414      	add	r4, r2
 8040564:	e6bd      	b.n	80402e2 <__adddf3+0xe6>
 8040566:	bf00      	nop

08040568 <__aeabi_dmul>:
 8040568:	b570      	push	{r4, r5, r6, lr}
 804056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 804056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8040572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8040576:	bf1d      	ittte	ne
 8040578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 804057c:	ea94 0f0c 	teqne	r4, ip
 8040580:	ea95 0f0c 	teqne	r5, ip
 8040584:	f000 f8de 	bleq	8040744 <__aeabi_dmul+0x1dc>
 8040588:	442c      	add	r4, r5
 804058a:	ea81 0603 	eor.w	r6, r1, r3
 804058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8040592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8040596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 804059a:	bf18      	it	ne
 804059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80405a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80405a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80405a8:	d038      	beq.n	804061c <__aeabi_dmul+0xb4>
 80405aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80405ae:	f04f 0500 	mov.w	r5, #0
 80405b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80405b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80405ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80405be:	f04f 0600 	mov.w	r6, #0
 80405c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80405c6:	f09c 0f00 	teq	ip, #0
 80405ca:	bf18      	it	ne
 80405cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80405d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80405d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80405d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80405dc:	d204      	bcs.n	80405e8 <__aeabi_dmul+0x80>
 80405de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80405e2:	416d      	adcs	r5, r5
 80405e4:	eb46 0606 	adc.w	r6, r6, r6
 80405e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80405ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80405f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80405f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80405f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80405fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8040600:	bf88      	it	hi
 8040602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8040606:	d81e      	bhi.n	8040646 <__aeabi_dmul+0xde>
 8040608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 804060c:	bf08      	it	eq
 804060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8040612:	f150 0000 	adcs.w	r0, r0, #0
 8040616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 804061a:	bd70      	pop	{r4, r5, r6, pc}
 804061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8040620:	ea46 0101 	orr.w	r1, r6, r1
 8040624:	ea40 0002 	orr.w	r0, r0, r2
 8040628:	ea81 0103 	eor.w	r1, r1, r3
 804062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8040630:	bfc2      	ittt	gt
 8040632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8040636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 804063a:	bd70      	popgt	{r4, r5, r6, pc}
 804063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8040640:	f04f 0e00 	mov.w	lr, #0
 8040644:	3c01      	subs	r4, #1
 8040646:	f300 80ab 	bgt.w	80407a0 <__aeabi_dmul+0x238>
 804064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 804064e:	bfde      	ittt	le
 8040650:	2000      	movle	r0, #0
 8040652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8040656:	bd70      	pople	{r4, r5, r6, pc}
 8040658:	f1c4 0400 	rsb	r4, r4, #0
 804065c:	3c20      	subs	r4, #32
 804065e:	da35      	bge.n	80406cc <__aeabi_dmul+0x164>
 8040660:	340c      	adds	r4, #12
 8040662:	dc1b      	bgt.n	804069c <__aeabi_dmul+0x134>
 8040664:	f104 0414 	add.w	r4, r4, #20
 8040668:	f1c4 0520 	rsb	r5, r4, #32
 804066c:	fa00 f305 	lsl.w	r3, r0, r5
 8040670:	fa20 f004 	lsr.w	r0, r0, r4
 8040674:	fa01 f205 	lsl.w	r2, r1, r5
 8040678:	ea40 0002 	orr.w	r0, r0, r2
 804067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8040680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8040684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8040688:	fa21 f604 	lsr.w	r6, r1, r4
 804068c:	eb42 0106 	adc.w	r1, r2, r6
 8040690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8040694:	bf08      	it	eq
 8040696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 804069a:	bd70      	pop	{r4, r5, r6, pc}
 804069c:	f1c4 040c 	rsb	r4, r4, #12
 80406a0:	f1c4 0520 	rsb	r5, r4, #32
 80406a4:	fa00 f304 	lsl.w	r3, r0, r4
 80406a8:	fa20 f005 	lsr.w	r0, r0, r5
 80406ac:	fa01 f204 	lsl.w	r2, r1, r4
 80406b0:	ea40 0002 	orr.w	r0, r0, r2
 80406b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80406b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80406bc:	f141 0100 	adc.w	r1, r1, #0
 80406c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80406c4:	bf08      	it	eq
 80406c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80406ca:	bd70      	pop	{r4, r5, r6, pc}
 80406cc:	f1c4 0520 	rsb	r5, r4, #32
 80406d0:	fa00 f205 	lsl.w	r2, r0, r5
 80406d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80406d8:	fa20 f304 	lsr.w	r3, r0, r4
 80406dc:	fa01 f205 	lsl.w	r2, r1, r5
 80406e0:	ea43 0302 	orr.w	r3, r3, r2
 80406e4:	fa21 f004 	lsr.w	r0, r1, r4
 80406e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80406ec:	fa21 f204 	lsr.w	r2, r1, r4
 80406f0:	ea20 0002 	bic.w	r0, r0, r2
 80406f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80406f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80406fc:	bf08      	it	eq
 80406fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8040702:	bd70      	pop	{r4, r5, r6, pc}
 8040704:	f094 0f00 	teq	r4, #0
 8040708:	d10f      	bne.n	804072a <__aeabi_dmul+0x1c2>
 804070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 804070e:	0040      	lsls	r0, r0, #1
 8040710:	eb41 0101 	adc.w	r1, r1, r1
 8040714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8040718:	bf08      	it	eq
 804071a:	3c01      	subeq	r4, #1
 804071c:	d0f7      	beq.n	804070e <__aeabi_dmul+0x1a6>
 804071e:	ea41 0106 	orr.w	r1, r1, r6
 8040722:	f095 0f00 	teq	r5, #0
 8040726:	bf18      	it	ne
 8040728:	4770      	bxne	lr
 804072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 804072e:	0052      	lsls	r2, r2, #1
 8040730:	eb43 0303 	adc.w	r3, r3, r3
 8040734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8040738:	bf08      	it	eq
 804073a:	3d01      	subeq	r5, #1
 804073c:	d0f7      	beq.n	804072e <__aeabi_dmul+0x1c6>
 804073e:	ea43 0306 	orr.w	r3, r3, r6
 8040742:	4770      	bx	lr
 8040744:	ea94 0f0c 	teq	r4, ip
 8040748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 804074c:	bf18      	it	ne
 804074e:	ea95 0f0c 	teqne	r5, ip
 8040752:	d00c      	beq.n	804076e <__aeabi_dmul+0x206>
 8040754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8040758:	bf18      	it	ne
 804075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 804075e:	d1d1      	bne.n	8040704 <__aeabi_dmul+0x19c>
 8040760:	ea81 0103 	eor.w	r1, r1, r3
 8040764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8040768:	f04f 0000 	mov.w	r0, #0
 804076c:	bd70      	pop	{r4, r5, r6, pc}
 804076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8040772:	bf06      	itte	eq
 8040774:	4610      	moveq	r0, r2
 8040776:	4619      	moveq	r1, r3
 8040778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 804077c:	d019      	beq.n	80407b2 <__aeabi_dmul+0x24a>
 804077e:	ea94 0f0c 	teq	r4, ip
 8040782:	d102      	bne.n	804078a <__aeabi_dmul+0x222>
 8040784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8040788:	d113      	bne.n	80407b2 <__aeabi_dmul+0x24a>
 804078a:	ea95 0f0c 	teq	r5, ip
 804078e:	d105      	bne.n	804079c <__aeabi_dmul+0x234>
 8040790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8040794:	bf1c      	itt	ne
 8040796:	4610      	movne	r0, r2
 8040798:	4619      	movne	r1, r3
 804079a:	d10a      	bne.n	80407b2 <__aeabi_dmul+0x24a>
 804079c:	ea81 0103 	eor.w	r1, r1, r3
 80407a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80407a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80407a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80407ac:	f04f 0000 	mov.w	r0, #0
 80407b0:	bd70      	pop	{r4, r5, r6, pc}
 80407b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80407b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80407ba:	bd70      	pop	{r4, r5, r6, pc}

080407bc <__aeabi_ddiv>:
 80407bc:	b570      	push	{r4, r5, r6, lr}
 80407be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80407c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80407c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80407ca:	bf1d      	ittte	ne
 80407cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80407d0:	ea94 0f0c 	teqne	r4, ip
 80407d4:	ea95 0f0c 	teqne	r5, ip
 80407d8:	f000 f8a7 	bleq	804092a <__aeabi_ddiv+0x16e>
 80407dc:	eba4 0405 	sub.w	r4, r4, r5
 80407e0:	ea81 0e03 	eor.w	lr, r1, r3
 80407e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80407e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80407ec:	f000 8088 	beq.w	8040900 <__aeabi_ddiv+0x144>
 80407f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80407f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80407f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80407fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8040800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8040804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8040808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 804080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8040810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8040814:	429d      	cmp	r5, r3
 8040816:	bf08      	it	eq
 8040818:	4296      	cmpeq	r6, r2
 804081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 804081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8040822:	d202      	bcs.n	804082a <__aeabi_ddiv+0x6e>
 8040824:	085b      	lsrs	r3, r3, #1
 8040826:	ea4f 0232 	mov.w	r2, r2, rrx
 804082a:	1ab6      	subs	r6, r6, r2
 804082c:	eb65 0503 	sbc.w	r5, r5, r3
 8040830:	085b      	lsrs	r3, r3, #1
 8040832:	ea4f 0232 	mov.w	r2, r2, rrx
 8040836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 804083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 804083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8040842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8040846:	bf22      	ittt	cs
 8040848:	1ab6      	subcs	r6, r6, r2
 804084a:	4675      	movcs	r5, lr
 804084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8040850:	085b      	lsrs	r3, r3, #1
 8040852:	ea4f 0232 	mov.w	r2, r2, rrx
 8040856:	ebb6 0e02 	subs.w	lr, r6, r2
 804085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 804085e:	bf22      	ittt	cs
 8040860:	1ab6      	subcs	r6, r6, r2
 8040862:	4675      	movcs	r5, lr
 8040864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8040868:	085b      	lsrs	r3, r3, #1
 804086a:	ea4f 0232 	mov.w	r2, r2, rrx
 804086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8040872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8040876:	bf22      	ittt	cs
 8040878:	1ab6      	subcs	r6, r6, r2
 804087a:	4675      	movcs	r5, lr
 804087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8040880:	085b      	lsrs	r3, r3, #1
 8040882:	ea4f 0232 	mov.w	r2, r2, rrx
 8040886:	ebb6 0e02 	subs.w	lr, r6, r2
 804088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 804088e:	bf22      	ittt	cs
 8040890:	1ab6      	subcs	r6, r6, r2
 8040892:	4675      	movcs	r5, lr
 8040894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8040898:	ea55 0e06 	orrs.w	lr, r5, r6
 804089c:	d018      	beq.n	80408d0 <__aeabi_ddiv+0x114>
 804089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80408a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80408a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80408aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80408ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80408b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80408b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80408ba:	d1c0      	bne.n	804083e <__aeabi_ddiv+0x82>
 80408bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80408c0:	d10b      	bne.n	80408da <__aeabi_ddiv+0x11e>
 80408c2:	ea41 0100 	orr.w	r1, r1, r0
 80408c6:	f04f 0000 	mov.w	r0, #0
 80408ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80408ce:	e7b6      	b.n	804083e <__aeabi_ddiv+0x82>
 80408d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80408d4:	bf04      	itt	eq
 80408d6:	4301      	orreq	r1, r0
 80408d8:	2000      	moveq	r0, #0
 80408da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80408de:	bf88      	it	hi
 80408e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80408e4:	f63f aeaf 	bhi.w	8040646 <__aeabi_dmul+0xde>
 80408e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80408ec:	bf04      	itt	eq
 80408ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80408f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80408f6:	f150 0000 	adcs.w	r0, r0, #0
 80408fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80408fe:	bd70      	pop	{r4, r5, r6, pc}
 8040900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8040904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8040908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 804090c:	bfc2      	ittt	gt
 804090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8040912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8040916:	bd70      	popgt	{r4, r5, r6, pc}
 8040918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 804091c:	f04f 0e00 	mov.w	lr, #0
 8040920:	3c01      	subs	r4, #1
 8040922:	e690      	b.n	8040646 <__aeabi_dmul+0xde>
 8040924:	ea45 0e06 	orr.w	lr, r5, r6
 8040928:	e68d      	b.n	8040646 <__aeabi_dmul+0xde>
 804092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 804092e:	ea94 0f0c 	teq	r4, ip
 8040932:	bf08      	it	eq
 8040934:	ea95 0f0c 	teqeq	r5, ip
 8040938:	f43f af3b 	beq.w	80407b2 <__aeabi_dmul+0x24a>
 804093c:	ea94 0f0c 	teq	r4, ip
 8040940:	d10a      	bne.n	8040958 <__aeabi_ddiv+0x19c>
 8040942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8040946:	f47f af34 	bne.w	80407b2 <__aeabi_dmul+0x24a>
 804094a:	ea95 0f0c 	teq	r5, ip
 804094e:	f47f af25 	bne.w	804079c <__aeabi_dmul+0x234>
 8040952:	4610      	mov	r0, r2
 8040954:	4619      	mov	r1, r3
 8040956:	e72c      	b.n	80407b2 <__aeabi_dmul+0x24a>
 8040958:	ea95 0f0c 	teq	r5, ip
 804095c:	d106      	bne.n	804096c <__aeabi_ddiv+0x1b0>
 804095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8040962:	f43f aefd 	beq.w	8040760 <__aeabi_dmul+0x1f8>
 8040966:	4610      	mov	r0, r2
 8040968:	4619      	mov	r1, r3
 804096a:	e722      	b.n	80407b2 <__aeabi_dmul+0x24a>
 804096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8040970:	bf18      	it	ne
 8040972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8040976:	f47f aec5 	bne.w	8040704 <__aeabi_dmul+0x19c>
 804097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 804097e:	f47f af0d 	bne.w	804079c <__aeabi_dmul+0x234>
 8040982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8040986:	f47f aeeb 	bne.w	8040760 <__aeabi_dmul+0x1f8>
 804098a:	e712      	b.n	80407b2 <__aeabi_dmul+0x24a>

0804098c <__gedf2>:
 804098c:	f04f 3cff 	mov.w	ip, #4294967295
 8040990:	e006      	b.n	80409a0 <__cmpdf2+0x4>
 8040992:	bf00      	nop

08040994 <__ledf2>:
 8040994:	f04f 0c01 	mov.w	ip, #1
 8040998:	e002      	b.n	80409a0 <__cmpdf2+0x4>
 804099a:	bf00      	nop

0804099c <__cmpdf2>:
 804099c:	f04f 0c01 	mov.w	ip, #1
 80409a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80409a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80409a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80409ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80409b0:	bf18      	it	ne
 80409b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80409b6:	d01b      	beq.n	80409f0 <__cmpdf2+0x54>
 80409b8:	b001      	add	sp, #4
 80409ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80409be:	bf0c      	ite	eq
 80409c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80409c4:	ea91 0f03 	teqne	r1, r3
 80409c8:	bf02      	ittt	eq
 80409ca:	ea90 0f02 	teqeq	r0, r2
 80409ce:	2000      	moveq	r0, #0
 80409d0:	4770      	bxeq	lr
 80409d2:	f110 0f00 	cmn.w	r0, #0
 80409d6:	ea91 0f03 	teq	r1, r3
 80409da:	bf58      	it	pl
 80409dc:	4299      	cmppl	r1, r3
 80409de:	bf08      	it	eq
 80409e0:	4290      	cmpeq	r0, r2
 80409e2:	bf2c      	ite	cs
 80409e4:	17d8      	asrcs	r0, r3, #31
 80409e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80409ea:	f040 0001 	orr.w	r0, r0, #1
 80409ee:	4770      	bx	lr
 80409f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80409f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80409f8:	d102      	bne.n	8040a00 <__cmpdf2+0x64>
 80409fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80409fe:	d107      	bne.n	8040a10 <__cmpdf2+0x74>
 8040a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8040a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040a08:	d1d6      	bne.n	80409b8 <__cmpdf2+0x1c>
 8040a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8040a0e:	d0d3      	beq.n	80409b8 <__cmpdf2+0x1c>
 8040a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8040a14:	4770      	bx	lr
 8040a16:	bf00      	nop

08040a18 <__aeabi_cdrcmple>:
 8040a18:	4684      	mov	ip, r0
 8040a1a:	4610      	mov	r0, r2
 8040a1c:	4662      	mov	r2, ip
 8040a1e:	468c      	mov	ip, r1
 8040a20:	4619      	mov	r1, r3
 8040a22:	4663      	mov	r3, ip
 8040a24:	e000      	b.n	8040a28 <__aeabi_cdcmpeq>
 8040a26:	bf00      	nop

08040a28 <__aeabi_cdcmpeq>:
 8040a28:	b501      	push	{r0, lr}
 8040a2a:	f7ff ffb7 	bl	804099c <__cmpdf2>
 8040a2e:	2800      	cmp	r0, #0
 8040a30:	bf48      	it	mi
 8040a32:	f110 0f00 	cmnmi.w	r0, #0
 8040a36:	bd01      	pop	{r0, pc}

08040a38 <__aeabi_dcmpeq>:
 8040a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040a3c:	f7ff fff4 	bl	8040a28 <__aeabi_cdcmpeq>
 8040a40:	bf0c      	ite	eq
 8040a42:	2001      	moveq	r0, #1
 8040a44:	2000      	movne	r0, #0
 8040a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8040a4a:	bf00      	nop

08040a4c <__aeabi_dcmplt>:
 8040a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040a50:	f7ff ffea 	bl	8040a28 <__aeabi_cdcmpeq>
 8040a54:	bf34      	ite	cc
 8040a56:	2001      	movcc	r0, #1
 8040a58:	2000      	movcs	r0, #0
 8040a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8040a5e:	bf00      	nop

08040a60 <__aeabi_dcmple>:
 8040a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040a64:	f7ff ffe0 	bl	8040a28 <__aeabi_cdcmpeq>
 8040a68:	bf94      	ite	ls
 8040a6a:	2001      	movls	r0, #1
 8040a6c:	2000      	movhi	r0, #0
 8040a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8040a72:	bf00      	nop

08040a74 <__aeabi_dcmpge>:
 8040a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040a78:	f7ff ffce 	bl	8040a18 <__aeabi_cdrcmple>
 8040a7c:	bf94      	ite	ls
 8040a7e:	2001      	movls	r0, #1
 8040a80:	2000      	movhi	r0, #0
 8040a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8040a86:	bf00      	nop

08040a88 <__aeabi_dcmpgt>:
 8040a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040a8c:	f7ff ffc4 	bl	8040a18 <__aeabi_cdrcmple>
 8040a90:	bf34      	ite	cc
 8040a92:	2001      	movcc	r0, #1
 8040a94:	2000      	movcs	r0, #0
 8040a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8040a9a:	bf00      	nop

08040a9c <__aeabi_dcmpun>:
 8040a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8040aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040aa4:	d102      	bne.n	8040aac <__aeabi_dcmpun+0x10>
 8040aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8040aaa:	d10a      	bne.n	8040ac2 <__aeabi_dcmpun+0x26>
 8040aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8040ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040ab4:	d102      	bne.n	8040abc <__aeabi_dcmpun+0x20>
 8040ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8040aba:	d102      	bne.n	8040ac2 <__aeabi_dcmpun+0x26>
 8040abc:	f04f 0000 	mov.w	r0, #0
 8040ac0:	4770      	bx	lr
 8040ac2:	f04f 0001 	mov.w	r0, #1
 8040ac6:	4770      	bx	lr

08040ac8 <__aeabi_d2iz>:
 8040ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8040acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8040ad0:	d215      	bcs.n	8040afe <__aeabi_d2iz+0x36>
 8040ad2:	d511      	bpl.n	8040af8 <__aeabi_d2iz+0x30>
 8040ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8040ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8040adc:	d912      	bls.n	8040b04 <__aeabi_d2iz+0x3c>
 8040ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8040ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8040ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8040aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8040aee:	fa23 f002 	lsr.w	r0, r3, r2
 8040af2:	bf18      	it	ne
 8040af4:	4240      	negne	r0, r0
 8040af6:	4770      	bx	lr
 8040af8:	f04f 0000 	mov.w	r0, #0
 8040afc:	4770      	bx	lr
 8040afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8040b02:	d105      	bne.n	8040b10 <__aeabi_d2iz+0x48>
 8040b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8040b08:	bf08      	it	eq
 8040b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8040b0e:	4770      	bx	lr
 8040b10:	f04f 0000 	mov.w	r0, #0
 8040b14:	4770      	bx	lr
 8040b16:	bf00      	nop

08040b18 <__aeabi_d2f>:
 8040b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8040b1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8040b20:	bf24      	itt	cs
 8040b22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8040b26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8040b2a:	d90d      	bls.n	8040b48 <__aeabi_d2f+0x30>
 8040b2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8040b30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8040b34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8040b38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8040b3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8040b40:	bf08      	it	eq
 8040b42:	f020 0001 	biceq.w	r0, r0, #1
 8040b46:	4770      	bx	lr
 8040b48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8040b4c:	d121      	bne.n	8040b92 <__aeabi_d2f+0x7a>
 8040b4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8040b52:	bfbc      	itt	lt
 8040b54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8040b58:	4770      	bxlt	lr
 8040b5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8040b5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8040b62:	f1c2 0218 	rsb	r2, r2, #24
 8040b66:	f1c2 0c20 	rsb	ip, r2, #32
 8040b6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8040b6e:	fa20 f002 	lsr.w	r0, r0, r2
 8040b72:	bf18      	it	ne
 8040b74:	f040 0001 	orrne.w	r0, r0, #1
 8040b78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8040b7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8040b80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8040b84:	ea40 000c 	orr.w	r0, r0, ip
 8040b88:	fa23 f302 	lsr.w	r3, r3, r2
 8040b8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8040b90:	e7cc      	b.n	8040b2c <__aeabi_d2f+0x14>
 8040b92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8040b96:	d107      	bne.n	8040ba8 <__aeabi_d2f+0x90>
 8040b98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8040b9c:	bf1e      	ittt	ne
 8040b9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8040ba2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8040ba6:	4770      	bxne	lr
 8040ba8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8040bac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8040bb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8040bb4:	4770      	bx	lr
 8040bb6:	bf00      	nop

08040bb8 <__aeabi_uldivmod>:
 8040bb8:	b953      	cbnz	r3, 8040bd0 <__aeabi_uldivmod+0x18>
 8040bba:	b94a      	cbnz	r2, 8040bd0 <__aeabi_uldivmod+0x18>
 8040bbc:	2900      	cmp	r1, #0
 8040bbe:	bf08      	it	eq
 8040bc0:	2800      	cmpeq	r0, #0
 8040bc2:	bf1c      	itt	ne
 8040bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8040bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8040bcc:	f000 b974 	b.w	8040eb8 <__aeabi_idiv0>
 8040bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8040bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8040bd8:	f000 f806 	bl	8040be8 <__udivmoddi4>
 8040bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8040be4:	b004      	add	sp, #16
 8040be6:	4770      	bx	lr

08040be8 <__udivmoddi4>:
 8040be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8040bec:	9d08      	ldr	r5, [sp, #32]
 8040bee:	4604      	mov	r4, r0
 8040bf0:	468e      	mov	lr, r1
 8040bf2:	2b00      	cmp	r3, #0
 8040bf4:	d14d      	bne.n	8040c92 <__udivmoddi4+0xaa>
 8040bf6:	428a      	cmp	r2, r1
 8040bf8:	4694      	mov	ip, r2
 8040bfa:	d969      	bls.n	8040cd0 <__udivmoddi4+0xe8>
 8040bfc:	fab2 f282 	clz	r2, r2
 8040c00:	b152      	cbz	r2, 8040c18 <__udivmoddi4+0x30>
 8040c02:	fa01 f302 	lsl.w	r3, r1, r2
 8040c06:	f1c2 0120 	rsb	r1, r2, #32
 8040c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8040c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8040c12:	ea41 0e03 	orr.w	lr, r1, r3
 8040c16:	4094      	lsls	r4, r2
 8040c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8040c1c:	0c21      	lsrs	r1, r4, #16
 8040c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8040c22:	fa1f f78c 	uxth.w	r7, ip
 8040c26:	fb08 e316 	mls	r3, r8, r6, lr
 8040c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8040c2e:	fb06 f107 	mul.w	r1, r6, r7
 8040c32:	4299      	cmp	r1, r3
 8040c34:	d90a      	bls.n	8040c4c <__udivmoddi4+0x64>
 8040c36:	eb1c 0303 	adds.w	r3, ip, r3
 8040c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8040c3e:	f080 811f 	bcs.w	8040e80 <__udivmoddi4+0x298>
 8040c42:	4299      	cmp	r1, r3
 8040c44:	f240 811c 	bls.w	8040e80 <__udivmoddi4+0x298>
 8040c48:	3e02      	subs	r6, #2
 8040c4a:	4463      	add	r3, ip
 8040c4c:	1a5b      	subs	r3, r3, r1
 8040c4e:	b2a4      	uxth	r4, r4
 8040c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8040c54:	fb08 3310 	mls	r3, r8, r0, r3
 8040c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8040c5c:	fb00 f707 	mul.w	r7, r0, r7
 8040c60:	42a7      	cmp	r7, r4
 8040c62:	d90a      	bls.n	8040c7a <__udivmoddi4+0x92>
 8040c64:	eb1c 0404 	adds.w	r4, ip, r4
 8040c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8040c6c:	f080 810a 	bcs.w	8040e84 <__udivmoddi4+0x29c>
 8040c70:	42a7      	cmp	r7, r4
 8040c72:	f240 8107 	bls.w	8040e84 <__udivmoddi4+0x29c>
 8040c76:	4464      	add	r4, ip
 8040c78:	3802      	subs	r0, #2
 8040c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8040c7e:	1be4      	subs	r4, r4, r7
 8040c80:	2600      	movs	r6, #0
 8040c82:	b11d      	cbz	r5, 8040c8c <__udivmoddi4+0xa4>
 8040c84:	40d4      	lsrs	r4, r2
 8040c86:	2300      	movs	r3, #0
 8040c88:	e9c5 4300 	strd	r4, r3, [r5]
 8040c8c:	4631      	mov	r1, r6
 8040c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040c92:	428b      	cmp	r3, r1
 8040c94:	d909      	bls.n	8040caa <__udivmoddi4+0xc2>
 8040c96:	2d00      	cmp	r5, #0
 8040c98:	f000 80ef 	beq.w	8040e7a <__udivmoddi4+0x292>
 8040c9c:	2600      	movs	r6, #0
 8040c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8040ca2:	4630      	mov	r0, r6
 8040ca4:	4631      	mov	r1, r6
 8040ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040caa:	fab3 f683 	clz	r6, r3
 8040cae:	2e00      	cmp	r6, #0
 8040cb0:	d14a      	bne.n	8040d48 <__udivmoddi4+0x160>
 8040cb2:	428b      	cmp	r3, r1
 8040cb4:	d302      	bcc.n	8040cbc <__udivmoddi4+0xd4>
 8040cb6:	4282      	cmp	r2, r0
 8040cb8:	f200 80f9 	bhi.w	8040eae <__udivmoddi4+0x2c6>
 8040cbc:	1a84      	subs	r4, r0, r2
 8040cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8040cc2:	2001      	movs	r0, #1
 8040cc4:	469e      	mov	lr, r3
 8040cc6:	2d00      	cmp	r5, #0
 8040cc8:	d0e0      	beq.n	8040c8c <__udivmoddi4+0xa4>
 8040cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8040cce:	e7dd      	b.n	8040c8c <__udivmoddi4+0xa4>
 8040cd0:	b902      	cbnz	r2, 8040cd4 <__udivmoddi4+0xec>
 8040cd2:	deff      	udf	#255	; 0xff
 8040cd4:	fab2 f282 	clz	r2, r2
 8040cd8:	2a00      	cmp	r2, #0
 8040cda:	f040 8092 	bne.w	8040e02 <__udivmoddi4+0x21a>
 8040cde:	eba1 010c 	sub.w	r1, r1, ip
 8040ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8040ce6:	fa1f fe8c 	uxth.w	lr, ip
 8040cea:	2601      	movs	r6, #1
 8040cec:	0c20      	lsrs	r0, r4, #16
 8040cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8040cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8040cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8040cfa:	fb0e f003 	mul.w	r0, lr, r3
 8040cfe:	4288      	cmp	r0, r1
 8040d00:	d908      	bls.n	8040d14 <__udivmoddi4+0x12c>
 8040d02:	eb1c 0101 	adds.w	r1, ip, r1
 8040d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8040d0a:	d202      	bcs.n	8040d12 <__udivmoddi4+0x12a>
 8040d0c:	4288      	cmp	r0, r1
 8040d0e:	f200 80cb 	bhi.w	8040ea8 <__udivmoddi4+0x2c0>
 8040d12:	4643      	mov	r3, r8
 8040d14:	1a09      	subs	r1, r1, r0
 8040d16:	b2a4      	uxth	r4, r4
 8040d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8040d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8040d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8040d24:	fb0e fe00 	mul.w	lr, lr, r0
 8040d28:	45a6      	cmp	lr, r4
 8040d2a:	d908      	bls.n	8040d3e <__udivmoddi4+0x156>
 8040d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8040d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8040d34:	d202      	bcs.n	8040d3c <__udivmoddi4+0x154>
 8040d36:	45a6      	cmp	lr, r4
 8040d38:	f200 80bb 	bhi.w	8040eb2 <__udivmoddi4+0x2ca>
 8040d3c:	4608      	mov	r0, r1
 8040d3e:	eba4 040e 	sub.w	r4, r4, lr
 8040d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8040d46:	e79c      	b.n	8040c82 <__udivmoddi4+0x9a>
 8040d48:	f1c6 0720 	rsb	r7, r6, #32
 8040d4c:	40b3      	lsls	r3, r6
 8040d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8040d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8040d56:	fa20 f407 	lsr.w	r4, r0, r7
 8040d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8040d5e:	431c      	orrs	r4, r3
 8040d60:	40f9      	lsrs	r1, r7
 8040d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8040d66:	fa00 f306 	lsl.w	r3, r0, r6
 8040d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8040d6e:	0c20      	lsrs	r0, r4, #16
 8040d70:	fa1f fe8c 	uxth.w	lr, ip
 8040d74:	fb09 1118 	mls	r1, r9, r8, r1
 8040d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8040d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8040d80:	4288      	cmp	r0, r1
 8040d82:	fa02 f206 	lsl.w	r2, r2, r6
 8040d86:	d90b      	bls.n	8040da0 <__udivmoddi4+0x1b8>
 8040d88:	eb1c 0101 	adds.w	r1, ip, r1
 8040d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8040d90:	f080 8088 	bcs.w	8040ea4 <__udivmoddi4+0x2bc>
 8040d94:	4288      	cmp	r0, r1
 8040d96:	f240 8085 	bls.w	8040ea4 <__udivmoddi4+0x2bc>
 8040d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8040d9e:	4461      	add	r1, ip
 8040da0:	1a09      	subs	r1, r1, r0
 8040da2:	b2a4      	uxth	r4, r4
 8040da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8040da8:	fb09 1110 	mls	r1, r9, r0, r1
 8040dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8040db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8040db4:	458e      	cmp	lr, r1
 8040db6:	d908      	bls.n	8040dca <__udivmoddi4+0x1e2>
 8040db8:	eb1c 0101 	adds.w	r1, ip, r1
 8040dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8040dc0:	d26c      	bcs.n	8040e9c <__udivmoddi4+0x2b4>
 8040dc2:	458e      	cmp	lr, r1
 8040dc4:	d96a      	bls.n	8040e9c <__udivmoddi4+0x2b4>
 8040dc6:	3802      	subs	r0, #2
 8040dc8:	4461      	add	r1, ip
 8040dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8040dce:	fba0 9402 	umull	r9, r4, r0, r2
 8040dd2:	eba1 010e 	sub.w	r1, r1, lr
 8040dd6:	42a1      	cmp	r1, r4
 8040dd8:	46c8      	mov	r8, r9
 8040dda:	46a6      	mov	lr, r4
 8040ddc:	d356      	bcc.n	8040e8c <__udivmoddi4+0x2a4>
 8040dde:	d053      	beq.n	8040e88 <__udivmoddi4+0x2a0>
 8040de0:	b15d      	cbz	r5, 8040dfa <__udivmoddi4+0x212>
 8040de2:	ebb3 0208 	subs.w	r2, r3, r8
 8040de6:	eb61 010e 	sbc.w	r1, r1, lr
 8040dea:	fa01 f707 	lsl.w	r7, r1, r7
 8040dee:	fa22 f306 	lsr.w	r3, r2, r6
 8040df2:	40f1      	lsrs	r1, r6
 8040df4:	431f      	orrs	r7, r3
 8040df6:	e9c5 7100 	strd	r7, r1, [r5]
 8040dfa:	2600      	movs	r6, #0
 8040dfc:	4631      	mov	r1, r6
 8040dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040e02:	f1c2 0320 	rsb	r3, r2, #32
 8040e06:	40d8      	lsrs	r0, r3
 8040e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8040e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8040e10:	4091      	lsls	r1, r2
 8040e12:	4301      	orrs	r1, r0
 8040e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8040e18:	fa1f fe8c 	uxth.w	lr, ip
 8040e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8040e20:	fb07 3610 	mls	r6, r7, r0, r3
 8040e24:	0c0b      	lsrs	r3, r1, #16
 8040e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8040e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8040e2e:	429e      	cmp	r6, r3
 8040e30:	fa04 f402 	lsl.w	r4, r4, r2
 8040e34:	d908      	bls.n	8040e48 <__udivmoddi4+0x260>
 8040e36:	eb1c 0303 	adds.w	r3, ip, r3
 8040e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8040e3e:	d22f      	bcs.n	8040ea0 <__udivmoddi4+0x2b8>
 8040e40:	429e      	cmp	r6, r3
 8040e42:	d92d      	bls.n	8040ea0 <__udivmoddi4+0x2b8>
 8040e44:	3802      	subs	r0, #2
 8040e46:	4463      	add	r3, ip
 8040e48:	1b9b      	subs	r3, r3, r6
 8040e4a:	b289      	uxth	r1, r1
 8040e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8040e50:	fb07 3316 	mls	r3, r7, r6, r3
 8040e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8040e58:	fb06 f30e 	mul.w	r3, r6, lr
 8040e5c:	428b      	cmp	r3, r1
 8040e5e:	d908      	bls.n	8040e72 <__udivmoddi4+0x28a>
 8040e60:	eb1c 0101 	adds.w	r1, ip, r1
 8040e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8040e68:	d216      	bcs.n	8040e98 <__udivmoddi4+0x2b0>
 8040e6a:	428b      	cmp	r3, r1
 8040e6c:	d914      	bls.n	8040e98 <__udivmoddi4+0x2b0>
 8040e6e:	3e02      	subs	r6, #2
 8040e70:	4461      	add	r1, ip
 8040e72:	1ac9      	subs	r1, r1, r3
 8040e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8040e78:	e738      	b.n	8040cec <__udivmoddi4+0x104>
 8040e7a:	462e      	mov	r6, r5
 8040e7c:	4628      	mov	r0, r5
 8040e7e:	e705      	b.n	8040c8c <__udivmoddi4+0xa4>
 8040e80:	4606      	mov	r6, r0
 8040e82:	e6e3      	b.n	8040c4c <__udivmoddi4+0x64>
 8040e84:	4618      	mov	r0, r3
 8040e86:	e6f8      	b.n	8040c7a <__udivmoddi4+0x92>
 8040e88:	454b      	cmp	r3, r9
 8040e8a:	d2a9      	bcs.n	8040de0 <__udivmoddi4+0x1f8>
 8040e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8040e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8040e94:	3801      	subs	r0, #1
 8040e96:	e7a3      	b.n	8040de0 <__udivmoddi4+0x1f8>
 8040e98:	4646      	mov	r6, r8
 8040e9a:	e7ea      	b.n	8040e72 <__udivmoddi4+0x28a>
 8040e9c:	4620      	mov	r0, r4
 8040e9e:	e794      	b.n	8040dca <__udivmoddi4+0x1e2>
 8040ea0:	4640      	mov	r0, r8
 8040ea2:	e7d1      	b.n	8040e48 <__udivmoddi4+0x260>
 8040ea4:	46d0      	mov	r8, sl
 8040ea6:	e77b      	b.n	8040da0 <__udivmoddi4+0x1b8>
 8040ea8:	3b02      	subs	r3, #2
 8040eaa:	4461      	add	r1, ip
 8040eac:	e732      	b.n	8040d14 <__udivmoddi4+0x12c>
 8040eae:	4630      	mov	r0, r6
 8040eb0:	e709      	b.n	8040cc6 <__udivmoddi4+0xde>
 8040eb2:	4464      	add	r4, ip
 8040eb4:	3802      	subs	r0, #2
 8040eb6:	e742      	b.n	8040d3e <__udivmoddi4+0x156>

08040eb8 <__aeabi_idiv0>:
 8040eb8:	4770      	bx	lr
 8040eba:	bf00      	nop

08040ebc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8040ebc:	b580      	push	{r7, lr}
 8040ebe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8040ec0:	4b0e      	ldr	r3, [pc, #56]	; (8040efc <HAL_Init+0x40>)
 8040ec2:	681b      	ldr	r3, [r3, #0]
 8040ec4:	4a0d      	ldr	r2, [pc, #52]	; (8040efc <HAL_Init+0x40>)
 8040ec6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8040eca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8040ecc:	4b0b      	ldr	r3, [pc, #44]	; (8040efc <HAL_Init+0x40>)
 8040ece:	681b      	ldr	r3, [r3, #0]
 8040ed0:	4a0a      	ldr	r2, [pc, #40]	; (8040efc <HAL_Init+0x40>)
 8040ed2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8040ed6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8040ed8:	4b08      	ldr	r3, [pc, #32]	; (8040efc <HAL_Init+0x40>)
 8040eda:	681b      	ldr	r3, [r3, #0]
 8040edc:	4a07      	ldr	r2, [pc, #28]	; (8040efc <HAL_Init+0x40>)
 8040ede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8040ee2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8040ee4:	2003      	movs	r0, #3
 8040ee6:	f000 f94f 	bl	8041188 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8040eea:	2000      	movs	r0, #0
 8040eec:	f000 f808 	bl	8040f00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8040ef0:	f005 fc24 	bl	804673c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8040ef4:	2300      	movs	r3, #0
}
 8040ef6:	4618      	mov	r0, r3
 8040ef8:	bd80      	pop	{r7, pc}
 8040efa:	bf00      	nop
 8040efc:	40023c00 	.word	0x40023c00

08040f00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8040f00:	b580      	push	{r7, lr}
 8040f02:	b082      	sub	sp, #8
 8040f04:	af00      	add	r7, sp, #0
 8040f06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8040f08:	4b12      	ldr	r3, [pc, #72]	; (8040f54 <HAL_InitTick+0x54>)
 8040f0a:	681a      	ldr	r2, [r3, #0]
 8040f0c:	4b12      	ldr	r3, [pc, #72]	; (8040f58 <HAL_InitTick+0x58>)
 8040f0e:	781b      	ldrb	r3, [r3, #0]
 8040f10:	4619      	mov	r1, r3
 8040f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8040f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8040f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8040f1e:	4618      	mov	r0, r3
 8040f20:	f000 f967 	bl	80411f2 <HAL_SYSTICK_Config>
 8040f24:	4603      	mov	r3, r0
 8040f26:	2b00      	cmp	r3, #0
 8040f28:	d001      	beq.n	8040f2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8040f2a:	2301      	movs	r3, #1
 8040f2c:	e00e      	b.n	8040f4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8040f2e:	687b      	ldr	r3, [r7, #4]
 8040f30:	2b0f      	cmp	r3, #15
 8040f32:	d80a      	bhi.n	8040f4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8040f34:	2200      	movs	r2, #0
 8040f36:	6879      	ldr	r1, [r7, #4]
 8040f38:	f04f 30ff 	mov.w	r0, #4294967295
 8040f3c:	f000 f92f 	bl	804119e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8040f40:	4a06      	ldr	r2, [pc, #24]	; (8040f5c <HAL_InitTick+0x5c>)
 8040f42:	687b      	ldr	r3, [r7, #4]
 8040f44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8040f46:	2300      	movs	r3, #0
 8040f48:	e000      	b.n	8040f4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8040f4a:	2301      	movs	r3, #1
}
 8040f4c:	4618      	mov	r0, r3
 8040f4e:	3708      	adds	r7, #8
 8040f50:	46bd      	mov	sp, r7
 8040f52:	bd80      	pop	{r7, pc}
 8040f54:	20000014 	.word	0x20000014
 8040f58:	20000004 	.word	0x20000004
 8040f5c:	20000000 	.word	0x20000000

08040f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8040f60:	b480      	push	{r7}
 8040f62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8040f64:	4b06      	ldr	r3, [pc, #24]	; (8040f80 <HAL_IncTick+0x20>)
 8040f66:	781b      	ldrb	r3, [r3, #0]
 8040f68:	461a      	mov	r2, r3
 8040f6a:	4b06      	ldr	r3, [pc, #24]	; (8040f84 <HAL_IncTick+0x24>)
 8040f6c:	681b      	ldr	r3, [r3, #0]
 8040f6e:	4413      	add	r3, r2
 8040f70:	4a04      	ldr	r2, [pc, #16]	; (8040f84 <HAL_IncTick+0x24>)
 8040f72:	6013      	str	r3, [r2, #0]
}
 8040f74:	bf00      	nop
 8040f76:	46bd      	mov	sp, r7
 8040f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040f7c:	4770      	bx	lr
 8040f7e:	bf00      	nop
 8040f80:	20000004 	.word	0x20000004
 8040f84:	200000c0 	.word	0x200000c0

08040f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8040f88:	b480      	push	{r7}
 8040f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8040f8c:	4b03      	ldr	r3, [pc, #12]	; (8040f9c <HAL_GetTick+0x14>)
 8040f8e:	681b      	ldr	r3, [r3, #0]
}
 8040f90:	4618      	mov	r0, r3
 8040f92:	46bd      	mov	sp, r7
 8040f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040f98:	4770      	bx	lr
 8040f9a:	bf00      	nop
 8040f9c:	200000c0 	.word	0x200000c0

08040fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8040fa0:	b580      	push	{r7, lr}
 8040fa2:	b084      	sub	sp, #16
 8040fa4:	af00      	add	r7, sp, #0
 8040fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8040fa8:	f7ff ffee 	bl	8040f88 <HAL_GetTick>
 8040fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8040fae:	687b      	ldr	r3, [r7, #4]
 8040fb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8040fb2:	68fb      	ldr	r3, [r7, #12]
 8040fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8040fb8:	d005      	beq.n	8040fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8040fba:	4b0a      	ldr	r3, [pc, #40]	; (8040fe4 <HAL_Delay+0x44>)
 8040fbc:	781b      	ldrb	r3, [r3, #0]
 8040fbe:	461a      	mov	r2, r3
 8040fc0:	68fb      	ldr	r3, [r7, #12]
 8040fc2:	4413      	add	r3, r2
 8040fc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8040fc6:	bf00      	nop
 8040fc8:	f7ff ffde 	bl	8040f88 <HAL_GetTick>
 8040fcc:	4602      	mov	r2, r0
 8040fce:	68bb      	ldr	r3, [r7, #8]
 8040fd0:	1ad3      	subs	r3, r2, r3
 8040fd2:	68fa      	ldr	r2, [r7, #12]
 8040fd4:	429a      	cmp	r2, r3
 8040fd6:	d8f7      	bhi.n	8040fc8 <HAL_Delay+0x28>
  {
  }
}
 8040fd8:	bf00      	nop
 8040fda:	bf00      	nop
 8040fdc:	3710      	adds	r7, #16
 8040fde:	46bd      	mov	sp, r7
 8040fe0:	bd80      	pop	{r7, pc}
 8040fe2:	bf00      	nop
 8040fe4:	20000004 	.word	0x20000004

08040fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040fe8:	b480      	push	{r7}
 8040fea:	b085      	sub	sp, #20
 8040fec:	af00      	add	r7, sp, #0
 8040fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8040ff0:	687b      	ldr	r3, [r7, #4]
 8040ff2:	f003 0307 	and.w	r3, r3, #7
 8040ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8040ff8:	4b0c      	ldr	r3, [pc, #48]	; (804102c <__NVIC_SetPriorityGrouping+0x44>)
 8040ffa:	68db      	ldr	r3, [r3, #12]
 8040ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8040ffe:	68ba      	ldr	r2, [r7, #8]
 8041000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8041004:	4013      	ands	r3, r2
 8041006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8041008:	68fb      	ldr	r3, [r7, #12]
 804100a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 804100c:	68bb      	ldr	r3, [r7, #8]
 804100e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8041010:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8041014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8041018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 804101a:	4a04      	ldr	r2, [pc, #16]	; (804102c <__NVIC_SetPriorityGrouping+0x44>)
 804101c:	68bb      	ldr	r3, [r7, #8]
 804101e:	60d3      	str	r3, [r2, #12]
}
 8041020:	bf00      	nop
 8041022:	3714      	adds	r7, #20
 8041024:	46bd      	mov	sp, r7
 8041026:	f85d 7b04 	ldr.w	r7, [sp], #4
 804102a:	4770      	bx	lr
 804102c:	e000ed00 	.word	0xe000ed00

08041030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8041030:	b480      	push	{r7}
 8041032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8041034:	4b04      	ldr	r3, [pc, #16]	; (8041048 <__NVIC_GetPriorityGrouping+0x18>)
 8041036:	68db      	ldr	r3, [r3, #12]
 8041038:	0a1b      	lsrs	r3, r3, #8
 804103a:	f003 0307 	and.w	r3, r3, #7
}
 804103e:	4618      	mov	r0, r3
 8041040:	46bd      	mov	sp, r7
 8041042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041046:	4770      	bx	lr
 8041048:	e000ed00 	.word	0xe000ed00

0804104c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 804104c:	b480      	push	{r7}
 804104e:	b083      	sub	sp, #12
 8041050:	af00      	add	r7, sp, #0
 8041052:	4603      	mov	r3, r0
 8041054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8041056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 804105a:	2b00      	cmp	r3, #0
 804105c:	db0b      	blt.n	8041076 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 804105e:	79fb      	ldrb	r3, [r7, #7]
 8041060:	f003 021f 	and.w	r2, r3, #31
 8041064:	4907      	ldr	r1, [pc, #28]	; (8041084 <__NVIC_EnableIRQ+0x38>)
 8041066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 804106a:	095b      	lsrs	r3, r3, #5
 804106c:	2001      	movs	r0, #1
 804106e:	fa00 f202 	lsl.w	r2, r0, r2
 8041072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8041076:	bf00      	nop
 8041078:	370c      	adds	r7, #12
 804107a:	46bd      	mov	sp, r7
 804107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041080:	4770      	bx	lr
 8041082:	bf00      	nop
 8041084:	e000e100 	.word	0xe000e100

08041088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8041088:	b480      	push	{r7}
 804108a:	b083      	sub	sp, #12
 804108c:	af00      	add	r7, sp, #0
 804108e:	4603      	mov	r3, r0
 8041090:	6039      	str	r1, [r7, #0]
 8041092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8041094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8041098:	2b00      	cmp	r3, #0
 804109a:	db0a      	blt.n	80410b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 804109c:	683b      	ldr	r3, [r7, #0]
 804109e:	b2da      	uxtb	r2, r3
 80410a0:	490c      	ldr	r1, [pc, #48]	; (80410d4 <__NVIC_SetPriority+0x4c>)
 80410a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80410a6:	0112      	lsls	r2, r2, #4
 80410a8:	b2d2      	uxtb	r2, r2
 80410aa:	440b      	add	r3, r1
 80410ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80410b0:	e00a      	b.n	80410c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80410b2:	683b      	ldr	r3, [r7, #0]
 80410b4:	b2da      	uxtb	r2, r3
 80410b6:	4908      	ldr	r1, [pc, #32]	; (80410d8 <__NVIC_SetPriority+0x50>)
 80410b8:	79fb      	ldrb	r3, [r7, #7]
 80410ba:	f003 030f 	and.w	r3, r3, #15
 80410be:	3b04      	subs	r3, #4
 80410c0:	0112      	lsls	r2, r2, #4
 80410c2:	b2d2      	uxtb	r2, r2
 80410c4:	440b      	add	r3, r1
 80410c6:	761a      	strb	r2, [r3, #24]
}
 80410c8:	bf00      	nop
 80410ca:	370c      	adds	r7, #12
 80410cc:	46bd      	mov	sp, r7
 80410ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80410d2:	4770      	bx	lr
 80410d4:	e000e100 	.word	0xe000e100
 80410d8:	e000ed00 	.word	0xe000ed00

080410dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80410dc:	b480      	push	{r7}
 80410de:	b089      	sub	sp, #36	; 0x24
 80410e0:	af00      	add	r7, sp, #0
 80410e2:	60f8      	str	r0, [r7, #12]
 80410e4:	60b9      	str	r1, [r7, #8]
 80410e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80410e8:	68fb      	ldr	r3, [r7, #12]
 80410ea:	f003 0307 	and.w	r3, r3, #7
 80410ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80410f0:	69fb      	ldr	r3, [r7, #28]
 80410f2:	f1c3 0307 	rsb	r3, r3, #7
 80410f6:	2b04      	cmp	r3, #4
 80410f8:	bf28      	it	cs
 80410fa:	2304      	movcs	r3, #4
 80410fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80410fe:	69fb      	ldr	r3, [r7, #28]
 8041100:	3304      	adds	r3, #4
 8041102:	2b06      	cmp	r3, #6
 8041104:	d902      	bls.n	804110c <NVIC_EncodePriority+0x30>
 8041106:	69fb      	ldr	r3, [r7, #28]
 8041108:	3b03      	subs	r3, #3
 804110a:	e000      	b.n	804110e <NVIC_EncodePriority+0x32>
 804110c:	2300      	movs	r3, #0
 804110e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8041110:	f04f 32ff 	mov.w	r2, #4294967295
 8041114:	69bb      	ldr	r3, [r7, #24]
 8041116:	fa02 f303 	lsl.w	r3, r2, r3
 804111a:	43da      	mvns	r2, r3
 804111c:	68bb      	ldr	r3, [r7, #8]
 804111e:	401a      	ands	r2, r3
 8041120:	697b      	ldr	r3, [r7, #20]
 8041122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8041124:	f04f 31ff 	mov.w	r1, #4294967295
 8041128:	697b      	ldr	r3, [r7, #20]
 804112a:	fa01 f303 	lsl.w	r3, r1, r3
 804112e:	43d9      	mvns	r1, r3
 8041130:	687b      	ldr	r3, [r7, #4]
 8041132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8041134:	4313      	orrs	r3, r2
         );
}
 8041136:	4618      	mov	r0, r3
 8041138:	3724      	adds	r7, #36	; 0x24
 804113a:	46bd      	mov	sp, r7
 804113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041140:	4770      	bx	lr
	...

08041144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8041144:	b580      	push	{r7, lr}
 8041146:	b082      	sub	sp, #8
 8041148:	af00      	add	r7, sp, #0
 804114a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 804114c:	687b      	ldr	r3, [r7, #4]
 804114e:	3b01      	subs	r3, #1
 8041150:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8041154:	d301      	bcc.n	804115a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8041156:	2301      	movs	r3, #1
 8041158:	e00f      	b.n	804117a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 804115a:	4a0a      	ldr	r2, [pc, #40]	; (8041184 <SysTick_Config+0x40>)
 804115c:	687b      	ldr	r3, [r7, #4]
 804115e:	3b01      	subs	r3, #1
 8041160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8041162:	210f      	movs	r1, #15
 8041164:	f04f 30ff 	mov.w	r0, #4294967295
 8041168:	f7ff ff8e 	bl	8041088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 804116c:	4b05      	ldr	r3, [pc, #20]	; (8041184 <SysTick_Config+0x40>)
 804116e:	2200      	movs	r2, #0
 8041170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8041172:	4b04      	ldr	r3, [pc, #16]	; (8041184 <SysTick_Config+0x40>)
 8041174:	2207      	movs	r2, #7
 8041176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8041178:	2300      	movs	r3, #0
}
 804117a:	4618      	mov	r0, r3
 804117c:	3708      	adds	r7, #8
 804117e:	46bd      	mov	sp, r7
 8041180:	bd80      	pop	{r7, pc}
 8041182:	bf00      	nop
 8041184:	e000e010 	.word	0xe000e010

08041188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8041188:	b580      	push	{r7, lr}
 804118a:	b082      	sub	sp, #8
 804118c:	af00      	add	r7, sp, #0
 804118e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8041190:	6878      	ldr	r0, [r7, #4]
 8041192:	f7ff ff29 	bl	8040fe8 <__NVIC_SetPriorityGrouping>
}
 8041196:	bf00      	nop
 8041198:	3708      	adds	r7, #8
 804119a:	46bd      	mov	sp, r7
 804119c:	bd80      	pop	{r7, pc}

0804119e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 804119e:	b580      	push	{r7, lr}
 80411a0:	b086      	sub	sp, #24
 80411a2:	af00      	add	r7, sp, #0
 80411a4:	4603      	mov	r3, r0
 80411a6:	60b9      	str	r1, [r7, #8]
 80411a8:	607a      	str	r2, [r7, #4]
 80411aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80411ac:	2300      	movs	r3, #0
 80411ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80411b0:	f7ff ff3e 	bl	8041030 <__NVIC_GetPriorityGrouping>
 80411b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80411b6:	687a      	ldr	r2, [r7, #4]
 80411b8:	68b9      	ldr	r1, [r7, #8]
 80411ba:	6978      	ldr	r0, [r7, #20]
 80411bc:	f7ff ff8e 	bl	80410dc <NVIC_EncodePriority>
 80411c0:	4602      	mov	r2, r0
 80411c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80411c6:	4611      	mov	r1, r2
 80411c8:	4618      	mov	r0, r3
 80411ca:	f7ff ff5d 	bl	8041088 <__NVIC_SetPriority>
}
 80411ce:	bf00      	nop
 80411d0:	3718      	adds	r7, #24
 80411d2:	46bd      	mov	sp, r7
 80411d4:	bd80      	pop	{r7, pc}

080411d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80411d6:	b580      	push	{r7, lr}
 80411d8:	b082      	sub	sp, #8
 80411da:	af00      	add	r7, sp, #0
 80411dc:	4603      	mov	r3, r0
 80411de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80411e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80411e4:	4618      	mov	r0, r3
 80411e6:	f7ff ff31 	bl	804104c <__NVIC_EnableIRQ>
}
 80411ea:	bf00      	nop
 80411ec:	3708      	adds	r7, #8
 80411ee:	46bd      	mov	sp, r7
 80411f0:	bd80      	pop	{r7, pc}

080411f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80411f2:	b580      	push	{r7, lr}
 80411f4:	b082      	sub	sp, #8
 80411f6:	af00      	add	r7, sp, #0
 80411f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80411fa:	6878      	ldr	r0, [r7, #4]
 80411fc:	f7ff ffa2 	bl	8041144 <SysTick_Config>
 8041200:	4603      	mov	r3, r0
}
 8041202:	4618      	mov	r0, r3
 8041204:	3708      	adds	r7, #8
 8041206:	46bd      	mov	sp, r7
 8041208:	bd80      	pop	{r7, pc}
	...

0804120c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 804120c:	b580      	push	{r7, lr}
 804120e:	b086      	sub	sp, #24
 8041210:	af00      	add	r7, sp, #0
 8041212:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8041214:	2300      	movs	r3, #0
 8041216:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8041218:	f7ff feb6 	bl	8040f88 <HAL_GetTick>
 804121c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 804121e:	687b      	ldr	r3, [r7, #4]
 8041220:	2b00      	cmp	r3, #0
 8041222:	d101      	bne.n	8041228 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8041224:	2301      	movs	r3, #1
 8041226:	e099      	b.n	804135c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8041228:	687b      	ldr	r3, [r7, #4]
 804122a:	2200      	movs	r2, #0
 804122c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8041230:	687b      	ldr	r3, [r7, #4]
 8041232:	2202      	movs	r2, #2
 8041234:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8041238:	687b      	ldr	r3, [r7, #4]
 804123a:	681b      	ldr	r3, [r3, #0]
 804123c:	681a      	ldr	r2, [r3, #0]
 804123e:	687b      	ldr	r3, [r7, #4]
 8041240:	681b      	ldr	r3, [r3, #0]
 8041242:	f022 0201 	bic.w	r2, r2, #1
 8041246:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8041248:	e00f      	b.n	804126a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 804124a:	f7ff fe9d 	bl	8040f88 <HAL_GetTick>
 804124e:	4602      	mov	r2, r0
 8041250:	693b      	ldr	r3, [r7, #16]
 8041252:	1ad3      	subs	r3, r2, r3
 8041254:	2b05      	cmp	r3, #5
 8041256:	d908      	bls.n	804126a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8041258:	687b      	ldr	r3, [r7, #4]
 804125a:	2220      	movs	r2, #32
 804125c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 804125e:	687b      	ldr	r3, [r7, #4]
 8041260:	2203      	movs	r2, #3
 8041262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8041266:	2303      	movs	r3, #3
 8041268:	e078      	b.n	804135c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 804126a:	687b      	ldr	r3, [r7, #4]
 804126c:	681b      	ldr	r3, [r3, #0]
 804126e:	681b      	ldr	r3, [r3, #0]
 8041270:	f003 0301 	and.w	r3, r3, #1
 8041274:	2b00      	cmp	r3, #0
 8041276:	d1e8      	bne.n	804124a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8041278:	687b      	ldr	r3, [r7, #4]
 804127a:	681b      	ldr	r3, [r3, #0]
 804127c:	681b      	ldr	r3, [r3, #0]
 804127e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8041280:	697a      	ldr	r2, [r7, #20]
 8041282:	4b38      	ldr	r3, [pc, #224]	; (8041364 <HAL_DMA_Init+0x158>)
 8041284:	4013      	ands	r3, r2
 8041286:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8041288:	687b      	ldr	r3, [r7, #4]
 804128a:	685a      	ldr	r2, [r3, #4]
 804128c:	687b      	ldr	r3, [r7, #4]
 804128e:	689b      	ldr	r3, [r3, #8]
 8041290:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8041292:	687b      	ldr	r3, [r7, #4]
 8041294:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8041296:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8041298:	687b      	ldr	r3, [r7, #4]
 804129a:	691b      	ldr	r3, [r3, #16]
 804129c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 804129e:	687b      	ldr	r3, [r7, #4]
 80412a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80412a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80412a4:	687b      	ldr	r3, [r7, #4]
 80412a6:	699b      	ldr	r3, [r3, #24]
 80412a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80412aa:	687b      	ldr	r3, [r7, #4]
 80412ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80412ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80412b0:	687b      	ldr	r3, [r7, #4]
 80412b2:	6a1b      	ldr	r3, [r3, #32]
 80412b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80412b6:	697a      	ldr	r2, [r7, #20]
 80412b8:	4313      	orrs	r3, r2
 80412ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80412bc:	687b      	ldr	r3, [r7, #4]
 80412be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80412c0:	2b04      	cmp	r3, #4
 80412c2:	d107      	bne.n	80412d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80412c4:	687b      	ldr	r3, [r7, #4]
 80412c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80412c8:	687b      	ldr	r3, [r7, #4]
 80412ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80412cc:	4313      	orrs	r3, r2
 80412ce:	697a      	ldr	r2, [r7, #20]
 80412d0:	4313      	orrs	r3, r2
 80412d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80412d4:	687b      	ldr	r3, [r7, #4]
 80412d6:	681b      	ldr	r3, [r3, #0]
 80412d8:	697a      	ldr	r2, [r7, #20]
 80412da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80412dc:	687b      	ldr	r3, [r7, #4]
 80412de:	681b      	ldr	r3, [r3, #0]
 80412e0:	695b      	ldr	r3, [r3, #20]
 80412e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80412e4:	697b      	ldr	r3, [r7, #20]
 80412e6:	f023 0307 	bic.w	r3, r3, #7
 80412ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80412ec:	687b      	ldr	r3, [r7, #4]
 80412ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80412f0:	697a      	ldr	r2, [r7, #20]
 80412f2:	4313      	orrs	r3, r2
 80412f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80412f6:	687b      	ldr	r3, [r7, #4]
 80412f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80412fa:	2b04      	cmp	r3, #4
 80412fc:	d117      	bne.n	804132e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80412fe:	687b      	ldr	r3, [r7, #4]
 8041300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8041302:	697a      	ldr	r2, [r7, #20]
 8041304:	4313      	orrs	r3, r2
 8041306:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8041308:	687b      	ldr	r3, [r7, #4]
 804130a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804130c:	2b00      	cmp	r3, #0
 804130e:	d00e      	beq.n	804132e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8041310:	6878      	ldr	r0, [r7, #4]
 8041312:	f000 f8bd 	bl	8041490 <DMA_CheckFifoParam>
 8041316:	4603      	mov	r3, r0
 8041318:	2b00      	cmp	r3, #0
 804131a:	d008      	beq.n	804132e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 804131c:	687b      	ldr	r3, [r7, #4]
 804131e:	2240      	movs	r2, #64	; 0x40
 8041320:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8041322:	687b      	ldr	r3, [r7, #4]
 8041324:	2201      	movs	r2, #1
 8041326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 804132a:	2301      	movs	r3, #1
 804132c:	e016      	b.n	804135c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 804132e:	687b      	ldr	r3, [r7, #4]
 8041330:	681b      	ldr	r3, [r3, #0]
 8041332:	697a      	ldr	r2, [r7, #20]
 8041334:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8041336:	6878      	ldr	r0, [r7, #4]
 8041338:	f000 f874 	bl	8041424 <DMA_CalcBaseAndBitshift>
 804133c:	4603      	mov	r3, r0
 804133e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8041340:	687b      	ldr	r3, [r7, #4]
 8041342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8041344:	223f      	movs	r2, #63	; 0x3f
 8041346:	409a      	lsls	r2, r3
 8041348:	68fb      	ldr	r3, [r7, #12]
 804134a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 804134c:	687b      	ldr	r3, [r7, #4]
 804134e:	2200      	movs	r2, #0
 8041350:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8041352:	687b      	ldr	r3, [r7, #4]
 8041354:	2201      	movs	r2, #1
 8041356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 804135a:	2300      	movs	r3, #0
}
 804135c:	4618      	mov	r0, r3
 804135e:	3718      	adds	r7, #24
 8041360:	46bd      	mov	sp, r7
 8041362:	bd80      	pop	{r7, pc}
 8041364:	f010803f 	.word	0xf010803f

08041368 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8041368:	b580      	push	{r7, lr}
 804136a:	b084      	sub	sp, #16
 804136c:	af00      	add	r7, sp, #0
 804136e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8041370:	687b      	ldr	r3, [r7, #4]
 8041372:	2b00      	cmp	r3, #0
 8041374:	d101      	bne.n	804137a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8041376:	2301      	movs	r3, #1
 8041378:	e050      	b.n	804141c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 804137a:	687b      	ldr	r3, [r7, #4]
 804137c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8041380:	b2db      	uxtb	r3, r3
 8041382:	2b02      	cmp	r3, #2
 8041384:	d101      	bne.n	804138a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8041386:	2302      	movs	r3, #2
 8041388:	e048      	b.n	804141c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 804138a:	687b      	ldr	r3, [r7, #4]
 804138c:	681b      	ldr	r3, [r3, #0]
 804138e:	681a      	ldr	r2, [r3, #0]
 8041390:	687b      	ldr	r3, [r7, #4]
 8041392:	681b      	ldr	r3, [r3, #0]
 8041394:	f022 0201 	bic.w	r2, r2, #1
 8041398:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 804139a:	687b      	ldr	r3, [r7, #4]
 804139c:	681b      	ldr	r3, [r3, #0]
 804139e:	2200      	movs	r2, #0
 80413a0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80413a2:	687b      	ldr	r3, [r7, #4]
 80413a4:	681b      	ldr	r3, [r3, #0]
 80413a6:	2200      	movs	r2, #0
 80413a8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80413aa:	687b      	ldr	r3, [r7, #4]
 80413ac:	681b      	ldr	r3, [r3, #0]
 80413ae:	2200      	movs	r2, #0
 80413b0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80413b2:	687b      	ldr	r3, [r7, #4]
 80413b4:	681b      	ldr	r3, [r3, #0]
 80413b6:	2200      	movs	r2, #0
 80413b8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80413ba:	687b      	ldr	r3, [r7, #4]
 80413bc:	681b      	ldr	r3, [r3, #0]
 80413be:	2200      	movs	r2, #0
 80413c0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80413c2:	687b      	ldr	r3, [r7, #4]
 80413c4:	681b      	ldr	r3, [r3, #0]
 80413c6:	2221      	movs	r2, #33	; 0x21
 80413c8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80413ca:	6878      	ldr	r0, [r7, #4]
 80413cc:	f000 f82a 	bl	8041424 <DMA_CalcBaseAndBitshift>
 80413d0:	4603      	mov	r3, r0
 80413d2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80413d4:	687b      	ldr	r3, [r7, #4]
 80413d6:	2200      	movs	r2, #0
 80413d8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80413da:	687b      	ldr	r3, [r7, #4]
 80413dc:	2200      	movs	r2, #0
 80413de:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80413e0:	687b      	ldr	r3, [r7, #4]
 80413e2:	2200      	movs	r2, #0
 80413e4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80413e6:	687b      	ldr	r3, [r7, #4]
 80413e8:	2200      	movs	r2, #0
 80413ea:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80413ec:	687b      	ldr	r3, [r7, #4]
 80413ee:	2200      	movs	r2, #0
 80413f0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80413f2:	687b      	ldr	r3, [r7, #4]
 80413f4:	2200      	movs	r2, #0
 80413f6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80413f8:	687b      	ldr	r3, [r7, #4]
 80413fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80413fc:	223f      	movs	r2, #63	; 0x3f
 80413fe:	409a      	lsls	r2, r3
 8041400:	68fb      	ldr	r3, [r7, #12]
 8041402:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8041404:	687b      	ldr	r3, [r7, #4]
 8041406:	2200      	movs	r2, #0
 8041408:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 804140a:	687b      	ldr	r3, [r7, #4]
 804140c:	2200      	movs	r2, #0
 804140e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8041412:	687b      	ldr	r3, [r7, #4]
 8041414:	2200      	movs	r2, #0
 8041416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 804141a:	2300      	movs	r3, #0
}
 804141c:	4618      	mov	r0, r3
 804141e:	3710      	adds	r7, #16
 8041420:	46bd      	mov	sp, r7
 8041422:	bd80      	pop	{r7, pc}

08041424 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8041424:	b480      	push	{r7}
 8041426:	b085      	sub	sp, #20
 8041428:	af00      	add	r7, sp, #0
 804142a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 804142c:	687b      	ldr	r3, [r7, #4]
 804142e:	681b      	ldr	r3, [r3, #0]
 8041430:	b2db      	uxtb	r3, r3
 8041432:	3b10      	subs	r3, #16
 8041434:	4a14      	ldr	r2, [pc, #80]	; (8041488 <DMA_CalcBaseAndBitshift+0x64>)
 8041436:	fba2 2303 	umull	r2, r3, r2, r3
 804143a:	091b      	lsrs	r3, r3, #4
 804143c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 804143e:	4a13      	ldr	r2, [pc, #76]	; (804148c <DMA_CalcBaseAndBitshift+0x68>)
 8041440:	68fb      	ldr	r3, [r7, #12]
 8041442:	4413      	add	r3, r2
 8041444:	781b      	ldrb	r3, [r3, #0]
 8041446:	461a      	mov	r2, r3
 8041448:	687b      	ldr	r3, [r7, #4]
 804144a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 804144c:	68fb      	ldr	r3, [r7, #12]
 804144e:	2b03      	cmp	r3, #3
 8041450:	d909      	bls.n	8041466 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8041452:	687b      	ldr	r3, [r7, #4]
 8041454:	681b      	ldr	r3, [r3, #0]
 8041456:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 804145a:	f023 0303 	bic.w	r3, r3, #3
 804145e:	1d1a      	adds	r2, r3, #4
 8041460:	687b      	ldr	r3, [r7, #4]
 8041462:	659a      	str	r2, [r3, #88]	; 0x58
 8041464:	e007      	b.n	8041476 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8041466:	687b      	ldr	r3, [r7, #4]
 8041468:	681b      	ldr	r3, [r3, #0]
 804146a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 804146e:	f023 0303 	bic.w	r3, r3, #3
 8041472:	687a      	ldr	r2, [r7, #4]
 8041474:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8041476:	687b      	ldr	r3, [r7, #4]
 8041478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 804147a:	4618      	mov	r0, r3
 804147c:	3714      	adds	r7, #20
 804147e:	46bd      	mov	sp, r7
 8041480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041484:	4770      	bx	lr
 8041486:	bf00      	nop
 8041488:	aaaaaaab 	.word	0xaaaaaaab
 804148c:	08049aa8 	.word	0x08049aa8

08041490 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8041490:	b480      	push	{r7}
 8041492:	b085      	sub	sp, #20
 8041494:	af00      	add	r7, sp, #0
 8041496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8041498:	2300      	movs	r3, #0
 804149a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 804149c:	687b      	ldr	r3, [r7, #4]
 804149e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80414a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80414a2:	687b      	ldr	r3, [r7, #4]
 80414a4:	699b      	ldr	r3, [r3, #24]
 80414a6:	2b00      	cmp	r3, #0
 80414a8:	d11f      	bne.n	80414ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80414aa:	68bb      	ldr	r3, [r7, #8]
 80414ac:	2b03      	cmp	r3, #3
 80414ae:	d856      	bhi.n	804155e <DMA_CheckFifoParam+0xce>
 80414b0:	a201      	add	r2, pc, #4	; (adr r2, 80414b8 <DMA_CheckFifoParam+0x28>)
 80414b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80414b6:	bf00      	nop
 80414b8:	080414c9 	.word	0x080414c9
 80414bc:	080414db 	.word	0x080414db
 80414c0:	080414c9 	.word	0x080414c9
 80414c4:	0804155f 	.word	0x0804155f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80414c8:	687b      	ldr	r3, [r7, #4]
 80414ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80414cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80414d0:	2b00      	cmp	r3, #0
 80414d2:	d046      	beq.n	8041562 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80414d4:	2301      	movs	r3, #1
 80414d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80414d8:	e043      	b.n	8041562 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80414da:	687b      	ldr	r3, [r7, #4]
 80414dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80414de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80414e2:	d140      	bne.n	8041566 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80414e4:	2301      	movs	r3, #1
 80414e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80414e8:	e03d      	b.n	8041566 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80414ea:	687b      	ldr	r3, [r7, #4]
 80414ec:	699b      	ldr	r3, [r3, #24]
 80414ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80414f2:	d121      	bne.n	8041538 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80414f4:	68bb      	ldr	r3, [r7, #8]
 80414f6:	2b03      	cmp	r3, #3
 80414f8:	d837      	bhi.n	804156a <DMA_CheckFifoParam+0xda>
 80414fa:	a201      	add	r2, pc, #4	; (adr r2, 8041500 <DMA_CheckFifoParam+0x70>)
 80414fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8041500:	08041511 	.word	0x08041511
 8041504:	08041517 	.word	0x08041517
 8041508:	08041511 	.word	0x08041511
 804150c:	08041529 	.word	0x08041529
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8041510:	2301      	movs	r3, #1
 8041512:	73fb      	strb	r3, [r7, #15]
      break;
 8041514:	e030      	b.n	8041578 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8041516:	687b      	ldr	r3, [r7, #4]
 8041518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804151a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 804151e:	2b00      	cmp	r3, #0
 8041520:	d025      	beq.n	804156e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8041522:	2301      	movs	r3, #1
 8041524:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8041526:	e022      	b.n	804156e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8041528:	687b      	ldr	r3, [r7, #4]
 804152a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804152c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8041530:	d11f      	bne.n	8041572 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8041532:	2301      	movs	r3, #1
 8041534:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8041536:	e01c      	b.n	8041572 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8041538:	68bb      	ldr	r3, [r7, #8]
 804153a:	2b02      	cmp	r3, #2
 804153c:	d903      	bls.n	8041546 <DMA_CheckFifoParam+0xb6>
 804153e:	68bb      	ldr	r3, [r7, #8]
 8041540:	2b03      	cmp	r3, #3
 8041542:	d003      	beq.n	804154c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8041544:	e018      	b.n	8041578 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8041546:	2301      	movs	r3, #1
 8041548:	73fb      	strb	r3, [r7, #15]
      break;
 804154a:	e015      	b.n	8041578 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 804154c:	687b      	ldr	r3, [r7, #4]
 804154e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041550:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8041554:	2b00      	cmp	r3, #0
 8041556:	d00e      	beq.n	8041576 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8041558:	2301      	movs	r3, #1
 804155a:	73fb      	strb	r3, [r7, #15]
      break;
 804155c:	e00b      	b.n	8041576 <DMA_CheckFifoParam+0xe6>
      break;
 804155e:	bf00      	nop
 8041560:	e00a      	b.n	8041578 <DMA_CheckFifoParam+0xe8>
      break;
 8041562:	bf00      	nop
 8041564:	e008      	b.n	8041578 <DMA_CheckFifoParam+0xe8>
      break;
 8041566:	bf00      	nop
 8041568:	e006      	b.n	8041578 <DMA_CheckFifoParam+0xe8>
      break;
 804156a:	bf00      	nop
 804156c:	e004      	b.n	8041578 <DMA_CheckFifoParam+0xe8>
      break;
 804156e:	bf00      	nop
 8041570:	e002      	b.n	8041578 <DMA_CheckFifoParam+0xe8>
      break;   
 8041572:	bf00      	nop
 8041574:	e000      	b.n	8041578 <DMA_CheckFifoParam+0xe8>
      break;
 8041576:	bf00      	nop
    }
  } 
  
  return status; 
 8041578:	7bfb      	ldrb	r3, [r7, #15]
}
 804157a:	4618      	mov	r0, r3
 804157c:	3714      	adds	r7, #20
 804157e:	46bd      	mov	sp, r7
 8041580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041584:	4770      	bx	lr
 8041586:	bf00      	nop

08041588 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8041588:	b580      	push	{r7, lr}
 804158a:	b082      	sub	sp, #8
 804158c:	af00      	add	r7, sp, #0
 804158e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8041590:	687b      	ldr	r3, [r7, #4]
 8041592:	2b00      	cmp	r3, #0
 8041594:	d101      	bne.n	804159a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8041596:	2301      	movs	r3, #1
 8041598:	e03b      	b.n	8041612 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 804159a:	687b      	ldr	r3, [r7, #4]
 804159c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80415a0:	b2db      	uxtb	r3, r3
 80415a2:	2b00      	cmp	r3, #0
 80415a4:	d106      	bne.n	80415b4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80415a6:	687b      	ldr	r3, [r7, #4]
 80415a8:	2200      	movs	r2, #0
 80415aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80415ae:	6878      	ldr	r0, [r7, #4]
 80415b0:	f004 f880 	bl	80456b4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80415b4:	687b      	ldr	r3, [r7, #4]
 80415b6:	2202      	movs	r2, #2
 80415b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80415bc:	687b      	ldr	r3, [r7, #4]
 80415be:	681b      	ldr	r3, [r3, #0]
 80415c0:	681b      	ldr	r3, [r3, #0]
 80415c2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80415c6:	687b      	ldr	r3, [r7, #4]
 80415c8:	685a      	ldr	r2, [r3, #4]
 80415ca:	687b      	ldr	r3, [r7, #4]
 80415cc:	681b      	ldr	r3, [r3, #0]
 80415ce:	430a      	orrs	r2, r1
 80415d0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80415d2:	687b      	ldr	r3, [r7, #4]
 80415d4:	681b      	ldr	r3, [r3, #0]
 80415d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80415d8:	f023 0107 	bic.w	r1, r3, #7
 80415dc:	687b      	ldr	r3, [r7, #4]
 80415de:	689a      	ldr	r2, [r3, #8]
 80415e0:	687b      	ldr	r3, [r7, #4]
 80415e2:	681b      	ldr	r3, [r3, #0]
 80415e4:	430a      	orrs	r2, r1
 80415e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80415e8:	687b      	ldr	r3, [r7, #4]
 80415ea:	681b      	ldr	r3, [r3, #0]
 80415ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80415ee:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80415f2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80415f6:	687a      	ldr	r2, [r7, #4]
 80415f8:	68d1      	ldr	r1, [r2, #12]
 80415fa:	687a      	ldr	r2, [r7, #4]
 80415fc:	6812      	ldr	r2, [r2, #0]
 80415fe:	430b      	orrs	r3, r1
 8041600:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8041602:	687b      	ldr	r3, [r7, #4]
 8041604:	2200      	movs	r2, #0
 8041606:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8041608:	687b      	ldr	r3, [r7, #4]
 804160a:	2201      	movs	r2, #1
 804160c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8041610:	2300      	movs	r3, #0
}
 8041612:	4618      	mov	r0, r3
 8041614:	3708      	adds	r7, #8
 8041616:	46bd      	mov	sp, r7
 8041618:	bd80      	pop	{r7, pc}

0804161a <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 804161a:	b580      	push	{r7, lr}
 804161c:	b086      	sub	sp, #24
 804161e:	af02      	add	r7, sp, #8
 8041620:	60f8      	str	r0, [r7, #12]
 8041622:	60b9      	str	r1, [r7, #8]
 8041624:	607a      	str	r2, [r7, #4]
 8041626:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8041628:	68fb      	ldr	r3, [r7, #12]
 804162a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 804162e:	2b01      	cmp	r3, #1
 8041630:	d101      	bne.n	8041636 <HAL_DMA2D_Start+0x1c>
 8041632:	2302      	movs	r3, #2
 8041634:	e018      	b.n	8041668 <HAL_DMA2D_Start+0x4e>
 8041636:	68fb      	ldr	r3, [r7, #12]
 8041638:	2201      	movs	r2, #1
 804163a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 804163e:	68fb      	ldr	r3, [r7, #12]
 8041640:	2202      	movs	r2, #2
 8041642:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8041646:	69bb      	ldr	r3, [r7, #24]
 8041648:	9300      	str	r3, [sp, #0]
 804164a:	683b      	ldr	r3, [r7, #0]
 804164c:	687a      	ldr	r2, [r7, #4]
 804164e:	68b9      	ldr	r1, [r7, #8]
 8041650:	68f8      	ldr	r0, [r7, #12]
 8041652:	f000 f989 	bl	8041968 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8041656:	68fb      	ldr	r3, [r7, #12]
 8041658:	681b      	ldr	r3, [r3, #0]
 804165a:	681a      	ldr	r2, [r3, #0]
 804165c:	68fb      	ldr	r3, [r7, #12]
 804165e:	681b      	ldr	r3, [r3, #0]
 8041660:	f042 0201 	orr.w	r2, r2, #1
 8041664:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8041666:	2300      	movs	r3, #0
}
 8041668:	4618      	mov	r0, r3
 804166a:	3710      	adds	r7, #16
 804166c:	46bd      	mov	sp, r7
 804166e:	bd80      	pop	{r7, pc}

08041670 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8041670:	b580      	push	{r7, lr}
 8041672:	b086      	sub	sp, #24
 8041674:	af00      	add	r7, sp, #0
 8041676:	6078      	str	r0, [r7, #4]
 8041678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 804167a:	2300      	movs	r3, #0
 804167c:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 804167e:	687b      	ldr	r3, [r7, #4]
 8041680:	681b      	ldr	r3, [r3, #0]
 8041682:	681b      	ldr	r3, [r3, #0]
 8041684:	f003 0301 	and.w	r3, r3, #1
 8041688:	2b00      	cmp	r3, #0
 804168a:	d056      	beq.n	804173a <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 804168c:	f7ff fc7c 	bl	8040f88 <HAL_GetTick>
 8041690:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8041692:	e04b      	b.n	804172c <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8041694:	687b      	ldr	r3, [r7, #4]
 8041696:	681b      	ldr	r3, [r3, #0]
 8041698:	685b      	ldr	r3, [r3, #4]
 804169a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 804169c:	68fb      	ldr	r3, [r7, #12]
 804169e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80416a2:	2b00      	cmp	r3, #0
 80416a4:	d023      	beq.n	80416ee <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80416a6:	68fb      	ldr	r3, [r7, #12]
 80416a8:	f003 0320 	and.w	r3, r3, #32
 80416ac:	2b00      	cmp	r3, #0
 80416ae:	d005      	beq.n	80416bc <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80416b0:	687b      	ldr	r3, [r7, #4]
 80416b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80416b4:	f043 0202 	orr.w	r2, r3, #2
 80416b8:	687b      	ldr	r3, [r7, #4]
 80416ba:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80416bc:	68fb      	ldr	r3, [r7, #12]
 80416be:	f003 0301 	and.w	r3, r3, #1
 80416c2:	2b00      	cmp	r3, #0
 80416c4:	d005      	beq.n	80416d2 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80416c6:	687b      	ldr	r3, [r7, #4]
 80416c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80416ca:	f043 0201 	orr.w	r2, r3, #1
 80416ce:	687b      	ldr	r3, [r7, #4]
 80416d0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80416d2:	687b      	ldr	r3, [r7, #4]
 80416d4:	681b      	ldr	r3, [r3, #0]
 80416d6:	2221      	movs	r2, #33	; 0x21
 80416d8:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80416da:	687b      	ldr	r3, [r7, #4]
 80416dc:	2204      	movs	r2, #4
 80416de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80416e2:	687b      	ldr	r3, [r7, #4]
 80416e4:	2200      	movs	r2, #0
 80416e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80416ea:	2301      	movs	r3, #1
 80416ec:	e0a5      	b.n	804183a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80416ee:	683b      	ldr	r3, [r7, #0]
 80416f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80416f4:	d01a      	beq.n	804172c <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80416f6:	f7ff fc47 	bl	8040f88 <HAL_GetTick>
 80416fa:	4602      	mov	r2, r0
 80416fc:	697b      	ldr	r3, [r7, #20]
 80416fe:	1ad3      	subs	r3, r2, r3
 8041700:	683a      	ldr	r2, [r7, #0]
 8041702:	429a      	cmp	r2, r3
 8041704:	d302      	bcc.n	804170c <HAL_DMA2D_PollForTransfer+0x9c>
 8041706:	683b      	ldr	r3, [r7, #0]
 8041708:	2b00      	cmp	r3, #0
 804170a:	d10f      	bne.n	804172c <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 804170c:	687b      	ldr	r3, [r7, #4]
 804170e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8041710:	f043 0220 	orr.w	r2, r3, #32
 8041714:	687b      	ldr	r3, [r7, #4]
 8041716:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8041718:	687b      	ldr	r3, [r7, #4]
 804171a:	2203      	movs	r2, #3
 804171c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8041720:	687b      	ldr	r3, [r7, #4]
 8041722:	2200      	movs	r2, #0
 8041724:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8041728:	2303      	movs	r3, #3
 804172a:	e086      	b.n	804183a <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 804172c:	687b      	ldr	r3, [r7, #4]
 804172e:	681b      	ldr	r3, [r3, #0]
 8041730:	685b      	ldr	r3, [r3, #4]
 8041732:	f003 0302 	and.w	r3, r3, #2
 8041736:	2b00      	cmp	r3, #0
 8041738:	d0ac      	beq.n	8041694 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 804173a:	687b      	ldr	r3, [r7, #4]
 804173c:	681b      	ldr	r3, [r3, #0]
 804173e:	69db      	ldr	r3, [r3, #28]
 8041740:	f003 0320 	and.w	r3, r3, #32
 8041744:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8041746:	687b      	ldr	r3, [r7, #4]
 8041748:	681b      	ldr	r3, [r3, #0]
 804174a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804174c:	f003 0320 	and.w	r3, r3, #32
 8041750:	693a      	ldr	r2, [r7, #16]
 8041752:	4313      	orrs	r3, r2
 8041754:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8041756:	693b      	ldr	r3, [r7, #16]
 8041758:	2b00      	cmp	r3, #0
 804175a:	d061      	beq.n	8041820 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 804175c:	f7ff fc14 	bl	8040f88 <HAL_GetTick>
 8041760:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8041762:	e056      	b.n	8041812 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8041764:	687b      	ldr	r3, [r7, #4]
 8041766:	681b      	ldr	r3, [r3, #0]
 8041768:	685b      	ldr	r3, [r3, #4]
 804176a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 804176c:	68fb      	ldr	r3, [r7, #12]
 804176e:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8041772:	2b00      	cmp	r3, #0
 8041774:	d02e      	beq.n	80417d4 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8041776:	68fb      	ldr	r3, [r7, #12]
 8041778:	f003 0308 	and.w	r3, r3, #8
 804177c:	2b00      	cmp	r3, #0
 804177e:	d005      	beq.n	804178c <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8041780:	687b      	ldr	r3, [r7, #4]
 8041782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8041784:	f043 0204 	orr.w	r2, r3, #4
 8041788:	687b      	ldr	r3, [r7, #4]
 804178a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 804178c:	68fb      	ldr	r3, [r7, #12]
 804178e:	f003 0320 	and.w	r3, r3, #32
 8041792:	2b00      	cmp	r3, #0
 8041794:	d005      	beq.n	80417a2 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8041796:	687b      	ldr	r3, [r7, #4]
 8041798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804179a:	f043 0202 	orr.w	r2, r3, #2
 804179e:	687b      	ldr	r3, [r7, #4]
 80417a0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80417a2:	68fb      	ldr	r3, [r7, #12]
 80417a4:	f003 0301 	and.w	r3, r3, #1
 80417a8:	2b00      	cmp	r3, #0
 80417aa:	d005      	beq.n	80417b8 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80417ac:	687b      	ldr	r3, [r7, #4]
 80417ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80417b0:	f043 0201 	orr.w	r2, r3, #1
 80417b4:	687b      	ldr	r3, [r7, #4]
 80417b6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80417b8:	687b      	ldr	r3, [r7, #4]
 80417ba:	681b      	ldr	r3, [r3, #0]
 80417bc:	2229      	movs	r2, #41	; 0x29
 80417be:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80417c0:	687b      	ldr	r3, [r7, #4]
 80417c2:	2204      	movs	r2, #4
 80417c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80417c8:	687b      	ldr	r3, [r7, #4]
 80417ca:	2200      	movs	r2, #0
 80417cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80417d0:	2301      	movs	r3, #1
 80417d2:	e032      	b.n	804183a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80417d4:	683b      	ldr	r3, [r7, #0]
 80417d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80417da:	d01a      	beq.n	8041812 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80417dc:	f7ff fbd4 	bl	8040f88 <HAL_GetTick>
 80417e0:	4602      	mov	r2, r0
 80417e2:	697b      	ldr	r3, [r7, #20]
 80417e4:	1ad3      	subs	r3, r2, r3
 80417e6:	683a      	ldr	r2, [r7, #0]
 80417e8:	429a      	cmp	r2, r3
 80417ea:	d302      	bcc.n	80417f2 <HAL_DMA2D_PollForTransfer+0x182>
 80417ec:	683b      	ldr	r3, [r7, #0]
 80417ee:	2b00      	cmp	r3, #0
 80417f0:	d10f      	bne.n	8041812 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80417f2:	687b      	ldr	r3, [r7, #4]
 80417f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80417f6:	f043 0220 	orr.w	r2, r3, #32
 80417fa:	687b      	ldr	r3, [r7, #4]
 80417fc:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80417fe:	687b      	ldr	r3, [r7, #4]
 8041800:	2203      	movs	r2, #3
 8041802:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8041806:	687b      	ldr	r3, [r7, #4]
 8041808:	2200      	movs	r2, #0
 804180a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 804180e:	2303      	movs	r3, #3
 8041810:	e013      	b.n	804183a <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8041812:	687b      	ldr	r3, [r7, #4]
 8041814:	681b      	ldr	r3, [r3, #0]
 8041816:	685b      	ldr	r3, [r3, #4]
 8041818:	f003 0310 	and.w	r3, r3, #16
 804181c:	2b00      	cmp	r3, #0
 804181e:	d0a1      	beq.n	8041764 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8041820:	687b      	ldr	r3, [r7, #4]
 8041822:	681b      	ldr	r3, [r3, #0]
 8041824:	2212      	movs	r2, #18
 8041826:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8041828:	687b      	ldr	r3, [r7, #4]
 804182a:	2201      	movs	r2, #1
 804182c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8041830:	687b      	ldr	r3, [r7, #4]
 8041832:	2200      	movs	r2, #0
 8041834:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8041838:	2300      	movs	r3, #0
}
 804183a:	4618      	mov	r0, r3
 804183c:	3718      	adds	r7, #24
 804183e:	46bd      	mov	sp, r7
 8041840:	bd80      	pop	{r7, pc}
	...

08041844 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8041844:	b480      	push	{r7}
 8041846:	b087      	sub	sp, #28
 8041848:	af00      	add	r7, sp, #0
 804184a:	6078      	str	r0, [r7, #4]
 804184c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 804184e:	687b      	ldr	r3, [r7, #4]
 8041850:	685b      	ldr	r3, [r3, #4]
 8041852:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8041856:	687b      	ldr	r3, [r7, #4]
 8041858:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 804185c:	2b01      	cmp	r3, #1
 804185e:	d101      	bne.n	8041864 <HAL_DMA2D_ConfigLayer+0x20>
 8041860:	2302      	movs	r3, #2
 8041862:	e079      	b.n	8041958 <HAL_DMA2D_ConfigLayer+0x114>
 8041864:	687b      	ldr	r3, [r7, #4]
 8041866:	2201      	movs	r2, #1
 8041868:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 804186c:	687b      	ldr	r3, [r7, #4]
 804186e:	2202      	movs	r2, #2
 8041870:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8041874:	683b      	ldr	r3, [r7, #0]
 8041876:	011b      	lsls	r3, r3, #4
 8041878:	3318      	adds	r3, #24
 804187a:	687a      	ldr	r2, [r7, #4]
 804187c:	4413      	add	r3, r2
 804187e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8041880:	693b      	ldr	r3, [r7, #16]
 8041882:	685a      	ldr	r2, [r3, #4]
 8041884:	693b      	ldr	r3, [r7, #16]
 8041886:	689b      	ldr	r3, [r3, #8]
 8041888:	041b      	lsls	r3, r3, #16
 804188a:	4313      	orrs	r3, r2
 804188c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 804188e:	4b35      	ldr	r3, [pc, #212]	; (8041964 <HAL_DMA2D_ConfigLayer+0x120>)
 8041890:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8041892:	693b      	ldr	r3, [r7, #16]
 8041894:	685b      	ldr	r3, [r3, #4]
 8041896:	2b0a      	cmp	r3, #10
 8041898:	d003      	beq.n	80418a2 <HAL_DMA2D_ConfigLayer+0x5e>
 804189a:	693b      	ldr	r3, [r7, #16]
 804189c:	685b      	ldr	r3, [r3, #4]
 804189e:	2b09      	cmp	r3, #9
 80418a0:	d107      	bne.n	80418b2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80418a2:	693b      	ldr	r3, [r7, #16]
 80418a4:	68db      	ldr	r3, [r3, #12]
 80418a6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80418aa:	697a      	ldr	r2, [r7, #20]
 80418ac:	4313      	orrs	r3, r2
 80418ae:	617b      	str	r3, [r7, #20]
 80418b0:	e005      	b.n	80418be <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80418b2:	693b      	ldr	r3, [r7, #16]
 80418b4:	68db      	ldr	r3, [r3, #12]
 80418b6:	061b      	lsls	r3, r3, #24
 80418b8:	697a      	ldr	r2, [r7, #20]
 80418ba:	4313      	orrs	r3, r2
 80418bc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80418be:	683b      	ldr	r3, [r7, #0]
 80418c0:	2b00      	cmp	r3, #0
 80418c2:	d120      	bne.n	8041906 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80418c4:	687b      	ldr	r3, [r7, #4]
 80418c6:	681b      	ldr	r3, [r3, #0]
 80418c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80418ca:	68fb      	ldr	r3, [r7, #12]
 80418cc:	43db      	mvns	r3, r3
 80418ce:	ea02 0103 	and.w	r1, r2, r3
 80418d2:	687b      	ldr	r3, [r7, #4]
 80418d4:	681b      	ldr	r3, [r3, #0]
 80418d6:	697a      	ldr	r2, [r7, #20]
 80418d8:	430a      	orrs	r2, r1
 80418da:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80418dc:	687b      	ldr	r3, [r7, #4]
 80418de:	681b      	ldr	r3, [r3, #0]
 80418e0:	693a      	ldr	r2, [r7, #16]
 80418e2:	6812      	ldr	r2, [r2, #0]
 80418e4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80418e6:	693b      	ldr	r3, [r7, #16]
 80418e8:	685b      	ldr	r3, [r3, #4]
 80418ea:	2b0a      	cmp	r3, #10
 80418ec:	d003      	beq.n	80418f6 <HAL_DMA2D_ConfigLayer+0xb2>
 80418ee:	693b      	ldr	r3, [r7, #16]
 80418f0:	685b      	ldr	r3, [r3, #4]
 80418f2:	2b09      	cmp	r3, #9
 80418f4:	d127      	bne.n	8041946 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80418f6:	693b      	ldr	r3, [r7, #16]
 80418f8:	68da      	ldr	r2, [r3, #12]
 80418fa:	687b      	ldr	r3, [r7, #4]
 80418fc:	681b      	ldr	r3, [r3, #0]
 80418fe:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8041902:	629a      	str	r2, [r3, #40]	; 0x28
 8041904:	e01f      	b.n	8041946 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8041906:	687b      	ldr	r3, [r7, #4]
 8041908:	681b      	ldr	r3, [r3, #0]
 804190a:	69da      	ldr	r2, [r3, #28]
 804190c:	68fb      	ldr	r3, [r7, #12]
 804190e:	43db      	mvns	r3, r3
 8041910:	ea02 0103 	and.w	r1, r2, r3
 8041914:	687b      	ldr	r3, [r7, #4]
 8041916:	681b      	ldr	r3, [r3, #0]
 8041918:	697a      	ldr	r2, [r7, #20]
 804191a:	430a      	orrs	r2, r1
 804191c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 804191e:	687b      	ldr	r3, [r7, #4]
 8041920:	681b      	ldr	r3, [r3, #0]
 8041922:	693a      	ldr	r2, [r7, #16]
 8041924:	6812      	ldr	r2, [r2, #0]
 8041926:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8041928:	693b      	ldr	r3, [r7, #16]
 804192a:	685b      	ldr	r3, [r3, #4]
 804192c:	2b0a      	cmp	r3, #10
 804192e:	d003      	beq.n	8041938 <HAL_DMA2D_ConfigLayer+0xf4>
 8041930:	693b      	ldr	r3, [r7, #16]
 8041932:	685b      	ldr	r3, [r3, #4]
 8041934:	2b09      	cmp	r3, #9
 8041936:	d106      	bne.n	8041946 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8041938:	693b      	ldr	r3, [r7, #16]
 804193a:	68da      	ldr	r2, [r3, #12]
 804193c:	687b      	ldr	r3, [r7, #4]
 804193e:	681b      	ldr	r3, [r3, #0]
 8041940:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8041944:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8041946:	687b      	ldr	r3, [r7, #4]
 8041948:	2201      	movs	r2, #1
 804194a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 804194e:	687b      	ldr	r3, [r7, #4]
 8041950:	2200      	movs	r2, #0
 8041952:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8041956:	2300      	movs	r3, #0
}
 8041958:	4618      	mov	r0, r3
 804195a:	371c      	adds	r7, #28
 804195c:	46bd      	mov	sp, r7
 804195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041962:	4770      	bx	lr
 8041964:	ff03000f 	.word	0xff03000f

08041968 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8041968:	b480      	push	{r7}
 804196a:	b08b      	sub	sp, #44	; 0x2c
 804196c:	af00      	add	r7, sp, #0
 804196e:	60f8      	str	r0, [r7, #12]
 8041970:	60b9      	str	r1, [r7, #8]
 8041972:	607a      	str	r2, [r7, #4]
 8041974:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8041976:	68fb      	ldr	r3, [r7, #12]
 8041978:	681b      	ldr	r3, [r3, #0]
 804197a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804197c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8041980:	683b      	ldr	r3, [r7, #0]
 8041982:	041a      	lsls	r2, r3, #16
 8041984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8041986:	431a      	orrs	r2, r3
 8041988:	68fb      	ldr	r3, [r7, #12]
 804198a:	681b      	ldr	r3, [r3, #0]
 804198c:	430a      	orrs	r2, r1
 804198e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8041990:	68fb      	ldr	r3, [r7, #12]
 8041992:	681b      	ldr	r3, [r3, #0]
 8041994:	687a      	ldr	r2, [r7, #4]
 8041996:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8041998:	68fb      	ldr	r3, [r7, #12]
 804199a:	685b      	ldr	r3, [r3, #4]
 804199c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80419a0:	d174      	bne.n	8041a8c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80419a2:	68bb      	ldr	r3, [r7, #8]
 80419a4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80419a8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80419aa:	68bb      	ldr	r3, [r7, #8]
 80419ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80419b0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80419b2:	68bb      	ldr	r3, [r7, #8]
 80419b4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80419b8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80419ba:	68bb      	ldr	r3, [r7, #8]
 80419bc:	b2db      	uxtb	r3, r3
 80419be:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80419c0:	68fb      	ldr	r3, [r7, #12]
 80419c2:	689b      	ldr	r3, [r3, #8]
 80419c4:	2b00      	cmp	r3, #0
 80419c6:	d108      	bne.n	80419da <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80419c8:	69ba      	ldr	r2, [r7, #24]
 80419ca:	69fb      	ldr	r3, [r7, #28]
 80419cc:	431a      	orrs	r2, r3
 80419ce:	6a3b      	ldr	r3, [r7, #32]
 80419d0:	4313      	orrs	r3, r2
 80419d2:	697a      	ldr	r2, [r7, #20]
 80419d4:	4313      	orrs	r3, r2
 80419d6:	627b      	str	r3, [r7, #36]	; 0x24
 80419d8:	e053      	b.n	8041a82 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80419da:	68fb      	ldr	r3, [r7, #12]
 80419dc:	689b      	ldr	r3, [r3, #8]
 80419de:	2b01      	cmp	r3, #1
 80419e0:	d106      	bne.n	80419f0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80419e2:	69ba      	ldr	r2, [r7, #24]
 80419e4:	69fb      	ldr	r3, [r7, #28]
 80419e6:	4313      	orrs	r3, r2
 80419e8:	697a      	ldr	r2, [r7, #20]
 80419ea:	4313      	orrs	r3, r2
 80419ec:	627b      	str	r3, [r7, #36]	; 0x24
 80419ee:	e048      	b.n	8041a82 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80419f0:	68fb      	ldr	r3, [r7, #12]
 80419f2:	689b      	ldr	r3, [r3, #8]
 80419f4:	2b02      	cmp	r3, #2
 80419f6:	d111      	bne.n	8041a1c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80419f8:	69fb      	ldr	r3, [r7, #28]
 80419fa:	0cdb      	lsrs	r3, r3, #19
 80419fc:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80419fe:	69bb      	ldr	r3, [r7, #24]
 8041a00:	0a9b      	lsrs	r3, r3, #10
 8041a02:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8041a04:	697b      	ldr	r3, [r7, #20]
 8041a06:	08db      	lsrs	r3, r3, #3
 8041a08:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8041a0a:	69bb      	ldr	r3, [r7, #24]
 8041a0c:	015a      	lsls	r2, r3, #5
 8041a0e:	69fb      	ldr	r3, [r7, #28]
 8041a10:	02db      	lsls	r3, r3, #11
 8041a12:	4313      	orrs	r3, r2
 8041a14:	697a      	ldr	r2, [r7, #20]
 8041a16:	4313      	orrs	r3, r2
 8041a18:	627b      	str	r3, [r7, #36]	; 0x24
 8041a1a:	e032      	b.n	8041a82 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8041a1c:	68fb      	ldr	r3, [r7, #12]
 8041a1e:	689b      	ldr	r3, [r3, #8]
 8041a20:	2b03      	cmp	r3, #3
 8041a22:	d117      	bne.n	8041a54 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8041a24:	6a3b      	ldr	r3, [r7, #32]
 8041a26:	0fdb      	lsrs	r3, r3, #31
 8041a28:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8041a2a:	69fb      	ldr	r3, [r7, #28]
 8041a2c:	0cdb      	lsrs	r3, r3, #19
 8041a2e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8041a30:	69bb      	ldr	r3, [r7, #24]
 8041a32:	0adb      	lsrs	r3, r3, #11
 8041a34:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8041a36:	697b      	ldr	r3, [r7, #20]
 8041a38:	08db      	lsrs	r3, r3, #3
 8041a3a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8041a3c:	69bb      	ldr	r3, [r7, #24]
 8041a3e:	015a      	lsls	r2, r3, #5
 8041a40:	69fb      	ldr	r3, [r7, #28]
 8041a42:	029b      	lsls	r3, r3, #10
 8041a44:	431a      	orrs	r2, r3
 8041a46:	6a3b      	ldr	r3, [r7, #32]
 8041a48:	03db      	lsls	r3, r3, #15
 8041a4a:	4313      	orrs	r3, r2
 8041a4c:	697a      	ldr	r2, [r7, #20]
 8041a4e:	4313      	orrs	r3, r2
 8041a50:	627b      	str	r3, [r7, #36]	; 0x24
 8041a52:	e016      	b.n	8041a82 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8041a54:	6a3b      	ldr	r3, [r7, #32]
 8041a56:	0f1b      	lsrs	r3, r3, #28
 8041a58:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8041a5a:	69fb      	ldr	r3, [r7, #28]
 8041a5c:	0d1b      	lsrs	r3, r3, #20
 8041a5e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8041a60:	69bb      	ldr	r3, [r7, #24]
 8041a62:	0b1b      	lsrs	r3, r3, #12
 8041a64:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8041a66:	697b      	ldr	r3, [r7, #20]
 8041a68:	091b      	lsrs	r3, r3, #4
 8041a6a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8041a6c:	69bb      	ldr	r3, [r7, #24]
 8041a6e:	011a      	lsls	r2, r3, #4
 8041a70:	69fb      	ldr	r3, [r7, #28]
 8041a72:	021b      	lsls	r3, r3, #8
 8041a74:	431a      	orrs	r2, r3
 8041a76:	6a3b      	ldr	r3, [r7, #32]
 8041a78:	031b      	lsls	r3, r3, #12
 8041a7a:	4313      	orrs	r3, r2
 8041a7c:	697a      	ldr	r2, [r7, #20]
 8041a7e:	4313      	orrs	r3, r2
 8041a80:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8041a82:	68fb      	ldr	r3, [r7, #12]
 8041a84:	681b      	ldr	r3, [r3, #0]
 8041a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8041a88:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8041a8a:	e003      	b.n	8041a94 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8041a8c:	68fb      	ldr	r3, [r7, #12]
 8041a8e:	681b      	ldr	r3, [r3, #0]
 8041a90:	68ba      	ldr	r2, [r7, #8]
 8041a92:	60da      	str	r2, [r3, #12]
}
 8041a94:	bf00      	nop
 8041a96:	372c      	adds	r7, #44	; 0x2c
 8041a98:	46bd      	mov	sp, r7
 8041a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041a9e:	4770      	bx	lr

08041aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8041aa0:	b480      	push	{r7}
 8041aa2:	b089      	sub	sp, #36	; 0x24
 8041aa4:	af00      	add	r7, sp, #0
 8041aa6:	6078      	str	r0, [r7, #4]
 8041aa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8041aaa:	2300      	movs	r3, #0
 8041aac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8041aae:	2300      	movs	r3, #0
 8041ab0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8041ab2:	2300      	movs	r3, #0
 8041ab4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8041ab6:	2300      	movs	r3, #0
 8041ab8:	61fb      	str	r3, [r7, #28]
 8041aba:	e177      	b.n	8041dac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8041abc:	2201      	movs	r2, #1
 8041abe:	69fb      	ldr	r3, [r7, #28]
 8041ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8041ac4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8041ac6:	683b      	ldr	r3, [r7, #0]
 8041ac8:	681b      	ldr	r3, [r3, #0]
 8041aca:	697a      	ldr	r2, [r7, #20]
 8041acc:	4013      	ands	r3, r2
 8041ace:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8041ad0:	693a      	ldr	r2, [r7, #16]
 8041ad2:	697b      	ldr	r3, [r7, #20]
 8041ad4:	429a      	cmp	r2, r3
 8041ad6:	f040 8166 	bne.w	8041da6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8041ada:	683b      	ldr	r3, [r7, #0]
 8041adc:	685b      	ldr	r3, [r3, #4]
 8041ade:	2b01      	cmp	r3, #1
 8041ae0:	d00b      	beq.n	8041afa <HAL_GPIO_Init+0x5a>
 8041ae2:	683b      	ldr	r3, [r7, #0]
 8041ae4:	685b      	ldr	r3, [r3, #4]
 8041ae6:	2b02      	cmp	r3, #2
 8041ae8:	d007      	beq.n	8041afa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8041aea:	683b      	ldr	r3, [r7, #0]
 8041aec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8041aee:	2b11      	cmp	r3, #17
 8041af0:	d003      	beq.n	8041afa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8041af2:	683b      	ldr	r3, [r7, #0]
 8041af4:	685b      	ldr	r3, [r3, #4]
 8041af6:	2b12      	cmp	r3, #18
 8041af8:	d130      	bne.n	8041b5c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8041afa:	687b      	ldr	r3, [r7, #4]
 8041afc:	689b      	ldr	r3, [r3, #8]
 8041afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8041b00:	69fb      	ldr	r3, [r7, #28]
 8041b02:	005b      	lsls	r3, r3, #1
 8041b04:	2203      	movs	r2, #3
 8041b06:	fa02 f303 	lsl.w	r3, r2, r3
 8041b0a:	43db      	mvns	r3, r3
 8041b0c:	69ba      	ldr	r2, [r7, #24]
 8041b0e:	4013      	ands	r3, r2
 8041b10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8041b12:	683b      	ldr	r3, [r7, #0]
 8041b14:	68da      	ldr	r2, [r3, #12]
 8041b16:	69fb      	ldr	r3, [r7, #28]
 8041b18:	005b      	lsls	r3, r3, #1
 8041b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8041b1e:	69ba      	ldr	r2, [r7, #24]
 8041b20:	4313      	orrs	r3, r2
 8041b22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8041b24:	687b      	ldr	r3, [r7, #4]
 8041b26:	69ba      	ldr	r2, [r7, #24]
 8041b28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8041b2a:	687b      	ldr	r3, [r7, #4]
 8041b2c:	685b      	ldr	r3, [r3, #4]
 8041b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8041b30:	2201      	movs	r2, #1
 8041b32:	69fb      	ldr	r3, [r7, #28]
 8041b34:	fa02 f303 	lsl.w	r3, r2, r3
 8041b38:	43db      	mvns	r3, r3
 8041b3a:	69ba      	ldr	r2, [r7, #24]
 8041b3c:	4013      	ands	r3, r2
 8041b3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8041b40:	683b      	ldr	r3, [r7, #0]
 8041b42:	685b      	ldr	r3, [r3, #4]
 8041b44:	091b      	lsrs	r3, r3, #4
 8041b46:	f003 0201 	and.w	r2, r3, #1
 8041b4a:	69fb      	ldr	r3, [r7, #28]
 8041b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8041b50:	69ba      	ldr	r2, [r7, #24]
 8041b52:	4313      	orrs	r3, r2
 8041b54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8041b56:	687b      	ldr	r3, [r7, #4]
 8041b58:	69ba      	ldr	r2, [r7, #24]
 8041b5a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8041b5c:	687b      	ldr	r3, [r7, #4]
 8041b5e:	68db      	ldr	r3, [r3, #12]
 8041b60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8041b62:	69fb      	ldr	r3, [r7, #28]
 8041b64:	005b      	lsls	r3, r3, #1
 8041b66:	2203      	movs	r2, #3
 8041b68:	fa02 f303 	lsl.w	r3, r2, r3
 8041b6c:	43db      	mvns	r3, r3
 8041b6e:	69ba      	ldr	r2, [r7, #24]
 8041b70:	4013      	ands	r3, r2
 8041b72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8041b74:	683b      	ldr	r3, [r7, #0]
 8041b76:	689a      	ldr	r2, [r3, #8]
 8041b78:	69fb      	ldr	r3, [r7, #28]
 8041b7a:	005b      	lsls	r3, r3, #1
 8041b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8041b80:	69ba      	ldr	r2, [r7, #24]
 8041b82:	4313      	orrs	r3, r2
 8041b84:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8041b86:	687b      	ldr	r3, [r7, #4]
 8041b88:	69ba      	ldr	r2, [r7, #24]
 8041b8a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8041b8c:	683b      	ldr	r3, [r7, #0]
 8041b8e:	685b      	ldr	r3, [r3, #4]
 8041b90:	2b02      	cmp	r3, #2
 8041b92:	d003      	beq.n	8041b9c <HAL_GPIO_Init+0xfc>
 8041b94:	683b      	ldr	r3, [r7, #0]
 8041b96:	685b      	ldr	r3, [r3, #4]
 8041b98:	2b12      	cmp	r3, #18
 8041b9a:	d123      	bne.n	8041be4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8041b9c:	69fb      	ldr	r3, [r7, #28]
 8041b9e:	08da      	lsrs	r2, r3, #3
 8041ba0:	687b      	ldr	r3, [r7, #4]
 8041ba2:	3208      	adds	r2, #8
 8041ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8041ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8041baa:	69fb      	ldr	r3, [r7, #28]
 8041bac:	f003 0307 	and.w	r3, r3, #7
 8041bb0:	009b      	lsls	r3, r3, #2
 8041bb2:	220f      	movs	r2, #15
 8041bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8041bb8:	43db      	mvns	r3, r3
 8041bba:	69ba      	ldr	r2, [r7, #24]
 8041bbc:	4013      	ands	r3, r2
 8041bbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8041bc0:	683b      	ldr	r3, [r7, #0]
 8041bc2:	691a      	ldr	r2, [r3, #16]
 8041bc4:	69fb      	ldr	r3, [r7, #28]
 8041bc6:	f003 0307 	and.w	r3, r3, #7
 8041bca:	009b      	lsls	r3, r3, #2
 8041bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8041bd0:	69ba      	ldr	r2, [r7, #24]
 8041bd2:	4313      	orrs	r3, r2
 8041bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8041bd6:	69fb      	ldr	r3, [r7, #28]
 8041bd8:	08da      	lsrs	r2, r3, #3
 8041bda:	687b      	ldr	r3, [r7, #4]
 8041bdc:	3208      	adds	r2, #8
 8041bde:	69b9      	ldr	r1, [r7, #24]
 8041be0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8041be4:	687b      	ldr	r3, [r7, #4]
 8041be6:	681b      	ldr	r3, [r3, #0]
 8041be8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8041bea:	69fb      	ldr	r3, [r7, #28]
 8041bec:	005b      	lsls	r3, r3, #1
 8041bee:	2203      	movs	r2, #3
 8041bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8041bf4:	43db      	mvns	r3, r3
 8041bf6:	69ba      	ldr	r2, [r7, #24]
 8041bf8:	4013      	ands	r3, r2
 8041bfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8041bfc:	683b      	ldr	r3, [r7, #0]
 8041bfe:	685b      	ldr	r3, [r3, #4]
 8041c00:	f003 0203 	and.w	r2, r3, #3
 8041c04:	69fb      	ldr	r3, [r7, #28]
 8041c06:	005b      	lsls	r3, r3, #1
 8041c08:	fa02 f303 	lsl.w	r3, r2, r3
 8041c0c:	69ba      	ldr	r2, [r7, #24]
 8041c0e:	4313      	orrs	r3, r2
 8041c10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8041c12:	687b      	ldr	r3, [r7, #4]
 8041c14:	69ba      	ldr	r2, [r7, #24]
 8041c16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8041c18:	683b      	ldr	r3, [r7, #0]
 8041c1a:	685b      	ldr	r3, [r3, #4]
 8041c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041c20:	2b00      	cmp	r3, #0
 8041c22:	f000 80c0 	beq.w	8041da6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8041c26:	2300      	movs	r3, #0
 8041c28:	60fb      	str	r3, [r7, #12]
 8041c2a:	4b66      	ldr	r3, [pc, #408]	; (8041dc4 <HAL_GPIO_Init+0x324>)
 8041c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041c2e:	4a65      	ldr	r2, [pc, #404]	; (8041dc4 <HAL_GPIO_Init+0x324>)
 8041c30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8041c34:	6453      	str	r3, [r2, #68]	; 0x44
 8041c36:	4b63      	ldr	r3, [pc, #396]	; (8041dc4 <HAL_GPIO_Init+0x324>)
 8041c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8041c3e:	60fb      	str	r3, [r7, #12]
 8041c40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8041c42:	4a61      	ldr	r2, [pc, #388]	; (8041dc8 <HAL_GPIO_Init+0x328>)
 8041c44:	69fb      	ldr	r3, [r7, #28]
 8041c46:	089b      	lsrs	r3, r3, #2
 8041c48:	3302      	adds	r3, #2
 8041c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8041c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8041c50:	69fb      	ldr	r3, [r7, #28]
 8041c52:	f003 0303 	and.w	r3, r3, #3
 8041c56:	009b      	lsls	r3, r3, #2
 8041c58:	220f      	movs	r2, #15
 8041c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8041c5e:	43db      	mvns	r3, r3
 8041c60:	69ba      	ldr	r2, [r7, #24]
 8041c62:	4013      	ands	r3, r2
 8041c64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8041c66:	687b      	ldr	r3, [r7, #4]
 8041c68:	4a58      	ldr	r2, [pc, #352]	; (8041dcc <HAL_GPIO_Init+0x32c>)
 8041c6a:	4293      	cmp	r3, r2
 8041c6c:	d037      	beq.n	8041cde <HAL_GPIO_Init+0x23e>
 8041c6e:	687b      	ldr	r3, [r7, #4]
 8041c70:	4a57      	ldr	r2, [pc, #348]	; (8041dd0 <HAL_GPIO_Init+0x330>)
 8041c72:	4293      	cmp	r3, r2
 8041c74:	d031      	beq.n	8041cda <HAL_GPIO_Init+0x23a>
 8041c76:	687b      	ldr	r3, [r7, #4]
 8041c78:	4a56      	ldr	r2, [pc, #344]	; (8041dd4 <HAL_GPIO_Init+0x334>)
 8041c7a:	4293      	cmp	r3, r2
 8041c7c:	d02b      	beq.n	8041cd6 <HAL_GPIO_Init+0x236>
 8041c7e:	687b      	ldr	r3, [r7, #4]
 8041c80:	4a55      	ldr	r2, [pc, #340]	; (8041dd8 <HAL_GPIO_Init+0x338>)
 8041c82:	4293      	cmp	r3, r2
 8041c84:	d025      	beq.n	8041cd2 <HAL_GPIO_Init+0x232>
 8041c86:	687b      	ldr	r3, [r7, #4]
 8041c88:	4a54      	ldr	r2, [pc, #336]	; (8041ddc <HAL_GPIO_Init+0x33c>)
 8041c8a:	4293      	cmp	r3, r2
 8041c8c:	d01f      	beq.n	8041cce <HAL_GPIO_Init+0x22e>
 8041c8e:	687b      	ldr	r3, [r7, #4]
 8041c90:	4a53      	ldr	r2, [pc, #332]	; (8041de0 <HAL_GPIO_Init+0x340>)
 8041c92:	4293      	cmp	r3, r2
 8041c94:	d019      	beq.n	8041cca <HAL_GPIO_Init+0x22a>
 8041c96:	687b      	ldr	r3, [r7, #4]
 8041c98:	4a52      	ldr	r2, [pc, #328]	; (8041de4 <HAL_GPIO_Init+0x344>)
 8041c9a:	4293      	cmp	r3, r2
 8041c9c:	d013      	beq.n	8041cc6 <HAL_GPIO_Init+0x226>
 8041c9e:	687b      	ldr	r3, [r7, #4]
 8041ca0:	4a51      	ldr	r2, [pc, #324]	; (8041de8 <HAL_GPIO_Init+0x348>)
 8041ca2:	4293      	cmp	r3, r2
 8041ca4:	d00d      	beq.n	8041cc2 <HAL_GPIO_Init+0x222>
 8041ca6:	687b      	ldr	r3, [r7, #4]
 8041ca8:	4a50      	ldr	r2, [pc, #320]	; (8041dec <HAL_GPIO_Init+0x34c>)
 8041caa:	4293      	cmp	r3, r2
 8041cac:	d007      	beq.n	8041cbe <HAL_GPIO_Init+0x21e>
 8041cae:	687b      	ldr	r3, [r7, #4]
 8041cb0:	4a4f      	ldr	r2, [pc, #316]	; (8041df0 <HAL_GPIO_Init+0x350>)
 8041cb2:	4293      	cmp	r3, r2
 8041cb4:	d101      	bne.n	8041cba <HAL_GPIO_Init+0x21a>
 8041cb6:	2309      	movs	r3, #9
 8041cb8:	e012      	b.n	8041ce0 <HAL_GPIO_Init+0x240>
 8041cba:	230a      	movs	r3, #10
 8041cbc:	e010      	b.n	8041ce0 <HAL_GPIO_Init+0x240>
 8041cbe:	2308      	movs	r3, #8
 8041cc0:	e00e      	b.n	8041ce0 <HAL_GPIO_Init+0x240>
 8041cc2:	2307      	movs	r3, #7
 8041cc4:	e00c      	b.n	8041ce0 <HAL_GPIO_Init+0x240>
 8041cc6:	2306      	movs	r3, #6
 8041cc8:	e00a      	b.n	8041ce0 <HAL_GPIO_Init+0x240>
 8041cca:	2305      	movs	r3, #5
 8041ccc:	e008      	b.n	8041ce0 <HAL_GPIO_Init+0x240>
 8041cce:	2304      	movs	r3, #4
 8041cd0:	e006      	b.n	8041ce0 <HAL_GPIO_Init+0x240>
 8041cd2:	2303      	movs	r3, #3
 8041cd4:	e004      	b.n	8041ce0 <HAL_GPIO_Init+0x240>
 8041cd6:	2302      	movs	r3, #2
 8041cd8:	e002      	b.n	8041ce0 <HAL_GPIO_Init+0x240>
 8041cda:	2301      	movs	r3, #1
 8041cdc:	e000      	b.n	8041ce0 <HAL_GPIO_Init+0x240>
 8041cde:	2300      	movs	r3, #0
 8041ce0:	69fa      	ldr	r2, [r7, #28]
 8041ce2:	f002 0203 	and.w	r2, r2, #3
 8041ce6:	0092      	lsls	r2, r2, #2
 8041ce8:	4093      	lsls	r3, r2
 8041cea:	69ba      	ldr	r2, [r7, #24]
 8041cec:	4313      	orrs	r3, r2
 8041cee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8041cf0:	4935      	ldr	r1, [pc, #212]	; (8041dc8 <HAL_GPIO_Init+0x328>)
 8041cf2:	69fb      	ldr	r3, [r7, #28]
 8041cf4:	089b      	lsrs	r3, r3, #2
 8041cf6:	3302      	adds	r3, #2
 8041cf8:	69ba      	ldr	r2, [r7, #24]
 8041cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8041cfe:	4b3d      	ldr	r3, [pc, #244]	; (8041df4 <HAL_GPIO_Init+0x354>)
 8041d00:	681b      	ldr	r3, [r3, #0]
 8041d02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8041d04:	693b      	ldr	r3, [r7, #16]
 8041d06:	43db      	mvns	r3, r3
 8041d08:	69ba      	ldr	r2, [r7, #24]
 8041d0a:	4013      	ands	r3, r2
 8041d0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8041d0e:	683b      	ldr	r3, [r7, #0]
 8041d10:	685b      	ldr	r3, [r3, #4]
 8041d12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8041d16:	2b00      	cmp	r3, #0
 8041d18:	d003      	beq.n	8041d22 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8041d1a:	69ba      	ldr	r2, [r7, #24]
 8041d1c:	693b      	ldr	r3, [r7, #16]
 8041d1e:	4313      	orrs	r3, r2
 8041d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8041d22:	4a34      	ldr	r2, [pc, #208]	; (8041df4 <HAL_GPIO_Init+0x354>)
 8041d24:	69bb      	ldr	r3, [r7, #24]
 8041d26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8041d28:	4b32      	ldr	r3, [pc, #200]	; (8041df4 <HAL_GPIO_Init+0x354>)
 8041d2a:	685b      	ldr	r3, [r3, #4]
 8041d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8041d2e:	693b      	ldr	r3, [r7, #16]
 8041d30:	43db      	mvns	r3, r3
 8041d32:	69ba      	ldr	r2, [r7, #24]
 8041d34:	4013      	ands	r3, r2
 8041d36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8041d38:	683b      	ldr	r3, [r7, #0]
 8041d3a:	685b      	ldr	r3, [r3, #4]
 8041d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041d40:	2b00      	cmp	r3, #0
 8041d42:	d003      	beq.n	8041d4c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8041d44:	69ba      	ldr	r2, [r7, #24]
 8041d46:	693b      	ldr	r3, [r7, #16]
 8041d48:	4313      	orrs	r3, r2
 8041d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8041d4c:	4a29      	ldr	r2, [pc, #164]	; (8041df4 <HAL_GPIO_Init+0x354>)
 8041d4e:	69bb      	ldr	r3, [r7, #24]
 8041d50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8041d52:	4b28      	ldr	r3, [pc, #160]	; (8041df4 <HAL_GPIO_Init+0x354>)
 8041d54:	689b      	ldr	r3, [r3, #8]
 8041d56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8041d58:	693b      	ldr	r3, [r7, #16]
 8041d5a:	43db      	mvns	r3, r3
 8041d5c:	69ba      	ldr	r2, [r7, #24]
 8041d5e:	4013      	ands	r3, r2
 8041d60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8041d62:	683b      	ldr	r3, [r7, #0]
 8041d64:	685b      	ldr	r3, [r3, #4]
 8041d66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8041d6a:	2b00      	cmp	r3, #0
 8041d6c:	d003      	beq.n	8041d76 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8041d6e:	69ba      	ldr	r2, [r7, #24]
 8041d70:	693b      	ldr	r3, [r7, #16]
 8041d72:	4313      	orrs	r3, r2
 8041d74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8041d76:	4a1f      	ldr	r2, [pc, #124]	; (8041df4 <HAL_GPIO_Init+0x354>)
 8041d78:	69bb      	ldr	r3, [r7, #24]
 8041d7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8041d7c:	4b1d      	ldr	r3, [pc, #116]	; (8041df4 <HAL_GPIO_Init+0x354>)
 8041d7e:	68db      	ldr	r3, [r3, #12]
 8041d80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8041d82:	693b      	ldr	r3, [r7, #16]
 8041d84:	43db      	mvns	r3, r3
 8041d86:	69ba      	ldr	r2, [r7, #24]
 8041d88:	4013      	ands	r3, r2
 8041d8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8041d8c:	683b      	ldr	r3, [r7, #0]
 8041d8e:	685b      	ldr	r3, [r3, #4]
 8041d90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8041d94:	2b00      	cmp	r3, #0
 8041d96:	d003      	beq.n	8041da0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8041d98:	69ba      	ldr	r2, [r7, #24]
 8041d9a:	693b      	ldr	r3, [r7, #16]
 8041d9c:	4313      	orrs	r3, r2
 8041d9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8041da0:	4a14      	ldr	r2, [pc, #80]	; (8041df4 <HAL_GPIO_Init+0x354>)
 8041da2:	69bb      	ldr	r3, [r7, #24]
 8041da4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8041da6:	69fb      	ldr	r3, [r7, #28]
 8041da8:	3301      	adds	r3, #1
 8041daa:	61fb      	str	r3, [r7, #28]
 8041dac:	69fb      	ldr	r3, [r7, #28]
 8041dae:	2b0f      	cmp	r3, #15
 8041db0:	f67f ae84 	bls.w	8041abc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8041db4:	bf00      	nop
 8041db6:	bf00      	nop
 8041db8:	3724      	adds	r7, #36	; 0x24
 8041dba:	46bd      	mov	sp, r7
 8041dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041dc0:	4770      	bx	lr
 8041dc2:	bf00      	nop
 8041dc4:	40023800 	.word	0x40023800
 8041dc8:	40013800 	.word	0x40013800
 8041dcc:	40020000 	.word	0x40020000
 8041dd0:	40020400 	.word	0x40020400
 8041dd4:	40020800 	.word	0x40020800
 8041dd8:	40020c00 	.word	0x40020c00
 8041ddc:	40021000 	.word	0x40021000
 8041de0:	40021400 	.word	0x40021400
 8041de4:	40021800 	.word	0x40021800
 8041de8:	40021c00 	.word	0x40021c00
 8041dec:	40022000 	.word	0x40022000
 8041df0:	40022400 	.word	0x40022400
 8041df4:	40013c00 	.word	0x40013c00

08041df8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8041df8:	b480      	push	{r7}
 8041dfa:	b087      	sub	sp, #28
 8041dfc:	af00      	add	r7, sp, #0
 8041dfe:	6078      	str	r0, [r7, #4]
 8041e00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8041e02:	2300      	movs	r3, #0
 8041e04:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8041e06:	2300      	movs	r3, #0
 8041e08:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8041e0a:	2300      	movs	r3, #0
 8041e0c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8041e0e:	2300      	movs	r3, #0
 8041e10:	617b      	str	r3, [r7, #20]
 8041e12:	e0d9      	b.n	8041fc8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8041e14:	2201      	movs	r2, #1
 8041e16:	697b      	ldr	r3, [r7, #20]
 8041e18:	fa02 f303 	lsl.w	r3, r2, r3
 8041e1c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8041e1e:	683a      	ldr	r2, [r7, #0]
 8041e20:	693b      	ldr	r3, [r7, #16]
 8041e22:	4013      	ands	r3, r2
 8041e24:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8041e26:	68fa      	ldr	r2, [r7, #12]
 8041e28:	693b      	ldr	r3, [r7, #16]
 8041e2a:	429a      	cmp	r2, r3
 8041e2c:	f040 80c9 	bne.w	8041fc2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8041e30:	4a6b      	ldr	r2, [pc, #428]	; (8041fe0 <HAL_GPIO_DeInit+0x1e8>)
 8041e32:	697b      	ldr	r3, [r7, #20]
 8041e34:	089b      	lsrs	r3, r3, #2
 8041e36:	3302      	adds	r3, #2
 8041e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8041e3c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8041e3e:	697b      	ldr	r3, [r7, #20]
 8041e40:	f003 0303 	and.w	r3, r3, #3
 8041e44:	009b      	lsls	r3, r3, #2
 8041e46:	220f      	movs	r2, #15
 8041e48:	fa02 f303 	lsl.w	r3, r2, r3
 8041e4c:	68ba      	ldr	r2, [r7, #8]
 8041e4e:	4013      	ands	r3, r2
 8041e50:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8041e52:	687b      	ldr	r3, [r7, #4]
 8041e54:	4a63      	ldr	r2, [pc, #396]	; (8041fe4 <HAL_GPIO_DeInit+0x1ec>)
 8041e56:	4293      	cmp	r3, r2
 8041e58:	d037      	beq.n	8041eca <HAL_GPIO_DeInit+0xd2>
 8041e5a:	687b      	ldr	r3, [r7, #4]
 8041e5c:	4a62      	ldr	r2, [pc, #392]	; (8041fe8 <HAL_GPIO_DeInit+0x1f0>)
 8041e5e:	4293      	cmp	r3, r2
 8041e60:	d031      	beq.n	8041ec6 <HAL_GPIO_DeInit+0xce>
 8041e62:	687b      	ldr	r3, [r7, #4]
 8041e64:	4a61      	ldr	r2, [pc, #388]	; (8041fec <HAL_GPIO_DeInit+0x1f4>)
 8041e66:	4293      	cmp	r3, r2
 8041e68:	d02b      	beq.n	8041ec2 <HAL_GPIO_DeInit+0xca>
 8041e6a:	687b      	ldr	r3, [r7, #4]
 8041e6c:	4a60      	ldr	r2, [pc, #384]	; (8041ff0 <HAL_GPIO_DeInit+0x1f8>)
 8041e6e:	4293      	cmp	r3, r2
 8041e70:	d025      	beq.n	8041ebe <HAL_GPIO_DeInit+0xc6>
 8041e72:	687b      	ldr	r3, [r7, #4]
 8041e74:	4a5f      	ldr	r2, [pc, #380]	; (8041ff4 <HAL_GPIO_DeInit+0x1fc>)
 8041e76:	4293      	cmp	r3, r2
 8041e78:	d01f      	beq.n	8041eba <HAL_GPIO_DeInit+0xc2>
 8041e7a:	687b      	ldr	r3, [r7, #4]
 8041e7c:	4a5e      	ldr	r2, [pc, #376]	; (8041ff8 <HAL_GPIO_DeInit+0x200>)
 8041e7e:	4293      	cmp	r3, r2
 8041e80:	d019      	beq.n	8041eb6 <HAL_GPIO_DeInit+0xbe>
 8041e82:	687b      	ldr	r3, [r7, #4]
 8041e84:	4a5d      	ldr	r2, [pc, #372]	; (8041ffc <HAL_GPIO_DeInit+0x204>)
 8041e86:	4293      	cmp	r3, r2
 8041e88:	d013      	beq.n	8041eb2 <HAL_GPIO_DeInit+0xba>
 8041e8a:	687b      	ldr	r3, [r7, #4]
 8041e8c:	4a5c      	ldr	r2, [pc, #368]	; (8042000 <HAL_GPIO_DeInit+0x208>)
 8041e8e:	4293      	cmp	r3, r2
 8041e90:	d00d      	beq.n	8041eae <HAL_GPIO_DeInit+0xb6>
 8041e92:	687b      	ldr	r3, [r7, #4]
 8041e94:	4a5b      	ldr	r2, [pc, #364]	; (8042004 <HAL_GPIO_DeInit+0x20c>)
 8041e96:	4293      	cmp	r3, r2
 8041e98:	d007      	beq.n	8041eaa <HAL_GPIO_DeInit+0xb2>
 8041e9a:	687b      	ldr	r3, [r7, #4]
 8041e9c:	4a5a      	ldr	r2, [pc, #360]	; (8042008 <HAL_GPIO_DeInit+0x210>)
 8041e9e:	4293      	cmp	r3, r2
 8041ea0:	d101      	bne.n	8041ea6 <HAL_GPIO_DeInit+0xae>
 8041ea2:	2309      	movs	r3, #9
 8041ea4:	e012      	b.n	8041ecc <HAL_GPIO_DeInit+0xd4>
 8041ea6:	230a      	movs	r3, #10
 8041ea8:	e010      	b.n	8041ecc <HAL_GPIO_DeInit+0xd4>
 8041eaa:	2308      	movs	r3, #8
 8041eac:	e00e      	b.n	8041ecc <HAL_GPIO_DeInit+0xd4>
 8041eae:	2307      	movs	r3, #7
 8041eb0:	e00c      	b.n	8041ecc <HAL_GPIO_DeInit+0xd4>
 8041eb2:	2306      	movs	r3, #6
 8041eb4:	e00a      	b.n	8041ecc <HAL_GPIO_DeInit+0xd4>
 8041eb6:	2305      	movs	r3, #5
 8041eb8:	e008      	b.n	8041ecc <HAL_GPIO_DeInit+0xd4>
 8041eba:	2304      	movs	r3, #4
 8041ebc:	e006      	b.n	8041ecc <HAL_GPIO_DeInit+0xd4>
 8041ebe:	2303      	movs	r3, #3
 8041ec0:	e004      	b.n	8041ecc <HAL_GPIO_DeInit+0xd4>
 8041ec2:	2302      	movs	r3, #2
 8041ec4:	e002      	b.n	8041ecc <HAL_GPIO_DeInit+0xd4>
 8041ec6:	2301      	movs	r3, #1
 8041ec8:	e000      	b.n	8041ecc <HAL_GPIO_DeInit+0xd4>
 8041eca:	2300      	movs	r3, #0
 8041ecc:	697a      	ldr	r2, [r7, #20]
 8041ece:	f002 0203 	and.w	r2, r2, #3
 8041ed2:	0092      	lsls	r2, r2, #2
 8041ed4:	4093      	lsls	r3, r2
 8041ed6:	68ba      	ldr	r2, [r7, #8]
 8041ed8:	429a      	cmp	r2, r3
 8041eda:	d132      	bne.n	8041f42 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8041edc:	4b4b      	ldr	r3, [pc, #300]	; (804200c <HAL_GPIO_DeInit+0x214>)
 8041ede:	681a      	ldr	r2, [r3, #0]
 8041ee0:	68fb      	ldr	r3, [r7, #12]
 8041ee2:	43db      	mvns	r3, r3
 8041ee4:	4949      	ldr	r1, [pc, #292]	; (804200c <HAL_GPIO_DeInit+0x214>)
 8041ee6:	4013      	ands	r3, r2
 8041ee8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8041eea:	4b48      	ldr	r3, [pc, #288]	; (804200c <HAL_GPIO_DeInit+0x214>)
 8041eec:	685a      	ldr	r2, [r3, #4]
 8041eee:	68fb      	ldr	r3, [r7, #12]
 8041ef0:	43db      	mvns	r3, r3
 8041ef2:	4946      	ldr	r1, [pc, #280]	; (804200c <HAL_GPIO_DeInit+0x214>)
 8041ef4:	4013      	ands	r3, r2
 8041ef6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8041ef8:	4b44      	ldr	r3, [pc, #272]	; (804200c <HAL_GPIO_DeInit+0x214>)
 8041efa:	689a      	ldr	r2, [r3, #8]
 8041efc:	68fb      	ldr	r3, [r7, #12]
 8041efe:	43db      	mvns	r3, r3
 8041f00:	4942      	ldr	r1, [pc, #264]	; (804200c <HAL_GPIO_DeInit+0x214>)
 8041f02:	4013      	ands	r3, r2
 8041f04:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8041f06:	4b41      	ldr	r3, [pc, #260]	; (804200c <HAL_GPIO_DeInit+0x214>)
 8041f08:	68da      	ldr	r2, [r3, #12]
 8041f0a:	68fb      	ldr	r3, [r7, #12]
 8041f0c:	43db      	mvns	r3, r3
 8041f0e:	493f      	ldr	r1, [pc, #252]	; (804200c <HAL_GPIO_DeInit+0x214>)
 8041f10:	4013      	ands	r3, r2
 8041f12:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8041f14:	697b      	ldr	r3, [r7, #20]
 8041f16:	f003 0303 	and.w	r3, r3, #3
 8041f1a:	009b      	lsls	r3, r3, #2
 8041f1c:	220f      	movs	r2, #15
 8041f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8041f22:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8041f24:	4a2e      	ldr	r2, [pc, #184]	; (8041fe0 <HAL_GPIO_DeInit+0x1e8>)
 8041f26:	697b      	ldr	r3, [r7, #20]
 8041f28:	089b      	lsrs	r3, r3, #2
 8041f2a:	3302      	adds	r3, #2
 8041f2c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8041f30:	68bb      	ldr	r3, [r7, #8]
 8041f32:	43da      	mvns	r2, r3
 8041f34:	482a      	ldr	r0, [pc, #168]	; (8041fe0 <HAL_GPIO_DeInit+0x1e8>)
 8041f36:	697b      	ldr	r3, [r7, #20]
 8041f38:	089b      	lsrs	r3, r3, #2
 8041f3a:	400a      	ands	r2, r1
 8041f3c:	3302      	adds	r3, #2
 8041f3e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8041f42:	687b      	ldr	r3, [r7, #4]
 8041f44:	681a      	ldr	r2, [r3, #0]
 8041f46:	697b      	ldr	r3, [r7, #20]
 8041f48:	005b      	lsls	r3, r3, #1
 8041f4a:	2103      	movs	r1, #3
 8041f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8041f50:	43db      	mvns	r3, r3
 8041f52:	401a      	ands	r2, r3
 8041f54:	687b      	ldr	r3, [r7, #4]
 8041f56:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8041f58:	697b      	ldr	r3, [r7, #20]
 8041f5a:	08da      	lsrs	r2, r3, #3
 8041f5c:	687b      	ldr	r3, [r7, #4]
 8041f5e:	3208      	adds	r2, #8
 8041f60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8041f64:	697b      	ldr	r3, [r7, #20]
 8041f66:	f003 0307 	and.w	r3, r3, #7
 8041f6a:	009b      	lsls	r3, r3, #2
 8041f6c:	220f      	movs	r2, #15
 8041f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8041f72:	43db      	mvns	r3, r3
 8041f74:	697a      	ldr	r2, [r7, #20]
 8041f76:	08d2      	lsrs	r2, r2, #3
 8041f78:	4019      	ands	r1, r3
 8041f7a:	687b      	ldr	r3, [r7, #4]
 8041f7c:	3208      	adds	r2, #8
 8041f7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8041f82:	687b      	ldr	r3, [r7, #4]
 8041f84:	68da      	ldr	r2, [r3, #12]
 8041f86:	697b      	ldr	r3, [r7, #20]
 8041f88:	005b      	lsls	r3, r3, #1
 8041f8a:	2103      	movs	r1, #3
 8041f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8041f90:	43db      	mvns	r3, r3
 8041f92:	401a      	ands	r2, r3
 8041f94:	687b      	ldr	r3, [r7, #4]
 8041f96:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8041f98:	687b      	ldr	r3, [r7, #4]
 8041f9a:	685a      	ldr	r2, [r3, #4]
 8041f9c:	2101      	movs	r1, #1
 8041f9e:	697b      	ldr	r3, [r7, #20]
 8041fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8041fa4:	43db      	mvns	r3, r3
 8041fa6:	401a      	ands	r2, r3
 8041fa8:	687b      	ldr	r3, [r7, #4]
 8041faa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8041fac:	687b      	ldr	r3, [r7, #4]
 8041fae:	689a      	ldr	r2, [r3, #8]
 8041fb0:	697b      	ldr	r3, [r7, #20]
 8041fb2:	005b      	lsls	r3, r3, #1
 8041fb4:	2103      	movs	r1, #3
 8041fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8041fba:	43db      	mvns	r3, r3
 8041fbc:	401a      	ands	r2, r3
 8041fbe:	687b      	ldr	r3, [r7, #4]
 8041fc0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8041fc2:	697b      	ldr	r3, [r7, #20]
 8041fc4:	3301      	adds	r3, #1
 8041fc6:	617b      	str	r3, [r7, #20]
 8041fc8:	697b      	ldr	r3, [r7, #20]
 8041fca:	2b0f      	cmp	r3, #15
 8041fcc:	f67f af22 	bls.w	8041e14 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8041fd0:	bf00      	nop
 8041fd2:	bf00      	nop
 8041fd4:	371c      	adds	r7, #28
 8041fd6:	46bd      	mov	sp, r7
 8041fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041fdc:	4770      	bx	lr
 8041fde:	bf00      	nop
 8041fe0:	40013800 	.word	0x40013800
 8041fe4:	40020000 	.word	0x40020000
 8041fe8:	40020400 	.word	0x40020400
 8041fec:	40020800 	.word	0x40020800
 8041ff0:	40020c00 	.word	0x40020c00
 8041ff4:	40021000 	.word	0x40021000
 8041ff8:	40021400 	.word	0x40021400
 8041ffc:	40021800 	.word	0x40021800
 8042000:	40021c00 	.word	0x40021c00
 8042004:	40022000 	.word	0x40022000
 8042008:	40022400 	.word	0x40022400
 804200c:	40013c00 	.word	0x40013c00

08042010 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8042010:	b480      	push	{r7}
 8042012:	b085      	sub	sp, #20
 8042014:	af00      	add	r7, sp, #0
 8042016:	6078      	str	r0, [r7, #4]
 8042018:	460b      	mov	r3, r1
 804201a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 804201c:	687b      	ldr	r3, [r7, #4]
 804201e:	691a      	ldr	r2, [r3, #16]
 8042020:	887b      	ldrh	r3, [r7, #2]
 8042022:	4013      	ands	r3, r2
 8042024:	2b00      	cmp	r3, #0
 8042026:	d002      	beq.n	804202e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8042028:	2301      	movs	r3, #1
 804202a:	73fb      	strb	r3, [r7, #15]
 804202c:	e001      	b.n	8042032 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 804202e:	2300      	movs	r3, #0
 8042030:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8042032:	7bfb      	ldrb	r3, [r7, #15]
}
 8042034:	4618      	mov	r0, r3
 8042036:	3714      	adds	r7, #20
 8042038:	46bd      	mov	sp, r7
 804203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804203e:	4770      	bx	lr

08042040 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8042040:	b480      	push	{r7}
 8042042:	b083      	sub	sp, #12
 8042044:	af00      	add	r7, sp, #0
 8042046:	6078      	str	r0, [r7, #4]
 8042048:	460b      	mov	r3, r1
 804204a:	807b      	strh	r3, [r7, #2]
 804204c:	4613      	mov	r3, r2
 804204e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8042050:	787b      	ldrb	r3, [r7, #1]
 8042052:	2b00      	cmp	r3, #0
 8042054:	d003      	beq.n	804205e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8042056:	887a      	ldrh	r2, [r7, #2]
 8042058:	687b      	ldr	r3, [r7, #4]
 804205a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 804205c:	e003      	b.n	8042066 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 804205e:	887b      	ldrh	r3, [r7, #2]
 8042060:	041a      	lsls	r2, r3, #16
 8042062:	687b      	ldr	r3, [r7, #4]
 8042064:	619a      	str	r2, [r3, #24]
}
 8042066:	bf00      	nop
 8042068:	370c      	adds	r7, #12
 804206a:	46bd      	mov	sp, r7
 804206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042070:	4770      	bx	lr
	...

08042074 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8042074:	b580      	push	{r7, lr}
 8042076:	b084      	sub	sp, #16
 8042078:	af00      	add	r7, sp, #0
 804207a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 804207c:	687b      	ldr	r3, [r7, #4]
 804207e:	2b00      	cmp	r3, #0
 8042080:	d101      	bne.n	8042086 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8042082:	2301      	movs	r3, #1
 8042084:	e12b      	b.n	80422de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8042086:	687b      	ldr	r3, [r7, #4]
 8042088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 804208c:	b2db      	uxtb	r3, r3
 804208e:	2b00      	cmp	r3, #0
 8042090:	d106      	bne.n	80420a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8042092:	687b      	ldr	r3, [r7, #4]
 8042094:	2200      	movs	r2, #0
 8042096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 804209a:	6878      	ldr	r0, [r7, #4]
 804209c:	f004 fbc2 	bl	8046824 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80420a0:	687b      	ldr	r3, [r7, #4]
 80420a2:	2224      	movs	r2, #36	; 0x24
 80420a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80420a8:	687b      	ldr	r3, [r7, #4]
 80420aa:	681b      	ldr	r3, [r3, #0]
 80420ac:	681a      	ldr	r2, [r3, #0]
 80420ae:	687b      	ldr	r3, [r7, #4]
 80420b0:	681b      	ldr	r3, [r3, #0]
 80420b2:	f022 0201 	bic.w	r2, r2, #1
 80420b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80420b8:	687b      	ldr	r3, [r7, #4]
 80420ba:	681b      	ldr	r3, [r3, #0]
 80420bc:	681a      	ldr	r2, [r3, #0]
 80420be:	687b      	ldr	r3, [r7, #4]
 80420c0:	681b      	ldr	r3, [r3, #0]
 80420c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80420c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80420c8:	687b      	ldr	r3, [r7, #4]
 80420ca:	681b      	ldr	r3, [r3, #0]
 80420cc:	681a      	ldr	r2, [r3, #0]
 80420ce:	687b      	ldr	r3, [r7, #4]
 80420d0:	681b      	ldr	r3, [r3, #0]
 80420d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80420d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80420d8:	f001 ffa4 	bl	8044024 <HAL_RCC_GetPCLK1Freq>
 80420dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80420de:	687b      	ldr	r3, [r7, #4]
 80420e0:	685b      	ldr	r3, [r3, #4]
 80420e2:	4a81      	ldr	r2, [pc, #516]	; (80422e8 <HAL_I2C_Init+0x274>)
 80420e4:	4293      	cmp	r3, r2
 80420e6:	d807      	bhi.n	80420f8 <HAL_I2C_Init+0x84>
 80420e8:	68fb      	ldr	r3, [r7, #12]
 80420ea:	4a80      	ldr	r2, [pc, #512]	; (80422ec <HAL_I2C_Init+0x278>)
 80420ec:	4293      	cmp	r3, r2
 80420ee:	bf94      	ite	ls
 80420f0:	2301      	movls	r3, #1
 80420f2:	2300      	movhi	r3, #0
 80420f4:	b2db      	uxtb	r3, r3
 80420f6:	e006      	b.n	8042106 <HAL_I2C_Init+0x92>
 80420f8:	68fb      	ldr	r3, [r7, #12]
 80420fa:	4a7d      	ldr	r2, [pc, #500]	; (80422f0 <HAL_I2C_Init+0x27c>)
 80420fc:	4293      	cmp	r3, r2
 80420fe:	bf94      	ite	ls
 8042100:	2301      	movls	r3, #1
 8042102:	2300      	movhi	r3, #0
 8042104:	b2db      	uxtb	r3, r3
 8042106:	2b00      	cmp	r3, #0
 8042108:	d001      	beq.n	804210e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 804210a:	2301      	movs	r3, #1
 804210c:	e0e7      	b.n	80422de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 804210e:	68fb      	ldr	r3, [r7, #12]
 8042110:	4a78      	ldr	r2, [pc, #480]	; (80422f4 <HAL_I2C_Init+0x280>)
 8042112:	fba2 2303 	umull	r2, r3, r2, r3
 8042116:	0c9b      	lsrs	r3, r3, #18
 8042118:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 804211a:	687b      	ldr	r3, [r7, #4]
 804211c:	681b      	ldr	r3, [r3, #0]
 804211e:	685b      	ldr	r3, [r3, #4]
 8042120:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8042124:	687b      	ldr	r3, [r7, #4]
 8042126:	681b      	ldr	r3, [r3, #0]
 8042128:	68ba      	ldr	r2, [r7, #8]
 804212a:	430a      	orrs	r2, r1
 804212c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 804212e:	687b      	ldr	r3, [r7, #4]
 8042130:	681b      	ldr	r3, [r3, #0]
 8042132:	6a1b      	ldr	r3, [r3, #32]
 8042134:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8042138:	687b      	ldr	r3, [r7, #4]
 804213a:	685b      	ldr	r3, [r3, #4]
 804213c:	4a6a      	ldr	r2, [pc, #424]	; (80422e8 <HAL_I2C_Init+0x274>)
 804213e:	4293      	cmp	r3, r2
 8042140:	d802      	bhi.n	8042148 <HAL_I2C_Init+0xd4>
 8042142:	68bb      	ldr	r3, [r7, #8]
 8042144:	3301      	adds	r3, #1
 8042146:	e009      	b.n	804215c <HAL_I2C_Init+0xe8>
 8042148:	68bb      	ldr	r3, [r7, #8]
 804214a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 804214e:	fb02 f303 	mul.w	r3, r2, r3
 8042152:	4a69      	ldr	r2, [pc, #420]	; (80422f8 <HAL_I2C_Init+0x284>)
 8042154:	fba2 2303 	umull	r2, r3, r2, r3
 8042158:	099b      	lsrs	r3, r3, #6
 804215a:	3301      	adds	r3, #1
 804215c:	687a      	ldr	r2, [r7, #4]
 804215e:	6812      	ldr	r2, [r2, #0]
 8042160:	430b      	orrs	r3, r1
 8042162:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8042164:	687b      	ldr	r3, [r7, #4]
 8042166:	681b      	ldr	r3, [r3, #0]
 8042168:	69db      	ldr	r3, [r3, #28]
 804216a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 804216e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8042172:	687b      	ldr	r3, [r7, #4]
 8042174:	685b      	ldr	r3, [r3, #4]
 8042176:	495c      	ldr	r1, [pc, #368]	; (80422e8 <HAL_I2C_Init+0x274>)
 8042178:	428b      	cmp	r3, r1
 804217a:	d819      	bhi.n	80421b0 <HAL_I2C_Init+0x13c>
 804217c:	68fb      	ldr	r3, [r7, #12]
 804217e:	1e59      	subs	r1, r3, #1
 8042180:	687b      	ldr	r3, [r7, #4]
 8042182:	685b      	ldr	r3, [r3, #4]
 8042184:	005b      	lsls	r3, r3, #1
 8042186:	fbb1 f3f3 	udiv	r3, r1, r3
 804218a:	1c59      	adds	r1, r3, #1
 804218c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8042190:	400b      	ands	r3, r1
 8042192:	2b00      	cmp	r3, #0
 8042194:	d00a      	beq.n	80421ac <HAL_I2C_Init+0x138>
 8042196:	68fb      	ldr	r3, [r7, #12]
 8042198:	1e59      	subs	r1, r3, #1
 804219a:	687b      	ldr	r3, [r7, #4]
 804219c:	685b      	ldr	r3, [r3, #4]
 804219e:	005b      	lsls	r3, r3, #1
 80421a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80421a4:	3301      	adds	r3, #1
 80421a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80421aa:	e051      	b.n	8042250 <HAL_I2C_Init+0x1dc>
 80421ac:	2304      	movs	r3, #4
 80421ae:	e04f      	b.n	8042250 <HAL_I2C_Init+0x1dc>
 80421b0:	687b      	ldr	r3, [r7, #4]
 80421b2:	689b      	ldr	r3, [r3, #8]
 80421b4:	2b00      	cmp	r3, #0
 80421b6:	d111      	bne.n	80421dc <HAL_I2C_Init+0x168>
 80421b8:	68fb      	ldr	r3, [r7, #12]
 80421ba:	1e58      	subs	r0, r3, #1
 80421bc:	687b      	ldr	r3, [r7, #4]
 80421be:	6859      	ldr	r1, [r3, #4]
 80421c0:	460b      	mov	r3, r1
 80421c2:	005b      	lsls	r3, r3, #1
 80421c4:	440b      	add	r3, r1
 80421c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80421ca:	3301      	adds	r3, #1
 80421cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80421d0:	2b00      	cmp	r3, #0
 80421d2:	bf0c      	ite	eq
 80421d4:	2301      	moveq	r3, #1
 80421d6:	2300      	movne	r3, #0
 80421d8:	b2db      	uxtb	r3, r3
 80421da:	e012      	b.n	8042202 <HAL_I2C_Init+0x18e>
 80421dc:	68fb      	ldr	r3, [r7, #12]
 80421de:	1e58      	subs	r0, r3, #1
 80421e0:	687b      	ldr	r3, [r7, #4]
 80421e2:	6859      	ldr	r1, [r3, #4]
 80421e4:	460b      	mov	r3, r1
 80421e6:	009b      	lsls	r3, r3, #2
 80421e8:	440b      	add	r3, r1
 80421ea:	0099      	lsls	r1, r3, #2
 80421ec:	440b      	add	r3, r1
 80421ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80421f2:	3301      	adds	r3, #1
 80421f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80421f8:	2b00      	cmp	r3, #0
 80421fa:	bf0c      	ite	eq
 80421fc:	2301      	moveq	r3, #1
 80421fe:	2300      	movne	r3, #0
 8042200:	b2db      	uxtb	r3, r3
 8042202:	2b00      	cmp	r3, #0
 8042204:	d001      	beq.n	804220a <HAL_I2C_Init+0x196>
 8042206:	2301      	movs	r3, #1
 8042208:	e022      	b.n	8042250 <HAL_I2C_Init+0x1dc>
 804220a:	687b      	ldr	r3, [r7, #4]
 804220c:	689b      	ldr	r3, [r3, #8]
 804220e:	2b00      	cmp	r3, #0
 8042210:	d10e      	bne.n	8042230 <HAL_I2C_Init+0x1bc>
 8042212:	68fb      	ldr	r3, [r7, #12]
 8042214:	1e58      	subs	r0, r3, #1
 8042216:	687b      	ldr	r3, [r7, #4]
 8042218:	6859      	ldr	r1, [r3, #4]
 804221a:	460b      	mov	r3, r1
 804221c:	005b      	lsls	r3, r3, #1
 804221e:	440b      	add	r3, r1
 8042220:	fbb0 f3f3 	udiv	r3, r0, r3
 8042224:	3301      	adds	r3, #1
 8042226:	f3c3 030b 	ubfx	r3, r3, #0, #12
 804222a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 804222e:	e00f      	b.n	8042250 <HAL_I2C_Init+0x1dc>
 8042230:	68fb      	ldr	r3, [r7, #12]
 8042232:	1e58      	subs	r0, r3, #1
 8042234:	687b      	ldr	r3, [r7, #4]
 8042236:	6859      	ldr	r1, [r3, #4]
 8042238:	460b      	mov	r3, r1
 804223a:	009b      	lsls	r3, r3, #2
 804223c:	440b      	add	r3, r1
 804223e:	0099      	lsls	r1, r3, #2
 8042240:	440b      	add	r3, r1
 8042242:	fbb0 f3f3 	udiv	r3, r0, r3
 8042246:	3301      	adds	r3, #1
 8042248:	f3c3 030b 	ubfx	r3, r3, #0, #12
 804224c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8042250:	6879      	ldr	r1, [r7, #4]
 8042252:	6809      	ldr	r1, [r1, #0]
 8042254:	4313      	orrs	r3, r2
 8042256:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8042258:	687b      	ldr	r3, [r7, #4]
 804225a:	681b      	ldr	r3, [r3, #0]
 804225c:	681b      	ldr	r3, [r3, #0]
 804225e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8042262:	687b      	ldr	r3, [r7, #4]
 8042264:	69da      	ldr	r2, [r3, #28]
 8042266:	687b      	ldr	r3, [r7, #4]
 8042268:	6a1b      	ldr	r3, [r3, #32]
 804226a:	431a      	orrs	r2, r3
 804226c:	687b      	ldr	r3, [r7, #4]
 804226e:	681b      	ldr	r3, [r3, #0]
 8042270:	430a      	orrs	r2, r1
 8042272:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8042274:	687b      	ldr	r3, [r7, #4]
 8042276:	681b      	ldr	r3, [r3, #0]
 8042278:	689b      	ldr	r3, [r3, #8]
 804227a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 804227e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8042282:	687a      	ldr	r2, [r7, #4]
 8042284:	6911      	ldr	r1, [r2, #16]
 8042286:	687a      	ldr	r2, [r7, #4]
 8042288:	68d2      	ldr	r2, [r2, #12]
 804228a:	4311      	orrs	r1, r2
 804228c:	687a      	ldr	r2, [r7, #4]
 804228e:	6812      	ldr	r2, [r2, #0]
 8042290:	430b      	orrs	r3, r1
 8042292:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8042294:	687b      	ldr	r3, [r7, #4]
 8042296:	681b      	ldr	r3, [r3, #0]
 8042298:	68db      	ldr	r3, [r3, #12]
 804229a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 804229e:	687b      	ldr	r3, [r7, #4]
 80422a0:	695a      	ldr	r2, [r3, #20]
 80422a2:	687b      	ldr	r3, [r7, #4]
 80422a4:	699b      	ldr	r3, [r3, #24]
 80422a6:	431a      	orrs	r2, r3
 80422a8:	687b      	ldr	r3, [r7, #4]
 80422aa:	681b      	ldr	r3, [r3, #0]
 80422ac:	430a      	orrs	r2, r1
 80422ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80422b0:	687b      	ldr	r3, [r7, #4]
 80422b2:	681b      	ldr	r3, [r3, #0]
 80422b4:	681a      	ldr	r2, [r3, #0]
 80422b6:	687b      	ldr	r3, [r7, #4]
 80422b8:	681b      	ldr	r3, [r3, #0]
 80422ba:	f042 0201 	orr.w	r2, r2, #1
 80422be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80422c0:	687b      	ldr	r3, [r7, #4]
 80422c2:	2200      	movs	r2, #0
 80422c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80422c6:	687b      	ldr	r3, [r7, #4]
 80422c8:	2220      	movs	r2, #32
 80422ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80422ce:	687b      	ldr	r3, [r7, #4]
 80422d0:	2200      	movs	r2, #0
 80422d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80422d4:	687b      	ldr	r3, [r7, #4]
 80422d6:	2200      	movs	r2, #0
 80422d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80422dc:	2300      	movs	r3, #0
}
 80422de:	4618      	mov	r0, r3
 80422e0:	3710      	adds	r7, #16
 80422e2:	46bd      	mov	sp, r7
 80422e4:	bd80      	pop	{r7, pc}
 80422e6:	bf00      	nop
 80422e8:	000186a0 	.word	0x000186a0
 80422ec:	001e847f 	.word	0x001e847f
 80422f0:	003d08ff 	.word	0x003d08ff
 80422f4:	431bde83 	.word	0x431bde83
 80422f8:	10624dd3 	.word	0x10624dd3

080422fc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80422fc:	b580      	push	{r7, lr}
 80422fe:	b082      	sub	sp, #8
 8042300:	af00      	add	r7, sp, #0
 8042302:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8042304:	687b      	ldr	r3, [r7, #4]
 8042306:	2b00      	cmp	r3, #0
 8042308:	d101      	bne.n	804230e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 804230a:	2301      	movs	r3, #1
 804230c:	e021      	b.n	8042352 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 804230e:	687b      	ldr	r3, [r7, #4]
 8042310:	2224      	movs	r2, #36	; 0x24
 8042312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8042316:	687b      	ldr	r3, [r7, #4]
 8042318:	681b      	ldr	r3, [r3, #0]
 804231a:	681a      	ldr	r2, [r3, #0]
 804231c:	687b      	ldr	r3, [r7, #4]
 804231e:	681b      	ldr	r3, [r3, #0]
 8042320:	f022 0201 	bic.w	r2, r2, #1
 8042324:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8042326:	6878      	ldr	r0, [r7, #4]
 8042328:	f000 f817 	bl	804235a <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 804232c:	687b      	ldr	r3, [r7, #4]
 804232e:	2200      	movs	r2, #0
 8042330:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8042332:	687b      	ldr	r3, [r7, #4]
 8042334:	2200      	movs	r2, #0
 8042336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 804233a:	687b      	ldr	r3, [r7, #4]
 804233c:	2200      	movs	r2, #0
 804233e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8042340:	687b      	ldr	r3, [r7, #4]
 8042342:	2200      	movs	r2, #0
 8042344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8042348:	687b      	ldr	r3, [r7, #4]
 804234a:	2200      	movs	r2, #0
 804234c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8042350:	2300      	movs	r3, #0
}
 8042352:	4618      	mov	r0, r3
 8042354:	3708      	adds	r7, #8
 8042356:	46bd      	mov	sp, r7
 8042358:	bd80      	pop	{r7, pc}

0804235a <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 804235a:	b480      	push	{r7}
 804235c:	b083      	sub	sp, #12
 804235e:	af00      	add	r7, sp, #0
 8042360:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8042362:	bf00      	nop
 8042364:	370c      	adds	r7, #12
 8042366:	46bd      	mov	sp, r7
 8042368:	f85d 7b04 	ldr.w	r7, [sp], #4
 804236c:	4770      	bx	lr
	...

08042370 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8042370:	b580      	push	{r7, lr}
 8042372:	b088      	sub	sp, #32
 8042374:	af02      	add	r7, sp, #8
 8042376:	60f8      	str	r0, [r7, #12]
 8042378:	4608      	mov	r0, r1
 804237a:	4611      	mov	r1, r2
 804237c:	461a      	mov	r2, r3
 804237e:	4603      	mov	r3, r0
 8042380:	817b      	strh	r3, [r7, #10]
 8042382:	460b      	mov	r3, r1
 8042384:	813b      	strh	r3, [r7, #8]
 8042386:	4613      	mov	r3, r2
 8042388:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 804238a:	f7fe fdfd 	bl	8040f88 <HAL_GetTick>
 804238e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8042390:	68fb      	ldr	r3, [r7, #12]
 8042392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8042396:	b2db      	uxtb	r3, r3
 8042398:	2b20      	cmp	r3, #32
 804239a:	f040 80d9 	bne.w	8042550 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 804239e:	697b      	ldr	r3, [r7, #20]
 80423a0:	9300      	str	r3, [sp, #0]
 80423a2:	2319      	movs	r3, #25
 80423a4:	2201      	movs	r2, #1
 80423a6:	496d      	ldr	r1, [pc, #436]	; (804255c <HAL_I2C_Mem_Write+0x1ec>)
 80423a8:	68f8      	ldr	r0, [r7, #12]
 80423aa:	f000 fc8d 	bl	8042cc8 <I2C_WaitOnFlagUntilTimeout>
 80423ae:	4603      	mov	r3, r0
 80423b0:	2b00      	cmp	r3, #0
 80423b2:	d001      	beq.n	80423b8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80423b4:	2302      	movs	r3, #2
 80423b6:	e0cc      	b.n	8042552 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80423b8:	68fb      	ldr	r3, [r7, #12]
 80423ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80423be:	2b01      	cmp	r3, #1
 80423c0:	d101      	bne.n	80423c6 <HAL_I2C_Mem_Write+0x56>
 80423c2:	2302      	movs	r3, #2
 80423c4:	e0c5      	b.n	8042552 <HAL_I2C_Mem_Write+0x1e2>
 80423c6:	68fb      	ldr	r3, [r7, #12]
 80423c8:	2201      	movs	r2, #1
 80423ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80423ce:	68fb      	ldr	r3, [r7, #12]
 80423d0:	681b      	ldr	r3, [r3, #0]
 80423d2:	681b      	ldr	r3, [r3, #0]
 80423d4:	f003 0301 	and.w	r3, r3, #1
 80423d8:	2b01      	cmp	r3, #1
 80423da:	d007      	beq.n	80423ec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80423dc:	68fb      	ldr	r3, [r7, #12]
 80423de:	681b      	ldr	r3, [r3, #0]
 80423e0:	681a      	ldr	r2, [r3, #0]
 80423e2:	68fb      	ldr	r3, [r7, #12]
 80423e4:	681b      	ldr	r3, [r3, #0]
 80423e6:	f042 0201 	orr.w	r2, r2, #1
 80423ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80423ec:	68fb      	ldr	r3, [r7, #12]
 80423ee:	681b      	ldr	r3, [r3, #0]
 80423f0:	681a      	ldr	r2, [r3, #0]
 80423f2:	68fb      	ldr	r3, [r7, #12]
 80423f4:	681b      	ldr	r3, [r3, #0]
 80423f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80423fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80423fc:	68fb      	ldr	r3, [r7, #12]
 80423fe:	2221      	movs	r2, #33	; 0x21
 8042400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8042404:	68fb      	ldr	r3, [r7, #12]
 8042406:	2240      	movs	r2, #64	; 0x40
 8042408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 804240c:	68fb      	ldr	r3, [r7, #12]
 804240e:	2200      	movs	r2, #0
 8042410:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8042412:	68fb      	ldr	r3, [r7, #12]
 8042414:	6a3a      	ldr	r2, [r7, #32]
 8042416:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8042418:	68fb      	ldr	r3, [r7, #12]
 804241a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 804241c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 804241e:	68fb      	ldr	r3, [r7, #12]
 8042420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8042422:	b29a      	uxth	r2, r3
 8042424:	68fb      	ldr	r3, [r7, #12]
 8042426:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8042428:	68fb      	ldr	r3, [r7, #12]
 804242a:	4a4d      	ldr	r2, [pc, #308]	; (8042560 <HAL_I2C_Mem_Write+0x1f0>)
 804242c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 804242e:	88f8      	ldrh	r0, [r7, #6]
 8042430:	893a      	ldrh	r2, [r7, #8]
 8042432:	8979      	ldrh	r1, [r7, #10]
 8042434:	697b      	ldr	r3, [r7, #20]
 8042436:	9301      	str	r3, [sp, #4]
 8042438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804243a:	9300      	str	r3, [sp, #0]
 804243c:	4603      	mov	r3, r0
 804243e:	68f8      	ldr	r0, [r7, #12]
 8042440:	f000 fac4 	bl	80429cc <I2C_RequestMemoryWrite>
 8042444:	4603      	mov	r3, r0
 8042446:	2b00      	cmp	r3, #0
 8042448:	d052      	beq.n	80424f0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 804244a:	2301      	movs	r3, #1
 804244c:	e081      	b.n	8042552 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 804244e:	697a      	ldr	r2, [r7, #20]
 8042450:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8042452:	68f8      	ldr	r0, [r7, #12]
 8042454:	f000 fd0e 	bl	8042e74 <I2C_WaitOnTXEFlagUntilTimeout>
 8042458:	4603      	mov	r3, r0
 804245a:	2b00      	cmp	r3, #0
 804245c:	d00d      	beq.n	804247a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 804245e:	68fb      	ldr	r3, [r7, #12]
 8042460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042462:	2b04      	cmp	r3, #4
 8042464:	d107      	bne.n	8042476 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8042466:	68fb      	ldr	r3, [r7, #12]
 8042468:	681b      	ldr	r3, [r3, #0]
 804246a:	681a      	ldr	r2, [r3, #0]
 804246c:	68fb      	ldr	r3, [r7, #12]
 804246e:	681b      	ldr	r3, [r3, #0]
 8042470:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8042474:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8042476:	2301      	movs	r3, #1
 8042478:	e06b      	b.n	8042552 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 804247a:	68fb      	ldr	r3, [r7, #12]
 804247c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804247e:	781a      	ldrb	r2, [r3, #0]
 8042480:	68fb      	ldr	r3, [r7, #12]
 8042482:	681b      	ldr	r3, [r3, #0]
 8042484:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8042486:	68fb      	ldr	r3, [r7, #12]
 8042488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804248a:	1c5a      	adds	r2, r3, #1
 804248c:	68fb      	ldr	r3, [r7, #12]
 804248e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8042490:	68fb      	ldr	r3, [r7, #12]
 8042492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8042494:	3b01      	subs	r3, #1
 8042496:	b29a      	uxth	r2, r3
 8042498:	68fb      	ldr	r3, [r7, #12]
 804249a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 804249c:	68fb      	ldr	r3, [r7, #12]
 804249e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80424a0:	b29b      	uxth	r3, r3
 80424a2:	3b01      	subs	r3, #1
 80424a4:	b29a      	uxth	r2, r3
 80424a6:	68fb      	ldr	r3, [r7, #12]
 80424a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80424aa:	68fb      	ldr	r3, [r7, #12]
 80424ac:	681b      	ldr	r3, [r3, #0]
 80424ae:	695b      	ldr	r3, [r3, #20]
 80424b0:	f003 0304 	and.w	r3, r3, #4
 80424b4:	2b04      	cmp	r3, #4
 80424b6:	d11b      	bne.n	80424f0 <HAL_I2C_Mem_Write+0x180>
 80424b8:	68fb      	ldr	r3, [r7, #12]
 80424ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80424bc:	2b00      	cmp	r3, #0
 80424be:	d017      	beq.n	80424f0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80424c0:	68fb      	ldr	r3, [r7, #12]
 80424c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80424c4:	781a      	ldrb	r2, [r3, #0]
 80424c6:	68fb      	ldr	r3, [r7, #12]
 80424c8:	681b      	ldr	r3, [r3, #0]
 80424ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80424cc:	68fb      	ldr	r3, [r7, #12]
 80424ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80424d0:	1c5a      	adds	r2, r3, #1
 80424d2:	68fb      	ldr	r3, [r7, #12]
 80424d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80424d6:	68fb      	ldr	r3, [r7, #12]
 80424d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80424da:	3b01      	subs	r3, #1
 80424dc:	b29a      	uxth	r2, r3
 80424de:	68fb      	ldr	r3, [r7, #12]
 80424e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80424e2:	68fb      	ldr	r3, [r7, #12]
 80424e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80424e6:	b29b      	uxth	r3, r3
 80424e8:	3b01      	subs	r3, #1
 80424ea:	b29a      	uxth	r2, r3
 80424ec:	68fb      	ldr	r3, [r7, #12]
 80424ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80424f0:	68fb      	ldr	r3, [r7, #12]
 80424f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80424f4:	2b00      	cmp	r3, #0
 80424f6:	d1aa      	bne.n	804244e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80424f8:	697a      	ldr	r2, [r7, #20]
 80424fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80424fc:	68f8      	ldr	r0, [r7, #12]
 80424fe:	f000 fcfa 	bl	8042ef6 <I2C_WaitOnBTFFlagUntilTimeout>
 8042502:	4603      	mov	r3, r0
 8042504:	2b00      	cmp	r3, #0
 8042506:	d00d      	beq.n	8042524 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8042508:	68fb      	ldr	r3, [r7, #12]
 804250a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804250c:	2b04      	cmp	r3, #4
 804250e:	d107      	bne.n	8042520 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8042510:	68fb      	ldr	r3, [r7, #12]
 8042512:	681b      	ldr	r3, [r3, #0]
 8042514:	681a      	ldr	r2, [r3, #0]
 8042516:	68fb      	ldr	r3, [r7, #12]
 8042518:	681b      	ldr	r3, [r3, #0]
 804251a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 804251e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8042520:	2301      	movs	r3, #1
 8042522:	e016      	b.n	8042552 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8042524:	68fb      	ldr	r3, [r7, #12]
 8042526:	681b      	ldr	r3, [r3, #0]
 8042528:	681a      	ldr	r2, [r3, #0]
 804252a:	68fb      	ldr	r3, [r7, #12]
 804252c:	681b      	ldr	r3, [r3, #0]
 804252e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8042532:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8042534:	68fb      	ldr	r3, [r7, #12]
 8042536:	2220      	movs	r2, #32
 8042538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 804253c:	68fb      	ldr	r3, [r7, #12]
 804253e:	2200      	movs	r2, #0
 8042540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8042544:	68fb      	ldr	r3, [r7, #12]
 8042546:	2200      	movs	r2, #0
 8042548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 804254c:	2300      	movs	r3, #0
 804254e:	e000      	b.n	8042552 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8042550:	2302      	movs	r3, #2
  }
}
 8042552:	4618      	mov	r0, r3
 8042554:	3718      	adds	r7, #24
 8042556:	46bd      	mov	sp, r7
 8042558:	bd80      	pop	{r7, pc}
 804255a:	bf00      	nop
 804255c:	00100002 	.word	0x00100002
 8042560:	ffff0000 	.word	0xffff0000

08042564 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8042564:	b580      	push	{r7, lr}
 8042566:	b08c      	sub	sp, #48	; 0x30
 8042568:	af02      	add	r7, sp, #8
 804256a:	60f8      	str	r0, [r7, #12]
 804256c:	4608      	mov	r0, r1
 804256e:	4611      	mov	r1, r2
 8042570:	461a      	mov	r2, r3
 8042572:	4603      	mov	r3, r0
 8042574:	817b      	strh	r3, [r7, #10]
 8042576:	460b      	mov	r3, r1
 8042578:	813b      	strh	r3, [r7, #8]
 804257a:	4613      	mov	r3, r2
 804257c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 804257e:	f7fe fd03 	bl	8040f88 <HAL_GetTick>
 8042582:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8042584:	68fb      	ldr	r3, [r7, #12]
 8042586:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 804258a:	b2db      	uxtb	r3, r3
 804258c:	2b20      	cmp	r3, #32
 804258e:	f040 8208 	bne.w	80429a2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8042592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8042594:	9300      	str	r3, [sp, #0]
 8042596:	2319      	movs	r3, #25
 8042598:	2201      	movs	r2, #1
 804259a:	497b      	ldr	r1, [pc, #492]	; (8042788 <HAL_I2C_Mem_Read+0x224>)
 804259c:	68f8      	ldr	r0, [r7, #12]
 804259e:	f000 fb93 	bl	8042cc8 <I2C_WaitOnFlagUntilTimeout>
 80425a2:	4603      	mov	r3, r0
 80425a4:	2b00      	cmp	r3, #0
 80425a6:	d001      	beq.n	80425ac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80425a8:	2302      	movs	r3, #2
 80425aa:	e1fb      	b.n	80429a4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80425ac:	68fb      	ldr	r3, [r7, #12]
 80425ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80425b2:	2b01      	cmp	r3, #1
 80425b4:	d101      	bne.n	80425ba <HAL_I2C_Mem_Read+0x56>
 80425b6:	2302      	movs	r3, #2
 80425b8:	e1f4      	b.n	80429a4 <HAL_I2C_Mem_Read+0x440>
 80425ba:	68fb      	ldr	r3, [r7, #12]
 80425bc:	2201      	movs	r2, #1
 80425be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80425c2:	68fb      	ldr	r3, [r7, #12]
 80425c4:	681b      	ldr	r3, [r3, #0]
 80425c6:	681b      	ldr	r3, [r3, #0]
 80425c8:	f003 0301 	and.w	r3, r3, #1
 80425cc:	2b01      	cmp	r3, #1
 80425ce:	d007      	beq.n	80425e0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80425d0:	68fb      	ldr	r3, [r7, #12]
 80425d2:	681b      	ldr	r3, [r3, #0]
 80425d4:	681a      	ldr	r2, [r3, #0]
 80425d6:	68fb      	ldr	r3, [r7, #12]
 80425d8:	681b      	ldr	r3, [r3, #0]
 80425da:	f042 0201 	orr.w	r2, r2, #1
 80425de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80425e0:	68fb      	ldr	r3, [r7, #12]
 80425e2:	681b      	ldr	r3, [r3, #0]
 80425e4:	681a      	ldr	r2, [r3, #0]
 80425e6:	68fb      	ldr	r3, [r7, #12]
 80425e8:	681b      	ldr	r3, [r3, #0]
 80425ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80425ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80425f0:	68fb      	ldr	r3, [r7, #12]
 80425f2:	2222      	movs	r2, #34	; 0x22
 80425f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80425f8:	68fb      	ldr	r3, [r7, #12]
 80425fa:	2240      	movs	r2, #64	; 0x40
 80425fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8042600:	68fb      	ldr	r3, [r7, #12]
 8042602:	2200      	movs	r2, #0
 8042604:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8042606:	68fb      	ldr	r3, [r7, #12]
 8042608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 804260a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 804260c:	68fb      	ldr	r3, [r7, #12]
 804260e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8042610:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8042612:	68fb      	ldr	r3, [r7, #12]
 8042614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8042616:	b29a      	uxth	r2, r3
 8042618:	68fb      	ldr	r3, [r7, #12]
 804261a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 804261c:	68fb      	ldr	r3, [r7, #12]
 804261e:	4a5b      	ldr	r2, [pc, #364]	; (804278c <HAL_I2C_Mem_Read+0x228>)
 8042620:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8042622:	88f8      	ldrh	r0, [r7, #6]
 8042624:	893a      	ldrh	r2, [r7, #8]
 8042626:	8979      	ldrh	r1, [r7, #10]
 8042628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804262a:	9301      	str	r3, [sp, #4]
 804262c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804262e:	9300      	str	r3, [sp, #0]
 8042630:	4603      	mov	r3, r0
 8042632:	68f8      	ldr	r0, [r7, #12]
 8042634:	f000 fa60 	bl	8042af8 <I2C_RequestMemoryRead>
 8042638:	4603      	mov	r3, r0
 804263a:	2b00      	cmp	r3, #0
 804263c:	d001      	beq.n	8042642 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 804263e:	2301      	movs	r3, #1
 8042640:	e1b0      	b.n	80429a4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8042642:	68fb      	ldr	r3, [r7, #12]
 8042644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8042646:	2b00      	cmp	r3, #0
 8042648:	d113      	bne.n	8042672 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 804264a:	2300      	movs	r3, #0
 804264c:	623b      	str	r3, [r7, #32]
 804264e:	68fb      	ldr	r3, [r7, #12]
 8042650:	681b      	ldr	r3, [r3, #0]
 8042652:	695b      	ldr	r3, [r3, #20]
 8042654:	623b      	str	r3, [r7, #32]
 8042656:	68fb      	ldr	r3, [r7, #12]
 8042658:	681b      	ldr	r3, [r3, #0]
 804265a:	699b      	ldr	r3, [r3, #24]
 804265c:	623b      	str	r3, [r7, #32]
 804265e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8042660:	68fb      	ldr	r3, [r7, #12]
 8042662:	681b      	ldr	r3, [r3, #0]
 8042664:	681a      	ldr	r2, [r3, #0]
 8042666:	68fb      	ldr	r3, [r7, #12]
 8042668:	681b      	ldr	r3, [r3, #0]
 804266a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 804266e:	601a      	str	r2, [r3, #0]
 8042670:	e184      	b.n	804297c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8042672:	68fb      	ldr	r3, [r7, #12]
 8042674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8042676:	2b01      	cmp	r3, #1
 8042678:	d11b      	bne.n	80426b2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 804267a:	68fb      	ldr	r3, [r7, #12]
 804267c:	681b      	ldr	r3, [r3, #0]
 804267e:	681a      	ldr	r2, [r3, #0]
 8042680:	68fb      	ldr	r3, [r7, #12]
 8042682:	681b      	ldr	r3, [r3, #0]
 8042684:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8042688:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 804268a:	2300      	movs	r3, #0
 804268c:	61fb      	str	r3, [r7, #28]
 804268e:	68fb      	ldr	r3, [r7, #12]
 8042690:	681b      	ldr	r3, [r3, #0]
 8042692:	695b      	ldr	r3, [r3, #20]
 8042694:	61fb      	str	r3, [r7, #28]
 8042696:	68fb      	ldr	r3, [r7, #12]
 8042698:	681b      	ldr	r3, [r3, #0]
 804269a:	699b      	ldr	r3, [r3, #24]
 804269c:	61fb      	str	r3, [r7, #28]
 804269e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80426a0:	68fb      	ldr	r3, [r7, #12]
 80426a2:	681b      	ldr	r3, [r3, #0]
 80426a4:	681a      	ldr	r2, [r3, #0]
 80426a6:	68fb      	ldr	r3, [r7, #12]
 80426a8:	681b      	ldr	r3, [r3, #0]
 80426aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80426ae:	601a      	str	r2, [r3, #0]
 80426b0:	e164      	b.n	804297c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80426b2:	68fb      	ldr	r3, [r7, #12]
 80426b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80426b6:	2b02      	cmp	r3, #2
 80426b8:	d11b      	bne.n	80426f2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80426ba:	68fb      	ldr	r3, [r7, #12]
 80426bc:	681b      	ldr	r3, [r3, #0]
 80426be:	681a      	ldr	r2, [r3, #0]
 80426c0:	68fb      	ldr	r3, [r7, #12]
 80426c2:	681b      	ldr	r3, [r3, #0]
 80426c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80426c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80426ca:	68fb      	ldr	r3, [r7, #12]
 80426cc:	681b      	ldr	r3, [r3, #0]
 80426ce:	681a      	ldr	r2, [r3, #0]
 80426d0:	68fb      	ldr	r3, [r7, #12]
 80426d2:	681b      	ldr	r3, [r3, #0]
 80426d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80426d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80426da:	2300      	movs	r3, #0
 80426dc:	61bb      	str	r3, [r7, #24]
 80426de:	68fb      	ldr	r3, [r7, #12]
 80426e0:	681b      	ldr	r3, [r3, #0]
 80426e2:	695b      	ldr	r3, [r3, #20]
 80426e4:	61bb      	str	r3, [r7, #24]
 80426e6:	68fb      	ldr	r3, [r7, #12]
 80426e8:	681b      	ldr	r3, [r3, #0]
 80426ea:	699b      	ldr	r3, [r3, #24]
 80426ec:	61bb      	str	r3, [r7, #24]
 80426ee:	69bb      	ldr	r3, [r7, #24]
 80426f0:	e144      	b.n	804297c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80426f2:	2300      	movs	r3, #0
 80426f4:	617b      	str	r3, [r7, #20]
 80426f6:	68fb      	ldr	r3, [r7, #12]
 80426f8:	681b      	ldr	r3, [r3, #0]
 80426fa:	695b      	ldr	r3, [r3, #20]
 80426fc:	617b      	str	r3, [r7, #20]
 80426fe:	68fb      	ldr	r3, [r7, #12]
 8042700:	681b      	ldr	r3, [r3, #0]
 8042702:	699b      	ldr	r3, [r3, #24]
 8042704:	617b      	str	r3, [r7, #20]
 8042706:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8042708:	e138      	b.n	804297c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 804270a:	68fb      	ldr	r3, [r7, #12]
 804270c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 804270e:	2b03      	cmp	r3, #3
 8042710:	f200 80f1 	bhi.w	80428f6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8042714:	68fb      	ldr	r3, [r7, #12]
 8042716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8042718:	2b01      	cmp	r3, #1
 804271a:	d123      	bne.n	8042764 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 804271c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 804271e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8042720:	68f8      	ldr	r0, [r7, #12]
 8042722:	f000 fc29 	bl	8042f78 <I2C_WaitOnRXNEFlagUntilTimeout>
 8042726:	4603      	mov	r3, r0
 8042728:	2b00      	cmp	r3, #0
 804272a:	d001      	beq.n	8042730 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 804272c:	2301      	movs	r3, #1
 804272e:	e139      	b.n	80429a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8042730:	68fb      	ldr	r3, [r7, #12]
 8042732:	681b      	ldr	r3, [r3, #0]
 8042734:	691a      	ldr	r2, [r3, #16]
 8042736:	68fb      	ldr	r3, [r7, #12]
 8042738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804273a:	b2d2      	uxtb	r2, r2
 804273c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 804273e:	68fb      	ldr	r3, [r7, #12]
 8042740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042742:	1c5a      	adds	r2, r3, #1
 8042744:	68fb      	ldr	r3, [r7, #12]
 8042746:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8042748:	68fb      	ldr	r3, [r7, #12]
 804274a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 804274c:	3b01      	subs	r3, #1
 804274e:	b29a      	uxth	r2, r3
 8042750:	68fb      	ldr	r3, [r7, #12]
 8042752:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8042754:	68fb      	ldr	r3, [r7, #12]
 8042756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8042758:	b29b      	uxth	r3, r3
 804275a:	3b01      	subs	r3, #1
 804275c:	b29a      	uxth	r2, r3
 804275e:	68fb      	ldr	r3, [r7, #12]
 8042760:	855a      	strh	r2, [r3, #42]	; 0x2a
 8042762:	e10b      	b.n	804297c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8042764:	68fb      	ldr	r3, [r7, #12]
 8042766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8042768:	2b02      	cmp	r3, #2
 804276a:	d14e      	bne.n	804280a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 804276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804276e:	9300      	str	r3, [sp, #0]
 8042770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8042772:	2200      	movs	r2, #0
 8042774:	4906      	ldr	r1, [pc, #24]	; (8042790 <HAL_I2C_Mem_Read+0x22c>)
 8042776:	68f8      	ldr	r0, [r7, #12]
 8042778:	f000 faa6 	bl	8042cc8 <I2C_WaitOnFlagUntilTimeout>
 804277c:	4603      	mov	r3, r0
 804277e:	2b00      	cmp	r3, #0
 8042780:	d008      	beq.n	8042794 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8042782:	2301      	movs	r3, #1
 8042784:	e10e      	b.n	80429a4 <HAL_I2C_Mem_Read+0x440>
 8042786:	bf00      	nop
 8042788:	00100002 	.word	0x00100002
 804278c:	ffff0000 	.word	0xffff0000
 8042790:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8042794:	68fb      	ldr	r3, [r7, #12]
 8042796:	681b      	ldr	r3, [r3, #0]
 8042798:	681a      	ldr	r2, [r3, #0]
 804279a:	68fb      	ldr	r3, [r7, #12]
 804279c:	681b      	ldr	r3, [r3, #0]
 804279e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80427a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80427a4:	68fb      	ldr	r3, [r7, #12]
 80427a6:	681b      	ldr	r3, [r3, #0]
 80427a8:	691a      	ldr	r2, [r3, #16]
 80427aa:	68fb      	ldr	r3, [r7, #12]
 80427ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80427ae:	b2d2      	uxtb	r2, r2
 80427b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80427b2:	68fb      	ldr	r3, [r7, #12]
 80427b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80427b6:	1c5a      	adds	r2, r3, #1
 80427b8:	68fb      	ldr	r3, [r7, #12]
 80427ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80427bc:	68fb      	ldr	r3, [r7, #12]
 80427be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80427c0:	3b01      	subs	r3, #1
 80427c2:	b29a      	uxth	r2, r3
 80427c4:	68fb      	ldr	r3, [r7, #12]
 80427c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80427c8:	68fb      	ldr	r3, [r7, #12]
 80427ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80427cc:	b29b      	uxth	r3, r3
 80427ce:	3b01      	subs	r3, #1
 80427d0:	b29a      	uxth	r2, r3
 80427d2:	68fb      	ldr	r3, [r7, #12]
 80427d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80427d6:	68fb      	ldr	r3, [r7, #12]
 80427d8:	681b      	ldr	r3, [r3, #0]
 80427da:	691a      	ldr	r2, [r3, #16]
 80427dc:	68fb      	ldr	r3, [r7, #12]
 80427de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80427e0:	b2d2      	uxtb	r2, r2
 80427e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80427e4:	68fb      	ldr	r3, [r7, #12]
 80427e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80427e8:	1c5a      	adds	r2, r3, #1
 80427ea:	68fb      	ldr	r3, [r7, #12]
 80427ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80427ee:	68fb      	ldr	r3, [r7, #12]
 80427f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80427f2:	3b01      	subs	r3, #1
 80427f4:	b29a      	uxth	r2, r3
 80427f6:	68fb      	ldr	r3, [r7, #12]
 80427f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80427fa:	68fb      	ldr	r3, [r7, #12]
 80427fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80427fe:	b29b      	uxth	r3, r3
 8042800:	3b01      	subs	r3, #1
 8042802:	b29a      	uxth	r2, r3
 8042804:	68fb      	ldr	r3, [r7, #12]
 8042806:	855a      	strh	r2, [r3, #42]	; 0x2a
 8042808:	e0b8      	b.n	804297c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 804280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804280c:	9300      	str	r3, [sp, #0]
 804280e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8042810:	2200      	movs	r2, #0
 8042812:	4966      	ldr	r1, [pc, #408]	; (80429ac <HAL_I2C_Mem_Read+0x448>)
 8042814:	68f8      	ldr	r0, [r7, #12]
 8042816:	f000 fa57 	bl	8042cc8 <I2C_WaitOnFlagUntilTimeout>
 804281a:	4603      	mov	r3, r0
 804281c:	2b00      	cmp	r3, #0
 804281e:	d001      	beq.n	8042824 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8042820:	2301      	movs	r3, #1
 8042822:	e0bf      	b.n	80429a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8042824:	68fb      	ldr	r3, [r7, #12]
 8042826:	681b      	ldr	r3, [r3, #0]
 8042828:	681a      	ldr	r2, [r3, #0]
 804282a:	68fb      	ldr	r3, [r7, #12]
 804282c:	681b      	ldr	r3, [r3, #0]
 804282e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8042832:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8042834:	68fb      	ldr	r3, [r7, #12]
 8042836:	681b      	ldr	r3, [r3, #0]
 8042838:	691a      	ldr	r2, [r3, #16]
 804283a:	68fb      	ldr	r3, [r7, #12]
 804283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804283e:	b2d2      	uxtb	r2, r2
 8042840:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8042842:	68fb      	ldr	r3, [r7, #12]
 8042844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042846:	1c5a      	adds	r2, r3, #1
 8042848:	68fb      	ldr	r3, [r7, #12]
 804284a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 804284c:	68fb      	ldr	r3, [r7, #12]
 804284e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8042850:	3b01      	subs	r3, #1
 8042852:	b29a      	uxth	r2, r3
 8042854:	68fb      	ldr	r3, [r7, #12]
 8042856:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8042858:	68fb      	ldr	r3, [r7, #12]
 804285a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 804285c:	b29b      	uxth	r3, r3
 804285e:	3b01      	subs	r3, #1
 8042860:	b29a      	uxth	r2, r3
 8042862:	68fb      	ldr	r3, [r7, #12]
 8042864:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8042866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8042868:	9300      	str	r3, [sp, #0]
 804286a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804286c:	2200      	movs	r2, #0
 804286e:	494f      	ldr	r1, [pc, #316]	; (80429ac <HAL_I2C_Mem_Read+0x448>)
 8042870:	68f8      	ldr	r0, [r7, #12]
 8042872:	f000 fa29 	bl	8042cc8 <I2C_WaitOnFlagUntilTimeout>
 8042876:	4603      	mov	r3, r0
 8042878:	2b00      	cmp	r3, #0
 804287a:	d001      	beq.n	8042880 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 804287c:	2301      	movs	r3, #1
 804287e:	e091      	b.n	80429a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8042880:	68fb      	ldr	r3, [r7, #12]
 8042882:	681b      	ldr	r3, [r3, #0]
 8042884:	681a      	ldr	r2, [r3, #0]
 8042886:	68fb      	ldr	r3, [r7, #12]
 8042888:	681b      	ldr	r3, [r3, #0]
 804288a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 804288e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8042890:	68fb      	ldr	r3, [r7, #12]
 8042892:	681b      	ldr	r3, [r3, #0]
 8042894:	691a      	ldr	r2, [r3, #16]
 8042896:	68fb      	ldr	r3, [r7, #12]
 8042898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804289a:	b2d2      	uxtb	r2, r2
 804289c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 804289e:	68fb      	ldr	r3, [r7, #12]
 80428a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80428a2:	1c5a      	adds	r2, r3, #1
 80428a4:	68fb      	ldr	r3, [r7, #12]
 80428a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80428a8:	68fb      	ldr	r3, [r7, #12]
 80428aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80428ac:	3b01      	subs	r3, #1
 80428ae:	b29a      	uxth	r2, r3
 80428b0:	68fb      	ldr	r3, [r7, #12]
 80428b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80428b4:	68fb      	ldr	r3, [r7, #12]
 80428b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80428b8:	b29b      	uxth	r3, r3
 80428ba:	3b01      	subs	r3, #1
 80428bc:	b29a      	uxth	r2, r3
 80428be:	68fb      	ldr	r3, [r7, #12]
 80428c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80428c2:	68fb      	ldr	r3, [r7, #12]
 80428c4:	681b      	ldr	r3, [r3, #0]
 80428c6:	691a      	ldr	r2, [r3, #16]
 80428c8:	68fb      	ldr	r3, [r7, #12]
 80428ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80428cc:	b2d2      	uxtb	r2, r2
 80428ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80428d0:	68fb      	ldr	r3, [r7, #12]
 80428d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80428d4:	1c5a      	adds	r2, r3, #1
 80428d6:	68fb      	ldr	r3, [r7, #12]
 80428d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80428da:	68fb      	ldr	r3, [r7, #12]
 80428dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80428de:	3b01      	subs	r3, #1
 80428e0:	b29a      	uxth	r2, r3
 80428e2:	68fb      	ldr	r3, [r7, #12]
 80428e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80428e6:	68fb      	ldr	r3, [r7, #12]
 80428e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80428ea:	b29b      	uxth	r3, r3
 80428ec:	3b01      	subs	r3, #1
 80428ee:	b29a      	uxth	r2, r3
 80428f0:	68fb      	ldr	r3, [r7, #12]
 80428f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80428f4:	e042      	b.n	804297c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80428f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80428f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80428fa:	68f8      	ldr	r0, [r7, #12]
 80428fc:	f000 fb3c 	bl	8042f78 <I2C_WaitOnRXNEFlagUntilTimeout>
 8042900:	4603      	mov	r3, r0
 8042902:	2b00      	cmp	r3, #0
 8042904:	d001      	beq.n	804290a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8042906:	2301      	movs	r3, #1
 8042908:	e04c      	b.n	80429a4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 804290a:	68fb      	ldr	r3, [r7, #12]
 804290c:	681b      	ldr	r3, [r3, #0]
 804290e:	691a      	ldr	r2, [r3, #16]
 8042910:	68fb      	ldr	r3, [r7, #12]
 8042912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042914:	b2d2      	uxtb	r2, r2
 8042916:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8042918:	68fb      	ldr	r3, [r7, #12]
 804291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804291c:	1c5a      	adds	r2, r3, #1
 804291e:	68fb      	ldr	r3, [r7, #12]
 8042920:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8042922:	68fb      	ldr	r3, [r7, #12]
 8042924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8042926:	3b01      	subs	r3, #1
 8042928:	b29a      	uxth	r2, r3
 804292a:	68fb      	ldr	r3, [r7, #12]
 804292c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 804292e:	68fb      	ldr	r3, [r7, #12]
 8042930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8042932:	b29b      	uxth	r3, r3
 8042934:	3b01      	subs	r3, #1
 8042936:	b29a      	uxth	r2, r3
 8042938:	68fb      	ldr	r3, [r7, #12]
 804293a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 804293c:	68fb      	ldr	r3, [r7, #12]
 804293e:	681b      	ldr	r3, [r3, #0]
 8042940:	695b      	ldr	r3, [r3, #20]
 8042942:	f003 0304 	and.w	r3, r3, #4
 8042946:	2b04      	cmp	r3, #4
 8042948:	d118      	bne.n	804297c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 804294a:	68fb      	ldr	r3, [r7, #12]
 804294c:	681b      	ldr	r3, [r3, #0]
 804294e:	691a      	ldr	r2, [r3, #16]
 8042950:	68fb      	ldr	r3, [r7, #12]
 8042952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042954:	b2d2      	uxtb	r2, r2
 8042956:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8042958:	68fb      	ldr	r3, [r7, #12]
 804295a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804295c:	1c5a      	adds	r2, r3, #1
 804295e:	68fb      	ldr	r3, [r7, #12]
 8042960:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8042962:	68fb      	ldr	r3, [r7, #12]
 8042964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8042966:	3b01      	subs	r3, #1
 8042968:	b29a      	uxth	r2, r3
 804296a:	68fb      	ldr	r3, [r7, #12]
 804296c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 804296e:	68fb      	ldr	r3, [r7, #12]
 8042970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8042972:	b29b      	uxth	r3, r3
 8042974:	3b01      	subs	r3, #1
 8042976:	b29a      	uxth	r2, r3
 8042978:	68fb      	ldr	r3, [r7, #12]
 804297a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 804297c:	68fb      	ldr	r3, [r7, #12]
 804297e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8042980:	2b00      	cmp	r3, #0
 8042982:	f47f aec2 	bne.w	804270a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8042986:	68fb      	ldr	r3, [r7, #12]
 8042988:	2220      	movs	r2, #32
 804298a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 804298e:	68fb      	ldr	r3, [r7, #12]
 8042990:	2200      	movs	r2, #0
 8042992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8042996:	68fb      	ldr	r3, [r7, #12]
 8042998:	2200      	movs	r2, #0
 804299a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 804299e:	2300      	movs	r3, #0
 80429a0:	e000      	b.n	80429a4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80429a2:	2302      	movs	r3, #2
  }
}
 80429a4:	4618      	mov	r0, r3
 80429a6:	3728      	adds	r7, #40	; 0x28
 80429a8:	46bd      	mov	sp, r7
 80429aa:	bd80      	pop	{r7, pc}
 80429ac:	00010004 	.word	0x00010004

080429b0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80429b0:	b480      	push	{r7}
 80429b2:	b083      	sub	sp, #12
 80429b4:	af00      	add	r7, sp, #0
 80429b6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80429b8:	687b      	ldr	r3, [r7, #4]
 80429ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80429be:	b2db      	uxtb	r3, r3
}
 80429c0:	4618      	mov	r0, r3
 80429c2:	370c      	adds	r7, #12
 80429c4:	46bd      	mov	sp, r7
 80429c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80429ca:	4770      	bx	lr

080429cc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80429cc:	b580      	push	{r7, lr}
 80429ce:	b088      	sub	sp, #32
 80429d0:	af02      	add	r7, sp, #8
 80429d2:	60f8      	str	r0, [r7, #12]
 80429d4:	4608      	mov	r0, r1
 80429d6:	4611      	mov	r1, r2
 80429d8:	461a      	mov	r2, r3
 80429da:	4603      	mov	r3, r0
 80429dc:	817b      	strh	r3, [r7, #10]
 80429de:	460b      	mov	r3, r1
 80429e0:	813b      	strh	r3, [r7, #8]
 80429e2:	4613      	mov	r3, r2
 80429e4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80429e6:	68fb      	ldr	r3, [r7, #12]
 80429e8:	681b      	ldr	r3, [r3, #0]
 80429ea:	681a      	ldr	r2, [r3, #0]
 80429ec:	68fb      	ldr	r3, [r7, #12]
 80429ee:	681b      	ldr	r3, [r3, #0]
 80429f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80429f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80429f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80429f8:	9300      	str	r3, [sp, #0]
 80429fa:	6a3b      	ldr	r3, [r7, #32]
 80429fc:	2200      	movs	r2, #0
 80429fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8042a02:	68f8      	ldr	r0, [r7, #12]
 8042a04:	f000 f960 	bl	8042cc8 <I2C_WaitOnFlagUntilTimeout>
 8042a08:	4603      	mov	r3, r0
 8042a0a:	2b00      	cmp	r3, #0
 8042a0c:	d00d      	beq.n	8042a2a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8042a0e:	68fb      	ldr	r3, [r7, #12]
 8042a10:	681b      	ldr	r3, [r3, #0]
 8042a12:	681b      	ldr	r3, [r3, #0]
 8042a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8042a18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8042a1c:	d103      	bne.n	8042a26 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8042a1e:	68fb      	ldr	r3, [r7, #12]
 8042a20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8042a24:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8042a26:	2303      	movs	r3, #3
 8042a28:	e05f      	b.n	8042aea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8042a2a:	897b      	ldrh	r3, [r7, #10]
 8042a2c:	b2db      	uxtb	r3, r3
 8042a2e:	461a      	mov	r2, r3
 8042a30:	68fb      	ldr	r3, [r7, #12]
 8042a32:	681b      	ldr	r3, [r3, #0]
 8042a34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8042a38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8042a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8042a3c:	6a3a      	ldr	r2, [r7, #32]
 8042a3e:	492d      	ldr	r1, [pc, #180]	; (8042af4 <I2C_RequestMemoryWrite+0x128>)
 8042a40:	68f8      	ldr	r0, [r7, #12]
 8042a42:	f000 f998 	bl	8042d76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8042a46:	4603      	mov	r3, r0
 8042a48:	2b00      	cmp	r3, #0
 8042a4a:	d001      	beq.n	8042a50 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8042a4c:	2301      	movs	r3, #1
 8042a4e:	e04c      	b.n	8042aea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8042a50:	2300      	movs	r3, #0
 8042a52:	617b      	str	r3, [r7, #20]
 8042a54:	68fb      	ldr	r3, [r7, #12]
 8042a56:	681b      	ldr	r3, [r3, #0]
 8042a58:	695b      	ldr	r3, [r3, #20]
 8042a5a:	617b      	str	r3, [r7, #20]
 8042a5c:	68fb      	ldr	r3, [r7, #12]
 8042a5e:	681b      	ldr	r3, [r3, #0]
 8042a60:	699b      	ldr	r3, [r3, #24]
 8042a62:	617b      	str	r3, [r7, #20]
 8042a64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8042a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8042a68:	6a39      	ldr	r1, [r7, #32]
 8042a6a:	68f8      	ldr	r0, [r7, #12]
 8042a6c:	f000 fa02 	bl	8042e74 <I2C_WaitOnTXEFlagUntilTimeout>
 8042a70:	4603      	mov	r3, r0
 8042a72:	2b00      	cmp	r3, #0
 8042a74:	d00d      	beq.n	8042a92 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8042a76:	68fb      	ldr	r3, [r7, #12]
 8042a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042a7a:	2b04      	cmp	r3, #4
 8042a7c:	d107      	bne.n	8042a8e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8042a7e:	68fb      	ldr	r3, [r7, #12]
 8042a80:	681b      	ldr	r3, [r3, #0]
 8042a82:	681a      	ldr	r2, [r3, #0]
 8042a84:	68fb      	ldr	r3, [r7, #12]
 8042a86:	681b      	ldr	r3, [r3, #0]
 8042a88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8042a8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8042a8e:	2301      	movs	r3, #1
 8042a90:	e02b      	b.n	8042aea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8042a92:	88fb      	ldrh	r3, [r7, #6]
 8042a94:	2b01      	cmp	r3, #1
 8042a96:	d105      	bne.n	8042aa4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8042a98:	893b      	ldrh	r3, [r7, #8]
 8042a9a:	b2da      	uxtb	r2, r3
 8042a9c:	68fb      	ldr	r3, [r7, #12]
 8042a9e:	681b      	ldr	r3, [r3, #0]
 8042aa0:	611a      	str	r2, [r3, #16]
 8042aa2:	e021      	b.n	8042ae8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8042aa4:	893b      	ldrh	r3, [r7, #8]
 8042aa6:	0a1b      	lsrs	r3, r3, #8
 8042aa8:	b29b      	uxth	r3, r3
 8042aaa:	b2da      	uxtb	r2, r3
 8042aac:	68fb      	ldr	r3, [r7, #12]
 8042aae:	681b      	ldr	r3, [r3, #0]
 8042ab0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8042ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8042ab4:	6a39      	ldr	r1, [r7, #32]
 8042ab6:	68f8      	ldr	r0, [r7, #12]
 8042ab8:	f000 f9dc 	bl	8042e74 <I2C_WaitOnTXEFlagUntilTimeout>
 8042abc:	4603      	mov	r3, r0
 8042abe:	2b00      	cmp	r3, #0
 8042ac0:	d00d      	beq.n	8042ade <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8042ac2:	68fb      	ldr	r3, [r7, #12]
 8042ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042ac6:	2b04      	cmp	r3, #4
 8042ac8:	d107      	bne.n	8042ada <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8042aca:	68fb      	ldr	r3, [r7, #12]
 8042acc:	681b      	ldr	r3, [r3, #0]
 8042ace:	681a      	ldr	r2, [r3, #0]
 8042ad0:	68fb      	ldr	r3, [r7, #12]
 8042ad2:	681b      	ldr	r3, [r3, #0]
 8042ad4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8042ad8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8042ada:	2301      	movs	r3, #1
 8042adc:	e005      	b.n	8042aea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8042ade:	893b      	ldrh	r3, [r7, #8]
 8042ae0:	b2da      	uxtb	r2, r3
 8042ae2:	68fb      	ldr	r3, [r7, #12]
 8042ae4:	681b      	ldr	r3, [r3, #0]
 8042ae6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8042ae8:	2300      	movs	r3, #0
}
 8042aea:	4618      	mov	r0, r3
 8042aec:	3718      	adds	r7, #24
 8042aee:	46bd      	mov	sp, r7
 8042af0:	bd80      	pop	{r7, pc}
 8042af2:	bf00      	nop
 8042af4:	00010002 	.word	0x00010002

08042af8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8042af8:	b580      	push	{r7, lr}
 8042afa:	b088      	sub	sp, #32
 8042afc:	af02      	add	r7, sp, #8
 8042afe:	60f8      	str	r0, [r7, #12]
 8042b00:	4608      	mov	r0, r1
 8042b02:	4611      	mov	r1, r2
 8042b04:	461a      	mov	r2, r3
 8042b06:	4603      	mov	r3, r0
 8042b08:	817b      	strh	r3, [r7, #10]
 8042b0a:	460b      	mov	r3, r1
 8042b0c:	813b      	strh	r3, [r7, #8]
 8042b0e:	4613      	mov	r3, r2
 8042b10:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8042b12:	68fb      	ldr	r3, [r7, #12]
 8042b14:	681b      	ldr	r3, [r3, #0]
 8042b16:	681a      	ldr	r2, [r3, #0]
 8042b18:	68fb      	ldr	r3, [r7, #12]
 8042b1a:	681b      	ldr	r3, [r3, #0]
 8042b1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8042b20:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8042b22:	68fb      	ldr	r3, [r7, #12]
 8042b24:	681b      	ldr	r3, [r3, #0]
 8042b26:	681a      	ldr	r2, [r3, #0]
 8042b28:	68fb      	ldr	r3, [r7, #12]
 8042b2a:	681b      	ldr	r3, [r3, #0]
 8042b2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8042b30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8042b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8042b34:	9300      	str	r3, [sp, #0]
 8042b36:	6a3b      	ldr	r3, [r7, #32]
 8042b38:	2200      	movs	r2, #0
 8042b3a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8042b3e:	68f8      	ldr	r0, [r7, #12]
 8042b40:	f000 f8c2 	bl	8042cc8 <I2C_WaitOnFlagUntilTimeout>
 8042b44:	4603      	mov	r3, r0
 8042b46:	2b00      	cmp	r3, #0
 8042b48:	d00d      	beq.n	8042b66 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8042b4a:	68fb      	ldr	r3, [r7, #12]
 8042b4c:	681b      	ldr	r3, [r3, #0]
 8042b4e:	681b      	ldr	r3, [r3, #0]
 8042b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8042b54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8042b58:	d103      	bne.n	8042b62 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8042b5a:	68fb      	ldr	r3, [r7, #12]
 8042b5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8042b60:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8042b62:	2303      	movs	r3, #3
 8042b64:	e0aa      	b.n	8042cbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8042b66:	897b      	ldrh	r3, [r7, #10]
 8042b68:	b2db      	uxtb	r3, r3
 8042b6a:	461a      	mov	r2, r3
 8042b6c:	68fb      	ldr	r3, [r7, #12]
 8042b6e:	681b      	ldr	r3, [r3, #0]
 8042b70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8042b74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8042b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8042b78:	6a3a      	ldr	r2, [r7, #32]
 8042b7a:	4952      	ldr	r1, [pc, #328]	; (8042cc4 <I2C_RequestMemoryRead+0x1cc>)
 8042b7c:	68f8      	ldr	r0, [r7, #12]
 8042b7e:	f000 f8fa 	bl	8042d76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8042b82:	4603      	mov	r3, r0
 8042b84:	2b00      	cmp	r3, #0
 8042b86:	d001      	beq.n	8042b8c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8042b88:	2301      	movs	r3, #1
 8042b8a:	e097      	b.n	8042cbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8042b8c:	2300      	movs	r3, #0
 8042b8e:	617b      	str	r3, [r7, #20]
 8042b90:	68fb      	ldr	r3, [r7, #12]
 8042b92:	681b      	ldr	r3, [r3, #0]
 8042b94:	695b      	ldr	r3, [r3, #20]
 8042b96:	617b      	str	r3, [r7, #20]
 8042b98:	68fb      	ldr	r3, [r7, #12]
 8042b9a:	681b      	ldr	r3, [r3, #0]
 8042b9c:	699b      	ldr	r3, [r3, #24]
 8042b9e:	617b      	str	r3, [r7, #20]
 8042ba0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8042ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8042ba4:	6a39      	ldr	r1, [r7, #32]
 8042ba6:	68f8      	ldr	r0, [r7, #12]
 8042ba8:	f000 f964 	bl	8042e74 <I2C_WaitOnTXEFlagUntilTimeout>
 8042bac:	4603      	mov	r3, r0
 8042bae:	2b00      	cmp	r3, #0
 8042bb0:	d00d      	beq.n	8042bce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8042bb2:	68fb      	ldr	r3, [r7, #12]
 8042bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042bb6:	2b04      	cmp	r3, #4
 8042bb8:	d107      	bne.n	8042bca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8042bba:	68fb      	ldr	r3, [r7, #12]
 8042bbc:	681b      	ldr	r3, [r3, #0]
 8042bbe:	681a      	ldr	r2, [r3, #0]
 8042bc0:	68fb      	ldr	r3, [r7, #12]
 8042bc2:	681b      	ldr	r3, [r3, #0]
 8042bc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8042bc8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8042bca:	2301      	movs	r3, #1
 8042bcc:	e076      	b.n	8042cbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8042bce:	88fb      	ldrh	r3, [r7, #6]
 8042bd0:	2b01      	cmp	r3, #1
 8042bd2:	d105      	bne.n	8042be0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8042bd4:	893b      	ldrh	r3, [r7, #8]
 8042bd6:	b2da      	uxtb	r2, r3
 8042bd8:	68fb      	ldr	r3, [r7, #12]
 8042bda:	681b      	ldr	r3, [r3, #0]
 8042bdc:	611a      	str	r2, [r3, #16]
 8042bde:	e021      	b.n	8042c24 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8042be0:	893b      	ldrh	r3, [r7, #8]
 8042be2:	0a1b      	lsrs	r3, r3, #8
 8042be4:	b29b      	uxth	r3, r3
 8042be6:	b2da      	uxtb	r2, r3
 8042be8:	68fb      	ldr	r3, [r7, #12]
 8042bea:	681b      	ldr	r3, [r3, #0]
 8042bec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8042bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8042bf0:	6a39      	ldr	r1, [r7, #32]
 8042bf2:	68f8      	ldr	r0, [r7, #12]
 8042bf4:	f000 f93e 	bl	8042e74 <I2C_WaitOnTXEFlagUntilTimeout>
 8042bf8:	4603      	mov	r3, r0
 8042bfa:	2b00      	cmp	r3, #0
 8042bfc:	d00d      	beq.n	8042c1a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8042bfe:	68fb      	ldr	r3, [r7, #12]
 8042c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042c02:	2b04      	cmp	r3, #4
 8042c04:	d107      	bne.n	8042c16 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8042c06:	68fb      	ldr	r3, [r7, #12]
 8042c08:	681b      	ldr	r3, [r3, #0]
 8042c0a:	681a      	ldr	r2, [r3, #0]
 8042c0c:	68fb      	ldr	r3, [r7, #12]
 8042c0e:	681b      	ldr	r3, [r3, #0]
 8042c10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8042c14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8042c16:	2301      	movs	r3, #1
 8042c18:	e050      	b.n	8042cbc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8042c1a:	893b      	ldrh	r3, [r7, #8]
 8042c1c:	b2da      	uxtb	r2, r3
 8042c1e:	68fb      	ldr	r3, [r7, #12]
 8042c20:	681b      	ldr	r3, [r3, #0]
 8042c22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8042c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8042c26:	6a39      	ldr	r1, [r7, #32]
 8042c28:	68f8      	ldr	r0, [r7, #12]
 8042c2a:	f000 f923 	bl	8042e74 <I2C_WaitOnTXEFlagUntilTimeout>
 8042c2e:	4603      	mov	r3, r0
 8042c30:	2b00      	cmp	r3, #0
 8042c32:	d00d      	beq.n	8042c50 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8042c34:	68fb      	ldr	r3, [r7, #12]
 8042c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042c38:	2b04      	cmp	r3, #4
 8042c3a:	d107      	bne.n	8042c4c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8042c3c:	68fb      	ldr	r3, [r7, #12]
 8042c3e:	681b      	ldr	r3, [r3, #0]
 8042c40:	681a      	ldr	r2, [r3, #0]
 8042c42:	68fb      	ldr	r3, [r7, #12]
 8042c44:	681b      	ldr	r3, [r3, #0]
 8042c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8042c4a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8042c4c:	2301      	movs	r3, #1
 8042c4e:	e035      	b.n	8042cbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8042c50:	68fb      	ldr	r3, [r7, #12]
 8042c52:	681b      	ldr	r3, [r3, #0]
 8042c54:	681a      	ldr	r2, [r3, #0]
 8042c56:	68fb      	ldr	r3, [r7, #12]
 8042c58:	681b      	ldr	r3, [r3, #0]
 8042c5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8042c5e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8042c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8042c62:	9300      	str	r3, [sp, #0]
 8042c64:	6a3b      	ldr	r3, [r7, #32]
 8042c66:	2200      	movs	r2, #0
 8042c68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8042c6c:	68f8      	ldr	r0, [r7, #12]
 8042c6e:	f000 f82b 	bl	8042cc8 <I2C_WaitOnFlagUntilTimeout>
 8042c72:	4603      	mov	r3, r0
 8042c74:	2b00      	cmp	r3, #0
 8042c76:	d00d      	beq.n	8042c94 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8042c78:	68fb      	ldr	r3, [r7, #12]
 8042c7a:	681b      	ldr	r3, [r3, #0]
 8042c7c:	681b      	ldr	r3, [r3, #0]
 8042c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8042c82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8042c86:	d103      	bne.n	8042c90 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8042c88:	68fb      	ldr	r3, [r7, #12]
 8042c8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8042c8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8042c90:	2303      	movs	r3, #3
 8042c92:	e013      	b.n	8042cbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8042c94:	897b      	ldrh	r3, [r7, #10]
 8042c96:	b2db      	uxtb	r3, r3
 8042c98:	f043 0301 	orr.w	r3, r3, #1
 8042c9c:	b2da      	uxtb	r2, r3
 8042c9e:	68fb      	ldr	r3, [r7, #12]
 8042ca0:	681b      	ldr	r3, [r3, #0]
 8042ca2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8042ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8042ca6:	6a3a      	ldr	r2, [r7, #32]
 8042ca8:	4906      	ldr	r1, [pc, #24]	; (8042cc4 <I2C_RequestMemoryRead+0x1cc>)
 8042caa:	68f8      	ldr	r0, [r7, #12]
 8042cac:	f000 f863 	bl	8042d76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8042cb0:	4603      	mov	r3, r0
 8042cb2:	2b00      	cmp	r3, #0
 8042cb4:	d001      	beq.n	8042cba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8042cb6:	2301      	movs	r3, #1
 8042cb8:	e000      	b.n	8042cbc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8042cba:	2300      	movs	r3, #0
}
 8042cbc:	4618      	mov	r0, r3
 8042cbe:	3718      	adds	r7, #24
 8042cc0:	46bd      	mov	sp, r7
 8042cc2:	bd80      	pop	{r7, pc}
 8042cc4:	00010002 	.word	0x00010002

08042cc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8042cc8:	b580      	push	{r7, lr}
 8042cca:	b084      	sub	sp, #16
 8042ccc:	af00      	add	r7, sp, #0
 8042cce:	60f8      	str	r0, [r7, #12]
 8042cd0:	60b9      	str	r1, [r7, #8]
 8042cd2:	603b      	str	r3, [r7, #0]
 8042cd4:	4613      	mov	r3, r2
 8042cd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8042cd8:	e025      	b.n	8042d26 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8042cda:	683b      	ldr	r3, [r7, #0]
 8042cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8042ce0:	d021      	beq.n	8042d26 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8042ce2:	f7fe f951 	bl	8040f88 <HAL_GetTick>
 8042ce6:	4602      	mov	r2, r0
 8042ce8:	69bb      	ldr	r3, [r7, #24]
 8042cea:	1ad3      	subs	r3, r2, r3
 8042cec:	683a      	ldr	r2, [r7, #0]
 8042cee:	429a      	cmp	r2, r3
 8042cf0:	d302      	bcc.n	8042cf8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8042cf2:	683b      	ldr	r3, [r7, #0]
 8042cf4:	2b00      	cmp	r3, #0
 8042cf6:	d116      	bne.n	8042d26 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8042cf8:	68fb      	ldr	r3, [r7, #12]
 8042cfa:	2200      	movs	r2, #0
 8042cfc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8042cfe:	68fb      	ldr	r3, [r7, #12]
 8042d00:	2220      	movs	r2, #32
 8042d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8042d06:	68fb      	ldr	r3, [r7, #12]
 8042d08:	2200      	movs	r2, #0
 8042d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8042d0e:	68fb      	ldr	r3, [r7, #12]
 8042d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042d12:	f043 0220 	orr.w	r2, r3, #32
 8042d16:	68fb      	ldr	r3, [r7, #12]
 8042d18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8042d1a:	68fb      	ldr	r3, [r7, #12]
 8042d1c:	2200      	movs	r2, #0
 8042d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8042d22:	2301      	movs	r3, #1
 8042d24:	e023      	b.n	8042d6e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8042d26:	68bb      	ldr	r3, [r7, #8]
 8042d28:	0c1b      	lsrs	r3, r3, #16
 8042d2a:	b2db      	uxtb	r3, r3
 8042d2c:	2b01      	cmp	r3, #1
 8042d2e:	d10d      	bne.n	8042d4c <I2C_WaitOnFlagUntilTimeout+0x84>
 8042d30:	68fb      	ldr	r3, [r7, #12]
 8042d32:	681b      	ldr	r3, [r3, #0]
 8042d34:	695b      	ldr	r3, [r3, #20]
 8042d36:	43da      	mvns	r2, r3
 8042d38:	68bb      	ldr	r3, [r7, #8]
 8042d3a:	4013      	ands	r3, r2
 8042d3c:	b29b      	uxth	r3, r3
 8042d3e:	2b00      	cmp	r3, #0
 8042d40:	bf0c      	ite	eq
 8042d42:	2301      	moveq	r3, #1
 8042d44:	2300      	movne	r3, #0
 8042d46:	b2db      	uxtb	r3, r3
 8042d48:	461a      	mov	r2, r3
 8042d4a:	e00c      	b.n	8042d66 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8042d4c:	68fb      	ldr	r3, [r7, #12]
 8042d4e:	681b      	ldr	r3, [r3, #0]
 8042d50:	699b      	ldr	r3, [r3, #24]
 8042d52:	43da      	mvns	r2, r3
 8042d54:	68bb      	ldr	r3, [r7, #8]
 8042d56:	4013      	ands	r3, r2
 8042d58:	b29b      	uxth	r3, r3
 8042d5a:	2b00      	cmp	r3, #0
 8042d5c:	bf0c      	ite	eq
 8042d5e:	2301      	moveq	r3, #1
 8042d60:	2300      	movne	r3, #0
 8042d62:	b2db      	uxtb	r3, r3
 8042d64:	461a      	mov	r2, r3
 8042d66:	79fb      	ldrb	r3, [r7, #7]
 8042d68:	429a      	cmp	r2, r3
 8042d6a:	d0b6      	beq.n	8042cda <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8042d6c:	2300      	movs	r3, #0
}
 8042d6e:	4618      	mov	r0, r3
 8042d70:	3710      	adds	r7, #16
 8042d72:	46bd      	mov	sp, r7
 8042d74:	bd80      	pop	{r7, pc}

08042d76 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8042d76:	b580      	push	{r7, lr}
 8042d78:	b084      	sub	sp, #16
 8042d7a:	af00      	add	r7, sp, #0
 8042d7c:	60f8      	str	r0, [r7, #12]
 8042d7e:	60b9      	str	r1, [r7, #8]
 8042d80:	607a      	str	r2, [r7, #4]
 8042d82:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8042d84:	e051      	b.n	8042e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8042d86:	68fb      	ldr	r3, [r7, #12]
 8042d88:	681b      	ldr	r3, [r3, #0]
 8042d8a:	695b      	ldr	r3, [r3, #20]
 8042d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8042d90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8042d94:	d123      	bne.n	8042dde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8042d96:	68fb      	ldr	r3, [r7, #12]
 8042d98:	681b      	ldr	r3, [r3, #0]
 8042d9a:	681a      	ldr	r2, [r3, #0]
 8042d9c:	68fb      	ldr	r3, [r7, #12]
 8042d9e:	681b      	ldr	r3, [r3, #0]
 8042da0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8042da4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8042da6:	68fb      	ldr	r3, [r7, #12]
 8042da8:	681b      	ldr	r3, [r3, #0]
 8042daa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8042dae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8042db0:	68fb      	ldr	r3, [r7, #12]
 8042db2:	2200      	movs	r2, #0
 8042db4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8042db6:	68fb      	ldr	r3, [r7, #12]
 8042db8:	2220      	movs	r2, #32
 8042dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8042dbe:	68fb      	ldr	r3, [r7, #12]
 8042dc0:	2200      	movs	r2, #0
 8042dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8042dc6:	68fb      	ldr	r3, [r7, #12]
 8042dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042dca:	f043 0204 	orr.w	r2, r3, #4
 8042dce:	68fb      	ldr	r3, [r7, #12]
 8042dd0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8042dd2:	68fb      	ldr	r3, [r7, #12]
 8042dd4:	2200      	movs	r2, #0
 8042dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8042dda:	2301      	movs	r3, #1
 8042ddc:	e046      	b.n	8042e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8042dde:	687b      	ldr	r3, [r7, #4]
 8042de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8042de4:	d021      	beq.n	8042e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8042de6:	f7fe f8cf 	bl	8040f88 <HAL_GetTick>
 8042dea:	4602      	mov	r2, r0
 8042dec:	683b      	ldr	r3, [r7, #0]
 8042dee:	1ad3      	subs	r3, r2, r3
 8042df0:	687a      	ldr	r2, [r7, #4]
 8042df2:	429a      	cmp	r2, r3
 8042df4:	d302      	bcc.n	8042dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8042df6:	687b      	ldr	r3, [r7, #4]
 8042df8:	2b00      	cmp	r3, #0
 8042dfa:	d116      	bne.n	8042e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8042dfc:	68fb      	ldr	r3, [r7, #12]
 8042dfe:	2200      	movs	r2, #0
 8042e00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8042e02:	68fb      	ldr	r3, [r7, #12]
 8042e04:	2220      	movs	r2, #32
 8042e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8042e0a:	68fb      	ldr	r3, [r7, #12]
 8042e0c:	2200      	movs	r2, #0
 8042e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8042e12:	68fb      	ldr	r3, [r7, #12]
 8042e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042e16:	f043 0220 	orr.w	r2, r3, #32
 8042e1a:	68fb      	ldr	r3, [r7, #12]
 8042e1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8042e1e:	68fb      	ldr	r3, [r7, #12]
 8042e20:	2200      	movs	r2, #0
 8042e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8042e26:	2301      	movs	r3, #1
 8042e28:	e020      	b.n	8042e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8042e2a:	68bb      	ldr	r3, [r7, #8]
 8042e2c:	0c1b      	lsrs	r3, r3, #16
 8042e2e:	b2db      	uxtb	r3, r3
 8042e30:	2b01      	cmp	r3, #1
 8042e32:	d10c      	bne.n	8042e4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8042e34:	68fb      	ldr	r3, [r7, #12]
 8042e36:	681b      	ldr	r3, [r3, #0]
 8042e38:	695b      	ldr	r3, [r3, #20]
 8042e3a:	43da      	mvns	r2, r3
 8042e3c:	68bb      	ldr	r3, [r7, #8]
 8042e3e:	4013      	ands	r3, r2
 8042e40:	b29b      	uxth	r3, r3
 8042e42:	2b00      	cmp	r3, #0
 8042e44:	bf14      	ite	ne
 8042e46:	2301      	movne	r3, #1
 8042e48:	2300      	moveq	r3, #0
 8042e4a:	b2db      	uxtb	r3, r3
 8042e4c:	e00b      	b.n	8042e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8042e4e:	68fb      	ldr	r3, [r7, #12]
 8042e50:	681b      	ldr	r3, [r3, #0]
 8042e52:	699b      	ldr	r3, [r3, #24]
 8042e54:	43da      	mvns	r2, r3
 8042e56:	68bb      	ldr	r3, [r7, #8]
 8042e58:	4013      	ands	r3, r2
 8042e5a:	b29b      	uxth	r3, r3
 8042e5c:	2b00      	cmp	r3, #0
 8042e5e:	bf14      	ite	ne
 8042e60:	2301      	movne	r3, #1
 8042e62:	2300      	moveq	r3, #0
 8042e64:	b2db      	uxtb	r3, r3
 8042e66:	2b00      	cmp	r3, #0
 8042e68:	d18d      	bne.n	8042d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8042e6a:	2300      	movs	r3, #0
}
 8042e6c:	4618      	mov	r0, r3
 8042e6e:	3710      	adds	r7, #16
 8042e70:	46bd      	mov	sp, r7
 8042e72:	bd80      	pop	{r7, pc}

08042e74 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8042e74:	b580      	push	{r7, lr}
 8042e76:	b084      	sub	sp, #16
 8042e78:	af00      	add	r7, sp, #0
 8042e7a:	60f8      	str	r0, [r7, #12]
 8042e7c:	60b9      	str	r1, [r7, #8]
 8042e7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8042e80:	e02d      	b.n	8042ede <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8042e82:	68f8      	ldr	r0, [r7, #12]
 8042e84:	f000 f8ce 	bl	8043024 <I2C_IsAcknowledgeFailed>
 8042e88:	4603      	mov	r3, r0
 8042e8a:	2b00      	cmp	r3, #0
 8042e8c:	d001      	beq.n	8042e92 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8042e8e:	2301      	movs	r3, #1
 8042e90:	e02d      	b.n	8042eee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8042e92:	68bb      	ldr	r3, [r7, #8]
 8042e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8042e98:	d021      	beq.n	8042ede <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8042e9a:	f7fe f875 	bl	8040f88 <HAL_GetTick>
 8042e9e:	4602      	mov	r2, r0
 8042ea0:	687b      	ldr	r3, [r7, #4]
 8042ea2:	1ad3      	subs	r3, r2, r3
 8042ea4:	68ba      	ldr	r2, [r7, #8]
 8042ea6:	429a      	cmp	r2, r3
 8042ea8:	d302      	bcc.n	8042eb0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8042eaa:	68bb      	ldr	r3, [r7, #8]
 8042eac:	2b00      	cmp	r3, #0
 8042eae:	d116      	bne.n	8042ede <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8042eb0:	68fb      	ldr	r3, [r7, #12]
 8042eb2:	2200      	movs	r2, #0
 8042eb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8042eb6:	68fb      	ldr	r3, [r7, #12]
 8042eb8:	2220      	movs	r2, #32
 8042eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8042ebe:	68fb      	ldr	r3, [r7, #12]
 8042ec0:	2200      	movs	r2, #0
 8042ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8042ec6:	68fb      	ldr	r3, [r7, #12]
 8042ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042eca:	f043 0220 	orr.w	r2, r3, #32
 8042ece:	68fb      	ldr	r3, [r7, #12]
 8042ed0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8042ed2:	68fb      	ldr	r3, [r7, #12]
 8042ed4:	2200      	movs	r2, #0
 8042ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8042eda:	2301      	movs	r3, #1
 8042edc:	e007      	b.n	8042eee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8042ede:	68fb      	ldr	r3, [r7, #12]
 8042ee0:	681b      	ldr	r3, [r3, #0]
 8042ee2:	695b      	ldr	r3, [r3, #20]
 8042ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8042ee8:	2b80      	cmp	r3, #128	; 0x80
 8042eea:	d1ca      	bne.n	8042e82 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8042eec:	2300      	movs	r3, #0
}
 8042eee:	4618      	mov	r0, r3
 8042ef0:	3710      	adds	r7, #16
 8042ef2:	46bd      	mov	sp, r7
 8042ef4:	bd80      	pop	{r7, pc}

08042ef6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8042ef6:	b580      	push	{r7, lr}
 8042ef8:	b084      	sub	sp, #16
 8042efa:	af00      	add	r7, sp, #0
 8042efc:	60f8      	str	r0, [r7, #12]
 8042efe:	60b9      	str	r1, [r7, #8]
 8042f00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8042f02:	e02d      	b.n	8042f60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8042f04:	68f8      	ldr	r0, [r7, #12]
 8042f06:	f000 f88d 	bl	8043024 <I2C_IsAcknowledgeFailed>
 8042f0a:	4603      	mov	r3, r0
 8042f0c:	2b00      	cmp	r3, #0
 8042f0e:	d001      	beq.n	8042f14 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8042f10:	2301      	movs	r3, #1
 8042f12:	e02d      	b.n	8042f70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8042f14:	68bb      	ldr	r3, [r7, #8]
 8042f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8042f1a:	d021      	beq.n	8042f60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8042f1c:	f7fe f834 	bl	8040f88 <HAL_GetTick>
 8042f20:	4602      	mov	r2, r0
 8042f22:	687b      	ldr	r3, [r7, #4]
 8042f24:	1ad3      	subs	r3, r2, r3
 8042f26:	68ba      	ldr	r2, [r7, #8]
 8042f28:	429a      	cmp	r2, r3
 8042f2a:	d302      	bcc.n	8042f32 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8042f2c:	68bb      	ldr	r3, [r7, #8]
 8042f2e:	2b00      	cmp	r3, #0
 8042f30:	d116      	bne.n	8042f60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8042f32:	68fb      	ldr	r3, [r7, #12]
 8042f34:	2200      	movs	r2, #0
 8042f36:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8042f38:	68fb      	ldr	r3, [r7, #12]
 8042f3a:	2220      	movs	r2, #32
 8042f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8042f40:	68fb      	ldr	r3, [r7, #12]
 8042f42:	2200      	movs	r2, #0
 8042f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8042f48:	68fb      	ldr	r3, [r7, #12]
 8042f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042f4c:	f043 0220 	orr.w	r2, r3, #32
 8042f50:	68fb      	ldr	r3, [r7, #12]
 8042f52:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8042f54:	68fb      	ldr	r3, [r7, #12]
 8042f56:	2200      	movs	r2, #0
 8042f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8042f5c:	2301      	movs	r3, #1
 8042f5e:	e007      	b.n	8042f70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8042f60:	68fb      	ldr	r3, [r7, #12]
 8042f62:	681b      	ldr	r3, [r3, #0]
 8042f64:	695b      	ldr	r3, [r3, #20]
 8042f66:	f003 0304 	and.w	r3, r3, #4
 8042f6a:	2b04      	cmp	r3, #4
 8042f6c:	d1ca      	bne.n	8042f04 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8042f6e:	2300      	movs	r3, #0
}
 8042f70:	4618      	mov	r0, r3
 8042f72:	3710      	adds	r7, #16
 8042f74:	46bd      	mov	sp, r7
 8042f76:	bd80      	pop	{r7, pc}

08042f78 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8042f78:	b580      	push	{r7, lr}
 8042f7a:	b084      	sub	sp, #16
 8042f7c:	af00      	add	r7, sp, #0
 8042f7e:	60f8      	str	r0, [r7, #12]
 8042f80:	60b9      	str	r1, [r7, #8]
 8042f82:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8042f84:	e042      	b.n	804300c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8042f86:	68fb      	ldr	r3, [r7, #12]
 8042f88:	681b      	ldr	r3, [r3, #0]
 8042f8a:	695b      	ldr	r3, [r3, #20]
 8042f8c:	f003 0310 	and.w	r3, r3, #16
 8042f90:	2b10      	cmp	r3, #16
 8042f92:	d119      	bne.n	8042fc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8042f94:	68fb      	ldr	r3, [r7, #12]
 8042f96:	681b      	ldr	r3, [r3, #0]
 8042f98:	f06f 0210 	mvn.w	r2, #16
 8042f9c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8042f9e:	68fb      	ldr	r3, [r7, #12]
 8042fa0:	2200      	movs	r2, #0
 8042fa2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8042fa4:	68fb      	ldr	r3, [r7, #12]
 8042fa6:	2220      	movs	r2, #32
 8042fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8042fac:	68fb      	ldr	r3, [r7, #12]
 8042fae:	2200      	movs	r2, #0
 8042fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8042fb4:	68fb      	ldr	r3, [r7, #12]
 8042fb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8042fb8:	68fb      	ldr	r3, [r7, #12]
 8042fba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8042fbc:	68fb      	ldr	r3, [r7, #12]
 8042fbe:	2200      	movs	r2, #0
 8042fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8042fc4:	2301      	movs	r3, #1
 8042fc6:	e029      	b.n	804301c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8042fc8:	f7fd ffde 	bl	8040f88 <HAL_GetTick>
 8042fcc:	4602      	mov	r2, r0
 8042fce:	687b      	ldr	r3, [r7, #4]
 8042fd0:	1ad3      	subs	r3, r2, r3
 8042fd2:	68ba      	ldr	r2, [r7, #8]
 8042fd4:	429a      	cmp	r2, r3
 8042fd6:	d302      	bcc.n	8042fde <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8042fd8:	68bb      	ldr	r3, [r7, #8]
 8042fda:	2b00      	cmp	r3, #0
 8042fdc:	d116      	bne.n	804300c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8042fde:	68fb      	ldr	r3, [r7, #12]
 8042fe0:	2200      	movs	r2, #0
 8042fe2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8042fe4:	68fb      	ldr	r3, [r7, #12]
 8042fe6:	2220      	movs	r2, #32
 8042fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8042fec:	68fb      	ldr	r3, [r7, #12]
 8042fee:	2200      	movs	r2, #0
 8042ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8042ff4:	68fb      	ldr	r3, [r7, #12]
 8042ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042ff8:	f043 0220 	orr.w	r2, r3, #32
 8042ffc:	68fb      	ldr	r3, [r7, #12]
 8042ffe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8043000:	68fb      	ldr	r3, [r7, #12]
 8043002:	2200      	movs	r2, #0
 8043004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8043008:	2301      	movs	r3, #1
 804300a:	e007      	b.n	804301c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 804300c:	68fb      	ldr	r3, [r7, #12]
 804300e:	681b      	ldr	r3, [r3, #0]
 8043010:	695b      	ldr	r3, [r3, #20]
 8043012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8043016:	2b40      	cmp	r3, #64	; 0x40
 8043018:	d1b5      	bne.n	8042f86 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 804301a:	2300      	movs	r3, #0
}
 804301c:	4618      	mov	r0, r3
 804301e:	3710      	adds	r7, #16
 8043020:	46bd      	mov	sp, r7
 8043022:	bd80      	pop	{r7, pc}

08043024 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8043024:	b480      	push	{r7}
 8043026:	b083      	sub	sp, #12
 8043028:	af00      	add	r7, sp, #0
 804302a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 804302c:	687b      	ldr	r3, [r7, #4]
 804302e:	681b      	ldr	r3, [r3, #0]
 8043030:	695b      	ldr	r3, [r3, #20]
 8043032:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8043036:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 804303a:	d11b      	bne.n	8043074 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 804303c:	687b      	ldr	r3, [r7, #4]
 804303e:	681b      	ldr	r3, [r3, #0]
 8043040:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8043044:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8043046:	687b      	ldr	r3, [r7, #4]
 8043048:	2200      	movs	r2, #0
 804304a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 804304c:	687b      	ldr	r3, [r7, #4]
 804304e:	2220      	movs	r2, #32
 8043050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8043054:	687b      	ldr	r3, [r7, #4]
 8043056:	2200      	movs	r2, #0
 8043058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 804305c:	687b      	ldr	r3, [r7, #4]
 804305e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043060:	f043 0204 	orr.w	r2, r3, #4
 8043064:	687b      	ldr	r3, [r7, #4]
 8043066:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8043068:	687b      	ldr	r3, [r7, #4]
 804306a:	2200      	movs	r2, #0
 804306c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8043070:	2301      	movs	r3, #1
 8043072:	e000      	b.n	8043076 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8043074:	2300      	movs	r3, #0
}
 8043076:	4618      	mov	r0, r3
 8043078:	370c      	adds	r7, #12
 804307a:	46bd      	mov	sp, r7
 804307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043080:	4770      	bx	lr
	...

08043084 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8043084:	b580      	push	{r7, lr}
 8043086:	b084      	sub	sp, #16
 8043088:	af00      	add	r7, sp, #0
 804308a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 804308c:	687b      	ldr	r3, [r7, #4]
 804308e:	2b00      	cmp	r3, #0
 8043090:	d101      	bne.n	8043096 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8043092:	2301      	movs	r3, #1
 8043094:	e0bf      	b.n	8043216 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8043096:	687b      	ldr	r3, [r7, #4]
 8043098:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 804309c:	b2db      	uxtb	r3, r3
 804309e:	2b00      	cmp	r3, #0
 80430a0:	d106      	bne.n	80430b0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80430a2:	687b      	ldr	r3, [r7, #4]
 80430a4:	2200      	movs	r2, #0
 80430a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80430aa:	6878      	ldr	r0, [r7, #4]
 80430ac:	f002 fb24 	bl	80456f8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80430b0:	687b      	ldr	r3, [r7, #4]
 80430b2:	2202      	movs	r2, #2
 80430b4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80430b8:	687b      	ldr	r3, [r7, #4]
 80430ba:	681b      	ldr	r3, [r3, #0]
 80430bc:	699a      	ldr	r2, [r3, #24]
 80430be:	687b      	ldr	r3, [r7, #4]
 80430c0:	681b      	ldr	r3, [r3, #0]
 80430c2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80430c6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80430c8:	687b      	ldr	r3, [r7, #4]
 80430ca:	681b      	ldr	r3, [r3, #0]
 80430cc:	6999      	ldr	r1, [r3, #24]
 80430ce:	687b      	ldr	r3, [r7, #4]
 80430d0:	685a      	ldr	r2, [r3, #4]
 80430d2:	687b      	ldr	r3, [r7, #4]
 80430d4:	689b      	ldr	r3, [r3, #8]
 80430d6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80430d8:	687b      	ldr	r3, [r7, #4]
 80430da:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80430dc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80430de:	687b      	ldr	r3, [r7, #4]
 80430e0:	691b      	ldr	r3, [r3, #16]
 80430e2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80430e4:	687b      	ldr	r3, [r7, #4]
 80430e6:	681b      	ldr	r3, [r3, #0]
 80430e8:	430a      	orrs	r2, r1
 80430ea:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80430ec:	687b      	ldr	r3, [r7, #4]
 80430ee:	681b      	ldr	r3, [r3, #0]
 80430f0:	6899      	ldr	r1, [r3, #8]
 80430f2:	687b      	ldr	r3, [r7, #4]
 80430f4:	681a      	ldr	r2, [r3, #0]
 80430f6:	4b4a      	ldr	r3, [pc, #296]	; (8043220 <HAL_LTDC_Init+0x19c>)
 80430f8:	400b      	ands	r3, r1
 80430fa:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80430fc:	687b      	ldr	r3, [r7, #4]
 80430fe:	695b      	ldr	r3, [r3, #20]
 8043100:	041b      	lsls	r3, r3, #16
 8043102:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8043104:	687b      	ldr	r3, [r7, #4]
 8043106:	681b      	ldr	r3, [r3, #0]
 8043108:	6899      	ldr	r1, [r3, #8]
 804310a:	687b      	ldr	r3, [r7, #4]
 804310c:	699a      	ldr	r2, [r3, #24]
 804310e:	68fb      	ldr	r3, [r7, #12]
 8043110:	431a      	orrs	r2, r3
 8043112:	687b      	ldr	r3, [r7, #4]
 8043114:	681b      	ldr	r3, [r3, #0]
 8043116:	430a      	orrs	r2, r1
 8043118:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 804311a:	687b      	ldr	r3, [r7, #4]
 804311c:	681b      	ldr	r3, [r3, #0]
 804311e:	68d9      	ldr	r1, [r3, #12]
 8043120:	687b      	ldr	r3, [r7, #4]
 8043122:	681a      	ldr	r2, [r3, #0]
 8043124:	4b3e      	ldr	r3, [pc, #248]	; (8043220 <HAL_LTDC_Init+0x19c>)
 8043126:	400b      	ands	r3, r1
 8043128:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 804312a:	687b      	ldr	r3, [r7, #4]
 804312c:	69db      	ldr	r3, [r3, #28]
 804312e:	041b      	lsls	r3, r3, #16
 8043130:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8043132:	687b      	ldr	r3, [r7, #4]
 8043134:	681b      	ldr	r3, [r3, #0]
 8043136:	68d9      	ldr	r1, [r3, #12]
 8043138:	687b      	ldr	r3, [r7, #4]
 804313a:	6a1a      	ldr	r2, [r3, #32]
 804313c:	68fb      	ldr	r3, [r7, #12]
 804313e:	431a      	orrs	r2, r3
 8043140:	687b      	ldr	r3, [r7, #4]
 8043142:	681b      	ldr	r3, [r3, #0]
 8043144:	430a      	orrs	r2, r1
 8043146:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8043148:	687b      	ldr	r3, [r7, #4]
 804314a:	681b      	ldr	r3, [r3, #0]
 804314c:	6919      	ldr	r1, [r3, #16]
 804314e:	687b      	ldr	r3, [r7, #4]
 8043150:	681a      	ldr	r2, [r3, #0]
 8043152:	4b33      	ldr	r3, [pc, #204]	; (8043220 <HAL_LTDC_Init+0x19c>)
 8043154:	400b      	ands	r3, r1
 8043156:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8043158:	687b      	ldr	r3, [r7, #4]
 804315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804315c:	041b      	lsls	r3, r3, #16
 804315e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8043160:	687b      	ldr	r3, [r7, #4]
 8043162:	681b      	ldr	r3, [r3, #0]
 8043164:	6919      	ldr	r1, [r3, #16]
 8043166:	687b      	ldr	r3, [r7, #4]
 8043168:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 804316a:	68fb      	ldr	r3, [r7, #12]
 804316c:	431a      	orrs	r2, r3
 804316e:	687b      	ldr	r3, [r7, #4]
 8043170:	681b      	ldr	r3, [r3, #0]
 8043172:	430a      	orrs	r2, r1
 8043174:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8043176:	687b      	ldr	r3, [r7, #4]
 8043178:	681b      	ldr	r3, [r3, #0]
 804317a:	6959      	ldr	r1, [r3, #20]
 804317c:	687b      	ldr	r3, [r7, #4]
 804317e:	681a      	ldr	r2, [r3, #0]
 8043180:	4b27      	ldr	r3, [pc, #156]	; (8043220 <HAL_LTDC_Init+0x19c>)
 8043182:	400b      	ands	r3, r1
 8043184:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8043186:	687b      	ldr	r3, [r7, #4]
 8043188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804318a:	041b      	lsls	r3, r3, #16
 804318c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 804318e:	687b      	ldr	r3, [r7, #4]
 8043190:	681b      	ldr	r3, [r3, #0]
 8043192:	6959      	ldr	r1, [r3, #20]
 8043194:	687b      	ldr	r3, [r7, #4]
 8043196:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8043198:	68fb      	ldr	r3, [r7, #12]
 804319a:	431a      	orrs	r2, r3
 804319c:	687b      	ldr	r3, [r7, #4]
 804319e:	681b      	ldr	r3, [r3, #0]
 80431a0:	430a      	orrs	r2, r1
 80431a2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80431a4:	687b      	ldr	r3, [r7, #4]
 80431a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80431aa:	021b      	lsls	r3, r3, #8
 80431ac:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80431ae:	687b      	ldr	r3, [r7, #4]
 80431b0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80431b4:	041b      	lsls	r3, r3, #16
 80431b6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80431b8:	687b      	ldr	r3, [r7, #4]
 80431ba:	681b      	ldr	r3, [r3, #0]
 80431bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80431be:	687b      	ldr	r3, [r7, #4]
 80431c0:	681b      	ldr	r3, [r3, #0]
 80431c2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80431c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80431c8:	687b      	ldr	r3, [r7, #4]
 80431ca:	681b      	ldr	r3, [r3, #0]
 80431cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80431ce:	68ba      	ldr	r2, [r7, #8]
 80431d0:	68fb      	ldr	r3, [r7, #12]
 80431d2:	4313      	orrs	r3, r2
 80431d4:	687a      	ldr	r2, [r7, #4]
 80431d6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80431da:	431a      	orrs	r2, r3
 80431dc:	687b      	ldr	r3, [r7, #4]
 80431de:	681b      	ldr	r3, [r3, #0]
 80431e0:	430a      	orrs	r2, r1
 80431e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80431e4:	687b      	ldr	r3, [r7, #4]
 80431e6:	681b      	ldr	r3, [r3, #0]
 80431e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80431ea:	687b      	ldr	r3, [r7, #4]
 80431ec:	681b      	ldr	r3, [r3, #0]
 80431ee:	f042 0206 	orr.w	r2, r2, #6
 80431f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80431f4:	687b      	ldr	r3, [r7, #4]
 80431f6:	681b      	ldr	r3, [r3, #0]
 80431f8:	699a      	ldr	r2, [r3, #24]
 80431fa:	687b      	ldr	r3, [r7, #4]
 80431fc:	681b      	ldr	r3, [r3, #0]
 80431fe:	f042 0201 	orr.w	r2, r2, #1
 8043202:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8043204:	687b      	ldr	r3, [r7, #4]
 8043206:	2200      	movs	r2, #0
 8043208:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 804320c:	687b      	ldr	r3, [r7, #4]
 804320e:	2201      	movs	r2, #1
 8043210:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8043214:	2300      	movs	r3, #0
}
 8043216:	4618      	mov	r0, r3
 8043218:	3710      	adds	r7, #16
 804321a:	46bd      	mov	sp, r7
 804321c:	bd80      	pop	{r7, pc}
 804321e:	bf00      	nop
 8043220:	f000f800 	.word	0xf000f800

08043224 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8043224:	b5b0      	push	{r4, r5, r7, lr}
 8043226:	b084      	sub	sp, #16
 8043228:	af00      	add	r7, sp, #0
 804322a:	60f8      	str	r0, [r7, #12]
 804322c:	60b9      	str	r1, [r7, #8]
 804322e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8043230:	68fb      	ldr	r3, [r7, #12]
 8043232:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8043236:	2b01      	cmp	r3, #1
 8043238:	d101      	bne.n	804323e <HAL_LTDC_ConfigLayer+0x1a>
 804323a:	2302      	movs	r3, #2
 804323c:	e02c      	b.n	8043298 <HAL_LTDC_ConfigLayer+0x74>
 804323e:	68fb      	ldr	r3, [r7, #12]
 8043240:	2201      	movs	r2, #1
 8043242:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8043246:	68fb      	ldr	r3, [r7, #12]
 8043248:	2202      	movs	r2, #2
 804324a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 804324e:	68fa      	ldr	r2, [r7, #12]
 8043250:	687b      	ldr	r3, [r7, #4]
 8043252:	2134      	movs	r1, #52	; 0x34
 8043254:	fb01 f303 	mul.w	r3, r1, r3
 8043258:	4413      	add	r3, r2
 804325a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 804325e:	68bb      	ldr	r3, [r7, #8]
 8043260:	4614      	mov	r4, r2
 8043262:	461d      	mov	r5, r3
 8043264:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8043266:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8043268:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 804326a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 804326c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 804326e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8043270:	682b      	ldr	r3, [r5, #0]
 8043272:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8043274:	687a      	ldr	r2, [r7, #4]
 8043276:	68b9      	ldr	r1, [r7, #8]
 8043278:	68f8      	ldr	r0, [r7, #12]
 804327a:	f000 f886 	bl	804338a <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 804327e:	68fb      	ldr	r3, [r7, #12]
 8043280:	681b      	ldr	r3, [r3, #0]
 8043282:	2201      	movs	r2, #1
 8043284:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8043286:	68fb      	ldr	r3, [r7, #12]
 8043288:	2201      	movs	r2, #1
 804328a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 804328e:	68fb      	ldr	r3, [r7, #12]
 8043290:	2200      	movs	r2, #0
 8043292:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8043296:	2300      	movs	r3, #0
}
 8043298:	4618      	mov	r0, r3
 804329a:	3710      	adds	r7, #16
 804329c:	46bd      	mov	sp, r7
 804329e:	bdb0      	pop	{r4, r5, r7, pc}

080432a0 <HAL_LTDC_ConfigColorKeying_NoReload>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 80432a0:	b480      	push	{r7}
 80432a2:	b085      	sub	sp, #20
 80432a4:	af00      	add	r7, sp, #0
 80432a6:	60f8      	str	r0, [r7, #12]
 80432a8:	60b9      	str	r1, [r7, #8]
 80432aa:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80432ac:	68fb      	ldr	r3, [r7, #12]
 80432ae:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80432b2:	2b01      	cmp	r3, #1
 80432b4:	d101      	bne.n	80432ba <HAL_LTDC_ConfigColorKeying_NoReload+0x1a>
 80432b6:	2302      	movs	r3, #2
 80432b8:	e02c      	b.n	8043314 <HAL_LTDC_ConfigColorKeying_NoReload+0x74>
 80432ba:	68fb      	ldr	r3, [r7, #12]
 80432bc:	2201      	movs	r2, #1
 80432be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80432c2:	68fb      	ldr	r3, [r7, #12]
 80432c4:	2202      	movs	r2, #2
 80432c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 80432ca:	68fb      	ldr	r3, [r7, #12]
 80432cc:	681b      	ldr	r3, [r3, #0]
 80432ce:	461a      	mov	r2, r3
 80432d0:	687b      	ldr	r3, [r7, #4]
 80432d2:	01db      	lsls	r3, r3, #7
 80432d4:	4413      	add	r3, r2
 80432d6:	3384      	adds	r3, #132	; 0x84
 80432d8:	68db      	ldr	r3, [r3, #12]
 80432da:	68fa      	ldr	r2, [r7, #12]
 80432dc:	6812      	ldr	r2, [r2, #0]
 80432de:	4611      	mov	r1, r2
 80432e0:	687a      	ldr	r2, [r7, #4]
 80432e2:	01d2      	lsls	r2, r2, #7
 80432e4:	440a      	add	r2, r1
 80432e6:	3284      	adds	r2, #132	; 0x84
 80432e8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80432ec:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 80432ee:	68fb      	ldr	r3, [r7, #12]
 80432f0:	681b      	ldr	r3, [r3, #0]
 80432f2:	461a      	mov	r2, r3
 80432f4:	687b      	ldr	r3, [r7, #4]
 80432f6:	01db      	lsls	r3, r3, #7
 80432f8:	4413      	add	r3, r2
 80432fa:	3384      	adds	r3, #132	; 0x84
 80432fc:	461a      	mov	r2, r3
 80432fe:	68bb      	ldr	r3, [r7, #8]
 8043300:	60d3      	str	r3, [r2, #12]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8043302:	68fb      	ldr	r3, [r7, #12]
 8043304:	2201      	movs	r2, #1
 8043306:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 804330a:	68fb      	ldr	r3, [r7, #12]
 804330c:	2200      	movs	r2, #0
 804330e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8043312:	2300      	movs	r3, #0
}
 8043314:	4618      	mov	r0, r3
 8043316:	3714      	adds	r7, #20
 8043318:	46bd      	mov	sp, r7
 804331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804331e:	4770      	bx	lr

08043320 <HAL_LTDC_EnableColorKeying_NoReload>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 8043320:	b480      	push	{r7}
 8043322:	b083      	sub	sp, #12
 8043324:	af00      	add	r7, sp, #0
 8043326:	6078      	str	r0, [r7, #4]
 8043328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 804332a:	687b      	ldr	r3, [r7, #4]
 804332c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8043330:	2b01      	cmp	r3, #1
 8043332:	d101      	bne.n	8043338 <HAL_LTDC_EnableColorKeying_NoReload+0x18>
 8043334:	2302      	movs	r3, #2
 8043336:	e022      	b.n	804337e <HAL_LTDC_EnableColorKeying_NoReload+0x5e>
 8043338:	687b      	ldr	r3, [r7, #4]
 804333a:	2201      	movs	r2, #1
 804333c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8043340:	687b      	ldr	r3, [r7, #4]
 8043342:	2202      	movs	r2, #2
 8043344:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8043348:	687b      	ldr	r3, [r7, #4]
 804334a:	681b      	ldr	r3, [r3, #0]
 804334c:	461a      	mov	r2, r3
 804334e:	683b      	ldr	r3, [r7, #0]
 8043350:	01db      	lsls	r3, r3, #7
 8043352:	4413      	add	r3, r2
 8043354:	3384      	adds	r3, #132	; 0x84
 8043356:	681b      	ldr	r3, [r3, #0]
 8043358:	687a      	ldr	r2, [r7, #4]
 804335a:	6812      	ldr	r2, [r2, #0]
 804335c:	4611      	mov	r1, r2
 804335e:	683a      	ldr	r2, [r7, #0]
 8043360:	01d2      	lsls	r2, r2, #7
 8043362:	440a      	add	r2, r1
 8043364:	3284      	adds	r2, #132	; 0x84
 8043366:	f043 0302 	orr.w	r3, r3, #2
 804336a:	6013      	str	r3, [r2, #0]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 804336c:	687b      	ldr	r3, [r7, #4]
 804336e:	2201      	movs	r2, #1
 8043370:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8043374:	687b      	ldr	r3, [r7, #4]
 8043376:	2200      	movs	r2, #0
 8043378:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 804337c:	2300      	movs	r3, #0
}
 804337e:	4618      	mov	r0, r3
 8043380:	370c      	adds	r7, #12
 8043382:	46bd      	mov	sp, r7
 8043384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043388:	4770      	bx	lr

0804338a <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 804338a:	b480      	push	{r7}
 804338c:	b089      	sub	sp, #36	; 0x24
 804338e:	af00      	add	r7, sp, #0
 8043390:	60f8      	str	r0, [r7, #12]
 8043392:	60b9      	str	r1, [r7, #8]
 8043394:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8043396:	68bb      	ldr	r3, [r7, #8]
 8043398:	685a      	ldr	r2, [r3, #4]
 804339a:	68fb      	ldr	r3, [r7, #12]
 804339c:	681b      	ldr	r3, [r3, #0]
 804339e:	68db      	ldr	r3, [r3, #12]
 80433a0:	0c1b      	lsrs	r3, r3, #16
 80433a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80433a6:	4413      	add	r3, r2
 80433a8:	041b      	lsls	r3, r3, #16
 80433aa:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80433ac:	68fb      	ldr	r3, [r7, #12]
 80433ae:	681b      	ldr	r3, [r3, #0]
 80433b0:	461a      	mov	r2, r3
 80433b2:	687b      	ldr	r3, [r7, #4]
 80433b4:	01db      	lsls	r3, r3, #7
 80433b6:	4413      	add	r3, r2
 80433b8:	3384      	adds	r3, #132	; 0x84
 80433ba:	685b      	ldr	r3, [r3, #4]
 80433bc:	68fa      	ldr	r2, [r7, #12]
 80433be:	6812      	ldr	r2, [r2, #0]
 80433c0:	4611      	mov	r1, r2
 80433c2:	687a      	ldr	r2, [r7, #4]
 80433c4:	01d2      	lsls	r2, r2, #7
 80433c6:	440a      	add	r2, r1
 80433c8:	3284      	adds	r2, #132	; 0x84
 80433ca:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80433ce:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80433d0:	68bb      	ldr	r3, [r7, #8]
 80433d2:	681a      	ldr	r2, [r3, #0]
 80433d4:	68fb      	ldr	r3, [r7, #12]
 80433d6:	681b      	ldr	r3, [r3, #0]
 80433d8:	68db      	ldr	r3, [r3, #12]
 80433da:	0c1b      	lsrs	r3, r3, #16
 80433dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80433e0:	4413      	add	r3, r2
 80433e2:	1c5a      	adds	r2, r3, #1
 80433e4:	68fb      	ldr	r3, [r7, #12]
 80433e6:	681b      	ldr	r3, [r3, #0]
 80433e8:	4619      	mov	r1, r3
 80433ea:	687b      	ldr	r3, [r7, #4]
 80433ec:	01db      	lsls	r3, r3, #7
 80433ee:	440b      	add	r3, r1
 80433f0:	3384      	adds	r3, #132	; 0x84
 80433f2:	4619      	mov	r1, r3
 80433f4:	69fb      	ldr	r3, [r7, #28]
 80433f6:	4313      	orrs	r3, r2
 80433f8:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80433fa:	68bb      	ldr	r3, [r7, #8]
 80433fc:	68da      	ldr	r2, [r3, #12]
 80433fe:	68fb      	ldr	r3, [r7, #12]
 8043400:	681b      	ldr	r3, [r3, #0]
 8043402:	68db      	ldr	r3, [r3, #12]
 8043404:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8043408:	4413      	add	r3, r2
 804340a:	041b      	lsls	r3, r3, #16
 804340c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 804340e:	68fb      	ldr	r3, [r7, #12]
 8043410:	681b      	ldr	r3, [r3, #0]
 8043412:	461a      	mov	r2, r3
 8043414:	687b      	ldr	r3, [r7, #4]
 8043416:	01db      	lsls	r3, r3, #7
 8043418:	4413      	add	r3, r2
 804341a:	3384      	adds	r3, #132	; 0x84
 804341c:	689b      	ldr	r3, [r3, #8]
 804341e:	68fa      	ldr	r2, [r7, #12]
 8043420:	6812      	ldr	r2, [r2, #0]
 8043422:	4611      	mov	r1, r2
 8043424:	687a      	ldr	r2, [r7, #4]
 8043426:	01d2      	lsls	r2, r2, #7
 8043428:	440a      	add	r2, r1
 804342a:	3284      	adds	r2, #132	; 0x84
 804342c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8043430:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8043432:	68bb      	ldr	r3, [r7, #8]
 8043434:	689a      	ldr	r2, [r3, #8]
 8043436:	68fb      	ldr	r3, [r7, #12]
 8043438:	681b      	ldr	r3, [r3, #0]
 804343a:	68db      	ldr	r3, [r3, #12]
 804343c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8043440:	4413      	add	r3, r2
 8043442:	1c5a      	adds	r2, r3, #1
 8043444:	68fb      	ldr	r3, [r7, #12]
 8043446:	681b      	ldr	r3, [r3, #0]
 8043448:	4619      	mov	r1, r3
 804344a:	687b      	ldr	r3, [r7, #4]
 804344c:	01db      	lsls	r3, r3, #7
 804344e:	440b      	add	r3, r1
 8043450:	3384      	adds	r3, #132	; 0x84
 8043452:	4619      	mov	r1, r3
 8043454:	69fb      	ldr	r3, [r7, #28]
 8043456:	4313      	orrs	r3, r2
 8043458:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 804345a:	68fb      	ldr	r3, [r7, #12]
 804345c:	681b      	ldr	r3, [r3, #0]
 804345e:	461a      	mov	r2, r3
 8043460:	687b      	ldr	r3, [r7, #4]
 8043462:	01db      	lsls	r3, r3, #7
 8043464:	4413      	add	r3, r2
 8043466:	3384      	adds	r3, #132	; 0x84
 8043468:	691b      	ldr	r3, [r3, #16]
 804346a:	68fa      	ldr	r2, [r7, #12]
 804346c:	6812      	ldr	r2, [r2, #0]
 804346e:	4611      	mov	r1, r2
 8043470:	687a      	ldr	r2, [r7, #4]
 8043472:	01d2      	lsls	r2, r2, #7
 8043474:	440a      	add	r2, r1
 8043476:	3284      	adds	r2, #132	; 0x84
 8043478:	f023 0307 	bic.w	r3, r3, #7
 804347c:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 804347e:	68fb      	ldr	r3, [r7, #12]
 8043480:	681b      	ldr	r3, [r3, #0]
 8043482:	461a      	mov	r2, r3
 8043484:	687b      	ldr	r3, [r7, #4]
 8043486:	01db      	lsls	r3, r3, #7
 8043488:	4413      	add	r3, r2
 804348a:	3384      	adds	r3, #132	; 0x84
 804348c:	461a      	mov	r2, r3
 804348e:	68bb      	ldr	r3, [r7, #8]
 8043490:	691b      	ldr	r3, [r3, #16]
 8043492:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8043494:	68bb      	ldr	r3, [r7, #8]
 8043496:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 804349a:	021b      	lsls	r3, r3, #8
 804349c:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 804349e:	68bb      	ldr	r3, [r7, #8]
 80434a0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80434a4:	041b      	lsls	r3, r3, #16
 80434a6:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80434a8:	68bb      	ldr	r3, [r7, #8]
 80434aa:	699b      	ldr	r3, [r3, #24]
 80434ac:	061b      	lsls	r3, r3, #24
 80434ae:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80434b0:	68fb      	ldr	r3, [r7, #12]
 80434b2:	681b      	ldr	r3, [r3, #0]
 80434b4:	461a      	mov	r2, r3
 80434b6:	687b      	ldr	r3, [r7, #4]
 80434b8:	01db      	lsls	r3, r3, #7
 80434ba:	4413      	add	r3, r2
 80434bc:	3384      	adds	r3, #132	; 0x84
 80434be:	699b      	ldr	r3, [r3, #24]
 80434c0:	68fb      	ldr	r3, [r7, #12]
 80434c2:	681b      	ldr	r3, [r3, #0]
 80434c4:	461a      	mov	r2, r3
 80434c6:	687b      	ldr	r3, [r7, #4]
 80434c8:	01db      	lsls	r3, r3, #7
 80434ca:	4413      	add	r3, r2
 80434cc:	3384      	adds	r3, #132	; 0x84
 80434ce:	461a      	mov	r2, r3
 80434d0:	2300      	movs	r3, #0
 80434d2:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80434d4:	68bb      	ldr	r3, [r7, #8]
 80434d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80434da:	461a      	mov	r2, r3
 80434dc:	69fb      	ldr	r3, [r7, #28]
 80434de:	431a      	orrs	r2, r3
 80434e0:	69bb      	ldr	r3, [r7, #24]
 80434e2:	431a      	orrs	r2, r3
 80434e4:	68fb      	ldr	r3, [r7, #12]
 80434e6:	681b      	ldr	r3, [r3, #0]
 80434e8:	4619      	mov	r1, r3
 80434ea:	687b      	ldr	r3, [r7, #4]
 80434ec:	01db      	lsls	r3, r3, #7
 80434ee:	440b      	add	r3, r1
 80434f0:	3384      	adds	r3, #132	; 0x84
 80434f2:	4619      	mov	r1, r3
 80434f4:	697b      	ldr	r3, [r7, #20]
 80434f6:	4313      	orrs	r3, r2
 80434f8:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80434fa:	68fb      	ldr	r3, [r7, #12]
 80434fc:	681b      	ldr	r3, [r3, #0]
 80434fe:	461a      	mov	r2, r3
 8043500:	687b      	ldr	r3, [r7, #4]
 8043502:	01db      	lsls	r3, r3, #7
 8043504:	4413      	add	r3, r2
 8043506:	3384      	adds	r3, #132	; 0x84
 8043508:	695b      	ldr	r3, [r3, #20]
 804350a:	68fa      	ldr	r2, [r7, #12]
 804350c:	6812      	ldr	r2, [r2, #0]
 804350e:	4611      	mov	r1, r2
 8043510:	687a      	ldr	r2, [r7, #4]
 8043512:	01d2      	lsls	r2, r2, #7
 8043514:	440a      	add	r2, r1
 8043516:	3284      	adds	r2, #132	; 0x84
 8043518:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 804351c:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 804351e:	68fb      	ldr	r3, [r7, #12]
 8043520:	681b      	ldr	r3, [r3, #0]
 8043522:	461a      	mov	r2, r3
 8043524:	687b      	ldr	r3, [r7, #4]
 8043526:	01db      	lsls	r3, r3, #7
 8043528:	4413      	add	r3, r2
 804352a:	3384      	adds	r3, #132	; 0x84
 804352c:	461a      	mov	r2, r3
 804352e:	68bb      	ldr	r3, [r7, #8]
 8043530:	695b      	ldr	r3, [r3, #20]
 8043532:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8043534:	68fb      	ldr	r3, [r7, #12]
 8043536:	681b      	ldr	r3, [r3, #0]
 8043538:	461a      	mov	r2, r3
 804353a:	687b      	ldr	r3, [r7, #4]
 804353c:	01db      	lsls	r3, r3, #7
 804353e:	4413      	add	r3, r2
 8043540:	3384      	adds	r3, #132	; 0x84
 8043542:	69db      	ldr	r3, [r3, #28]
 8043544:	68fa      	ldr	r2, [r7, #12]
 8043546:	6812      	ldr	r2, [r2, #0]
 8043548:	4611      	mov	r1, r2
 804354a:	687a      	ldr	r2, [r7, #4]
 804354c:	01d2      	lsls	r2, r2, #7
 804354e:	440a      	add	r2, r1
 8043550:	3284      	adds	r2, #132	; 0x84
 8043552:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8043556:	f023 0307 	bic.w	r3, r3, #7
 804355a:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 804355c:	68bb      	ldr	r3, [r7, #8]
 804355e:	69da      	ldr	r2, [r3, #28]
 8043560:	68bb      	ldr	r3, [r7, #8]
 8043562:	6a1b      	ldr	r3, [r3, #32]
 8043564:	68f9      	ldr	r1, [r7, #12]
 8043566:	6809      	ldr	r1, [r1, #0]
 8043568:	4608      	mov	r0, r1
 804356a:	6879      	ldr	r1, [r7, #4]
 804356c:	01c9      	lsls	r1, r1, #7
 804356e:	4401      	add	r1, r0
 8043570:	3184      	adds	r1, #132	; 0x84
 8043572:	4313      	orrs	r3, r2
 8043574:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8043576:	68fb      	ldr	r3, [r7, #12]
 8043578:	681b      	ldr	r3, [r3, #0]
 804357a:	461a      	mov	r2, r3
 804357c:	687b      	ldr	r3, [r7, #4]
 804357e:	01db      	lsls	r3, r3, #7
 8043580:	4413      	add	r3, r2
 8043582:	3384      	adds	r3, #132	; 0x84
 8043584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043586:	68fb      	ldr	r3, [r7, #12]
 8043588:	681b      	ldr	r3, [r3, #0]
 804358a:	461a      	mov	r2, r3
 804358c:	687b      	ldr	r3, [r7, #4]
 804358e:	01db      	lsls	r3, r3, #7
 8043590:	4413      	add	r3, r2
 8043592:	3384      	adds	r3, #132	; 0x84
 8043594:	461a      	mov	r2, r3
 8043596:	2300      	movs	r3, #0
 8043598:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 804359a:	68fb      	ldr	r3, [r7, #12]
 804359c:	681b      	ldr	r3, [r3, #0]
 804359e:	461a      	mov	r2, r3
 80435a0:	687b      	ldr	r3, [r7, #4]
 80435a2:	01db      	lsls	r3, r3, #7
 80435a4:	4413      	add	r3, r2
 80435a6:	3384      	adds	r3, #132	; 0x84
 80435a8:	461a      	mov	r2, r3
 80435aa:	68bb      	ldr	r3, [r7, #8]
 80435ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80435ae:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80435b0:	68bb      	ldr	r3, [r7, #8]
 80435b2:	691b      	ldr	r3, [r3, #16]
 80435b4:	2b00      	cmp	r3, #0
 80435b6:	d102      	bne.n	80435be <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80435b8:	2304      	movs	r3, #4
 80435ba:	61fb      	str	r3, [r7, #28]
 80435bc:	e01b      	b.n	80435f6 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80435be:	68bb      	ldr	r3, [r7, #8]
 80435c0:	691b      	ldr	r3, [r3, #16]
 80435c2:	2b01      	cmp	r3, #1
 80435c4:	d102      	bne.n	80435cc <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80435c6:	2303      	movs	r3, #3
 80435c8:	61fb      	str	r3, [r7, #28]
 80435ca:	e014      	b.n	80435f6 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80435cc:	68bb      	ldr	r3, [r7, #8]
 80435ce:	691b      	ldr	r3, [r3, #16]
 80435d0:	2b04      	cmp	r3, #4
 80435d2:	d00b      	beq.n	80435ec <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80435d4:	68bb      	ldr	r3, [r7, #8]
 80435d6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80435d8:	2b02      	cmp	r3, #2
 80435da:	d007      	beq.n	80435ec <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80435dc:	68bb      	ldr	r3, [r7, #8]
 80435de:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80435e0:	2b03      	cmp	r3, #3
 80435e2:	d003      	beq.n	80435ec <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80435e4:	68bb      	ldr	r3, [r7, #8]
 80435e6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80435e8:	2b07      	cmp	r3, #7
 80435ea:	d102      	bne.n	80435f2 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80435ec:	2302      	movs	r3, #2
 80435ee:	61fb      	str	r3, [r7, #28]
 80435f0:	e001      	b.n	80435f6 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80435f2:	2301      	movs	r3, #1
 80435f4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80435f6:	68fb      	ldr	r3, [r7, #12]
 80435f8:	681b      	ldr	r3, [r3, #0]
 80435fa:	461a      	mov	r2, r3
 80435fc:	687b      	ldr	r3, [r7, #4]
 80435fe:	01db      	lsls	r3, r3, #7
 8043600:	4413      	add	r3, r2
 8043602:	3384      	adds	r3, #132	; 0x84
 8043604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043606:	68fa      	ldr	r2, [r7, #12]
 8043608:	6812      	ldr	r2, [r2, #0]
 804360a:	4611      	mov	r1, r2
 804360c:	687a      	ldr	r2, [r7, #4]
 804360e:	01d2      	lsls	r2, r2, #7
 8043610:	440a      	add	r2, r1
 8043612:	3284      	adds	r2, #132	; 0x84
 8043614:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8043618:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 804361a:	68bb      	ldr	r3, [r7, #8]
 804361c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804361e:	69fa      	ldr	r2, [r7, #28]
 8043620:	fb02 f303 	mul.w	r3, r2, r3
 8043624:	041a      	lsls	r2, r3, #16
 8043626:	68bb      	ldr	r3, [r7, #8]
 8043628:	6859      	ldr	r1, [r3, #4]
 804362a:	68bb      	ldr	r3, [r7, #8]
 804362c:	681b      	ldr	r3, [r3, #0]
 804362e:	1acb      	subs	r3, r1, r3
 8043630:	69f9      	ldr	r1, [r7, #28]
 8043632:	fb01 f303 	mul.w	r3, r1, r3
 8043636:	3303      	adds	r3, #3
 8043638:	68f9      	ldr	r1, [r7, #12]
 804363a:	6809      	ldr	r1, [r1, #0]
 804363c:	4608      	mov	r0, r1
 804363e:	6879      	ldr	r1, [r7, #4]
 8043640:	01c9      	lsls	r1, r1, #7
 8043642:	4401      	add	r1, r0
 8043644:	3184      	adds	r1, #132	; 0x84
 8043646:	4313      	orrs	r3, r2
 8043648:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 804364a:	68fb      	ldr	r3, [r7, #12]
 804364c:	681b      	ldr	r3, [r3, #0]
 804364e:	461a      	mov	r2, r3
 8043650:	687b      	ldr	r3, [r7, #4]
 8043652:	01db      	lsls	r3, r3, #7
 8043654:	4413      	add	r3, r2
 8043656:	3384      	adds	r3, #132	; 0x84
 8043658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804365a:	68fa      	ldr	r2, [r7, #12]
 804365c:	6812      	ldr	r2, [r2, #0]
 804365e:	4611      	mov	r1, r2
 8043660:	687a      	ldr	r2, [r7, #4]
 8043662:	01d2      	lsls	r2, r2, #7
 8043664:	440a      	add	r2, r1
 8043666:	3284      	adds	r2, #132	; 0x84
 8043668:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 804366c:	f023 0307 	bic.w	r3, r3, #7
 8043670:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8043672:	68fb      	ldr	r3, [r7, #12]
 8043674:	681b      	ldr	r3, [r3, #0]
 8043676:	461a      	mov	r2, r3
 8043678:	687b      	ldr	r3, [r7, #4]
 804367a:	01db      	lsls	r3, r3, #7
 804367c:	4413      	add	r3, r2
 804367e:	3384      	adds	r3, #132	; 0x84
 8043680:	461a      	mov	r2, r3
 8043682:	68bb      	ldr	r3, [r7, #8]
 8043684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043686:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8043688:	68fb      	ldr	r3, [r7, #12]
 804368a:	681b      	ldr	r3, [r3, #0]
 804368c:	461a      	mov	r2, r3
 804368e:	687b      	ldr	r3, [r7, #4]
 8043690:	01db      	lsls	r3, r3, #7
 8043692:	4413      	add	r3, r2
 8043694:	3384      	adds	r3, #132	; 0x84
 8043696:	681b      	ldr	r3, [r3, #0]
 8043698:	68fa      	ldr	r2, [r7, #12]
 804369a:	6812      	ldr	r2, [r2, #0]
 804369c:	4611      	mov	r1, r2
 804369e:	687a      	ldr	r2, [r7, #4]
 80436a0:	01d2      	lsls	r2, r2, #7
 80436a2:	440a      	add	r2, r1
 80436a4:	3284      	adds	r2, #132	; 0x84
 80436a6:	f043 0301 	orr.w	r3, r3, #1
 80436aa:	6013      	str	r3, [r2, #0]
}
 80436ac:	bf00      	nop
 80436ae:	3724      	adds	r7, #36	; 0x24
 80436b0:	46bd      	mov	sp, r7
 80436b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80436b6:	4770      	bx	lr

080436b8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80436b8:	b580      	push	{r7, lr}
 80436ba:	b082      	sub	sp, #8
 80436bc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80436be:	2300      	movs	r3, #0
 80436c0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80436c2:	2300      	movs	r3, #0
 80436c4:	603b      	str	r3, [r7, #0]
 80436c6:	4b20      	ldr	r3, [pc, #128]	; (8043748 <HAL_PWREx_EnableOverDrive+0x90>)
 80436c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80436ca:	4a1f      	ldr	r2, [pc, #124]	; (8043748 <HAL_PWREx_EnableOverDrive+0x90>)
 80436cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80436d0:	6413      	str	r3, [r2, #64]	; 0x40
 80436d2:	4b1d      	ldr	r3, [pc, #116]	; (8043748 <HAL_PWREx_EnableOverDrive+0x90>)
 80436d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80436d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80436da:	603b      	str	r3, [r7, #0]
 80436dc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80436de:	4b1b      	ldr	r3, [pc, #108]	; (804374c <HAL_PWREx_EnableOverDrive+0x94>)
 80436e0:	2201      	movs	r2, #1
 80436e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80436e4:	f7fd fc50 	bl	8040f88 <HAL_GetTick>
 80436e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80436ea:	e009      	b.n	8043700 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80436ec:	f7fd fc4c 	bl	8040f88 <HAL_GetTick>
 80436f0:	4602      	mov	r2, r0
 80436f2:	687b      	ldr	r3, [r7, #4]
 80436f4:	1ad3      	subs	r3, r2, r3
 80436f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80436fa:	d901      	bls.n	8043700 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80436fc:	2303      	movs	r3, #3
 80436fe:	e01f      	b.n	8043740 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8043700:	4b13      	ldr	r3, [pc, #76]	; (8043750 <HAL_PWREx_EnableOverDrive+0x98>)
 8043702:	685b      	ldr	r3, [r3, #4]
 8043704:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8043708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 804370c:	d1ee      	bne.n	80436ec <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 804370e:	4b11      	ldr	r3, [pc, #68]	; (8043754 <HAL_PWREx_EnableOverDrive+0x9c>)
 8043710:	2201      	movs	r2, #1
 8043712:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8043714:	f7fd fc38 	bl	8040f88 <HAL_GetTick>
 8043718:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 804371a:	e009      	b.n	8043730 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 804371c:	f7fd fc34 	bl	8040f88 <HAL_GetTick>
 8043720:	4602      	mov	r2, r0
 8043722:	687b      	ldr	r3, [r7, #4]
 8043724:	1ad3      	subs	r3, r2, r3
 8043726:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 804372a:	d901      	bls.n	8043730 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 804372c:	2303      	movs	r3, #3
 804372e:	e007      	b.n	8043740 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8043730:	4b07      	ldr	r3, [pc, #28]	; (8043750 <HAL_PWREx_EnableOverDrive+0x98>)
 8043732:	685b      	ldr	r3, [r3, #4]
 8043734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8043738:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 804373c:	d1ee      	bne.n	804371c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 804373e:	2300      	movs	r3, #0
}
 8043740:	4618      	mov	r0, r3
 8043742:	3708      	adds	r7, #8
 8043744:	46bd      	mov	sp, r7
 8043746:	bd80      	pop	{r7, pc}
 8043748:	40023800 	.word	0x40023800
 804374c:	420e0040 	.word	0x420e0040
 8043750:	40007000 	.word	0x40007000
 8043754:	420e0044 	.word	0x420e0044

08043758 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8043758:	b580      	push	{r7, lr}
 804375a:	b086      	sub	sp, #24
 804375c:	af00      	add	r7, sp, #0
 804375e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8043760:	687b      	ldr	r3, [r7, #4]
 8043762:	2b00      	cmp	r3, #0
 8043764:	d101      	bne.n	804376a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8043766:	2301      	movs	r3, #1
 8043768:	e25e      	b.n	8043c28 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 804376a:	687b      	ldr	r3, [r7, #4]
 804376c:	681b      	ldr	r3, [r3, #0]
 804376e:	f003 0301 	and.w	r3, r3, #1
 8043772:	2b00      	cmp	r3, #0
 8043774:	d075      	beq.n	8043862 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8043776:	4b88      	ldr	r3, [pc, #544]	; (8043998 <HAL_RCC_OscConfig+0x240>)
 8043778:	689b      	ldr	r3, [r3, #8]
 804377a:	f003 030c 	and.w	r3, r3, #12
 804377e:	2b04      	cmp	r3, #4
 8043780:	d00c      	beq.n	804379c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8043782:	4b85      	ldr	r3, [pc, #532]	; (8043998 <HAL_RCC_OscConfig+0x240>)
 8043784:	689b      	ldr	r3, [r3, #8]
 8043786:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 804378a:	2b08      	cmp	r3, #8
 804378c:	d112      	bne.n	80437b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 804378e:	4b82      	ldr	r3, [pc, #520]	; (8043998 <HAL_RCC_OscConfig+0x240>)
 8043790:	685b      	ldr	r3, [r3, #4]
 8043792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8043796:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 804379a:	d10b      	bne.n	80437b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 804379c:	4b7e      	ldr	r3, [pc, #504]	; (8043998 <HAL_RCC_OscConfig+0x240>)
 804379e:	681b      	ldr	r3, [r3, #0]
 80437a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80437a4:	2b00      	cmp	r3, #0
 80437a6:	d05b      	beq.n	8043860 <HAL_RCC_OscConfig+0x108>
 80437a8:	687b      	ldr	r3, [r7, #4]
 80437aa:	685b      	ldr	r3, [r3, #4]
 80437ac:	2b00      	cmp	r3, #0
 80437ae:	d157      	bne.n	8043860 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80437b0:	2301      	movs	r3, #1
 80437b2:	e239      	b.n	8043c28 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80437b4:	687b      	ldr	r3, [r7, #4]
 80437b6:	685b      	ldr	r3, [r3, #4]
 80437b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80437bc:	d106      	bne.n	80437cc <HAL_RCC_OscConfig+0x74>
 80437be:	4b76      	ldr	r3, [pc, #472]	; (8043998 <HAL_RCC_OscConfig+0x240>)
 80437c0:	681b      	ldr	r3, [r3, #0]
 80437c2:	4a75      	ldr	r2, [pc, #468]	; (8043998 <HAL_RCC_OscConfig+0x240>)
 80437c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80437c8:	6013      	str	r3, [r2, #0]
 80437ca:	e01d      	b.n	8043808 <HAL_RCC_OscConfig+0xb0>
 80437cc:	687b      	ldr	r3, [r7, #4]
 80437ce:	685b      	ldr	r3, [r3, #4]
 80437d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80437d4:	d10c      	bne.n	80437f0 <HAL_RCC_OscConfig+0x98>
 80437d6:	4b70      	ldr	r3, [pc, #448]	; (8043998 <HAL_RCC_OscConfig+0x240>)
 80437d8:	681b      	ldr	r3, [r3, #0]
 80437da:	4a6f      	ldr	r2, [pc, #444]	; (8043998 <HAL_RCC_OscConfig+0x240>)
 80437dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80437e0:	6013      	str	r3, [r2, #0]
 80437e2:	4b6d      	ldr	r3, [pc, #436]	; (8043998 <HAL_RCC_OscConfig+0x240>)
 80437e4:	681b      	ldr	r3, [r3, #0]
 80437e6:	4a6c      	ldr	r2, [pc, #432]	; (8043998 <HAL_RCC_OscConfig+0x240>)
 80437e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80437ec:	6013      	str	r3, [r2, #0]
 80437ee:	e00b      	b.n	8043808 <HAL_RCC_OscConfig+0xb0>
 80437f0:	4b69      	ldr	r3, [pc, #420]	; (8043998 <HAL_RCC_OscConfig+0x240>)
 80437f2:	681b      	ldr	r3, [r3, #0]
 80437f4:	4a68      	ldr	r2, [pc, #416]	; (8043998 <HAL_RCC_OscConfig+0x240>)
 80437f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80437fa:	6013      	str	r3, [r2, #0]
 80437fc:	4b66      	ldr	r3, [pc, #408]	; (8043998 <HAL_RCC_OscConfig+0x240>)
 80437fe:	681b      	ldr	r3, [r3, #0]
 8043800:	4a65      	ldr	r2, [pc, #404]	; (8043998 <HAL_RCC_OscConfig+0x240>)
 8043802:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8043806:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8043808:	687b      	ldr	r3, [r7, #4]
 804380a:	685b      	ldr	r3, [r3, #4]
 804380c:	2b00      	cmp	r3, #0
 804380e:	d013      	beq.n	8043838 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8043810:	f7fd fbba 	bl	8040f88 <HAL_GetTick>
 8043814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8043816:	e008      	b.n	804382a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8043818:	f7fd fbb6 	bl	8040f88 <HAL_GetTick>
 804381c:	4602      	mov	r2, r0
 804381e:	693b      	ldr	r3, [r7, #16]
 8043820:	1ad3      	subs	r3, r2, r3
 8043822:	2b64      	cmp	r3, #100	; 0x64
 8043824:	d901      	bls.n	804382a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8043826:	2303      	movs	r3, #3
 8043828:	e1fe      	b.n	8043c28 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 804382a:	4b5b      	ldr	r3, [pc, #364]	; (8043998 <HAL_RCC_OscConfig+0x240>)
 804382c:	681b      	ldr	r3, [r3, #0]
 804382e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8043832:	2b00      	cmp	r3, #0
 8043834:	d0f0      	beq.n	8043818 <HAL_RCC_OscConfig+0xc0>
 8043836:	e014      	b.n	8043862 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8043838:	f7fd fba6 	bl	8040f88 <HAL_GetTick>
 804383c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 804383e:	e008      	b.n	8043852 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8043840:	f7fd fba2 	bl	8040f88 <HAL_GetTick>
 8043844:	4602      	mov	r2, r0
 8043846:	693b      	ldr	r3, [r7, #16]
 8043848:	1ad3      	subs	r3, r2, r3
 804384a:	2b64      	cmp	r3, #100	; 0x64
 804384c:	d901      	bls.n	8043852 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 804384e:	2303      	movs	r3, #3
 8043850:	e1ea      	b.n	8043c28 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8043852:	4b51      	ldr	r3, [pc, #324]	; (8043998 <HAL_RCC_OscConfig+0x240>)
 8043854:	681b      	ldr	r3, [r3, #0]
 8043856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804385a:	2b00      	cmp	r3, #0
 804385c:	d1f0      	bne.n	8043840 <HAL_RCC_OscConfig+0xe8>
 804385e:	e000      	b.n	8043862 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8043860:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8043862:	687b      	ldr	r3, [r7, #4]
 8043864:	681b      	ldr	r3, [r3, #0]
 8043866:	f003 0302 	and.w	r3, r3, #2
 804386a:	2b00      	cmp	r3, #0
 804386c:	d063      	beq.n	8043936 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 804386e:	4b4a      	ldr	r3, [pc, #296]	; (8043998 <HAL_RCC_OscConfig+0x240>)
 8043870:	689b      	ldr	r3, [r3, #8]
 8043872:	f003 030c 	and.w	r3, r3, #12
 8043876:	2b00      	cmp	r3, #0
 8043878:	d00b      	beq.n	8043892 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 804387a:	4b47      	ldr	r3, [pc, #284]	; (8043998 <HAL_RCC_OscConfig+0x240>)
 804387c:	689b      	ldr	r3, [r3, #8]
 804387e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8043882:	2b08      	cmp	r3, #8
 8043884:	d11c      	bne.n	80438c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8043886:	4b44      	ldr	r3, [pc, #272]	; (8043998 <HAL_RCC_OscConfig+0x240>)
 8043888:	685b      	ldr	r3, [r3, #4]
 804388a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 804388e:	2b00      	cmp	r3, #0
 8043890:	d116      	bne.n	80438c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8043892:	4b41      	ldr	r3, [pc, #260]	; (8043998 <HAL_RCC_OscConfig+0x240>)
 8043894:	681b      	ldr	r3, [r3, #0]
 8043896:	f003 0302 	and.w	r3, r3, #2
 804389a:	2b00      	cmp	r3, #0
 804389c:	d005      	beq.n	80438aa <HAL_RCC_OscConfig+0x152>
 804389e:	687b      	ldr	r3, [r7, #4]
 80438a0:	68db      	ldr	r3, [r3, #12]
 80438a2:	2b01      	cmp	r3, #1
 80438a4:	d001      	beq.n	80438aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80438a6:	2301      	movs	r3, #1
 80438a8:	e1be      	b.n	8043c28 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80438aa:	4b3b      	ldr	r3, [pc, #236]	; (8043998 <HAL_RCC_OscConfig+0x240>)
 80438ac:	681b      	ldr	r3, [r3, #0]
 80438ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80438b2:	687b      	ldr	r3, [r7, #4]
 80438b4:	691b      	ldr	r3, [r3, #16]
 80438b6:	00db      	lsls	r3, r3, #3
 80438b8:	4937      	ldr	r1, [pc, #220]	; (8043998 <HAL_RCC_OscConfig+0x240>)
 80438ba:	4313      	orrs	r3, r2
 80438bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80438be:	e03a      	b.n	8043936 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80438c0:	687b      	ldr	r3, [r7, #4]
 80438c2:	68db      	ldr	r3, [r3, #12]
 80438c4:	2b00      	cmp	r3, #0
 80438c6:	d020      	beq.n	804390a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80438c8:	4b34      	ldr	r3, [pc, #208]	; (804399c <HAL_RCC_OscConfig+0x244>)
 80438ca:	2201      	movs	r2, #1
 80438cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80438ce:	f7fd fb5b 	bl	8040f88 <HAL_GetTick>
 80438d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80438d4:	e008      	b.n	80438e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80438d6:	f7fd fb57 	bl	8040f88 <HAL_GetTick>
 80438da:	4602      	mov	r2, r0
 80438dc:	693b      	ldr	r3, [r7, #16]
 80438de:	1ad3      	subs	r3, r2, r3
 80438e0:	2b02      	cmp	r3, #2
 80438e2:	d901      	bls.n	80438e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80438e4:	2303      	movs	r3, #3
 80438e6:	e19f      	b.n	8043c28 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80438e8:	4b2b      	ldr	r3, [pc, #172]	; (8043998 <HAL_RCC_OscConfig+0x240>)
 80438ea:	681b      	ldr	r3, [r3, #0]
 80438ec:	f003 0302 	and.w	r3, r3, #2
 80438f0:	2b00      	cmp	r3, #0
 80438f2:	d0f0      	beq.n	80438d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80438f4:	4b28      	ldr	r3, [pc, #160]	; (8043998 <HAL_RCC_OscConfig+0x240>)
 80438f6:	681b      	ldr	r3, [r3, #0]
 80438f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80438fc:	687b      	ldr	r3, [r7, #4]
 80438fe:	691b      	ldr	r3, [r3, #16]
 8043900:	00db      	lsls	r3, r3, #3
 8043902:	4925      	ldr	r1, [pc, #148]	; (8043998 <HAL_RCC_OscConfig+0x240>)
 8043904:	4313      	orrs	r3, r2
 8043906:	600b      	str	r3, [r1, #0]
 8043908:	e015      	b.n	8043936 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 804390a:	4b24      	ldr	r3, [pc, #144]	; (804399c <HAL_RCC_OscConfig+0x244>)
 804390c:	2200      	movs	r2, #0
 804390e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8043910:	f7fd fb3a 	bl	8040f88 <HAL_GetTick>
 8043914:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8043916:	e008      	b.n	804392a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8043918:	f7fd fb36 	bl	8040f88 <HAL_GetTick>
 804391c:	4602      	mov	r2, r0
 804391e:	693b      	ldr	r3, [r7, #16]
 8043920:	1ad3      	subs	r3, r2, r3
 8043922:	2b02      	cmp	r3, #2
 8043924:	d901      	bls.n	804392a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8043926:	2303      	movs	r3, #3
 8043928:	e17e      	b.n	8043c28 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 804392a:	4b1b      	ldr	r3, [pc, #108]	; (8043998 <HAL_RCC_OscConfig+0x240>)
 804392c:	681b      	ldr	r3, [r3, #0]
 804392e:	f003 0302 	and.w	r3, r3, #2
 8043932:	2b00      	cmp	r3, #0
 8043934:	d1f0      	bne.n	8043918 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8043936:	687b      	ldr	r3, [r7, #4]
 8043938:	681b      	ldr	r3, [r3, #0]
 804393a:	f003 0308 	and.w	r3, r3, #8
 804393e:	2b00      	cmp	r3, #0
 8043940:	d036      	beq.n	80439b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8043942:	687b      	ldr	r3, [r7, #4]
 8043944:	695b      	ldr	r3, [r3, #20]
 8043946:	2b00      	cmp	r3, #0
 8043948:	d016      	beq.n	8043978 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 804394a:	4b15      	ldr	r3, [pc, #84]	; (80439a0 <HAL_RCC_OscConfig+0x248>)
 804394c:	2201      	movs	r2, #1
 804394e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8043950:	f7fd fb1a 	bl	8040f88 <HAL_GetTick>
 8043954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8043956:	e008      	b.n	804396a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8043958:	f7fd fb16 	bl	8040f88 <HAL_GetTick>
 804395c:	4602      	mov	r2, r0
 804395e:	693b      	ldr	r3, [r7, #16]
 8043960:	1ad3      	subs	r3, r2, r3
 8043962:	2b02      	cmp	r3, #2
 8043964:	d901      	bls.n	804396a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8043966:	2303      	movs	r3, #3
 8043968:	e15e      	b.n	8043c28 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 804396a:	4b0b      	ldr	r3, [pc, #44]	; (8043998 <HAL_RCC_OscConfig+0x240>)
 804396c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804396e:	f003 0302 	and.w	r3, r3, #2
 8043972:	2b00      	cmp	r3, #0
 8043974:	d0f0      	beq.n	8043958 <HAL_RCC_OscConfig+0x200>
 8043976:	e01b      	b.n	80439b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8043978:	4b09      	ldr	r3, [pc, #36]	; (80439a0 <HAL_RCC_OscConfig+0x248>)
 804397a:	2200      	movs	r2, #0
 804397c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 804397e:	f7fd fb03 	bl	8040f88 <HAL_GetTick>
 8043982:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8043984:	e00e      	b.n	80439a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8043986:	f7fd faff 	bl	8040f88 <HAL_GetTick>
 804398a:	4602      	mov	r2, r0
 804398c:	693b      	ldr	r3, [r7, #16]
 804398e:	1ad3      	subs	r3, r2, r3
 8043990:	2b02      	cmp	r3, #2
 8043992:	d907      	bls.n	80439a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8043994:	2303      	movs	r3, #3
 8043996:	e147      	b.n	8043c28 <HAL_RCC_OscConfig+0x4d0>
 8043998:	40023800 	.word	0x40023800
 804399c:	42470000 	.word	0x42470000
 80439a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80439a4:	4b88      	ldr	r3, [pc, #544]	; (8043bc8 <HAL_RCC_OscConfig+0x470>)
 80439a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80439a8:	f003 0302 	and.w	r3, r3, #2
 80439ac:	2b00      	cmp	r3, #0
 80439ae:	d1ea      	bne.n	8043986 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80439b0:	687b      	ldr	r3, [r7, #4]
 80439b2:	681b      	ldr	r3, [r3, #0]
 80439b4:	f003 0304 	and.w	r3, r3, #4
 80439b8:	2b00      	cmp	r3, #0
 80439ba:	f000 8097 	beq.w	8043aec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80439be:	2300      	movs	r3, #0
 80439c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80439c2:	4b81      	ldr	r3, [pc, #516]	; (8043bc8 <HAL_RCC_OscConfig+0x470>)
 80439c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80439c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80439ca:	2b00      	cmp	r3, #0
 80439cc:	d10f      	bne.n	80439ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80439ce:	2300      	movs	r3, #0
 80439d0:	60bb      	str	r3, [r7, #8]
 80439d2:	4b7d      	ldr	r3, [pc, #500]	; (8043bc8 <HAL_RCC_OscConfig+0x470>)
 80439d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80439d6:	4a7c      	ldr	r2, [pc, #496]	; (8043bc8 <HAL_RCC_OscConfig+0x470>)
 80439d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80439dc:	6413      	str	r3, [r2, #64]	; 0x40
 80439de:	4b7a      	ldr	r3, [pc, #488]	; (8043bc8 <HAL_RCC_OscConfig+0x470>)
 80439e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80439e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80439e6:	60bb      	str	r3, [r7, #8]
 80439e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80439ea:	2301      	movs	r3, #1
 80439ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80439ee:	4b77      	ldr	r3, [pc, #476]	; (8043bcc <HAL_RCC_OscConfig+0x474>)
 80439f0:	681b      	ldr	r3, [r3, #0]
 80439f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80439f6:	2b00      	cmp	r3, #0
 80439f8:	d118      	bne.n	8043a2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80439fa:	4b74      	ldr	r3, [pc, #464]	; (8043bcc <HAL_RCC_OscConfig+0x474>)
 80439fc:	681b      	ldr	r3, [r3, #0]
 80439fe:	4a73      	ldr	r2, [pc, #460]	; (8043bcc <HAL_RCC_OscConfig+0x474>)
 8043a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8043a04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8043a06:	f7fd fabf 	bl	8040f88 <HAL_GetTick>
 8043a0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8043a0c:	e008      	b.n	8043a20 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8043a0e:	f7fd fabb 	bl	8040f88 <HAL_GetTick>
 8043a12:	4602      	mov	r2, r0
 8043a14:	693b      	ldr	r3, [r7, #16]
 8043a16:	1ad3      	subs	r3, r2, r3
 8043a18:	2b02      	cmp	r3, #2
 8043a1a:	d901      	bls.n	8043a20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8043a1c:	2303      	movs	r3, #3
 8043a1e:	e103      	b.n	8043c28 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8043a20:	4b6a      	ldr	r3, [pc, #424]	; (8043bcc <HAL_RCC_OscConfig+0x474>)
 8043a22:	681b      	ldr	r3, [r3, #0]
 8043a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8043a28:	2b00      	cmp	r3, #0
 8043a2a:	d0f0      	beq.n	8043a0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8043a2c:	687b      	ldr	r3, [r7, #4]
 8043a2e:	689b      	ldr	r3, [r3, #8]
 8043a30:	2b01      	cmp	r3, #1
 8043a32:	d106      	bne.n	8043a42 <HAL_RCC_OscConfig+0x2ea>
 8043a34:	4b64      	ldr	r3, [pc, #400]	; (8043bc8 <HAL_RCC_OscConfig+0x470>)
 8043a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8043a38:	4a63      	ldr	r2, [pc, #396]	; (8043bc8 <HAL_RCC_OscConfig+0x470>)
 8043a3a:	f043 0301 	orr.w	r3, r3, #1
 8043a3e:	6713      	str	r3, [r2, #112]	; 0x70
 8043a40:	e01c      	b.n	8043a7c <HAL_RCC_OscConfig+0x324>
 8043a42:	687b      	ldr	r3, [r7, #4]
 8043a44:	689b      	ldr	r3, [r3, #8]
 8043a46:	2b05      	cmp	r3, #5
 8043a48:	d10c      	bne.n	8043a64 <HAL_RCC_OscConfig+0x30c>
 8043a4a:	4b5f      	ldr	r3, [pc, #380]	; (8043bc8 <HAL_RCC_OscConfig+0x470>)
 8043a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8043a4e:	4a5e      	ldr	r2, [pc, #376]	; (8043bc8 <HAL_RCC_OscConfig+0x470>)
 8043a50:	f043 0304 	orr.w	r3, r3, #4
 8043a54:	6713      	str	r3, [r2, #112]	; 0x70
 8043a56:	4b5c      	ldr	r3, [pc, #368]	; (8043bc8 <HAL_RCC_OscConfig+0x470>)
 8043a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8043a5a:	4a5b      	ldr	r2, [pc, #364]	; (8043bc8 <HAL_RCC_OscConfig+0x470>)
 8043a5c:	f043 0301 	orr.w	r3, r3, #1
 8043a60:	6713      	str	r3, [r2, #112]	; 0x70
 8043a62:	e00b      	b.n	8043a7c <HAL_RCC_OscConfig+0x324>
 8043a64:	4b58      	ldr	r3, [pc, #352]	; (8043bc8 <HAL_RCC_OscConfig+0x470>)
 8043a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8043a68:	4a57      	ldr	r2, [pc, #348]	; (8043bc8 <HAL_RCC_OscConfig+0x470>)
 8043a6a:	f023 0301 	bic.w	r3, r3, #1
 8043a6e:	6713      	str	r3, [r2, #112]	; 0x70
 8043a70:	4b55      	ldr	r3, [pc, #340]	; (8043bc8 <HAL_RCC_OscConfig+0x470>)
 8043a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8043a74:	4a54      	ldr	r2, [pc, #336]	; (8043bc8 <HAL_RCC_OscConfig+0x470>)
 8043a76:	f023 0304 	bic.w	r3, r3, #4
 8043a7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8043a7c:	687b      	ldr	r3, [r7, #4]
 8043a7e:	689b      	ldr	r3, [r3, #8]
 8043a80:	2b00      	cmp	r3, #0
 8043a82:	d015      	beq.n	8043ab0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8043a84:	f7fd fa80 	bl	8040f88 <HAL_GetTick>
 8043a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8043a8a:	e00a      	b.n	8043aa2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8043a8c:	f7fd fa7c 	bl	8040f88 <HAL_GetTick>
 8043a90:	4602      	mov	r2, r0
 8043a92:	693b      	ldr	r3, [r7, #16]
 8043a94:	1ad3      	subs	r3, r2, r3
 8043a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8043a9a:	4293      	cmp	r3, r2
 8043a9c:	d901      	bls.n	8043aa2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8043a9e:	2303      	movs	r3, #3
 8043aa0:	e0c2      	b.n	8043c28 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8043aa2:	4b49      	ldr	r3, [pc, #292]	; (8043bc8 <HAL_RCC_OscConfig+0x470>)
 8043aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8043aa6:	f003 0302 	and.w	r3, r3, #2
 8043aaa:	2b00      	cmp	r3, #0
 8043aac:	d0ee      	beq.n	8043a8c <HAL_RCC_OscConfig+0x334>
 8043aae:	e014      	b.n	8043ada <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8043ab0:	f7fd fa6a 	bl	8040f88 <HAL_GetTick>
 8043ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8043ab6:	e00a      	b.n	8043ace <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8043ab8:	f7fd fa66 	bl	8040f88 <HAL_GetTick>
 8043abc:	4602      	mov	r2, r0
 8043abe:	693b      	ldr	r3, [r7, #16]
 8043ac0:	1ad3      	subs	r3, r2, r3
 8043ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8043ac6:	4293      	cmp	r3, r2
 8043ac8:	d901      	bls.n	8043ace <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8043aca:	2303      	movs	r3, #3
 8043acc:	e0ac      	b.n	8043c28 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8043ace:	4b3e      	ldr	r3, [pc, #248]	; (8043bc8 <HAL_RCC_OscConfig+0x470>)
 8043ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8043ad2:	f003 0302 	and.w	r3, r3, #2
 8043ad6:	2b00      	cmp	r3, #0
 8043ad8:	d1ee      	bne.n	8043ab8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8043ada:	7dfb      	ldrb	r3, [r7, #23]
 8043adc:	2b01      	cmp	r3, #1
 8043ade:	d105      	bne.n	8043aec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8043ae0:	4b39      	ldr	r3, [pc, #228]	; (8043bc8 <HAL_RCC_OscConfig+0x470>)
 8043ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043ae4:	4a38      	ldr	r2, [pc, #224]	; (8043bc8 <HAL_RCC_OscConfig+0x470>)
 8043ae6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8043aea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8043aec:	687b      	ldr	r3, [r7, #4]
 8043aee:	699b      	ldr	r3, [r3, #24]
 8043af0:	2b00      	cmp	r3, #0
 8043af2:	f000 8098 	beq.w	8043c26 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8043af6:	4b34      	ldr	r3, [pc, #208]	; (8043bc8 <HAL_RCC_OscConfig+0x470>)
 8043af8:	689b      	ldr	r3, [r3, #8]
 8043afa:	f003 030c 	and.w	r3, r3, #12
 8043afe:	2b08      	cmp	r3, #8
 8043b00:	d05c      	beq.n	8043bbc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8043b02:	687b      	ldr	r3, [r7, #4]
 8043b04:	699b      	ldr	r3, [r3, #24]
 8043b06:	2b02      	cmp	r3, #2
 8043b08:	d141      	bne.n	8043b8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8043b0a:	4b31      	ldr	r3, [pc, #196]	; (8043bd0 <HAL_RCC_OscConfig+0x478>)
 8043b0c:	2200      	movs	r2, #0
 8043b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8043b10:	f7fd fa3a 	bl	8040f88 <HAL_GetTick>
 8043b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8043b16:	e008      	b.n	8043b2a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8043b18:	f7fd fa36 	bl	8040f88 <HAL_GetTick>
 8043b1c:	4602      	mov	r2, r0
 8043b1e:	693b      	ldr	r3, [r7, #16]
 8043b20:	1ad3      	subs	r3, r2, r3
 8043b22:	2b02      	cmp	r3, #2
 8043b24:	d901      	bls.n	8043b2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8043b26:	2303      	movs	r3, #3
 8043b28:	e07e      	b.n	8043c28 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8043b2a:	4b27      	ldr	r3, [pc, #156]	; (8043bc8 <HAL_RCC_OscConfig+0x470>)
 8043b2c:	681b      	ldr	r3, [r3, #0]
 8043b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8043b32:	2b00      	cmp	r3, #0
 8043b34:	d1f0      	bne.n	8043b18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8043b36:	687b      	ldr	r3, [r7, #4]
 8043b38:	69da      	ldr	r2, [r3, #28]
 8043b3a:	687b      	ldr	r3, [r7, #4]
 8043b3c:	6a1b      	ldr	r3, [r3, #32]
 8043b3e:	431a      	orrs	r2, r3
 8043b40:	687b      	ldr	r3, [r7, #4]
 8043b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043b44:	019b      	lsls	r3, r3, #6
 8043b46:	431a      	orrs	r2, r3
 8043b48:	687b      	ldr	r3, [r7, #4]
 8043b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043b4c:	085b      	lsrs	r3, r3, #1
 8043b4e:	3b01      	subs	r3, #1
 8043b50:	041b      	lsls	r3, r3, #16
 8043b52:	431a      	orrs	r2, r3
 8043b54:	687b      	ldr	r3, [r7, #4]
 8043b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043b58:	061b      	lsls	r3, r3, #24
 8043b5a:	491b      	ldr	r1, [pc, #108]	; (8043bc8 <HAL_RCC_OscConfig+0x470>)
 8043b5c:	4313      	orrs	r3, r2
 8043b5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8043b60:	4b1b      	ldr	r3, [pc, #108]	; (8043bd0 <HAL_RCC_OscConfig+0x478>)
 8043b62:	2201      	movs	r2, #1
 8043b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8043b66:	f7fd fa0f 	bl	8040f88 <HAL_GetTick>
 8043b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8043b6c:	e008      	b.n	8043b80 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8043b6e:	f7fd fa0b 	bl	8040f88 <HAL_GetTick>
 8043b72:	4602      	mov	r2, r0
 8043b74:	693b      	ldr	r3, [r7, #16]
 8043b76:	1ad3      	subs	r3, r2, r3
 8043b78:	2b02      	cmp	r3, #2
 8043b7a:	d901      	bls.n	8043b80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8043b7c:	2303      	movs	r3, #3
 8043b7e:	e053      	b.n	8043c28 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8043b80:	4b11      	ldr	r3, [pc, #68]	; (8043bc8 <HAL_RCC_OscConfig+0x470>)
 8043b82:	681b      	ldr	r3, [r3, #0]
 8043b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8043b88:	2b00      	cmp	r3, #0
 8043b8a:	d0f0      	beq.n	8043b6e <HAL_RCC_OscConfig+0x416>
 8043b8c:	e04b      	b.n	8043c26 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8043b8e:	4b10      	ldr	r3, [pc, #64]	; (8043bd0 <HAL_RCC_OscConfig+0x478>)
 8043b90:	2200      	movs	r2, #0
 8043b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8043b94:	f7fd f9f8 	bl	8040f88 <HAL_GetTick>
 8043b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8043b9a:	e008      	b.n	8043bae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8043b9c:	f7fd f9f4 	bl	8040f88 <HAL_GetTick>
 8043ba0:	4602      	mov	r2, r0
 8043ba2:	693b      	ldr	r3, [r7, #16]
 8043ba4:	1ad3      	subs	r3, r2, r3
 8043ba6:	2b02      	cmp	r3, #2
 8043ba8:	d901      	bls.n	8043bae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8043baa:	2303      	movs	r3, #3
 8043bac:	e03c      	b.n	8043c28 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8043bae:	4b06      	ldr	r3, [pc, #24]	; (8043bc8 <HAL_RCC_OscConfig+0x470>)
 8043bb0:	681b      	ldr	r3, [r3, #0]
 8043bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8043bb6:	2b00      	cmp	r3, #0
 8043bb8:	d1f0      	bne.n	8043b9c <HAL_RCC_OscConfig+0x444>
 8043bba:	e034      	b.n	8043c26 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8043bbc:	687b      	ldr	r3, [r7, #4]
 8043bbe:	699b      	ldr	r3, [r3, #24]
 8043bc0:	2b01      	cmp	r3, #1
 8043bc2:	d107      	bne.n	8043bd4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8043bc4:	2301      	movs	r3, #1
 8043bc6:	e02f      	b.n	8043c28 <HAL_RCC_OscConfig+0x4d0>
 8043bc8:	40023800 	.word	0x40023800
 8043bcc:	40007000 	.word	0x40007000
 8043bd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8043bd4:	4b16      	ldr	r3, [pc, #88]	; (8043c30 <HAL_RCC_OscConfig+0x4d8>)
 8043bd6:	685b      	ldr	r3, [r3, #4]
 8043bd8:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8043bda:	68fb      	ldr	r3, [r7, #12]
 8043bdc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8043be0:	687b      	ldr	r3, [r7, #4]
 8043be2:	69db      	ldr	r3, [r3, #28]
 8043be4:	429a      	cmp	r2, r3
 8043be6:	d11c      	bne.n	8043c22 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8043be8:	68fb      	ldr	r3, [r7, #12]
 8043bea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8043bee:	687b      	ldr	r3, [r7, #4]
 8043bf0:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8043bf2:	429a      	cmp	r2, r3
 8043bf4:	d115      	bne.n	8043c22 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8043bf6:	68fa      	ldr	r2, [r7, #12]
 8043bf8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8043bfc:	4013      	ands	r3, r2
 8043bfe:	687a      	ldr	r2, [r7, #4]
 8043c00:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8043c02:	4293      	cmp	r3, r2
 8043c04:	d10d      	bne.n	8043c22 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8043c06:	68fb      	ldr	r3, [r7, #12]
 8043c08:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8043c0c:	687b      	ldr	r3, [r7, #4]
 8043c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8043c10:	429a      	cmp	r2, r3
 8043c12:	d106      	bne.n	8043c22 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8043c14:	68fb      	ldr	r3, [r7, #12]
 8043c16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8043c1a:	687b      	ldr	r3, [r7, #4]
 8043c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8043c1e:	429a      	cmp	r2, r3
 8043c20:	d001      	beq.n	8043c26 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8043c22:	2301      	movs	r3, #1
 8043c24:	e000      	b.n	8043c28 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8043c26:	2300      	movs	r3, #0
}
 8043c28:	4618      	mov	r0, r3
 8043c2a:	3718      	adds	r7, #24
 8043c2c:	46bd      	mov	sp, r7
 8043c2e:	bd80      	pop	{r7, pc}
 8043c30:	40023800 	.word	0x40023800

08043c34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8043c34:	b580      	push	{r7, lr}
 8043c36:	b084      	sub	sp, #16
 8043c38:	af00      	add	r7, sp, #0
 8043c3a:	6078      	str	r0, [r7, #4]
 8043c3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8043c3e:	687b      	ldr	r3, [r7, #4]
 8043c40:	2b00      	cmp	r3, #0
 8043c42:	d101      	bne.n	8043c48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8043c44:	2301      	movs	r3, #1
 8043c46:	e0cc      	b.n	8043de2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8043c48:	4b68      	ldr	r3, [pc, #416]	; (8043dec <HAL_RCC_ClockConfig+0x1b8>)
 8043c4a:	681b      	ldr	r3, [r3, #0]
 8043c4c:	f003 030f 	and.w	r3, r3, #15
 8043c50:	683a      	ldr	r2, [r7, #0]
 8043c52:	429a      	cmp	r2, r3
 8043c54:	d90c      	bls.n	8043c70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8043c56:	4b65      	ldr	r3, [pc, #404]	; (8043dec <HAL_RCC_ClockConfig+0x1b8>)
 8043c58:	683a      	ldr	r2, [r7, #0]
 8043c5a:	b2d2      	uxtb	r2, r2
 8043c5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8043c5e:	4b63      	ldr	r3, [pc, #396]	; (8043dec <HAL_RCC_ClockConfig+0x1b8>)
 8043c60:	681b      	ldr	r3, [r3, #0]
 8043c62:	f003 030f 	and.w	r3, r3, #15
 8043c66:	683a      	ldr	r2, [r7, #0]
 8043c68:	429a      	cmp	r2, r3
 8043c6a:	d001      	beq.n	8043c70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8043c6c:	2301      	movs	r3, #1
 8043c6e:	e0b8      	b.n	8043de2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8043c70:	687b      	ldr	r3, [r7, #4]
 8043c72:	681b      	ldr	r3, [r3, #0]
 8043c74:	f003 0302 	and.w	r3, r3, #2
 8043c78:	2b00      	cmp	r3, #0
 8043c7a:	d020      	beq.n	8043cbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8043c7c:	687b      	ldr	r3, [r7, #4]
 8043c7e:	681b      	ldr	r3, [r3, #0]
 8043c80:	f003 0304 	and.w	r3, r3, #4
 8043c84:	2b00      	cmp	r3, #0
 8043c86:	d005      	beq.n	8043c94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8043c88:	4b59      	ldr	r3, [pc, #356]	; (8043df0 <HAL_RCC_ClockConfig+0x1bc>)
 8043c8a:	689b      	ldr	r3, [r3, #8]
 8043c8c:	4a58      	ldr	r2, [pc, #352]	; (8043df0 <HAL_RCC_ClockConfig+0x1bc>)
 8043c8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8043c92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8043c94:	687b      	ldr	r3, [r7, #4]
 8043c96:	681b      	ldr	r3, [r3, #0]
 8043c98:	f003 0308 	and.w	r3, r3, #8
 8043c9c:	2b00      	cmp	r3, #0
 8043c9e:	d005      	beq.n	8043cac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8043ca0:	4b53      	ldr	r3, [pc, #332]	; (8043df0 <HAL_RCC_ClockConfig+0x1bc>)
 8043ca2:	689b      	ldr	r3, [r3, #8]
 8043ca4:	4a52      	ldr	r2, [pc, #328]	; (8043df0 <HAL_RCC_ClockConfig+0x1bc>)
 8043ca6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8043caa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8043cac:	4b50      	ldr	r3, [pc, #320]	; (8043df0 <HAL_RCC_ClockConfig+0x1bc>)
 8043cae:	689b      	ldr	r3, [r3, #8]
 8043cb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8043cb4:	687b      	ldr	r3, [r7, #4]
 8043cb6:	689b      	ldr	r3, [r3, #8]
 8043cb8:	494d      	ldr	r1, [pc, #308]	; (8043df0 <HAL_RCC_ClockConfig+0x1bc>)
 8043cba:	4313      	orrs	r3, r2
 8043cbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8043cbe:	687b      	ldr	r3, [r7, #4]
 8043cc0:	681b      	ldr	r3, [r3, #0]
 8043cc2:	f003 0301 	and.w	r3, r3, #1
 8043cc6:	2b00      	cmp	r3, #0
 8043cc8:	d044      	beq.n	8043d54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8043cca:	687b      	ldr	r3, [r7, #4]
 8043ccc:	685b      	ldr	r3, [r3, #4]
 8043cce:	2b01      	cmp	r3, #1
 8043cd0:	d107      	bne.n	8043ce2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8043cd2:	4b47      	ldr	r3, [pc, #284]	; (8043df0 <HAL_RCC_ClockConfig+0x1bc>)
 8043cd4:	681b      	ldr	r3, [r3, #0]
 8043cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8043cda:	2b00      	cmp	r3, #0
 8043cdc:	d119      	bne.n	8043d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8043cde:	2301      	movs	r3, #1
 8043ce0:	e07f      	b.n	8043de2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8043ce2:	687b      	ldr	r3, [r7, #4]
 8043ce4:	685b      	ldr	r3, [r3, #4]
 8043ce6:	2b02      	cmp	r3, #2
 8043ce8:	d003      	beq.n	8043cf2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8043cea:	687b      	ldr	r3, [r7, #4]
 8043cec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8043cee:	2b03      	cmp	r3, #3
 8043cf0:	d107      	bne.n	8043d02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8043cf2:	4b3f      	ldr	r3, [pc, #252]	; (8043df0 <HAL_RCC_ClockConfig+0x1bc>)
 8043cf4:	681b      	ldr	r3, [r3, #0]
 8043cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8043cfa:	2b00      	cmp	r3, #0
 8043cfc:	d109      	bne.n	8043d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8043cfe:	2301      	movs	r3, #1
 8043d00:	e06f      	b.n	8043de2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8043d02:	4b3b      	ldr	r3, [pc, #236]	; (8043df0 <HAL_RCC_ClockConfig+0x1bc>)
 8043d04:	681b      	ldr	r3, [r3, #0]
 8043d06:	f003 0302 	and.w	r3, r3, #2
 8043d0a:	2b00      	cmp	r3, #0
 8043d0c:	d101      	bne.n	8043d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8043d0e:	2301      	movs	r3, #1
 8043d10:	e067      	b.n	8043de2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8043d12:	4b37      	ldr	r3, [pc, #220]	; (8043df0 <HAL_RCC_ClockConfig+0x1bc>)
 8043d14:	689b      	ldr	r3, [r3, #8]
 8043d16:	f023 0203 	bic.w	r2, r3, #3
 8043d1a:	687b      	ldr	r3, [r7, #4]
 8043d1c:	685b      	ldr	r3, [r3, #4]
 8043d1e:	4934      	ldr	r1, [pc, #208]	; (8043df0 <HAL_RCC_ClockConfig+0x1bc>)
 8043d20:	4313      	orrs	r3, r2
 8043d22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8043d24:	f7fd f930 	bl	8040f88 <HAL_GetTick>
 8043d28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8043d2a:	e00a      	b.n	8043d42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8043d2c:	f7fd f92c 	bl	8040f88 <HAL_GetTick>
 8043d30:	4602      	mov	r2, r0
 8043d32:	68fb      	ldr	r3, [r7, #12]
 8043d34:	1ad3      	subs	r3, r2, r3
 8043d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8043d3a:	4293      	cmp	r3, r2
 8043d3c:	d901      	bls.n	8043d42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8043d3e:	2303      	movs	r3, #3
 8043d40:	e04f      	b.n	8043de2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8043d42:	4b2b      	ldr	r3, [pc, #172]	; (8043df0 <HAL_RCC_ClockConfig+0x1bc>)
 8043d44:	689b      	ldr	r3, [r3, #8]
 8043d46:	f003 020c 	and.w	r2, r3, #12
 8043d4a:	687b      	ldr	r3, [r7, #4]
 8043d4c:	685b      	ldr	r3, [r3, #4]
 8043d4e:	009b      	lsls	r3, r3, #2
 8043d50:	429a      	cmp	r2, r3
 8043d52:	d1eb      	bne.n	8043d2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8043d54:	4b25      	ldr	r3, [pc, #148]	; (8043dec <HAL_RCC_ClockConfig+0x1b8>)
 8043d56:	681b      	ldr	r3, [r3, #0]
 8043d58:	f003 030f 	and.w	r3, r3, #15
 8043d5c:	683a      	ldr	r2, [r7, #0]
 8043d5e:	429a      	cmp	r2, r3
 8043d60:	d20c      	bcs.n	8043d7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8043d62:	4b22      	ldr	r3, [pc, #136]	; (8043dec <HAL_RCC_ClockConfig+0x1b8>)
 8043d64:	683a      	ldr	r2, [r7, #0]
 8043d66:	b2d2      	uxtb	r2, r2
 8043d68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8043d6a:	4b20      	ldr	r3, [pc, #128]	; (8043dec <HAL_RCC_ClockConfig+0x1b8>)
 8043d6c:	681b      	ldr	r3, [r3, #0]
 8043d6e:	f003 030f 	and.w	r3, r3, #15
 8043d72:	683a      	ldr	r2, [r7, #0]
 8043d74:	429a      	cmp	r2, r3
 8043d76:	d001      	beq.n	8043d7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8043d78:	2301      	movs	r3, #1
 8043d7a:	e032      	b.n	8043de2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8043d7c:	687b      	ldr	r3, [r7, #4]
 8043d7e:	681b      	ldr	r3, [r3, #0]
 8043d80:	f003 0304 	and.w	r3, r3, #4
 8043d84:	2b00      	cmp	r3, #0
 8043d86:	d008      	beq.n	8043d9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8043d88:	4b19      	ldr	r3, [pc, #100]	; (8043df0 <HAL_RCC_ClockConfig+0x1bc>)
 8043d8a:	689b      	ldr	r3, [r3, #8]
 8043d8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8043d90:	687b      	ldr	r3, [r7, #4]
 8043d92:	68db      	ldr	r3, [r3, #12]
 8043d94:	4916      	ldr	r1, [pc, #88]	; (8043df0 <HAL_RCC_ClockConfig+0x1bc>)
 8043d96:	4313      	orrs	r3, r2
 8043d98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8043d9a:	687b      	ldr	r3, [r7, #4]
 8043d9c:	681b      	ldr	r3, [r3, #0]
 8043d9e:	f003 0308 	and.w	r3, r3, #8
 8043da2:	2b00      	cmp	r3, #0
 8043da4:	d009      	beq.n	8043dba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8043da6:	4b12      	ldr	r3, [pc, #72]	; (8043df0 <HAL_RCC_ClockConfig+0x1bc>)
 8043da8:	689b      	ldr	r3, [r3, #8]
 8043daa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8043dae:	687b      	ldr	r3, [r7, #4]
 8043db0:	691b      	ldr	r3, [r3, #16]
 8043db2:	00db      	lsls	r3, r3, #3
 8043db4:	490e      	ldr	r1, [pc, #56]	; (8043df0 <HAL_RCC_ClockConfig+0x1bc>)
 8043db6:	4313      	orrs	r3, r2
 8043db8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8043dba:	f000 f821 	bl	8043e00 <HAL_RCC_GetSysClockFreq>
 8043dbe:	4602      	mov	r2, r0
 8043dc0:	4b0b      	ldr	r3, [pc, #44]	; (8043df0 <HAL_RCC_ClockConfig+0x1bc>)
 8043dc2:	689b      	ldr	r3, [r3, #8]
 8043dc4:	091b      	lsrs	r3, r3, #4
 8043dc6:	f003 030f 	and.w	r3, r3, #15
 8043dca:	490a      	ldr	r1, [pc, #40]	; (8043df4 <HAL_RCC_ClockConfig+0x1c0>)
 8043dcc:	5ccb      	ldrb	r3, [r1, r3]
 8043dce:	fa22 f303 	lsr.w	r3, r2, r3
 8043dd2:	4a09      	ldr	r2, [pc, #36]	; (8043df8 <HAL_RCC_ClockConfig+0x1c4>)
 8043dd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8043dd6:	4b09      	ldr	r3, [pc, #36]	; (8043dfc <HAL_RCC_ClockConfig+0x1c8>)
 8043dd8:	681b      	ldr	r3, [r3, #0]
 8043dda:	4618      	mov	r0, r3
 8043ddc:	f7fd f890 	bl	8040f00 <HAL_InitTick>

  return HAL_OK;
 8043de0:	2300      	movs	r3, #0
}
 8043de2:	4618      	mov	r0, r3
 8043de4:	3710      	adds	r7, #16
 8043de6:	46bd      	mov	sp, r7
 8043de8:	bd80      	pop	{r7, pc}
 8043dea:	bf00      	nop
 8043dec:	40023c00 	.word	0x40023c00
 8043df0:	40023800 	.word	0x40023800
 8043df4:	08049da8 	.word	0x08049da8
 8043df8:	20000014 	.word	0x20000014
 8043dfc:	20000000 	.word	0x20000000

08043e00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8043e00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8043e04:	b094      	sub	sp, #80	; 0x50
 8043e06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8043e08:	2300      	movs	r3, #0
 8043e0a:	647b      	str	r3, [r7, #68]	; 0x44
 8043e0c:	2300      	movs	r3, #0
 8043e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8043e10:	2300      	movs	r3, #0
 8043e12:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8043e14:	2300      	movs	r3, #0
 8043e16:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8043e18:	4b79      	ldr	r3, [pc, #484]	; (8044000 <HAL_RCC_GetSysClockFreq+0x200>)
 8043e1a:	689b      	ldr	r3, [r3, #8]
 8043e1c:	f003 030c 	and.w	r3, r3, #12
 8043e20:	2b08      	cmp	r3, #8
 8043e22:	d00d      	beq.n	8043e40 <HAL_RCC_GetSysClockFreq+0x40>
 8043e24:	2b08      	cmp	r3, #8
 8043e26:	f200 80e1 	bhi.w	8043fec <HAL_RCC_GetSysClockFreq+0x1ec>
 8043e2a:	2b00      	cmp	r3, #0
 8043e2c:	d002      	beq.n	8043e34 <HAL_RCC_GetSysClockFreq+0x34>
 8043e2e:	2b04      	cmp	r3, #4
 8043e30:	d003      	beq.n	8043e3a <HAL_RCC_GetSysClockFreq+0x3a>
 8043e32:	e0db      	b.n	8043fec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8043e34:	4b73      	ldr	r3, [pc, #460]	; (8044004 <HAL_RCC_GetSysClockFreq+0x204>)
 8043e36:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8043e38:	e0db      	b.n	8043ff2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8043e3a:	4b73      	ldr	r3, [pc, #460]	; (8044008 <HAL_RCC_GetSysClockFreq+0x208>)
 8043e3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8043e3e:	e0d8      	b.n	8043ff2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8043e40:	4b6f      	ldr	r3, [pc, #444]	; (8044000 <HAL_RCC_GetSysClockFreq+0x200>)
 8043e42:	685b      	ldr	r3, [r3, #4]
 8043e44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8043e48:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8043e4a:	4b6d      	ldr	r3, [pc, #436]	; (8044000 <HAL_RCC_GetSysClockFreq+0x200>)
 8043e4c:	685b      	ldr	r3, [r3, #4]
 8043e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8043e52:	2b00      	cmp	r3, #0
 8043e54:	d063      	beq.n	8043f1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8043e56:	4b6a      	ldr	r3, [pc, #424]	; (8044000 <HAL_RCC_GetSysClockFreq+0x200>)
 8043e58:	685b      	ldr	r3, [r3, #4]
 8043e5a:	099b      	lsrs	r3, r3, #6
 8043e5c:	2200      	movs	r2, #0
 8043e5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8043e60:	63fa      	str	r2, [r7, #60]	; 0x3c
 8043e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8043e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8043e68:	633b      	str	r3, [r7, #48]	; 0x30
 8043e6a:	2300      	movs	r3, #0
 8043e6c:	637b      	str	r3, [r7, #52]	; 0x34
 8043e6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8043e72:	4622      	mov	r2, r4
 8043e74:	462b      	mov	r3, r5
 8043e76:	f04f 0000 	mov.w	r0, #0
 8043e7a:	f04f 0100 	mov.w	r1, #0
 8043e7e:	0159      	lsls	r1, r3, #5
 8043e80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8043e84:	0150      	lsls	r0, r2, #5
 8043e86:	4602      	mov	r2, r0
 8043e88:	460b      	mov	r3, r1
 8043e8a:	4621      	mov	r1, r4
 8043e8c:	1a51      	subs	r1, r2, r1
 8043e8e:	6139      	str	r1, [r7, #16]
 8043e90:	4629      	mov	r1, r5
 8043e92:	eb63 0301 	sbc.w	r3, r3, r1
 8043e96:	617b      	str	r3, [r7, #20]
 8043e98:	f04f 0200 	mov.w	r2, #0
 8043e9c:	f04f 0300 	mov.w	r3, #0
 8043ea0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8043ea4:	4659      	mov	r1, fp
 8043ea6:	018b      	lsls	r3, r1, #6
 8043ea8:	4651      	mov	r1, sl
 8043eaa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8043eae:	4651      	mov	r1, sl
 8043eb0:	018a      	lsls	r2, r1, #6
 8043eb2:	4651      	mov	r1, sl
 8043eb4:	ebb2 0801 	subs.w	r8, r2, r1
 8043eb8:	4659      	mov	r1, fp
 8043eba:	eb63 0901 	sbc.w	r9, r3, r1
 8043ebe:	f04f 0200 	mov.w	r2, #0
 8043ec2:	f04f 0300 	mov.w	r3, #0
 8043ec6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8043eca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8043ece:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8043ed2:	4690      	mov	r8, r2
 8043ed4:	4699      	mov	r9, r3
 8043ed6:	4623      	mov	r3, r4
 8043ed8:	eb18 0303 	adds.w	r3, r8, r3
 8043edc:	60bb      	str	r3, [r7, #8]
 8043ede:	462b      	mov	r3, r5
 8043ee0:	eb49 0303 	adc.w	r3, r9, r3
 8043ee4:	60fb      	str	r3, [r7, #12]
 8043ee6:	f04f 0200 	mov.w	r2, #0
 8043eea:	f04f 0300 	mov.w	r3, #0
 8043eee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8043ef2:	4629      	mov	r1, r5
 8043ef4:	024b      	lsls	r3, r1, #9
 8043ef6:	4621      	mov	r1, r4
 8043ef8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8043efc:	4621      	mov	r1, r4
 8043efe:	024a      	lsls	r2, r1, #9
 8043f00:	4610      	mov	r0, r2
 8043f02:	4619      	mov	r1, r3
 8043f04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8043f06:	2200      	movs	r2, #0
 8043f08:	62bb      	str	r3, [r7, #40]	; 0x28
 8043f0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8043f0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8043f10:	f7fc fe52 	bl	8040bb8 <__aeabi_uldivmod>
 8043f14:	4602      	mov	r2, r0
 8043f16:	460b      	mov	r3, r1
 8043f18:	4613      	mov	r3, r2
 8043f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8043f1c:	e058      	b.n	8043fd0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8043f1e:	4b38      	ldr	r3, [pc, #224]	; (8044000 <HAL_RCC_GetSysClockFreq+0x200>)
 8043f20:	685b      	ldr	r3, [r3, #4]
 8043f22:	099b      	lsrs	r3, r3, #6
 8043f24:	2200      	movs	r2, #0
 8043f26:	4618      	mov	r0, r3
 8043f28:	4611      	mov	r1, r2
 8043f2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8043f2e:	623b      	str	r3, [r7, #32]
 8043f30:	2300      	movs	r3, #0
 8043f32:	627b      	str	r3, [r7, #36]	; 0x24
 8043f34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8043f38:	4642      	mov	r2, r8
 8043f3a:	464b      	mov	r3, r9
 8043f3c:	f04f 0000 	mov.w	r0, #0
 8043f40:	f04f 0100 	mov.w	r1, #0
 8043f44:	0159      	lsls	r1, r3, #5
 8043f46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8043f4a:	0150      	lsls	r0, r2, #5
 8043f4c:	4602      	mov	r2, r0
 8043f4e:	460b      	mov	r3, r1
 8043f50:	4641      	mov	r1, r8
 8043f52:	ebb2 0a01 	subs.w	sl, r2, r1
 8043f56:	4649      	mov	r1, r9
 8043f58:	eb63 0b01 	sbc.w	fp, r3, r1
 8043f5c:	f04f 0200 	mov.w	r2, #0
 8043f60:	f04f 0300 	mov.w	r3, #0
 8043f64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8043f68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8043f6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8043f70:	ebb2 040a 	subs.w	r4, r2, sl
 8043f74:	eb63 050b 	sbc.w	r5, r3, fp
 8043f78:	f04f 0200 	mov.w	r2, #0
 8043f7c:	f04f 0300 	mov.w	r3, #0
 8043f80:	00eb      	lsls	r3, r5, #3
 8043f82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8043f86:	00e2      	lsls	r2, r4, #3
 8043f88:	4614      	mov	r4, r2
 8043f8a:	461d      	mov	r5, r3
 8043f8c:	4643      	mov	r3, r8
 8043f8e:	18e3      	adds	r3, r4, r3
 8043f90:	603b      	str	r3, [r7, #0]
 8043f92:	464b      	mov	r3, r9
 8043f94:	eb45 0303 	adc.w	r3, r5, r3
 8043f98:	607b      	str	r3, [r7, #4]
 8043f9a:	f04f 0200 	mov.w	r2, #0
 8043f9e:	f04f 0300 	mov.w	r3, #0
 8043fa2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8043fa6:	4629      	mov	r1, r5
 8043fa8:	028b      	lsls	r3, r1, #10
 8043faa:	4621      	mov	r1, r4
 8043fac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8043fb0:	4621      	mov	r1, r4
 8043fb2:	028a      	lsls	r2, r1, #10
 8043fb4:	4610      	mov	r0, r2
 8043fb6:	4619      	mov	r1, r3
 8043fb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8043fba:	2200      	movs	r2, #0
 8043fbc:	61bb      	str	r3, [r7, #24]
 8043fbe:	61fa      	str	r2, [r7, #28]
 8043fc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8043fc4:	f7fc fdf8 	bl	8040bb8 <__aeabi_uldivmod>
 8043fc8:	4602      	mov	r2, r0
 8043fca:	460b      	mov	r3, r1
 8043fcc:	4613      	mov	r3, r2
 8043fce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8043fd0:	4b0b      	ldr	r3, [pc, #44]	; (8044000 <HAL_RCC_GetSysClockFreq+0x200>)
 8043fd2:	685b      	ldr	r3, [r3, #4]
 8043fd4:	0c1b      	lsrs	r3, r3, #16
 8043fd6:	f003 0303 	and.w	r3, r3, #3
 8043fda:	3301      	adds	r3, #1
 8043fdc:	005b      	lsls	r3, r3, #1
 8043fde:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8043fe0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8043fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8043fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8043fe8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8043fea:	e002      	b.n	8043ff2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8043fec:	4b05      	ldr	r3, [pc, #20]	; (8044004 <HAL_RCC_GetSysClockFreq+0x204>)
 8043fee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8043ff0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8043ff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8043ff4:	4618      	mov	r0, r3
 8043ff6:	3750      	adds	r7, #80	; 0x50
 8043ff8:	46bd      	mov	sp, r7
 8043ffa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8043ffe:	bf00      	nop
 8044000:	40023800 	.word	0x40023800
 8044004:	00f42400 	.word	0x00f42400
 8044008:	007a1200 	.word	0x007a1200

0804400c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 804400c:	b480      	push	{r7}
 804400e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8044010:	4b03      	ldr	r3, [pc, #12]	; (8044020 <HAL_RCC_GetHCLKFreq+0x14>)
 8044012:	681b      	ldr	r3, [r3, #0]
}
 8044014:	4618      	mov	r0, r3
 8044016:	46bd      	mov	sp, r7
 8044018:	f85d 7b04 	ldr.w	r7, [sp], #4
 804401c:	4770      	bx	lr
 804401e:	bf00      	nop
 8044020:	20000014 	.word	0x20000014

08044024 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8044024:	b580      	push	{r7, lr}
 8044026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8044028:	f7ff fff0 	bl	804400c <HAL_RCC_GetHCLKFreq>
 804402c:	4602      	mov	r2, r0
 804402e:	4b05      	ldr	r3, [pc, #20]	; (8044044 <HAL_RCC_GetPCLK1Freq+0x20>)
 8044030:	689b      	ldr	r3, [r3, #8]
 8044032:	0a9b      	lsrs	r3, r3, #10
 8044034:	f003 0307 	and.w	r3, r3, #7
 8044038:	4903      	ldr	r1, [pc, #12]	; (8044048 <HAL_RCC_GetPCLK1Freq+0x24>)
 804403a:	5ccb      	ldrb	r3, [r1, r3]
 804403c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8044040:	4618      	mov	r0, r3
 8044042:	bd80      	pop	{r7, pc}
 8044044:	40023800 	.word	0x40023800
 8044048:	08049db8 	.word	0x08049db8

0804404c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 804404c:	b580      	push	{r7, lr}
 804404e:	b086      	sub	sp, #24
 8044050:	af00      	add	r7, sp, #0
 8044052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8044054:	2300      	movs	r3, #0
 8044056:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8044058:	2300      	movs	r3, #0
 804405a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 804405c:	687b      	ldr	r3, [r7, #4]
 804405e:	681b      	ldr	r3, [r3, #0]
 8044060:	f003 0301 	and.w	r3, r3, #1
 8044064:	2b00      	cmp	r3, #0
 8044066:	d10b      	bne.n	8044080 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8044068:	687b      	ldr	r3, [r7, #4]
 804406a:	681b      	ldr	r3, [r3, #0]
 804406c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8044070:	2b00      	cmp	r3, #0
 8044072:	d105      	bne.n	8044080 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8044074:	687b      	ldr	r3, [r7, #4]
 8044076:	681b      	ldr	r3, [r3, #0]
 8044078:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 804407c:	2b00      	cmp	r3, #0
 804407e:	d075      	beq.n	804416c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8044080:	4b91      	ldr	r3, [pc, #580]	; (80442c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8044082:	2200      	movs	r2, #0
 8044084:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8044086:	f7fc ff7f 	bl	8040f88 <HAL_GetTick>
 804408a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 804408c:	e008      	b.n	80440a0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 804408e:	f7fc ff7b 	bl	8040f88 <HAL_GetTick>
 8044092:	4602      	mov	r2, r0
 8044094:	697b      	ldr	r3, [r7, #20]
 8044096:	1ad3      	subs	r3, r2, r3
 8044098:	2b02      	cmp	r3, #2
 804409a:	d901      	bls.n	80440a0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 804409c:	2303      	movs	r3, #3
 804409e:	e189      	b.n	80443b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80440a0:	4b8a      	ldr	r3, [pc, #552]	; (80442cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80440a2:	681b      	ldr	r3, [r3, #0]
 80440a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80440a8:	2b00      	cmp	r3, #0
 80440aa:	d1f0      	bne.n	804408e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80440ac:	687b      	ldr	r3, [r7, #4]
 80440ae:	681b      	ldr	r3, [r3, #0]
 80440b0:	f003 0301 	and.w	r3, r3, #1
 80440b4:	2b00      	cmp	r3, #0
 80440b6:	d009      	beq.n	80440cc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80440b8:	687b      	ldr	r3, [r7, #4]
 80440ba:	685b      	ldr	r3, [r3, #4]
 80440bc:	019a      	lsls	r2, r3, #6
 80440be:	687b      	ldr	r3, [r7, #4]
 80440c0:	689b      	ldr	r3, [r3, #8]
 80440c2:	071b      	lsls	r3, r3, #28
 80440c4:	4981      	ldr	r1, [pc, #516]	; (80442cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80440c6:	4313      	orrs	r3, r2
 80440c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80440cc:	687b      	ldr	r3, [r7, #4]
 80440ce:	681b      	ldr	r3, [r3, #0]
 80440d0:	f003 0302 	and.w	r3, r3, #2
 80440d4:	2b00      	cmp	r3, #0
 80440d6:	d01f      	beq.n	8044118 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80440d8:	4b7c      	ldr	r3, [pc, #496]	; (80442cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80440da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80440de:	0f1b      	lsrs	r3, r3, #28
 80440e0:	f003 0307 	and.w	r3, r3, #7
 80440e4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80440e6:	687b      	ldr	r3, [r7, #4]
 80440e8:	685b      	ldr	r3, [r3, #4]
 80440ea:	019a      	lsls	r2, r3, #6
 80440ec:	687b      	ldr	r3, [r7, #4]
 80440ee:	68db      	ldr	r3, [r3, #12]
 80440f0:	061b      	lsls	r3, r3, #24
 80440f2:	431a      	orrs	r2, r3
 80440f4:	693b      	ldr	r3, [r7, #16]
 80440f6:	071b      	lsls	r3, r3, #28
 80440f8:	4974      	ldr	r1, [pc, #464]	; (80442cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80440fa:	4313      	orrs	r3, r2
 80440fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8044100:	4b72      	ldr	r3, [pc, #456]	; (80442cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8044102:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8044106:	f023 021f 	bic.w	r2, r3, #31
 804410a:	687b      	ldr	r3, [r7, #4]
 804410c:	69db      	ldr	r3, [r3, #28]
 804410e:	3b01      	subs	r3, #1
 8044110:	496e      	ldr	r1, [pc, #440]	; (80442cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8044112:	4313      	orrs	r3, r2
 8044114:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8044118:	687b      	ldr	r3, [r7, #4]
 804411a:	681b      	ldr	r3, [r3, #0]
 804411c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8044120:	2b00      	cmp	r3, #0
 8044122:	d00d      	beq.n	8044140 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8044124:	687b      	ldr	r3, [r7, #4]
 8044126:	685b      	ldr	r3, [r3, #4]
 8044128:	019a      	lsls	r2, r3, #6
 804412a:	687b      	ldr	r3, [r7, #4]
 804412c:	68db      	ldr	r3, [r3, #12]
 804412e:	061b      	lsls	r3, r3, #24
 8044130:	431a      	orrs	r2, r3
 8044132:	687b      	ldr	r3, [r7, #4]
 8044134:	689b      	ldr	r3, [r3, #8]
 8044136:	071b      	lsls	r3, r3, #28
 8044138:	4964      	ldr	r1, [pc, #400]	; (80442cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 804413a:	4313      	orrs	r3, r2
 804413c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8044140:	4b61      	ldr	r3, [pc, #388]	; (80442c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8044142:	2201      	movs	r2, #1
 8044144:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8044146:	f7fc ff1f 	bl	8040f88 <HAL_GetTick>
 804414a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 804414c:	e008      	b.n	8044160 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 804414e:	f7fc ff1b 	bl	8040f88 <HAL_GetTick>
 8044152:	4602      	mov	r2, r0
 8044154:	697b      	ldr	r3, [r7, #20]
 8044156:	1ad3      	subs	r3, r2, r3
 8044158:	2b02      	cmp	r3, #2
 804415a:	d901      	bls.n	8044160 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 804415c:	2303      	movs	r3, #3
 804415e:	e129      	b.n	80443b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8044160:	4b5a      	ldr	r3, [pc, #360]	; (80442cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8044162:	681b      	ldr	r3, [r3, #0]
 8044164:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8044168:	2b00      	cmp	r3, #0
 804416a:	d0f0      	beq.n	804414e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 804416c:	687b      	ldr	r3, [r7, #4]
 804416e:	681b      	ldr	r3, [r3, #0]
 8044170:	f003 0304 	and.w	r3, r3, #4
 8044174:	2b00      	cmp	r3, #0
 8044176:	d105      	bne.n	8044184 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8044178:	687b      	ldr	r3, [r7, #4]
 804417a:	681b      	ldr	r3, [r3, #0]
 804417c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8044180:	2b00      	cmp	r3, #0
 8044182:	d079      	beq.n	8044278 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8044184:	4b52      	ldr	r3, [pc, #328]	; (80442d0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8044186:	2200      	movs	r2, #0
 8044188:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 804418a:	f7fc fefd 	bl	8040f88 <HAL_GetTick>
 804418e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8044190:	e008      	b.n	80441a4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8044192:	f7fc fef9 	bl	8040f88 <HAL_GetTick>
 8044196:	4602      	mov	r2, r0
 8044198:	697b      	ldr	r3, [r7, #20]
 804419a:	1ad3      	subs	r3, r2, r3
 804419c:	2b02      	cmp	r3, #2
 804419e:	d901      	bls.n	80441a4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80441a0:	2303      	movs	r3, #3
 80441a2:	e107      	b.n	80443b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80441a4:	4b49      	ldr	r3, [pc, #292]	; (80442cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80441a6:	681b      	ldr	r3, [r3, #0]
 80441a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80441ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80441b0:	d0ef      	beq.n	8044192 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80441b2:	687b      	ldr	r3, [r7, #4]
 80441b4:	681b      	ldr	r3, [r3, #0]
 80441b6:	f003 0304 	and.w	r3, r3, #4
 80441ba:	2b00      	cmp	r3, #0
 80441bc:	d020      	beq.n	8044200 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80441be:	4b43      	ldr	r3, [pc, #268]	; (80442cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80441c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80441c4:	0f1b      	lsrs	r3, r3, #28
 80441c6:	f003 0307 	and.w	r3, r3, #7
 80441ca:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80441cc:	687b      	ldr	r3, [r7, #4]
 80441ce:	691b      	ldr	r3, [r3, #16]
 80441d0:	019a      	lsls	r2, r3, #6
 80441d2:	687b      	ldr	r3, [r7, #4]
 80441d4:	695b      	ldr	r3, [r3, #20]
 80441d6:	061b      	lsls	r3, r3, #24
 80441d8:	431a      	orrs	r2, r3
 80441da:	693b      	ldr	r3, [r7, #16]
 80441dc:	071b      	lsls	r3, r3, #28
 80441de:	493b      	ldr	r1, [pc, #236]	; (80442cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80441e0:	4313      	orrs	r3, r2
 80441e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80441e6:	4b39      	ldr	r3, [pc, #228]	; (80442cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80441e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80441ec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80441f0:	687b      	ldr	r3, [r7, #4]
 80441f2:	6a1b      	ldr	r3, [r3, #32]
 80441f4:	3b01      	subs	r3, #1
 80441f6:	021b      	lsls	r3, r3, #8
 80441f8:	4934      	ldr	r1, [pc, #208]	; (80442cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80441fa:	4313      	orrs	r3, r2
 80441fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8044200:	687b      	ldr	r3, [r7, #4]
 8044202:	681b      	ldr	r3, [r3, #0]
 8044204:	f003 0308 	and.w	r3, r3, #8
 8044208:	2b00      	cmp	r3, #0
 804420a:	d01e      	beq.n	804424a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 804420c:	4b2f      	ldr	r3, [pc, #188]	; (80442cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 804420e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8044212:	0e1b      	lsrs	r3, r3, #24
 8044214:	f003 030f 	and.w	r3, r3, #15
 8044218:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 804421a:	687b      	ldr	r3, [r7, #4]
 804421c:	691b      	ldr	r3, [r3, #16]
 804421e:	019a      	lsls	r2, r3, #6
 8044220:	693b      	ldr	r3, [r7, #16]
 8044222:	061b      	lsls	r3, r3, #24
 8044224:	431a      	orrs	r2, r3
 8044226:	687b      	ldr	r3, [r7, #4]
 8044228:	699b      	ldr	r3, [r3, #24]
 804422a:	071b      	lsls	r3, r3, #28
 804422c:	4927      	ldr	r1, [pc, #156]	; (80442cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 804422e:	4313      	orrs	r3, r2
 8044230:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8044234:	4b25      	ldr	r3, [pc, #148]	; (80442cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8044236:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804423a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 804423e:	687b      	ldr	r3, [r7, #4]
 8044240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8044242:	4922      	ldr	r1, [pc, #136]	; (80442cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8044244:	4313      	orrs	r3, r2
 8044246:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 804424a:	4b21      	ldr	r3, [pc, #132]	; (80442d0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 804424c:	2201      	movs	r2, #1
 804424e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8044250:	f7fc fe9a 	bl	8040f88 <HAL_GetTick>
 8044254:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8044256:	e008      	b.n	804426a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8044258:	f7fc fe96 	bl	8040f88 <HAL_GetTick>
 804425c:	4602      	mov	r2, r0
 804425e:	697b      	ldr	r3, [r7, #20]
 8044260:	1ad3      	subs	r3, r2, r3
 8044262:	2b02      	cmp	r3, #2
 8044264:	d901      	bls.n	804426a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8044266:	2303      	movs	r3, #3
 8044268:	e0a4      	b.n	80443b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 804426a:	4b18      	ldr	r3, [pc, #96]	; (80442cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 804426c:	681b      	ldr	r3, [r3, #0]
 804426e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8044272:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8044276:	d1ef      	bne.n	8044258 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8044278:	687b      	ldr	r3, [r7, #4]
 804427a:	681b      	ldr	r3, [r3, #0]
 804427c:	f003 0320 	and.w	r3, r3, #32
 8044280:	2b00      	cmp	r3, #0
 8044282:	f000 808b 	beq.w	804439c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8044286:	2300      	movs	r3, #0
 8044288:	60fb      	str	r3, [r7, #12]
 804428a:	4b10      	ldr	r3, [pc, #64]	; (80442cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 804428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804428e:	4a0f      	ldr	r2, [pc, #60]	; (80442cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8044290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8044294:	6413      	str	r3, [r2, #64]	; 0x40
 8044296:	4b0d      	ldr	r3, [pc, #52]	; (80442cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8044298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804429a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804429e:	60fb      	str	r3, [r7, #12]
 80442a0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80442a2:	4b0c      	ldr	r3, [pc, #48]	; (80442d4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80442a4:	681b      	ldr	r3, [r3, #0]
 80442a6:	4a0b      	ldr	r2, [pc, #44]	; (80442d4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80442a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80442ac:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80442ae:	f7fc fe6b 	bl	8040f88 <HAL_GetTick>
 80442b2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80442b4:	e010      	b.n	80442d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80442b6:	f7fc fe67 	bl	8040f88 <HAL_GetTick>
 80442ba:	4602      	mov	r2, r0
 80442bc:	697b      	ldr	r3, [r7, #20]
 80442be:	1ad3      	subs	r3, r2, r3
 80442c0:	2b02      	cmp	r3, #2
 80442c2:	d909      	bls.n	80442d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80442c4:	2303      	movs	r3, #3
 80442c6:	e075      	b.n	80443b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80442c8:	42470068 	.word	0x42470068
 80442cc:	40023800 	.word	0x40023800
 80442d0:	42470070 	.word	0x42470070
 80442d4:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80442d8:	4b38      	ldr	r3, [pc, #224]	; (80443bc <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80442da:	681b      	ldr	r3, [r3, #0]
 80442dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80442e0:	2b00      	cmp	r3, #0
 80442e2:	d0e8      	beq.n	80442b6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80442e4:	4b36      	ldr	r3, [pc, #216]	; (80443c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80442e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80442e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80442ec:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80442ee:	693b      	ldr	r3, [r7, #16]
 80442f0:	2b00      	cmp	r3, #0
 80442f2:	d02f      	beq.n	8044354 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80442f4:	687b      	ldr	r3, [r7, #4]
 80442f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80442f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80442fc:	693a      	ldr	r2, [r7, #16]
 80442fe:	429a      	cmp	r2, r3
 8044300:	d028      	beq.n	8044354 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8044302:	4b2f      	ldr	r3, [pc, #188]	; (80443c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8044304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8044306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 804430a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 804430c:	4b2d      	ldr	r3, [pc, #180]	; (80443c4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 804430e:	2201      	movs	r2, #1
 8044310:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8044312:	4b2c      	ldr	r3, [pc, #176]	; (80443c4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8044314:	2200      	movs	r2, #0
 8044316:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8044318:	4a29      	ldr	r2, [pc, #164]	; (80443c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 804431a:	693b      	ldr	r3, [r7, #16]
 804431c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 804431e:	4b28      	ldr	r3, [pc, #160]	; (80443c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8044320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8044322:	f003 0301 	and.w	r3, r3, #1
 8044326:	2b01      	cmp	r3, #1
 8044328:	d114      	bne.n	8044354 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 804432a:	f7fc fe2d 	bl	8040f88 <HAL_GetTick>
 804432e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8044330:	e00a      	b.n	8044348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8044332:	f7fc fe29 	bl	8040f88 <HAL_GetTick>
 8044336:	4602      	mov	r2, r0
 8044338:	697b      	ldr	r3, [r7, #20]
 804433a:	1ad3      	subs	r3, r2, r3
 804433c:	f241 3288 	movw	r2, #5000	; 0x1388
 8044340:	4293      	cmp	r3, r2
 8044342:	d901      	bls.n	8044348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8044344:	2303      	movs	r3, #3
 8044346:	e035      	b.n	80443b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8044348:	4b1d      	ldr	r3, [pc, #116]	; (80443c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 804434a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804434c:	f003 0302 	and.w	r3, r3, #2
 8044350:	2b00      	cmp	r3, #0
 8044352:	d0ee      	beq.n	8044332 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8044354:	687b      	ldr	r3, [r7, #4]
 8044356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8044358:	f403 7340 	and.w	r3, r3, #768	; 0x300
 804435c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8044360:	d10d      	bne.n	804437e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8044362:	4b17      	ldr	r3, [pc, #92]	; (80443c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8044364:	689b      	ldr	r3, [r3, #8]
 8044366:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 804436a:	687b      	ldr	r3, [r7, #4]
 804436c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804436e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8044372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8044376:	4912      	ldr	r1, [pc, #72]	; (80443c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8044378:	4313      	orrs	r3, r2
 804437a:	608b      	str	r3, [r1, #8]
 804437c:	e005      	b.n	804438a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 804437e:	4b10      	ldr	r3, [pc, #64]	; (80443c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8044380:	689b      	ldr	r3, [r3, #8]
 8044382:	4a0f      	ldr	r2, [pc, #60]	; (80443c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8044384:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8044388:	6093      	str	r3, [r2, #8]
 804438a:	4b0d      	ldr	r3, [pc, #52]	; (80443c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 804438c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 804438e:	687b      	ldr	r3, [r7, #4]
 8044390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8044392:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8044396:	490a      	ldr	r1, [pc, #40]	; (80443c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8044398:	4313      	orrs	r3, r2
 804439a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 804439c:	687b      	ldr	r3, [r7, #4]
 804439e:	681b      	ldr	r3, [r3, #0]
 80443a0:	f003 0310 	and.w	r3, r3, #16
 80443a4:	2b00      	cmp	r3, #0
 80443a6:	d004      	beq.n	80443b2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80443a8:	687b      	ldr	r3, [r7, #4]
 80443aa:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80443ae:	4b06      	ldr	r3, [pc, #24]	; (80443c8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80443b0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80443b2:	2300      	movs	r3, #0
}
 80443b4:	4618      	mov	r0, r3
 80443b6:	3718      	adds	r7, #24
 80443b8:	46bd      	mov	sp, r7
 80443ba:	bd80      	pop	{r7, pc}
 80443bc:	40007000 	.word	0x40007000
 80443c0:	40023800 	.word	0x40023800
 80443c4:	42470e40 	.word	0x42470e40
 80443c8:	424711e0 	.word	0x424711e0

080443cc <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80443cc:	b580      	push	{r7, lr}
 80443ce:	b082      	sub	sp, #8
 80443d0:	af00      	add	r7, sp, #0
 80443d2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80443d4:	687b      	ldr	r3, [r7, #4]
 80443d6:	2b00      	cmp	r3, #0
 80443d8:	d101      	bne.n	80443de <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80443da:	2301      	movs	r3, #1
 80443dc:	e01c      	b.n	8044418 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80443de:	687b      	ldr	r3, [r7, #4]
 80443e0:	795b      	ldrb	r3, [r3, #5]
 80443e2:	b2db      	uxtb	r3, r3
 80443e4:	2b00      	cmp	r3, #0
 80443e6:	d105      	bne.n	80443f4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80443e8:	687b      	ldr	r3, [r7, #4]
 80443ea:	2200      	movs	r2, #0
 80443ec:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80443ee:	6878      	ldr	r0, [r7, #4]
 80443f0:	f002 fa82 	bl	80468f8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80443f4:	687b      	ldr	r3, [r7, #4]
 80443f6:	2202      	movs	r2, #2
 80443f8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80443fa:	687b      	ldr	r3, [r7, #4]
 80443fc:	681b      	ldr	r3, [r3, #0]
 80443fe:	681a      	ldr	r2, [r3, #0]
 8044400:	687b      	ldr	r3, [r7, #4]
 8044402:	681b      	ldr	r3, [r3, #0]
 8044404:	f042 0204 	orr.w	r2, r2, #4
 8044408:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 804440a:	687b      	ldr	r3, [r7, #4]
 804440c:	2201      	movs	r2, #1
 804440e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8044410:	687b      	ldr	r3, [r7, #4]
 8044412:	2200      	movs	r2, #0
 8044414:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8044416:	2300      	movs	r3, #0
}
 8044418:	4618      	mov	r0, r3
 804441a:	3708      	adds	r7, #8
 804441c:	46bd      	mov	sp, r7
 804441e:	bd80      	pop	{r7, pc}

08044420 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8044420:	b580      	push	{r7, lr}
 8044422:	b084      	sub	sp, #16
 8044424:	af00      	add	r7, sp, #0
 8044426:	6078      	str	r0, [r7, #4]
 8044428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 804442a:	2300      	movs	r3, #0
 804442c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 804442e:	687b      	ldr	r3, [r7, #4]
 8044430:	791b      	ldrb	r3, [r3, #4]
 8044432:	2b01      	cmp	r3, #1
 8044434:	d101      	bne.n	804443a <HAL_RNG_GenerateRandomNumber+0x1a>
 8044436:	2302      	movs	r3, #2
 8044438:	e03d      	b.n	80444b6 <HAL_RNG_GenerateRandomNumber+0x96>
 804443a:	687b      	ldr	r3, [r7, #4]
 804443c:	2201      	movs	r2, #1
 804443e:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8044440:	687b      	ldr	r3, [r7, #4]
 8044442:	795b      	ldrb	r3, [r3, #5]
 8044444:	b2db      	uxtb	r3, r3
 8044446:	2b01      	cmp	r3, #1
 8044448:	d12c      	bne.n	80444a4 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 804444a:	687b      	ldr	r3, [r7, #4]
 804444c:	2202      	movs	r2, #2
 804444e:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8044450:	f7fc fd9a 	bl	8040f88 <HAL_GetTick>
 8044454:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8044456:	e011      	b.n	804447c <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8044458:	f7fc fd96 	bl	8040f88 <HAL_GetTick>
 804445c:	4602      	mov	r2, r0
 804445e:	68bb      	ldr	r3, [r7, #8]
 8044460:	1ad3      	subs	r3, r2, r3
 8044462:	2b02      	cmp	r3, #2
 8044464:	d90a      	bls.n	804447c <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8044466:	687b      	ldr	r3, [r7, #4]
 8044468:	2201      	movs	r2, #1
 804446a:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 804446c:	687b      	ldr	r3, [r7, #4]
 804446e:	2202      	movs	r2, #2
 8044470:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8044472:	687b      	ldr	r3, [r7, #4]
 8044474:	2200      	movs	r2, #0
 8044476:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 8044478:	2301      	movs	r3, #1
 804447a:	e01c      	b.n	80444b6 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 804447c:	687b      	ldr	r3, [r7, #4]
 804447e:	681b      	ldr	r3, [r3, #0]
 8044480:	685b      	ldr	r3, [r3, #4]
 8044482:	f003 0301 	and.w	r3, r3, #1
 8044486:	2b01      	cmp	r3, #1
 8044488:	d1e6      	bne.n	8044458 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 804448a:	687b      	ldr	r3, [r7, #4]
 804448c:	681b      	ldr	r3, [r3, #0]
 804448e:	689a      	ldr	r2, [r3, #8]
 8044490:	687b      	ldr	r3, [r7, #4]
 8044492:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8044494:	687b      	ldr	r3, [r7, #4]
 8044496:	68da      	ldr	r2, [r3, #12]
 8044498:	683b      	ldr	r3, [r7, #0]
 804449a:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 804449c:	687b      	ldr	r3, [r7, #4]
 804449e:	2201      	movs	r2, #1
 80444a0:	715a      	strb	r2, [r3, #5]
 80444a2:	e004      	b.n	80444ae <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80444a4:	687b      	ldr	r3, [r7, #4]
 80444a6:	2204      	movs	r2, #4
 80444a8:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 80444aa:	2301      	movs	r3, #1
 80444ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80444ae:	687b      	ldr	r3, [r7, #4]
 80444b0:	2200      	movs	r2, #0
 80444b2:	711a      	strb	r2, [r3, #4]

  return status;
 80444b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80444b6:	4618      	mov	r0, r3
 80444b8:	3710      	adds	r7, #16
 80444ba:	46bd      	mov	sp, r7
 80444bc:	bd80      	pop	{r7, pc}

080444be <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80444be:	b580      	push	{r7, lr}
 80444c0:	b082      	sub	sp, #8
 80444c2:	af00      	add	r7, sp, #0
 80444c4:	6078      	str	r0, [r7, #4]
 80444c6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80444c8:	687b      	ldr	r3, [r7, #4]
 80444ca:	2b00      	cmp	r3, #0
 80444cc:	d101      	bne.n	80444d2 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80444ce:	2301      	movs	r3, #1
 80444d0:	e025      	b.n	804451e <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80444d2:	687b      	ldr	r3, [r7, #4]
 80444d4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80444d8:	b2db      	uxtb	r3, r3
 80444da:	2b00      	cmp	r3, #0
 80444dc:	d106      	bne.n	80444ec <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80444de:	687b      	ldr	r3, [r7, #4]
 80444e0:	2200      	movs	r2, #0
 80444e2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80444e6:	6878      	ldr	r0, [r7, #4]
 80444e8:	f000 f81d 	bl	8044526 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80444ec:	687b      	ldr	r3, [r7, #4]
 80444ee:	2202      	movs	r2, #2
 80444f0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80444f4:	687b      	ldr	r3, [r7, #4]
 80444f6:	681a      	ldr	r2, [r3, #0]
 80444f8:	687b      	ldr	r3, [r7, #4]
 80444fa:	3304      	adds	r3, #4
 80444fc:	4619      	mov	r1, r3
 80444fe:	4610      	mov	r0, r2
 8044500:	f000 fae0 	bl	8044ac4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8044504:	687b      	ldr	r3, [r7, #4]
 8044506:	6818      	ldr	r0, [r3, #0]
 8044508:	687b      	ldr	r3, [r7, #4]
 804450a:	685b      	ldr	r3, [r3, #4]
 804450c:	461a      	mov	r2, r3
 804450e:	6839      	ldr	r1, [r7, #0]
 8044510:	f000 fb4b 	bl	8044baa <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8044514:	687b      	ldr	r3, [r7, #4]
 8044516:	2201      	movs	r2, #1
 8044518:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 804451c:	2300      	movs	r3, #0
}
 804451e:	4618      	mov	r0, r3
 8044520:	3708      	adds	r7, #8
 8044522:	46bd      	mov	sp, r7
 8044524:	bd80      	pop	{r7, pc}

08044526 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8044526:	b480      	push	{r7}
 8044528:	b083      	sub	sp, #12
 804452a:	af00      	add	r7, sp, #0
 804452c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 804452e:	bf00      	nop
 8044530:	370c      	adds	r7, #12
 8044532:	46bd      	mov	sp, r7
 8044534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044538:	4770      	bx	lr

0804453a <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 804453a:	b580      	push	{r7, lr}
 804453c:	b084      	sub	sp, #16
 804453e:	af00      	add	r7, sp, #0
 8044540:	60f8      	str	r0, [r7, #12]
 8044542:	60b9      	str	r1, [r7, #8]
 8044544:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8044546:	68fb      	ldr	r3, [r7, #12]
 8044548:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 804454c:	b2db      	uxtb	r3, r3
 804454e:	2b02      	cmp	r3, #2
 8044550:	d101      	bne.n	8044556 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8044552:	2302      	movs	r3, #2
 8044554:	e018      	b.n	8044588 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8044556:	68fb      	ldr	r3, [r7, #12]
 8044558:	2202      	movs	r2, #2
 804455a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 804455e:	68fb      	ldr	r3, [r7, #12]
 8044560:	681b      	ldr	r3, [r3, #0]
 8044562:	687a      	ldr	r2, [r7, #4]
 8044564:	68b9      	ldr	r1, [r7, #8]
 8044566:	4618      	mov	r0, r3
 8044568:	f000 fb9e 	bl	8044ca8 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 804456c:	68bb      	ldr	r3, [r7, #8]
 804456e:	681b      	ldr	r3, [r3, #0]
 8044570:	2b02      	cmp	r3, #2
 8044572:	d104      	bne.n	804457e <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8044574:	68fb      	ldr	r3, [r7, #12]
 8044576:	2205      	movs	r2, #5
 8044578:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 804457c:	e003      	b.n	8044586 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 804457e:	68fb      	ldr	r3, [r7, #12]
 8044580:	2201      	movs	r2, #1
 8044582:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8044586:	2300      	movs	r3, #0
}
 8044588:	4618      	mov	r0, r3
 804458a:	3710      	adds	r7, #16
 804458c:	46bd      	mov	sp, r7
 804458e:	bd80      	pop	{r7, pc}

08044590 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8044590:	b580      	push	{r7, lr}
 8044592:	b082      	sub	sp, #8
 8044594:	af00      	add	r7, sp, #0
 8044596:	6078      	str	r0, [r7, #4]
 8044598:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 804459a:	687b      	ldr	r3, [r7, #4]
 804459c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80445a0:	b2db      	uxtb	r3, r3
 80445a2:	2b02      	cmp	r3, #2
 80445a4:	d101      	bne.n	80445aa <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80445a6:	2302      	movs	r3, #2
 80445a8:	e00e      	b.n	80445c8 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80445aa:	687b      	ldr	r3, [r7, #4]
 80445ac:	2202      	movs	r2, #2
 80445ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80445b2:	687b      	ldr	r3, [r7, #4]
 80445b4:	681b      	ldr	r3, [r3, #0]
 80445b6:	6839      	ldr	r1, [r7, #0]
 80445b8:	4618      	mov	r0, r3
 80445ba:	f000 fbb1 	bl	8044d20 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80445be:	687b      	ldr	r3, [r7, #4]
 80445c0:	2201      	movs	r2, #1
 80445c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80445c6:	2300      	movs	r3, #0
}
 80445c8:	4618      	mov	r0, r3
 80445ca:	3708      	adds	r7, #8
 80445cc:	46bd      	mov	sp, r7
 80445ce:	bd80      	pop	{r7, pc}

080445d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80445d0:	b580      	push	{r7, lr}
 80445d2:	b082      	sub	sp, #8
 80445d4:	af00      	add	r7, sp, #0
 80445d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80445d8:	687b      	ldr	r3, [r7, #4]
 80445da:	2b00      	cmp	r3, #0
 80445dc:	d101      	bne.n	80445e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80445de:	2301      	movs	r3, #1
 80445e0:	e056      	b.n	8044690 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80445e2:	687b      	ldr	r3, [r7, #4]
 80445e4:	2200      	movs	r2, #0
 80445e6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80445e8:	687b      	ldr	r3, [r7, #4]
 80445ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80445ee:	b2db      	uxtb	r3, r3
 80445f0:	2b00      	cmp	r3, #0
 80445f2:	d106      	bne.n	8044602 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80445f4:	687b      	ldr	r3, [r7, #4]
 80445f6:	2200      	movs	r2, #0
 80445f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80445fc:	6878      	ldr	r0, [r7, #4]
 80445fe:	f002 f8c9 	bl	8046794 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8044602:	687b      	ldr	r3, [r7, #4]
 8044604:	2202      	movs	r2, #2
 8044606:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 804460a:	687b      	ldr	r3, [r7, #4]
 804460c:	681b      	ldr	r3, [r3, #0]
 804460e:	681a      	ldr	r2, [r3, #0]
 8044610:	687b      	ldr	r3, [r7, #4]
 8044612:	681b      	ldr	r3, [r3, #0]
 8044614:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8044618:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 804461a:	687b      	ldr	r3, [r7, #4]
 804461c:	685a      	ldr	r2, [r3, #4]
 804461e:	687b      	ldr	r3, [r7, #4]
 8044620:	689b      	ldr	r3, [r3, #8]
 8044622:	431a      	orrs	r2, r3
 8044624:	687b      	ldr	r3, [r7, #4]
 8044626:	68db      	ldr	r3, [r3, #12]
 8044628:	431a      	orrs	r2, r3
 804462a:	687b      	ldr	r3, [r7, #4]
 804462c:	691b      	ldr	r3, [r3, #16]
 804462e:	431a      	orrs	r2, r3
 8044630:	687b      	ldr	r3, [r7, #4]
 8044632:	695b      	ldr	r3, [r3, #20]
 8044634:	431a      	orrs	r2, r3
 8044636:	687b      	ldr	r3, [r7, #4]
 8044638:	699b      	ldr	r3, [r3, #24]
 804463a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 804463e:	431a      	orrs	r2, r3
 8044640:	687b      	ldr	r3, [r7, #4]
 8044642:	69db      	ldr	r3, [r3, #28]
 8044644:	431a      	orrs	r2, r3
 8044646:	687b      	ldr	r3, [r7, #4]
 8044648:	6a1b      	ldr	r3, [r3, #32]
 804464a:	ea42 0103 	orr.w	r1, r2, r3
 804464e:	687b      	ldr	r3, [r7, #4]
 8044650:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8044652:	687b      	ldr	r3, [r7, #4]
 8044654:	681b      	ldr	r3, [r3, #0]
 8044656:	430a      	orrs	r2, r1
 8044658:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 804465a:	687b      	ldr	r3, [r7, #4]
 804465c:	699b      	ldr	r3, [r3, #24]
 804465e:	0c1b      	lsrs	r3, r3, #16
 8044660:	f003 0104 	and.w	r1, r3, #4
 8044664:	687b      	ldr	r3, [r7, #4]
 8044666:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8044668:	687b      	ldr	r3, [r7, #4]
 804466a:	681b      	ldr	r3, [r3, #0]
 804466c:	430a      	orrs	r2, r1
 804466e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8044670:	687b      	ldr	r3, [r7, #4]
 8044672:	681b      	ldr	r3, [r3, #0]
 8044674:	69da      	ldr	r2, [r3, #28]
 8044676:	687b      	ldr	r3, [r7, #4]
 8044678:	681b      	ldr	r3, [r3, #0]
 804467a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 804467e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8044680:	687b      	ldr	r3, [r7, #4]
 8044682:	2200      	movs	r2, #0
 8044684:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8044686:	687b      	ldr	r3, [r7, #4]
 8044688:	2201      	movs	r2, #1
 804468a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 804468e:	2300      	movs	r3, #0
}
 8044690:	4618      	mov	r0, r3
 8044692:	3708      	adds	r7, #8
 8044694:	46bd      	mov	sp, r7
 8044696:	bd80      	pop	{r7, pc}

08044698 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8044698:	b580      	push	{r7, lr}
 804469a:	b082      	sub	sp, #8
 804469c:	af00      	add	r7, sp, #0
 804469e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80446a0:	687b      	ldr	r3, [r7, #4]
 80446a2:	2b00      	cmp	r3, #0
 80446a4:	d101      	bne.n	80446aa <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80446a6:	2301      	movs	r3, #1
 80446a8:	e01a      	b.n	80446e0 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80446aa:	687b      	ldr	r3, [r7, #4]
 80446ac:	2202      	movs	r2, #2
 80446ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80446b2:	687b      	ldr	r3, [r7, #4]
 80446b4:	681b      	ldr	r3, [r3, #0]
 80446b6:	681a      	ldr	r2, [r3, #0]
 80446b8:	687b      	ldr	r3, [r7, #4]
 80446ba:	681b      	ldr	r3, [r3, #0]
 80446bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80446c0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80446c2:	6878      	ldr	r0, [r7, #4]
 80446c4:	f002 f93a 	bl	804693c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80446c8:	687b      	ldr	r3, [r7, #4]
 80446ca:	2200      	movs	r2, #0
 80446cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80446ce:	687b      	ldr	r3, [r7, #4]
 80446d0:	2200      	movs	r2, #0
 80446d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80446d6:	687b      	ldr	r3, [r7, #4]
 80446d8:	2200      	movs	r2, #0
 80446da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80446de:	2300      	movs	r3, #0
}
 80446e0:	4618      	mov	r0, r3
 80446e2:	3708      	adds	r7, #8
 80446e4:	46bd      	mov	sp, r7
 80446e6:	bd80      	pop	{r7, pc}

080446e8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80446e8:	b580      	push	{r7, lr}
 80446ea:	b088      	sub	sp, #32
 80446ec:	af00      	add	r7, sp, #0
 80446ee:	60f8      	str	r0, [r7, #12]
 80446f0:	60b9      	str	r1, [r7, #8]
 80446f2:	603b      	str	r3, [r7, #0]
 80446f4:	4613      	mov	r3, r2
 80446f6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80446f8:	2300      	movs	r3, #0
 80446fa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80446fc:	68fb      	ldr	r3, [r7, #12]
 80446fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8044702:	2b01      	cmp	r3, #1
 8044704:	d101      	bne.n	804470a <HAL_SPI_Transmit+0x22>
 8044706:	2302      	movs	r3, #2
 8044708:	e11e      	b.n	8044948 <HAL_SPI_Transmit+0x260>
 804470a:	68fb      	ldr	r3, [r7, #12]
 804470c:	2201      	movs	r2, #1
 804470e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8044712:	f7fc fc39 	bl	8040f88 <HAL_GetTick>
 8044716:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8044718:	88fb      	ldrh	r3, [r7, #6]
 804471a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 804471c:	68fb      	ldr	r3, [r7, #12]
 804471e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8044722:	b2db      	uxtb	r3, r3
 8044724:	2b01      	cmp	r3, #1
 8044726:	d002      	beq.n	804472e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8044728:	2302      	movs	r3, #2
 804472a:	77fb      	strb	r3, [r7, #31]
    goto error;
 804472c:	e103      	b.n	8044936 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 804472e:	68bb      	ldr	r3, [r7, #8]
 8044730:	2b00      	cmp	r3, #0
 8044732:	d002      	beq.n	804473a <HAL_SPI_Transmit+0x52>
 8044734:	88fb      	ldrh	r3, [r7, #6]
 8044736:	2b00      	cmp	r3, #0
 8044738:	d102      	bne.n	8044740 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 804473a:	2301      	movs	r3, #1
 804473c:	77fb      	strb	r3, [r7, #31]
    goto error;
 804473e:	e0fa      	b.n	8044936 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8044740:	68fb      	ldr	r3, [r7, #12]
 8044742:	2203      	movs	r2, #3
 8044744:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8044748:	68fb      	ldr	r3, [r7, #12]
 804474a:	2200      	movs	r2, #0
 804474c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 804474e:	68fb      	ldr	r3, [r7, #12]
 8044750:	68ba      	ldr	r2, [r7, #8]
 8044752:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8044754:	68fb      	ldr	r3, [r7, #12]
 8044756:	88fa      	ldrh	r2, [r7, #6]
 8044758:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 804475a:	68fb      	ldr	r3, [r7, #12]
 804475c:	88fa      	ldrh	r2, [r7, #6]
 804475e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8044760:	68fb      	ldr	r3, [r7, #12]
 8044762:	2200      	movs	r2, #0
 8044764:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8044766:	68fb      	ldr	r3, [r7, #12]
 8044768:	2200      	movs	r2, #0
 804476a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 804476c:	68fb      	ldr	r3, [r7, #12]
 804476e:	2200      	movs	r2, #0
 8044770:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8044772:	68fb      	ldr	r3, [r7, #12]
 8044774:	2200      	movs	r2, #0
 8044776:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8044778:	68fb      	ldr	r3, [r7, #12]
 804477a:	2200      	movs	r2, #0
 804477c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 804477e:	68fb      	ldr	r3, [r7, #12]
 8044780:	689b      	ldr	r3, [r3, #8]
 8044782:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8044786:	d107      	bne.n	8044798 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8044788:	68fb      	ldr	r3, [r7, #12]
 804478a:	681b      	ldr	r3, [r3, #0]
 804478c:	681a      	ldr	r2, [r3, #0]
 804478e:	68fb      	ldr	r3, [r7, #12]
 8044790:	681b      	ldr	r3, [r3, #0]
 8044792:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8044796:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8044798:	68fb      	ldr	r3, [r7, #12]
 804479a:	681b      	ldr	r3, [r3, #0]
 804479c:	681b      	ldr	r3, [r3, #0]
 804479e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80447a2:	2b40      	cmp	r3, #64	; 0x40
 80447a4:	d007      	beq.n	80447b6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80447a6:	68fb      	ldr	r3, [r7, #12]
 80447a8:	681b      	ldr	r3, [r3, #0]
 80447aa:	681a      	ldr	r2, [r3, #0]
 80447ac:	68fb      	ldr	r3, [r7, #12]
 80447ae:	681b      	ldr	r3, [r3, #0]
 80447b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80447b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80447b6:	68fb      	ldr	r3, [r7, #12]
 80447b8:	68db      	ldr	r3, [r3, #12]
 80447ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80447be:	d14b      	bne.n	8044858 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80447c0:	68fb      	ldr	r3, [r7, #12]
 80447c2:	685b      	ldr	r3, [r3, #4]
 80447c4:	2b00      	cmp	r3, #0
 80447c6:	d002      	beq.n	80447ce <HAL_SPI_Transmit+0xe6>
 80447c8:	8afb      	ldrh	r3, [r7, #22]
 80447ca:	2b01      	cmp	r3, #1
 80447cc:	d13e      	bne.n	804484c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80447ce:	68fb      	ldr	r3, [r7, #12]
 80447d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80447d2:	881a      	ldrh	r2, [r3, #0]
 80447d4:	68fb      	ldr	r3, [r7, #12]
 80447d6:	681b      	ldr	r3, [r3, #0]
 80447d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80447da:	68fb      	ldr	r3, [r7, #12]
 80447dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80447de:	1c9a      	adds	r2, r3, #2
 80447e0:	68fb      	ldr	r3, [r7, #12]
 80447e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80447e4:	68fb      	ldr	r3, [r7, #12]
 80447e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80447e8:	b29b      	uxth	r3, r3
 80447ea:	3b01      	subs	r3, #1
 80447ec:	b29a      	uxth	r2, r3
 80447ee:	68fb      	ldr	r3, [r7, #12]
 80447f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80447f2:	e02b      	b.n	804484c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80447f4:	68fb      	ldr	r3, [r7, #12]
 80447f6:	681b      	ldr	r3, [r3, #0]
 80447f8:	689b      	ldr	r3, [r3, #8]
 80447fa:	f003 0302 	and.w	r3, r3, #2
 80447fe:	2b02      	cmp	r3, #2
 8044800:	d112      	bne.n	8044828 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8044802:	68fb      	ldr	r3, [r7, #12]
 8044804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8044806:	881a      	ldrh	r2, [r3, #0]
 8044808:	68fb      	ldr	r3, [r7, #12]
 804480a:	681b      	ldr	r3, [r3, #0]
 804480c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 804480e:	68fb      	ldr	r3, [r7, #12]
 8044810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8044812:	1c9a      	adds	r2, r3, #2
 8044814:	68fb      	ldr	r3, [r7, #12]
 8044816:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8044818:	68fb      	ldr	r3, [r7, #12]
 804481a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 804481c:	b29b      	uxth	r3, r3
 804481e:	3b01      	subs	r3, #1
 8044820:	b29a      	uxth	r2, r3
 8044822:	68fb      	ldr	r3, [r7, #12]
 8044824:	86da      	strh	r2, [r3, #54]	; 0x36
 8044826:	e011      	b.n	804484c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8044828:	f7fc fbae 	bl	8040f88 <HAL_GetTick>
 804482c:	4602      	mov	r2, r0
 804482e:	69bb      	ldr	r3, [r7, #24]
 8044830:	1ad3      	subs	r3, r2, r3
 8044832:	683a      	ldr	r2, [r7, #0]
 8044834:	429a      	cmp	r2, r3
 8044836:	d803      	bhi.n	8044840 <HAL_SPI_Transmit+0x158>
 8044838:	683b      	ldr	r3, [r7, #0]
 804483a:	f1b3 3fff 	cmp.w	r3, #4294967295
 804483e:	d102      	bne.n	8044846 <HAL_SPI_Transmit+0x15e>
 8044840:	683b      	ldr	r3, [r7, #0]
 8044842:	2b00      	cmp	r3, #0
 8044844:	d102      	bne.n	804484c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8044846:	2303      	movs	r3, #3
 8044848:	77fb      	strb	r3, [r7, #31]
          goto error;
 804484a:	e074      	b.n	8044936 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 804484c:	68fb      	ldr	r3, [r7, #12]
 804484e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8044850:	b29b      	uxth	r3, r3
 8044852:	2b00      	cmp	r3, #0
 8044854:	d1ce      	bne.n	80447f4 <HAL_SPI_Transmit+0x10c>
 8044856:	e04c      	b.n	80448f2 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8044858:	68fb      	ldr	r3, [r7, #12]
 804485a:	685b      	ldr	r3, [r3, #4]
 804485c:	2b00      	cmp	r3, #0
 804485e:	d002      	beq.n	8044866 <HAL_SPI_Transmit+0x17e>
 8044860:	8afb      	ldrh	r3, [r7, #22]
 8044862:	2b01      	cmp	r3, #1
 8044864:	d140      	bne.n	80448e8 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8044866:	68fb      	ldr	r3, [r7, #12]
 8044868:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804486a:	68fb      	ldr	r3, [r7, #12]
 804486c:	681b      	ldr	r3, [r3, #0]
 804486e:	330c      	adds	r3, #12
 8044870:	7812      	ldrb	r2, [r2, #0]
 8044872:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8044874:	68fb      	ldr	r3, [r7, #12]
 8044876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8044878:	1c5a      	adds	r2, r3, #1
 804487a:	68fb      	ldr	r3, [r7, #12]
 804487c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 804487e:	68fb      	ldr	r3, [r7, #12]
 8044880:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8044882:	b29b      	uxth	r3, r3
 8044884:	3b01      	subs	r3, #1
 8044886:	b29a      	uxth	r2, r3
 8044888:	68fb      	ldr	r3, [r7, #12]
 804488a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 804488c:	e02c      	b.n	80448e8 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 804488e:	68fb      	ldr	r3, [r7, #12]
 8044890:	681b      	ldr	r3, [r3, #0]
 8044892:	689b      	ldr	r3, [r3, #8]
 8044894:	f003 0302 	and.w	r3, r3, #2
 8044898:	2b02      	cmp	r3, #2
 804489a:	d113      	bne.n	80448c4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 804489c:	68fb      	ldr	r3, [r7, #12]
 804489e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80448a0:	68fb      	ldr	r3, [r7, #12]
 80448a2:	681b      	ldr	r3, [r3, #0]
 80448a4:	330c      	adds	r3, #12
 80448a6:	7812      	ldrb	r2, [r2, #0]
 80448a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80448aa:	68fb      	ldr	r3, [r7, #12]
 80448ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80448ae:	1c5a      	adds	r2, r3, #1
 80448b0:	68fb      	ldr	r3, [r7, #12]
 80448b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80448b4:	68fb      	ldr	r3, [r7, #12]
 80448b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80448b8:	b29b      	uxth	r3, r3
 80448ba:	3b01      	subs	r3, #1
 80448bc:	b29a      	uxth	r2, r3
 80448be:	68fb      	ldr	r3, [r7, #12]
 80448c0:	86da      	strh	r2, [r3, #54]	; 0x36
 80448c2:	e011      	b.n	80448e8 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80448c4:	f7fc fb60 	bl	8040f88 <HAL_GetTick>
 80448c8:	4602      	mov	r2, r0
 80448ca:	69bb      	ldr	r3, [r7, #24]
 80448cc:	1ad3      	subs	r3, r2, r3
 80448ce:	683a      	ldr	r2, [r7, #0]
 80448d0:	429a      	cmp	r2, r3
 80448d2:	d803      	bhi.n	80448dc <HAL_SPI_Transmit+0x1f4>
 80448d4:	683b      	ldr	r3, [r7, #0]
 80448d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80448da:	d102      	bne.n	80448e2 <HAL_SPI_Transmit+0x1fa>
 80448dc:	683b      	ldr	r3, [r7, #0]
 80448de:	2b00      	cmp	r3, #0
 80448e0:	d102      	bne.n	80448e8 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80448e2:	2303      	movs	r3, #3
 80448e4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80448e6:	e026      	b.n	8044936 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80448e8:	68fb      	ldr	r3, [r7, #12]
 80448ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80448ec:	b29b      	uxth	r3, r3
 80448ee:	2b00      	cmp	r3, #0
 80448f0:	d1cd      	bne.n	804488e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80448f2:	69ba      	ldr	r2, [r7, #24]
 80448f4:	6839      	ldr	r1, [r7, #0]
 80448f6:	68f8      	ldr	r0, [r7, #12]
 80448f8:	f000 f8a2 	bl	8044a40 <SPI_EndRxTxTransaction>
 80448fc:	4603      	mov	r3, r0
 80448fe:	2b00      	cmp	r3, #0
 8044900:	d002      	beq.n	8044908 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8044902:	68fb      	ldr	r3, [r7, #12]
 8044904:	2220      	movs	r2, #32
 8044906:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8044908:	68fb      	ldr	r3, [r7, #12]
 804490a:	689b      	ldr	r3, [r3, #8]
 804490c:	2b00      	cmp	r3, #0
 804490e:	d10a      	bne.n	8044926 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8044910:	2300      	movs	r3, #0
 8044912:	613b      	str	r3, [r7, #16]
 8044914:	68fb      	ldr	r3, [r7, #12]
 8044916:	681b      	ldr	r3, [r3, #0]
 8044918:	68db      	ldr	r3, [r3, #12]
 804491a:	613b      	str	r3, [r7, #16]
 804491c:	68fb      	ldr	r3, [r7, #12]
 804491e:	681b      	ldr	r3, [r3, #0]
 8044920:	689b      	ldr	r3, [r3, #8]
 8044922:	613b      	str	r3, [r7, #16]
 8044924:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8044926:	68fb      	ldr	r3, [r7, #12]
 8044928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804492a:	2b00      	cmp	r3, #0
 804492c:	d002      	beq.n	8044934 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 804492e:	2301      	movs	r3, #1
 8044930:	77fb      	strb	r3, [r7, #31]
 8044932:	e000      	b.n	8044936 <HAL_SPI_Transmit+0x24e>
  }

error:
 8044934:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8044936:	68fb      	ldr	r3, [r7, #12]
 8044938:	2201      	movs	r2, #1
 804493a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 804493e:	68fb      	ldr	r3, [r7, #12]
 8044940:	2200      	movs	r2, #0
 8044942:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8044946:	7ffb      	ldrb	r3, [r7, #31]
}
 8044948:	4618      	mov	r0, r3
 804494a:	3720      	adds	r7, #32
 804494c:	46bd      	mov	sp, r7
 804494e:	bd80      	pop	{r7, pc}

08044950 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8044950:	b480      	push	{r7}
 8044952:	b083      	sub	sp, #12
 8044954:	af00      	add	r7, sp, #0
 8044956:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8044958:	687b      	ldr	r3, [r7, #4]
 804495a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 804495e:	b2db      	uxtb	r3, r3
}
 8044960:	4618      	mov	r0, r3
 8044962:	370c      	adds	r7, #12
 8044964:	46bd      	mov	sp, r7
 8044966:	f85d 7b04 	ldr.w	r7, [sp], #4
 804496a:	4770      	bx	lr

0804496c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 804496c:	b580      	push	{r7, lr}
 804496e:	b084      	sub	sp, #16
 8044970:	af00      	add	r7, sp, #0
 8044972:	60f8      	str	r0, [r7, #12]
 8044974:	60b9      	str	r1, [r7, #8]
 8044976:	603b      	str	r3, [r7, #0]
 8044978:	4613      	mov	r3, r2
 804497a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 804497c:	e04c      	b.n	8044a18 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 804497e:	683b      	ldr	r3, [r7, #0]
 8044980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8044984:	d048      	beq.n	8044a18 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8044986:	f7fc faff 	bl	8040f88 <HAL_GetTick>
 804498a:	4602      	mov	r2, r0
 804498c:	69bb      	ldr	r3, [r7, #24]
 804498e:	1ad3      	subs	r3, r2, r3
 8044990:	683a      	ldr	r2, [r7, #0]
 8044992:	429a      	cmp	r2, r3
 8044994:	d902      	bls.n	804499c <SPI_WaitFlagStateUntilTimeout+0x30>
 8044996:	683b      	ldr	r3, [r7, #0]
 8044998:	2b00      	cmp	r3, #0
 804499a:	d13d      	bne.n	8044a18 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 804499c:	68fb      	ldr	r3, [r7, #12]
 804499e:	681b      	ldr	r3, [r3, #0]
 80449a0:	685a      	ldr	r2, [r3, #4]
 80449a2:	68fb      	ldr	r3, [r7, #12]
 80449a4:	681b      	ldr	r3, [r3, #0]
 80449a6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80449aa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80449ac:	68fb      	ldr	r3, [r7, #12]
 80449ae:	685b      	ldr	r3, [r3, #4]
 80449b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80449b4:	d111      	bne.n	80449da <SPI_WaitFlagStateUntilTimeout+0x6e>
 80449b6:	68fb      	ldr	r3, [r7, #12]
 80449b8:	689b      	ldr	r3, [r3, #8]
 80449ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80449be:	d004      	beq.n	80449ca <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80449c0:	68fb      	ldr	r3, [r7, #12]
 80449c2:	689b      	ldr	r3, [r3, #8]
 80449c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80449c8:	d107      	bne.n	80449da <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80449ca:	68fb      	ldr	r3, [r7, #12]
 80449cc:	681b      	ldr	r3, [r3, #0]
 80449ce:	681a      	ldr	r2, [r3, #0]
 80449d0:	68fb      	ldr	r3, [r7, #12]
 80449d2:	681b      	ldr	r3, [r3, #0]
 80449d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80449d8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80449da:	68fb      	ldr	r3, [r7, #12]
 80449dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80449de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80449e2:	d10f      	bne.n	8044a04 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80449e4:	68fb      	ldr	r3, [r7, #12]
 80449e6:	681b      	ldr	r3, [r3, #0]
 80449e8:	681a      	ldr	r2, [r3, #0]
 80449ea:	68fb      	ldr	r3, [r7, #12]
 80449ec:	681b      	ldr	r3, [r3, #0]
 80449ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80449f2:	601a      	str	r2, [r3, #0]
 80449f4:	68fb      	ldr	r3, [r7, #12]
 80449f6:	681b      	ldr	r3, [r3, #0]
 80449f8:	681a      	ldr	r2, [r3, #0]
 80449fa:	68fb      	ldr	r3, [r7, #12]
 80449fc:	681b      	ldr	r3, [r3, #0]
 80449fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8044a02:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8044a04:	68fb      	ldr	r3, [r7, #12]
 8044a06:	2201      	movs	r2, #1
 8044a08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8044a0c:	68fb      	ldr	r3, [r7, #12]
 8044a0e:	2200      	movs	r2, #0
 8044a10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8044a14:	2303      	movs	r3, #3
 8044a16:	e00f      	b.n	8044a38 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8044a18:	68fb      	ldr	r3, [r7, #12]
 8044a1a:	681b      	ldr	r3, [r3, #0]
 8044a1c:	689a      	ldr	r2, [r3, #8]
 8044a1e:	68bb      	ldr	r3, [r7, #8]
 8044a20:	4013      	ands	r3, r2
 8044a22:	68ba      	ldr	r2, [r7, #8]
 8044a24:	429a      	cmp	r2, r3
 8044a26:	bf0c      	ite	eq
 8044a28:	2301      	moveq	r3, #1
 8044a2a:	2300      	movne	r3, #0
 8044a2c:	b2db      	uxtb	r3, r3
 8044a2e:	461a      	mov	r2, r3
 8044a30:	79fb      	ldrb	r3, [r7, #7]
 8044a32:	429a      	cmp	r2, r3
 8044a34:	d1a3      	bne.n	804497e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8044a36:	2300      	movs	r3, #0
}
 8044a38:	4618      	mov	r0, r3
 8044a3a:	3710      	adds	r7, #16
 8044a3c:	46bd      	mov	sp, r7
 8044a3e:	bd80      	pop	{r7, pc}

08044a40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8044a40:	b580      	push	{r7, lr}
 8044a42:	b088      	sub	sp, #32
 8044a44:	af02      	add	r7, sp, #8
 8044a46:	60f8      	str	r0, [r7, #12]
 8044a48:	60b9      	str	r1, [r7, #8]
 8044a4a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8044a4c:	4b1b      	ldr	r3, [pc, #108]	; (8044abc <SPI_EndRxTxTransaction+0x7c>)
 8044a4e:	681b      	ldr	r3, [r3, #0]
 8044a50:	4a1b      	ldr	r2, [pc, #108]	; (8044ac0 <SPI_EndRxTxTransaction+0x80>)
 8044a52:	fba2 2303 	umull	r2, r3, r2, r3
 8044a56:	0d5b      	lsrs	r3, r3, #21
 8044a58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8044a5c:	fb02 f303 	mul.w	r3, r2, r3
 8044a60:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8044a62:	68fb      	ldr	r3, [r7, #12]
 8044a64:	685b      	ldr	r3, [r3, #4]
 8044a66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8044a6a:	d112      	bne.n	8044a92 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8044a6c:	687b      	ldr	r3, [r7, #4]
 8044a6e:	9300      	str	r3, [sp, #0]
 8044a70:	68bb      	ldr	r3, [r7, #8]
 8044a72:	2200      	movs	r2, #0
 8044a74:	2180      	movs	r1, #128	; 0x80
 8044a76:	68f8      	ldr	r0, [r7, #12]
 8044a78:	f7ff ff78 	bl	804496c <SPI_WaitFlagStateUntilTimeout>
 8044a7c:	4603      	mov	r3, r0
 8044a7e:	2b00      	cmp	r3, #0
 8044a80:	d016      	beq.n	8044ab0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8044a82:	68fb      	ldr	r3, [r7, #12]
 8044a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8044a86:	f043 0220 	orr.w	r2, r3, #32
 8044a8a:	68fb      	ldr	r3, [r7, #12]
 8044a8c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8044a8e:	2303      	movs	r3, #3
 8044a90:	e00f      	b.n	8044ab2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8044a92:	697b      	ldr	r3, [r7, #20]
 8044a94:	2b00      	cmp	r3, #0
 8044a96:	d00a      	beq.n	8044aae <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8044a98:	697b      	ldr	r3, [r7, #20]
 8044a9a:	3b01      	subs	r3, #1
 8044a9c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8044a9e:	68fb      	ldr	r3, [r7, #12]
 8044aa0:	681b      	ldr	r3, [r3, #0]
 8044aa2:	689b      	ldr	r3, [r3, #8]
 8044aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8044aa8:	2b80      	cmp	r3, #128	; 0x80
 8044aaa:	d0f2      	beq.n	8044a92 <SPI_EndRxTxTransaction+0x52>
 8044aac:	e000      	b.n	8044ab0 <SPI_EndRxTxTransaction+0x70>
        break;
 8044aae:	bf00      	nop
  }

  return HAL_OK;
 8044ab0:	2300      	movs	r3, #0
}
 8044ab2:	4618      	mov	r0, r3
 8044ab4:	3718      	adds	r7, #24
 8044ab6:	46bd      	mov	sp, r7
 8044ab8:	bd80      	pop	{r7, pc}
 8044aba:	bf00      	nop
 8044abc:	20000014 	.word	0x20000014
 8044ac0:	165e9f81 	.word	0x165e9f81

08044ac4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8044ac4:	b480      	push	{r7}
 8044ac6:	b085      	sub	sp, #20
 8044ac8:	af00      	add	r7, sp, #0
 8044aca:	6078      	str	r0, [r7, #4]
 8044acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8044ace:	2300      	movs	r3, #0
 8044ad0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8044ad2:	2300      	movs	r3, #0
 8044ad4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8044ad6:	683b      	ldr	r3, [r7, #0]
 8044ad8:	681b      	ldr	r3, [r3, #0]
 8044ada:	2b01      	cmp	r3, #1
 8044adc:	d029      	beq.n	8044b32 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8044ade:	687b      	ldr	r3, [r7, #4]
 8044ae0:	681b      	ldr	r3, [r3, #0]
 8044ae2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8044ae4:	68fb      	ldr	r3, [r7, #12]
 8044ae6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8044aea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8044aee:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8044af0:	683b      	ldr	r3, [r7, #0]
 8044af2:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8044af4:	683b      	ldr	r3, [r7, #0]
 8044af6:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8044af8:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8044afa:	683b      	ldr	r3, [r7, #0]
 8044afc:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8044afe:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8044b00:	683b      	ldr	r3, [r7, #0]
 8044b02:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8044b04:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8044b06:	683b      	ldr	r3, [r7, #0]
 8044b08:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8044b0a:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8044b0c:	683b      	ldr	r3, [r7, #0]
 8044b0e:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8044b10:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8044b12:	683b      	ldr	r3, [r7, #0]
 8044b14:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8044b16:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8044b18:	683b      	ldr	r3, [r7, #0]
 8044b1a:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8044b1c:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8044b1e:	683b      	ldr	r3, [r7, #0]
 8044b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8044b22:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8044b24:	68fa      	ldr	r2, [r7, #12]
 8044b26:	4313      	orrs	r3, r2
 8044b28:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8044b2a:	687b      	ldr	r3, [r7, #4]
 8044b2c:	68fa      	ldr	r2, [r7, #12]
 8044b2e:	601a      	str	r2, [r3, #0]
 8044b30:	e034      	b.n	8044b9c <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8044b32:	687b      	ldr	r3, [r7, #4]
 8044b34:	681b      	ldr	r3, [r3, #0]
 8044b36:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8044b38:	68fb      	ldr	r3, [r7, #12]
 8044b3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8044b3e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8044b40:	683b      	ldr	r3, [r7, #0]
 8044b42:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8044b44:	683b      	ldr	r3, [r7, #0]
 8044b46:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8044b48:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8044b4a:	683b      	ldr	r3, [r7, #0]
 8044b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8044b4e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8044b50:	68fa      	ldr	r2, [r7, #12]
 8044b52:	4313      	orrs	r3, r2
 8044b54:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8044b56:	687b      	ldr	r3, [r7, #4]
 8044b58:	685b      	ldr	r3, [r3, #4]
 8044b5a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8044b5c:	68bb      	ldr	r3, [r7, #8]
 8044b5e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8044b62:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8044b66:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8044b68:	683b      	ldr	r3, [r7, #0]
 8044b6a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8044b6c:	683b      	ldr	r3, [r7, #0]
 8044b6e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8044b70:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8044b72:	683b      	ldr	r3, [r7, #0]
 8044b74:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8044b76:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8044b78:	683b      	ldr	r3, [r7, #0]
 8044b7a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8044b7c:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8044b7e:	683b      	ldr	r3, [r7, #0]
 8044b80:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8044b82:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8044b84:	683b      	ldr	r3, [r7, #0]
 8044b86:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8044b88:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8044b8a:	68ba      	ldr	r2, [r7, #8]
 8044b8c:	4313      	orrs	r3, r2
 8044b8e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8044b90:	687b      	ldr	r3, [r7, #4]
 8044b92:	68fa      	ldr	r2, [r7, #12]
 8044b94:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8044b96:	687b      	ldr	r3, [r7, #4]
 8044b98:	68ba      	ldr	r2, [r7, #8]
 8044b9a:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8044b9c:	2300      	movs	r3, #0
}
 8044b9e:	4618      	mov	r0, r3
 8044ba0:	3714      	adds	r7, #20
 8044ba2:	46bd      	mov	sp, r7
 8044ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044ba8:	4770      	bx	lr

08044baa <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8044baa:	b480      	push	{r7}
 8044bac:	b087      	sub	sp, #28
 8044bae:	af00      	add	r7, sp, #0
 8044bb0:	60f8      	str	r0, [r7, #12]
 8044bb2:	60b9      	str	r1, [r7, #8]
 8044bb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8044bb6:	2300      	movs	r3, #0
 8044bb8:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8044bba:	2300      	movs	r3, #0
 8044bbc:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8044bbe:	687b      	ldr	r3, [r7, #4]
 8044bc0:	2b01      	cmp	r3, #1
 8044bc2:	d02e      	beq.n	8044c22 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8044bc4:	68fb      	ldr	r3, [r7, #12]
 8044bc6:	689b      	ldr	r3, [r3, #8]
 8044bc8:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8044bca:	697b      	ldr	r3, [r7, #20]
 8044bcc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8044bd0:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8044bd2:	68bb      	ldr	r3, [r7, #8]
 8044bd4:	681b      	ldr	r3, [r3, #0]
 8044bd6:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8044bd8:	68bb      	ldr	r3, [r7, #8]
 8044bda:	685b      	ldr	r3, [r3, #4]
 8044bdc:	3b01      	subs	r3, #1
 8044bde:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8044be0:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8044be2:	68bb      	ldr	r3, [r7, #8]
 8044be4:	689b      	ldr	r3, [r3, #8]
 8044be6:	3b01      	subs	r3, #1
 8044be8:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8044bea:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8044bec:	68bb      	ldr	r3, [r7, #8]
 8044bee:	68db      	ldr	r3, [r3, #12]
 8044bf0:	3b01      	subs	r3, #1
 8044bf2:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8044bf4:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8044bf6:	68bb      	ldr	r3, [r7, #8]
 8044bf8:	691b      	ldr	r3, [r3, #16]
 8044bfa:	3b01      	subs	r3, #1
 8044bfc:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8044bfe:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8044c00:	68bb      	ldr	r3, [r7, #8]
 8044c02:	695b      	ldr	r3, [r3, #20]
 8044c04:	3b01      	subs	r3, #1
 8044c06:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8044c08:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8044c0a:	68bb      	ldr	r3, [r7, #8]
 8044c0c:	699b      	ldr	r3, [r3, #24]
 8044c0e:	3b01      	subs	r3, #1
 8044c10:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8044c12:	4313      	orrs	r3, r2
 8044c14:	697a      	ldr	r2, [r7, #20]
 8044c16:	4313      	orrs	r3, r2
 8044c18:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8044c1a:	68fb      	ldr	r3, [r7, #12]
 8044c1c:	697a      	ldr	r2, [r7, #20]
 8044c1e:	609a      	str	r2, [r3, #8]
 8044c20:	e03b      	b.n	8044c9a <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8044c22:	68fb      	ldr	r3, [r7, #12]
 8044c24:	689b      	ldr	r3, [r3, #8]
 8044c26:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8044c28:	697b      	ldr	r3, [r7, #20]
 8044c2a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8044c2e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8044c32:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8044c34:	68bb      	ldr	r3, [r7, #8]
 8044c36:	68db      	ldr	r3, [r3, #12]
 8044c38:	3b01      	subs	r3, #1
 8044c3a:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8044c3c:	68bb      	ldr	r3, [r7, #8]
 8044c3e:	695b      	ldr	r3, [r3, #20]
 8044c40:	3b01      	subs	r3, #1
 8044c42:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8044c44:	4313      	orrs	r3, r2
 8044c46:	697a      	ldr	r2, [r7, #20]
 8044c48:	4313      	orrs	r3, r2
 8044c4a:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8044c4c:	68fb      	ldr	r3, [r7, #12]
 8044c4e:	68db      	ldr	r3, [r3, #12]
 8044c50:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8044c52:	693b      	ldr	r3, [r7, #16]
 8044c54:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8044c58:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8044c5a:	68bb      	ldr	r3, [r7, #8]
 8044c5c:	681b      	ldr	r3, [r3, #0]
 8044c5e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8044c60:	68bb      	ldr	r3, [r7, #8]
 8044c62:	685b      	ldr	r3, [r3, #4]
 8044c64:	3b01      	subs	r3, #1
 8044c66:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8044c68:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8044c6a:	68bb      	ldr	r3, [r7, #8]
 8044c6c:	689b      	ldr	r3, [r3, #8]
 8044c6e:	3b01      	subs	r3, #1
 8044c70:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8044c72:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8044c74:	68bb      	ldr	r3, [r7, #8]
 8044c76:	691b      	ldr	r3, [r3, #16]
 8044c78:	3b01      	subs	r3, #1
 8044c7a:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8044c7c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8044c7e:	68bb      	ldr	r3, [r7, #8]
 8044c80:	699b      	ldr	r3, [r3, #24]
 8044c82:	3b01      	subs	r3, #1
 8044c84:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8044c86:	4313      	orrs	r3, r2
 8044c88:	693a      	ldr	r2, [r7, #16]
 8044c8a:	4313      	orrs	r3, r2
 8044c8c:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8044c8e:	68fb      	ldr	r3, [r7, #12]
 8044c90:	697a      	ldr	r2, [r7, #20]
 8044c92:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8044c94:	68fb      	ldr	r3, [r7, #12]
 8044c96:	693a      	ldr	r2, [r7, #16]
 8044c98:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8044c9a:	2300      	movs	r3, #0
}
 8044c9c:	4618      	mov	r0, r3
 8044c9e:	371c      	adds	r7, #28
 8044ca0:	46bd      	mov	sp, r7
 8044ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044ca6:	4770      	bx	lr

08044ca8 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8044ca8:	b580      	push	{r7, lr}
 8044caa:	b086      	sub	sp, #24
 8044cac:	af00      	add	r7, sp, #0
 8044cae:	60f8      	str	r0, [r7, #12]
 8044cb0:	60b9      	str	r1, [r7, #8]
 8044cb2:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8044cb4:	2300      	movs	r3, #0
 8044cb6:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8044cb8:	2300      	movs	r3, #0
 8044cba:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8044cbc:	68bb      	ldr	r3, [r7, #8]
 8044cbe:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8044cc0:	68bb      	ldr	r3, [r7, #8]
 8044cc2:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8044cc4:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8044cc6:	68bb      	ldr	r3, [r7, #8]
 8044cc8:	689b      	ldr	r3, [r3, #8]
 8044cca:	3b01      	subs	r3, #1
 8044ccc:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8044cce:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8044cd0:	68bb      	ldr	r3, [r7, #8]
 8044cd2:	68db      	ldr	r3, [r3, #12]
 8044cd4:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8044cd6:	4313      	orrs	r3, r2
 8044cd8:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8044cda:	693a      	ldr	r2, [r7, #16]
 8044cdc:	68fb      	ldr	r3, [r7, #12]
 8044cde:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8044ce0:	f7fc f952 	bl	8040f88 <HAL_GetTick>
 8044ce4:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8044ce6:	e010      	b.n	8044d0a <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8044ce8:	687b      	ldr	r3, [r7, #4]
 8044cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8044cee:	d00c      	beq.n	8044d0a <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8044cf0:	687b      	ldr	r3, [r7, #4]
 8044cf2:	2b00      	cmp	r3, #0
 8044cf4:	d007      	beq.n	8044d06 <FMC_SDRAM_SendCommand+0x5e>
 8044cf6:	f7fc f947 	bl	8040f88 <HAL_GetTick>
 8044cfa:	4602      	mov	r2, r0
 8044cfc:	697b      	ldr	r3, [r7, #20]
 8044cfe:	1ad3      	subs	r3, r2, r3
 8044d00:	687a      	ldr	r2, [r7, #4]
 8044d02:	429a      	cmp	r2, r3
 8044d04:	d201      	bcs.n	8044d0a <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8044d06:	2303      	movs	r3, #3
 8044d08:	e006      	b.n	8044d18 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8044d0a:	68fb      	ldr	r3, [r7, #12]
 8044d0c:	699b      	ldr	r3, [r3, #24]
 8044d0e:	f003 0320 	and.w	r3, r3, #32
 8044d12:	2b20      	cmp	r3, #32
 8044d14:	d0e8      	beq.n	8044ce8 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8044d16:	2300      	movs	r3, #0
}
 8044d18:	4618      	mov	r0, r3
 8044d1a:	3718      	adds	r7, #24
 8044d1c:	46bd      	mov	sp, r7
 8044d1e:	bd80      	pop	{r7, pc}

08044d20 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8044d20:	b480      	push	{r7}
 8044d22:	b083      	sub	sp, #12
 8044d24:	af00      	add	r7, sp, #0
 8044d26:	6078      	str	r0, [r7, #4]
 8044d28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8044d2a:	687b      	ldr	r3, [r7, #4]
 8044d2c:	695a      	ldr	r2, [r3, #20]
 8044d2e:	683b      	ldr	r3, [r7, #0]
 8044d30:	005b      	lsls	r3, r3, #1
 8044d32:	431a      	orrs	r2, r3
 8044d34:	687b      	ldr	r3, [r7, #4]
 8044d36:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8044d38:	2300      	movs	r3, #0
}
 8044d3a:	4618      	mov	r0, r3
 8044d3c:	370c      	adds	r7, #12
 8044d3e:	46bd      	mov	sp, r7
 8044d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044d44:	4770      	bx	lr
	...

08044d48 <BufferConfig>:
static AnimType buffering = ANIMATED ;
/*************************** Public functions ***************************/
static void blit(Bitmap* SrcPm, void *fb,  int src_x, int src_y, int dst_x, int dst_y, int w, int h);

void  BufferConfig(AnimType an)
{
 8044d48:	b580      	push	{r7, lr}
 8044d4a:	b082      	sub	sp, #8
 8044d4c:	af00      	add	r7, sp, #0
 8044d4e:	4603      	mov	r3, r0
 8044d50:	71fb      	strb	r3, [r7, #7]
	buffering = an ;
 8044d52:	4a05      	ldr	r2, [pc, #20]	; (8044d68 <BufferConfig+0x20>)
 8044d54:	79fb      	ldrb	r3, [r7, #7]
 8044d56:	7013      	strb	r3, [r2, #0]
	GPU_BufferConfig((u8) an ) ;
 8044d58:	79fb      	ldrb	r3, [r7, #7]
 8044d5a:	4618      	mov	r0, r3
 8044d5c:	f000 f9e8 	bl	8045130 <GPU_BufferConfig>
}
 8044d60:	bf00      	nop
 8044d62:	3708      	adds	r7, #8
 8044d64:	46bd      	mov	sp, r7
 8044d66:	bd80      	pop	{r7, pc}
 8044d68:	20000005 	.word	0x20000005

08044d6c <DrawSprite>:


void  DrawSprite(Sprite* spr )
{
 8044d6c:	b580      	push	{r7, lr}
 8044d6e:	b096      	sub	sp, #88	; 0x58
 8044d70:	af00      	add	r7, sp, #0
 8044d72:	6078      	str	r0, [r7, #4]
	if(spr->active == 0) return ;
 8044d74:	687b      	ldr	r3, [r7, #4]
 8044d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8044d78:	2b00      	cmp	r3, #0
 8044d7a:	f000 80d0 	beq.w	8044f1e <DrawSprite+0x1b2>

      void * data = (void *)spr->ImageData ;
 8044d7e:	687b      	ldr	r3, [r7, #4]
 8044d80:	681b      	ldr	r3, [r3, #0]
 8044d82:	64fb      	str	r3, [r7, #76]	; 0x4c
      u32 spr_h = spr->Height;
 8044d84:	687b      	ldr	r3, [r7, #4]
 8044d86:	691b      	ldr	r3, [r3, #16]
 8044d88:	64bb      	str	r3, [r7, #72]	; 0x48
      u32 spr_w = spr->Width;
 8044d8a:	687b      	ldr	r3, [r7, #4]
 8044d8c:	68db      	ldr	r3, [r3, #12]
 8044d8e:	647b      	str	r3, [r7, #68]	; 0x44
      s16 spr_x = (s16)spr->x ;
 8044d90:	687b      	ldr	r3, [r7, #4]
 8044d92:	edd3 7a01 	vldr	s15, [r3, #4]
 8044d96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8044d9a:	ee17 3a90 	vmov	r3, s15
 8044d9e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      s16 spr_y = (s16)spr->y ;
 8044da2:	687b      	ldr	r3, [r7, #4]
 8044da4:	edd3 7a02 	vldr	s15, [r3, #8]
 8044da8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8044dac:	ee17 3a90 	vmov	r3, s15
 8044db0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
      /**** Clipping work ****/

      //1- check if the image is totally invisible
      	if(spr_x >= disp.Dis_w || spr_y >= disp.Dis_h ||
 8044db4:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8044db8:	4b5c      	ldr	r3, [pc, #368]	; (8044f2c <DrawSprite+0x1c0>)
 8044dba:	689b      	ldr	r3, [r3, #8]
 8044dbc:	429a      	cmp	r2, r3
 8044dbe:	f280 80b0 	bge.w	8044f22 <DrawSprite+0x1b6>
 8044dc2:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 8044dc6:	4b59      	ldr	r3, [pc, #356]	; (8044f2c <DrawSprite+0x1c0>)
 8044dc8:	68db      	ldr	r3, [r3, #12]
 8044dca:	429a      	cmp	r2, r3
 8044dcc:	f280 80a9 	bge.w	8044f22 <DrawSprite+0x1b6>
      	   spr_x+spr_w <= 0 || spr_y+spr_h <= 0 )
 8044dd0:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8044dd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8044dd6:	4413      	add	r3, r2
      	if(spr_x >= disp.Dis_w || spr_y >= disp.Dis_h ||
 8044dd8:	2b00      	cmp	r3, #0
 8044dda:	f000 80a2 	beq.w	8044f22 <DrawSprite+0x1b6>
      	   spr_x+spr_w <= 0 || spr_y+spr_h <= 0 )
 8044dde:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 8044de2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8044de4:	4413      	add	r3, r2
 8044de6:	2b00      	cmp	r3, #0
 8044de8:	f000 809b 	beq.w	8044f22 <DrawSprite+0x1b6>
      		                                          return ; // go out
      //2-compute new coordinations for easy computation
      	s16 x1 = spr_x ;
 8044dec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8044df0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
      	s16 y1 = spr_y ;
 8044df4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8044df8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
      	s16 x2 = x1+spr_w -1 ;
 8044dfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8044dfe:	b29a      	uxth	r2, r3
 8044e00:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8044e04:	4413      	add	r3, r2
 8044e06:	b29b      	uxth	r3, r3
 8044e08:	3b01      	subs	r3, #1
 8044e0a:	b29b      	uxth	r3, r3
 8044e0c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
      	s16 y2 = y1+spr_h -1 ;
 8044e10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8044e12:	b29a      	uxth	r2, r3
 8044e14:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8044e18:	4413      	add	r3, r2
 8044e1a:	b29b      	uxth	r3, r3
 8044e1c:	3b01      	subs	r3, #1
 8044e1e:	b29b      	uxth	r3, r3
 8044e20:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

      //3- left upper corner wrapping.
      	if(x1 < 0) x1 = 0 ;
 8044e24:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8044e28:	2b00      	cmp	r3, #0
 8044e2a:	da02      	bge.n	8044e32 <DrawSprite+0xc6>
 8044e2c:	2300      	movs	r3, #0
 8044e2e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
      	if(y1 < 0) y1 = 0 ;
 8044e32:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8044e36:	2b00      	cmp	r3, #0
 8044e38:	da02      	bge.n	8044e40 <DrawSprite+0xd4>
 8044e3a:	2300      	movs	r3, #0
 8044e3c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

     //4- Right lower corner wrapping.
       if(x2 >= disp.Dis_w) x2 = disp.Dis_w - 1 ;
 8044e40:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	; 0x52
 8044e44:	4b39      	ldr	r3, [pc, #228]	; (8044f2c <DrawSprite+0x1c0>)
 8044e46:	689b      	ldr	r3, [r3, #8]
 8044e48:	429a      	cmp	r2, r3
 8044e4a:	db06      	blt.n	8044e5a <DrawSprite+0xee>
 8044e4c:	4b37      	ldr	r3, [pc, #220]	; (8044f2c <DrawSprite+0x1c0>)
 8044e4e:	689b      	ldr	r3, [r3, #8]
 8044e50:	b29b      	uxth	r3, r3
 8044e52:	3b01      	subs	r3, #1
 8044e54:	b29b      	uxth	r3, r3
 8044e56:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
       if(y2 >= disp.Dis_h) y2 = disp.Dis_h - 1 ;
 8044e5a:	f9b7 2050 	ldrsh.w	r2, [r7, #80]	; 0x50
 8044e5e:	4b33      	ldr	r3, [pc, #204]	; (8044f2c <DrawSprite+0x1c0>)
 8044e60:	68db      	ldr	r3, [r3, #12]
 8044e62:	429a      	cmp	r2, r3
 8044e64:	db06      	blt.n	8044e74 <DrawSprite+0x108>
 8044e66:	4b31      	ldr	r3, [pc, #196]	; (8044f2c <DrawSprite+0x1c0>)
 8044e68:	68db      	ldr	r3, [r3, #12]
 8044e6a:	b29b      	uxth	r3, r3
 8044e6c:	3b01      	subs	r3, #1
 8044e6e:	b29b      	uxth	r3, r3
 8044e70:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50


    //5- Calculate new offset for destination buffer and source bitmap.
      int offset_des = BPP * (x1 + y1*disp.Dis_w) ;
 8044e74:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 8044e78:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8044e7c:	492b      	ldr	r1, [pc, #172]	; (8044f2c <DrawSprite+0x1c0>)
 8044e7e:	6889      	ldr	r1, [r1, #8]
 8044e80:	fb01 f303 	mul.w	r3, r1, r3
 8044e84:	4413      	add	r3, r2
 8044e86:	005b      	lsls	r3, r3, #1
 8044e88:	63fb      	str	r3, [r7, #60]	; 0x3c
      int offset_src = BPP * ( x1 -spr_x + (y1-spr_y)*spr_w ) ;
 8044e8a:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 8044e8e:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8044e92:	1ad3      	subs	r3, r2, r3
 8044e94:	4619      	mov	r1, r3
 8044e96:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 8044e9a:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8044e9e:	1ad3      	subs	r3, r2, r3
 8044ea0:	461a      	mov	r2, r3
 8044ea2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8044ea4:	fb02 f303 	mul.w	r3, r2, r3
 8044ea8:	440b      	add	r3, r1
 8044eaa:	005b      	lsls	r3, r3, #1
 8044eac:	63bb      	str	r3, [r7, #56]	; 0x38


    //6- Calculate new width and height for sprite.

      int w = x2-x1 +1 ;
 8044eae:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	; 0x52
 8044eb2:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8044eb6:	1ad3      	subs	r3, r2, r3
 8044eb8:	3301      	adds	r3, #1
 8044eba:	637b      	str	r3, [r7, #52]	; 0x34
      int h = y2-y1 +1 ;
 8044ebc:	f9b7 2050 	ldrsh.w	r2, [r7, #80]	; 0x50
 8044ec0:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8044ec4:	1ad3      	subs	r3, r2, r3
 8044ec6:	3301      	adds	r3, #1
 8044ec8:	633b      	str	r3, [r7, #48]	; 0x30
      int in_offset = spr->Width - w ; /* It is added at the end of each line to determine the starting address of the
 8044eca:	687b      	ldr	r3, [r7, #4]
 8044ecc:	68da      	ldr	r2, [r3, #12]
 8044ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8044ed0:	1ad3      	subs	r3, r2, r3
 8044ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
                                      next line from source bitmap*/
      Bitmap src , dest ;

      src.data  = data+offset_src              ;
 8044ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8044ed6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8044ed8:	4413      	add	r3, r2
 8044eda:	61fb      	str	r3, [r7, #28]
      src.color = TRANSPARARENT_COLOR_RGB888   ;
 8044edc:	4b14      	ldr	r3, [pc, #80]	; (8044f30 <DrawSprite+0x1c4>)
 8044ede:	623b      	str	r3, [r7, #32]
      src.w     = w                            ;
 8044ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8044ee2:	627b      	str	r3, [r7, #36]	; 0x24
      src.h     = h                            ;
 8044ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8044ee6:	62bb      	str	r3, [r7, #40]	; 0x28

      dest.data = (buffering == ANIMATED ? disp.draw_buff : disp.Rendr_buf) + offset_des  ;
 8044ee8:	4b12      	ldr	r3, [pc, #72]	; (8044f34 <DrawSprite+0x1c8>)
 8044eea:	781b      	ldrb	r3, [r3, #0]
 8044eec:	2b01      	cmp	r3, #1
 8044eee:	d102      	bne.n	8044ef6 <DrawSprite+0x18a>
 8044ef0:	4b0e      	ldr	r3, [pc, #56]	; (8044f2c <DrawSprite+0x1c0>)
 8044ef2:	685b      	ldr	r3, [r3, #4]
 8044ef4:	e001      	b.n	8044efa <DrawSprite+0x18e>
 8044ef6:	4b0d      	ldr	r3, [pc, #52]	; (8044f2c <DrawSprite+0x1c0>)
 8044ef8:	681b      	ldr	r3, [r3, #0]
 8044efa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8044efc:	4413      	add	r3, r2
 8044efe:	60fb      	str	r3, [r7, #12]
      dest.w    = disp.Dis_w                   ;
 8044f00:	4b0a      	ldr	r3, [pc, #40]	; (8044f2c <DrawSprite+0x1c0>)
 8044f02:	689b      	ldr	r3, [r3, #8]
 8044f04:	617b      	str	r3, [r7, #20]
      dest.h    = disp.Dis_h                   ;
 8044f06:	4b09      	ldr	r3, [pc, #36]	; (8044f2c <DrawSprite+0x1c0>)
 8044f08:	68db      	ldr	r3, [r3, #12]
 8044f0a:	61bb      	str	r3, [r7, #24]

     // Now finally blit!
      CopyBMP(&src , &dest ,in_offset );
 8044f0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8044f0e:	f107 010c 	add.w	r1, r7, #12
 8044f12:	f107 031c 	add.w	r3, r7, #28
 8044f16:	4618      	mov	r0, r3
 8044f18:	f000 f954 	bl	80451c4 <CopyBMP>
 8044f1c:	e002      	b.n	8044f24 <DrawSprite+0x1b8>
	if(spr->active == 0) return ;
 8044f1e:	bf00      	nop
 8044f20:	e000      	b.n	8044f24 <DrawSprite+0x1b8>
      		                                          return ; // go out
 8044f22:	bf00      	nop
}
 8044f24:	3758      	adds	r7, #88	; 0x58
 8044f26:	46bd      	mov	sp, r7
 8044f28:	bd80      	pop	{r7, pc}
 8044f2a:	bf00      	nop
 8044f2c:	200001bc 	.word	0x200001bc
 8044f30:	0052ff73 	.word	0x0052ff73
 8044f34:	20000005 	.word	0x20000005

08044f38 <Grape_frames>:

  }

}
void Grape_frames(Bitmap* frames , Bitmap* Psrc_bmp  , u8 Frames_no)
{
 8044f38:	b590      	push	{r4, r7, lr}
 8044f3a:	b08f      	sub	sp, #60	; 0x3c
 8044f3c:	af00      	add	r7, sp, #0
 8044f3e:	60f8      	str	r0, [r7, #12]
 8044f40:	60b9      	str	r1, [r7, #8]
 8044f42:	4613      	mov	r3, r2
 8044f44:	71fb      	strb	r3, [r7, #7]
	Bitmap src, des ;
	u16 in_offset ;

	src.w = frames[0].w;
 8044f46:	68fb      	ldr	r3, [r7, #12]
 8044f48:	689b      	ldr	r3, [r3, #8]
 8044f4a:	62bb      	str	r3, [r7, #40]	; 0x28
	src.h = frames[0].h ;
 8044f4c:	68fb      	ldr	r3, [r7, #12]
 8044f4e:	68db      	ldr	r3, [r3, #12]
 8044f50:	62fb      	str	r3, [r7, #44]	; 0x2c
	src.data = Psrc_bmp->data ;
 8044f52:	68bb      	ldr	r3, [r7, #8]
 8044f54:	681b      	ldr	r3, [r3, #0]
 8044f56:	623b      	str	r3, [r7, #32]

	des.w = src.w ;
 8044f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8044f5a:	61bb      	str	r3, [r7, #24]
	des.h = src.h ;
 8044f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8044f5e:	61fb      	str	r3, [r7, #28]

	in_offset = Psrc_bmp->w - src.w ;
 8044f60:	68bb      	ldr	r3, [r7, #8]
 8044f62:	689b      	ldr	r3, [r3, #8]
 8044f64:	b29a      	uxth	r2, r3
 8044f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8044f68:	b29b      	uxth	r3, r3
 8044f6a:	1ad3      	subs	r3, r2, r3
 8044f6c:	867b      	strh	r3, [r7, #50]	; 0x32
	for(int i = 0 ; i < Frames_no ; i++)
 8044f6e:	2300      	movs	r3, #0
 8044f70:	637b      	str	r3, [r7, #52]	; 0x34
 8044f72:	e024      	b.n	8044fbe <Grape_frames+0x86>
	{
		//spr->frames[i].data   = (void*)(spr_mem[spr->spr_ID].frames_container[i].data) ;
		frames[i].data = umm_malloc(src.w * src.h * BPP) ;
 8044f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8044f76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8044f78:	fb02 f303 	mul.w	r3, r2, r3
 8044f7c:	005b      	lsls	r3, r3, #1
 8044f7e:	4619      	mov	r1, r3
 8044f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8044f82:	011b      	lsls	r3, r3, #4
 8044f84:	68fa      	ldr	r2, [r7, #12]
 8044f86:	18d4      	adds	r4, r2, r3
 8044f88:	4608      	mov	r0, r1
 8044f8a:	f002 fbd7 	bl	804773c <umm_malloc>
 8044f8e:	4603      	mov	r3, r0
 8044f90:	6023      	str	r3, [r4, #0]
		des.data = frames[i].data ;
 8044f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8044f94:	011b      	lsls	r3, r3, #4
 8044f96:	68fa      	ldr	r2, [r7, #12]
 8044f98:	4413      	add	r3, r2
 8044f9a:	681b      	ldr	r3, [r3, #0]
 8044f9c:	613b      	str	r3, [r7, #16]
		CopyBMP(&src,&des ,in_offset) ;
 8044f9e:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8044fa0:	f107 0110 	add.w	r1, r7, #16
 8044fa4:	f107 0320 	add.w	r3, r7, #32
 8044fa8:	4618      	mov	r0, r3
 8044faa:	f000 f90b 	bl	80451c4 <CopyBMP>
		src.data += src.w * BPP  ;
 8044fae:	6a3b      	ldr	r3, [r7, #32]
 8044fb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8044fb2:	0052      	lsls	r2, r2, #1
 8044fb4:	4413      	add	r3, r2
 8044fb6:	623b      	str	r3, [r7, #32]
	for(int i = 0 ; i < Frames_no ; i++)
 8044fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8044fba:	3301      	adds	r3, #1
 8044fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8044fbe:	79fb      	ldrb	r3, [r7, #7]
 8044fc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8044fc2:	429a      	cmp	r2, r3
 8044fc4:	dbd6      	blt.n	8044f74 <Grape_frames+0x3c>
	}
}
 8044fc6:	bf00      	nop
 8044fc8:	bf00      	nop
 8044fca:	373c      	adds	r7, #60	; 0x3c
 8044fcc:	46bd      	mov	sp, r7
 8044fce:	bd90      	pop	{r4, r7, pc}

08044fd0 <Update_animation>:


void Update_animation(Sprite *spr)
{
 8044fd0:	b480      	push	{r7}
 8044fd2:	b083      	sub	sp, #12
 8044fd4:	af00      	add	r7, sp, #0
 8044fd6:	6078      	str	r0, [r7, #4]
	if (spr->active == 0) return ;
 8044fd8:	687b      	ldr	r3, [r7, #4]
 8044fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8044fdc:	2b00      	cmp	r3, #0
 8044fde:	d02c      	beq.n	804503a <Update_animation+0x6a>
	if(++spr->anim_cnt > spr->anim_sp)
 8044fe0:	687b      	ldr	r3, [r7, #4]
 8044fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8044fe4:	1c5a      	adds	r2, r3, #1
 8044fe6:	687b      	ldr	r3, [r7, #4]
 8044fe8:	645a      	str	r2, [r3, #68]	; 0x44
 8044fea:	687b      	ldr	r3, [r7, #4]
 8044fec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8044fee:	687b      	ldr	r3, [r7, #4]
 8044ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8044ff2:	429a      	cmp	r2, r3
 8044ff4:	dd22      	ble.n	804503c <Update_animation+0x6c>
				{

					spr->anim_cnt = 0 ;
 8044ff6:	687b      	ldr	r3, [r7, #4]
 8044ff8:	2200      	movs	r2, #0
 8044ffa:	645a      	str	r2, [r3, #68]	; 0x44
				    if(++spr->curr_frame >=spr->Frames_no)
 8044ffc:	687b      	ldr	r3, [r7, #4]
 8044ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8045000:	1c5a      	adds	r2, r3, #1
 8045002:	687b      	ldr	r3, [r7, #4]
 8045004:	63da      	str	r2, [r3, #60]	; 0x3c
 8045006:	687b      	ldr	r3, [r7, #4]
 8045008:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 804500a:	687b      	ldr	r3, [r7, #4]
 804500c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804500e:	429a      	cmp	r2, r3
 8045010:	db09      	blt.n	8045026 <Update_animation+0x56>
				    	 {
							spr->curr_frame =  0 ;
 8045012:	687b      	ldr	r3, [r7, #4]
 8045014:	2200      	movs	r2, #0
 8045016:	63da      	str	r2, [r3, #60]	; 0x3c
							if(spr->continus_anim == 0)  spr->active = 0 ;
 8045018:	687b      	ldr	r3, [r7, #4]
 804501a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804501c:	2b00      	cmp	r3, #0
 804501e:	d102      	bne.n	8045026 <Update_animation+0x56>
 8045020:	687b      	ldr	r3, [r7, #4]
 8045022:	2200      	movs	r2, #0
 8045024:	639a      	str	r2, [r3, #56]	; 0x38
						 }
                    // Assign current frame to Imagedata to be displayed while rendering
				    spr->ImageData = spr->frames[spr->curr_frame].data ;
 8045026:	687b      	ldr	r3, [r7, #4]
 8045028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804502a:	687a      	ldr	r2, [r7, #4]
 804502c:	3305      	adds	r3, #5
 804502e:	011b      	lsls	r3, r3, #4
 8045030:	4413      	add	r3, r2
 8045032:	681a      	ldr	r2, [r3, #0]
 8045034:	687b      	ldr	r3, [r7, #4]
 8045036:	601a      	str	r2, [r3, #0]
 8045038:	e000      	b.n	804503c <Update_animation+0x6c>
	if (spr->active == 0) return ;
 804503a:	bf00      	nop
					
				}
}
 804503c:	370c      	adds	r7, #12
 804503e:	46bd      	mov	sp, r7
 8045040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045044:	4770      	bx	lr

08045046 <collision>:
u8 collision( Sprite* spr1 ,  Sprite* spr2)
{
 8045046:	b480      	push	{r7}
 8045048:	b083      	sub	sp, #12
 804504a:	af00      	add	r7, sp, #0
 804504c:	6078      	str	r0, [r7, #4]
 804504e:	6039      	str	r1, [r7, #0]
    if(spr1->x  > (spr2->x + spr2->Width  )  ||
 8045050:	687b      	ldr	r3, [r7, #4]
 8045052:	ed93 7a01 	vldr	s14, [r3, #4]
 8045056:	683b      	ldr	r3, [r7, #0]
 8045058:	edd3 6a01 	vldr	s13, [r3, #4]
 804505c:	683b      	ldr	r3, [r7, #0]
 804505e:	68db      	ldr	r3, [r3, #12]
 8045060:	ee07 3a90 	vmov	s15, r3
 8045064:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8045068:	ee76 7aa7 	vadd.f32	s15, s13, s15
 804506c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8045070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8045074:	dc38      	bgt.n	80450e8 <collision+0xa2>
       spr1->y  > (spr2->y + spr2->Height  ) ||
 8045076:	687b      	ldr	r3, [r7, #4]
 8045078:	ed93 7a02 	vldr	s14, [r3, #8]
 804507c:	683b      	ldr	r3, [r7, #0]
 804507e:	edd3 6a02 	vldr	s13, [r3, #8]
 8045082:	683b      	ldr	r3, [r7, #0]
 8045084:	691b      	ldr	r3, [r3, #16]
 8045086:	ee07 3a90 	vmov	s15, r3
 804508a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 804508e:	ee76 7aa7 	vadd.f32	s15, s13, s15
    if(spr1->x  > (spr2->x + spr2->Width  )  ||
 8045092:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8045096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 804509a:	dc25      	bgt.n	80450e8 <collision+0xa2>
       spr2->x  > (spr1->x + spr1->Width  )  ||
 804509c:	683b      	ldr	r3, [r7, #0]
 804509e:	ed93 7a01 	vldr	s14, [r3, #4]
 80450a2:	687b      	ldr	r3, [r7, #4]
 80450a4:	edd3 6a01 	vldr	s13, [r3, #4]
 80450a8:	687b      	ldr	r3, [r7, #4]
 80450aa:	68db      	ldr	r3, [r3, #12]
 80450ac:	ee07 3a90 	vmov	s15, r3
 80450b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80450b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
       spr1->y  > (spr2->y + spr2->Height  ) ||
 80450b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80450bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80450c0:	dc12      	bgt.n	80450e8 <collision+0xa2>
       spr2->y  > (spr1->y + spr1->Height  ) )
 80450c2:	683b      	ldr	r3, [r7, #0]
 80450c4:	ed93 7a02 	vldr	s14, [r3, #8]
 80450c8:	687b      	ldr	r3, [r7, #4]
 80450ca:	edd3 6a02 	vldr	s13, [r3, #8]
 80450ce:	687b      	ldr	r3, [r7, #4]
 80450d0:	691b      	ldr	r3, [r3, #16]
 80450d2:	ee07 3a90 	vmov	s15, r3
 80450d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80450da:	ee76 7aa7 	vadd.f32	s15, s13, s15
       spr2->x  > (spr1->x + spr1->Width  )  ||
 80450de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80450e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80450e6:	dd01      	ble.n	80450ec <collision+0xa6>
   {
       return 0 ;
 80450e8:	2300      	movs	r3, #0
 80450ea:	e000      	b.n	80450ee <collision+0xa8>
   }
   return 1 ;
 80450ec:	2301      	movs	r3, #1
}
 80450ee:	4618      	mov	r0, r3
 80450f0:	370c      	adds	r7, #12
 80450f2:	46bd      	mov	sp, r7
 80450f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80450f8:	4770      	bx	lr

080450fa <LTDC_ClkConfig>:



/* Private Functions */
static void LTDC_ClkConfig(void)
{
 80450fa:	b580      	push	{r7, lr}
 80450fc:	b08c      	sub	sp, #48	; 0x30
 80450fe:	af00      	add	r7, sp, #0
RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8045100:	463b      	mov	r3, r7
 8045102:	2230      	movs	r2, #48	; 0x30
 8045104:	2100      	movs	r1, #0
 8045106:	4618      	mov	r0, r3
 8045108:	f003 fac0 	bl	804868c <memset>

PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 804510c:	2308      	movs	r3, #8
 804510e:	603b      	str	r3, [r7, #0]
PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 8045110:	233c      	movs	r3, #60	; 0x3c
 8045112:	613b      	str	r3, [r7, #16]
PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8045114:	2305      	movs	r3, #5
 8045116:	61bb      	str	r3, [r7, #24]
PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8045118:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 804511c:	627b      	str	r3, [r7, #36]	; 0x24
if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 804511e:	463b      	mov	r3, r7
 8045120:	4618      	mov	r0, r3
 8045122:	f7fe ff93 	bl	804404c <HAL_RCCEx_PeriphCLKConfig>
  {

  }
}
 8045126:	bf00      	nop
 8045128:	3730      	adds	r7, #48	; 0x30
 804512a:	46bd      	mov	sp, r7
 804512c:	bd80      	pop	{r7, pc}
	...

08045130 <GPU_BufferConfig>:

void  GPU_BufferConfig(uint8_t Type)
{
 8045130:	b480      	push	{r7}
 8045132:	b083      	sub	sp, #12
 8045134:	af00      	add	r7, sp, #0
 8045136:	4603      	mov	r3, r0
 8045138:	71fb      	strb	r3, [r7, #7]
	Dbuff = Type ;
 804513a:	4a04      	ldr	r2, [pc, #16]	; (804514c <GPU_BufferConfig+0x1c>)
 804513c:	79fb      	ldrb	r3, [r7, #7]
 804513e:	7013      	strb	r3, [r2, #0]
}
 8045140:	bf00      	nop
 8045142:	370c      	adds	r7, #12
 8045144:	46bd      	mov	sp, r7
 8045146:	f85d 7b04 	ldr.w	r7, [sp], #4
 804514a:	4770      	bx	lr
 804514c:	20000006 	.word	0x20000006

08045150 <InitDisplay>:
void InitDisplay(void* background_img , u32 color)
{
 8045150:	b580      	push	{r7, lr}
 8045152:	b082      	sub	sp, #8
 8045154:	af00      	add	r7, sp, #0
 8045156:	6078      	str	r0, [r7, #4]
 8045158:	6039      	str	r1, [r7, #0]
	disp.Rendr_buf = Render_buf ;
 804515a:	4b16      	ldr	r3, [pc, #88]	; (80451b4 <InitDisplay+0x64>)
 804515c:	4a16      	ldr	r2, [pc, #88]	; (80451b8 <InitDisplay+0x68>)
 804515e:	601a      	str	r2, [r3, #0]
	disp.draw_buff = Draw_buf   ;
 8045160:	4b14      	ldr	r3, [pc, #80]	; (80451b4 <InitDisplay+0x64>)
 8045162:	4a16      	ldr	r2, [pc, #88]	; (80451bc <InitDisplay+0x6c>)
 8045164:	605a      	str	r2, [r3, #4]
	disp.Dis_w = LCD_WIDTH ;
 8045166:	4b13      	ldr	r3, [pc, #76]	; (80451b4 <InitDisplay+0x64>)
 8045168:	22f0      	movs	r2, #240	; 0xf0
 804516a:	609a      	str	r2, [r3, #8]
	disp.Dis_h = LCD_HEIGHT;
 804516c:	4b11      	ldr	r3, [pc, #68]	; (80451b4 <InitDisplay+0x64>)
 804516e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8045172:	60da      	str	r2, [r3, #12]

	BSP_SDRAM_Init();
 8045174:	f001 f918 	bl	80463a8 <BSP_SDRAM_Init>
	if(background_img)
 8045178:	687b      	ldr	r3, [r7, #4]
 804517a:	2b00      	cmp	r3, #0
 804517c:	d00a      	beq.n	8045194 <InitDisplay+0x44>
		{
		  background.data = background_img;
 804517e:	4a10      	ldr	r2, [pc, #64]	; (80451c0 <InitDisplay+0x70>)
 8045180:	687b      	ldr	r3, [r7, #4]
 8045182:	6013      	str	r3, [r2, #0]
		  background.w = LCD_WIDTH ;
 8045184:	4b0e      	ldr	r3, [pc, #56]	; (80451c0 <InitDisplay+0x70>)
 8045186:	22f0      	movs	r2, #240	; 0xf0
 8045188:	609a      	str	r2, [r3, #8]
		  background.h = LCD_HEIGHT ;
 804518a:	4b0d      	ldr	r3, [pc, #52]	; (80451c0 <InitDisplay+0x70>)
 804518c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8045190:	60da      	str	r2, [r3, #12]
 8045192:	e007      	b.n	80451a4 <InitDisplay+0x54>
		}
		else
		{
			Fill_Backgroud_Color( color,disp.draw_buff ,LCD_WIDTH,LCD_HEIGHT  ) ;
 8045194:	4b07      	ldr	r3, [pc, #28]	; (80451b4 <InitDisplay+0x64>)
 8045196:	6859      	ldr	r1, [r3, #4]
 8045198:	f44f 73a0 	mov.w	r3, #320	; 0x140
 804519c:	22f0      	movs	r2, #240	; 0xf0
 804519e:	6838      	ldr	r0, [r7, #0]
 80451a0:	f000 f996 	bl	80454d0 <Fill_Backgroud_Color>
		}

	ili9341_Init();
 80451a4:	f000 fbb6 	bl	8045914 <ili9341_Init>
	LTDC_Init();
 80451a8:	f000 f9cc 	bl	8045544 <LTDC_Init>
}
 80451ac:	bf00      	nop
 80451ae:	3708      	adds	r7, #8
 80451b0:	46bd      	mov	sp, r7
 80451b2:	bd80      	pop	{r7, pc}
 80451b4:	200001bc 	.word	0x200001bc
 80451b8:	d0000000 	.word	0xd0000000
 80451bc:	d0200000 	.word	0xd0200000
 80451c0:	200001ac 	.word	0x200001ac

080451c4 <CopyBMP>:

void CopyBMP(Bitmap* Psrc_bmp , Bitmap* Pdest_bmp , uint32_t in_offst)
{
 80451c4:	b580      	push	{r7, lr}
 80451c6:	b086      	sub	sp, #24
 80451c8:	af02      	add	r7, sp, #8
 80451ca:	60f8      	str	r0, [r7, #12]
 80451cc:	60b9      	str	r1, [r7, #8]
 80451ce:	607a      	str	r2, [r7, #4]
	hdma2d.Instance = DMA2D;
 80451d0:	4b1c      	ldr	r3, [pc, #112]	; (8045244 <CopyBMP+0x80>)
 80451d2:	4a1d      	ldr	r2, [pc, #116]	; (8045248 <CopyBMP+0x84>)
 80451d4:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_M2M  ;
 80451d6:	4b1b      	ldr	r3, [pc, #108]	; (8045244 <CopyBMP+0x80>)
 80451d8:	2200      	movs	r2, #0
 80451da:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80451dc:	4b19      	ldr	r3, [pc, #100]	; (8045244 <CopyBMP+0x80>)
 80451de:	2202      	movs	r2, #2
 80451e0:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = Pdest_bmp->w - Psrc_bmp->w ;
 80451e2:	68bb      	ldr	r3, [r7, #8]
 80451e4:	689a      	ldr	r2, [r3, #8]
 80451e6:	68fb      	ldr	r3, [r7, #12]
 80451e8:	689b      	ldr	r3, [r3, #8]
 80451ea:	1ad3      	subs	r3, r2, r3
 80451ec:	461a      	mov	r2, r3
 80451ee:	4b15      	ldr	r3, [pc, #84]	; (8045244 <CopyBMP+0x80>)
 80451f0:	60da      	str	r2, [r3, #12]

	hdma2d.LayerCfg[1].InputOffset = in_offst;
 80451f2:	4a14      	ldr	r2, [pc, #80]	; (8045244 <CopyBMP+0x80>)
 80451f4:	687b      	ldr	r3, [r7, #4]
 80451f6:	6293      	str	r3, [r2, #40]	; 0x28
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80451f8:	4b12      	ldr	r3, [pc, #72]	; (8045244 <CopyBMP+0x80>)
 80451fa:	2202      	movs	r2, #2
 80451fc:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80451fe:	4b11      	ldr	r3, [pc, #68]	; (8045244 <CopyBMP+0x80>)
 8045200:	2200      	movs	r2, #0
 8045202:	631a      	str	r2, [r3, #48]	; 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0;
 8045204:	4b0f      	ldr	r3, [pc, #60]	; (8045244 <CopyBMP+0x80>)
 8045206:	2200      	movs	r2, #0
 8045208:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_DMA2D_Init(&hdma2d);
 804520a:	480e      	ldr	r0, [pc, #56]	; (8045244 <CopyBMP+0x80>)
 804520c:	f7fc f9bc 	bl	8041588 <HAL_DMA2D_Init>
	HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8045210:	2101      	movs	r1, #1
 8045212:	480c      	ldr	r0, [pc, #48]	; (8045244 <CopyBMP+0x80>)
 8045214:	f7fc fb16 	bl	8041844 <HAL_DMA2D_ConfigLayer>

	//HAL_DMA2D_Start(&hdma2d, (uint32_t)img , buff , width , height) ;
	HAL_DMA2D_Start(&hdma2d, (uint32_t)Psrc_bmp->data , (uint32_t)Pdest_bmp->data , Psrc_bmp->w , Psrc_bmp->h) ;
 8045218:	68fb      	ldr	r3, [r7, #12]
 804521a:	681b      	ldr	r3, [r3, #0]
 804521c:	4619      	mov	r1, r3
 804521e:	68bb      	ldr	r3, [r7, #8]
 8045220:	681b      	ldr	r3, [r3, #0]
 8045222:	461a      	mov	r2, r3
 8045224:	68fb      	ldr	r3, [r7, #12]
 8045226:	689b      	ldr	r3, [r3, #8]
 8045228:	4618      	mov	r0, r3
 804522a:	68fb      	ldr	r3, [r7, #12]
 804522c:	68db      	ldr	r3, [r3, #12]
 804522e:	9300      	str	r3, [sp, #0]
 8045230:	4603      	mov	r3, r0
 8045232:	4804      	ldr	r0, [pc, #16]	; (8045244 <CopyBMP+0x80>)
 8045234:	f7fc f9f1 	bl	804161a <HAL_DMA2D_Start>
	DMA2D_wait() ;
 8045238:	f000 f908 	bl	804544c <DMA2D_wait>
}
 804523c:	bf00      	nop
 804523e:	3710      	adds	r7, #16
 8045240:	46bd      	mov	sp, r7
 8045242:	bd80      	pop	{r7, pc}
 8045244:	2000016c 	.word	0x2000016c
 8045248:	4002b000 	.word	0x4002b000

0804524c <Fill_color_buff>:

void Fill_color_buff(u32 color , void* buf , u16 src_w , u16 dest_w , u16 h )
{
 804524c:	b580      	push	{r7, lr}
 804524e:	b086      	sub	sp, #24
 8045250:	af02      	add	r7, sp, #8
 8045252:	60f8      	str	r0, [r7, #12]
 8045254:	60b9      	str	r1, [r7, #8]
 8045256:	4611      	mov	r1, r2
 8045258:	461a      	mov	r2, r3
 804525a:	460b      	mov	r3, r1
 804525c:	80fb      	strh	r3, [r7, #6]
 804525e:	4613      	mov	r3, r2
 8045260:	80bb      	strh	r3, [r7, #4]
	hdma2d.Instance = DMA2D;
 8045262:	4b19      	ldr	r3, [pc, #100]	; (80452c8 <Fill_color_buff+0x7c>)
 8045264:	4a19      	ldr	r2, [pc, #100]	; (80452cc <Fill_color_buff+0x80>)
 8045266:	601a      	str	r2, [r3, #0]
    hdma2d.Init.Mode = DMA2D_R2M  ;
 8045268:	4b17      	ldr	r3, [pc, #92]	; (80452c8 <Fill_color_buff+0x7c>)
 804526a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 804526e:	605a      	str	r2, [r3, #4]
    hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8045270:	4b15      	ldr	r3, [pc, #84]	; (80452c8 <Fill_color_buff+0x7c>)
 8045272:	2202      	movs	r2, #2
 8045274:	609a      	str	r2, [r3, #8]
    hdma2d.Init.OutputOffset = dest_w - src_w ;
 8045276:	88ba      	ldrh	r2, [r7, #4]
 8045278:	88fb      	ldrh	r3, [r7, #6]
 804527a:	1ad3      	subs	r3, r2, r3
 804527c:	461a      	mov	r2, r3
 804527e:	4b12      	ldr	r3, [pc, #72]	; (80452c8 <Fill_color_buff+0x7c>)
 8045280:	60da      	str	r2, [r3, #12]
    hdma2d.LayerCfg[1].InputOffset = 0;
 8045282:	4b11      	ldr	r3, [pc, #68]	; (80452c8 <Fill_color_buff+0x7c>)
 8045284:	2200      	movs	r2, #0
 8045286:	629a      	str	r2, [r3, #40]	; 0x28
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8045288:	4b0f      	ldr	r3, [pc, #60]	; (80452c8 <Fill_color_buff+0x7c>)
 804528a:	2202      	movs	r2, #2
 804528c:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 804528e:	4b0e      	ldr	r3, [pc, #56]	; (80452c8 <Fill_color_buff+0x7c>)
 8045290:	2200      	movs	r2, #0
 8045292:	631a      	str	r2, [r3, #48]	; 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0;
 8045294:	4b0c      	ldr	r3, [pc, #48]	; (80452c8 <Fill_color_buff+0x7c>)
 8045296:	2200      	movs	r2, #0
 8045298:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_DMA2D_Init(&hdma2d);
 804529a:	480b      	ldr	r0, [pc, #44]	; (80452c8 <Fill_color_buff+0x7c>)
 804529c:	f7fc f974 	bl	8041588 <HAL_DMA2D_Init>
	HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 80452a0:	2101      	movs	r1, #1
 80452a2:	4809      	ldr	r0, [pc, #36]	; (80452c8 <Fill_color_buff+0x7c>)
 80452a4:	f7fc face 	bl	8041844 <HAL_DMA2D_ConfigLayer>

	//HAL_DMA2D_Start(&hdma2d, color , buff , width , height) ;
	HAL_DMA2D_Start(&hdma2d, color , (u32)buf , src_w , h) ;
 80452a8:	68ba      	ldr	r2, [r7, #8]
 80452aa:	88f9      	ldrh	r1, [r7, #6]
 80452ac:	8b3b      	ldrh	r3, [r7, #24]
 80452ae:	9300      	str	r3, [sp, #0]
 80452b0:	460b      	mov	r3, r1
 80452b2:	68f9      	ldr	r1, [r7, #12]
 80452b4:	4804      	ldr	r0, [pc, #16]	; (80452c8 <Fill_color_buff+0x7c>)
 80452b6:	f7fc f9b0 	bl	804161a <HAL_DMA2D_Start>
	DMA2D_wait() ;
 80452ba:	f000 f8c7 	bl	804544c <DMA2D_wait>
}
 80452be:	bf00      	nop
 80452c0:	3710      	adds	r7, #16
 80452c2:	46bd      	mov	sp, r7
 80452c4:	bd80      	pop	{r7, pc}
 80452c6:	bf00      	nop
 80452c8:	2000016c 	.word	0x2000016c
 80452cc:	4002b000 	.word	0x4002b000

080452d0 <Draw_Pixel>:

void Draw_Pixel(uint32_t x , uint32_t y , uint32_t color)
{
 80452d0:	b480      	push	{r7}
 80452d2:	b087      	sub	sp, #28
 80452d4:	af00      	add	r7, sp, #0
 80452d6:	60f8      	str	r0, [r7, #12]
 80452d8:	60b9      	str	r1, [r7, #8]
 80452da:	607a      	str	r2, [r7, #4]
	void * DrawBuf = Dbuff? disp.draw_buff : disp.Rendr_buf ;
 80452dc:	4b14      	ldr	r3, [pc, #80]	; (8045330 <Draw_Pixel+0x60>)
 80452de:	781b      	ldrb	r3, [r3, #0]
 80452e0:	2b00      	cmp	r3, #0
 80452e2:	d002      	beq.n	80452ea <Draw_Pixel+0x1a>
 80452e4:	4b13      	ldr	r3, [pc, #76]	; (8045334 <Draw_Pixel+0x64>)
 80452e6:	685b      	ldr	r3, [r3, #4]
 80452e8:	e001      	b.n	80452ee <Draw_Pixel+0x1e>
 80452ea:	4b12      	ldr	r3, [pc, #72]	; (8045334 <Draw_Pixel+0x64>)
 80452ec:	681b      	ldr	r3, [r3, #0]
 80452ee:	617b      	str	r3, [r7, #20]
	//clipping
	if(x>=0 && x<=disp.Dis_w && y>=0 && y<=disp.Dis_h)
 80452f0:	4b10      	ldr	r3, [pc, #64]	; (8045334 <Draw_Pixel+0x64>)
 80452f2:	689b      	ldr	r3, [r3, #8]
 80452f4:	461a      	mov	r2, r3
 80452f6:	68fb      	ldr	r3, [r7, #12]
 80452f8:	4293      	cmp	r3, r2
 80452fa:	d813      	bhi.n	8045324 <Draw_Pixel+0x54>
 80452fc:	4b0d      	ldr	r3, [pc, #52]	; (8045334 <Draw_Pixel+0x64>)
 80452fe:	68db      	ldr	r3, [r3, #12]
 8045300:	461a      	mov	r2, r3
 8045302:	68bb      	ldr	r3, [r7, #8]
 8045304:	4293      	cmp	r3, r2
 8045306:	d80d      	bhi.n	8045324 <Draw_Pixel+0x54>
	   *((__IO uint16_t*) (DrawBuf + BPP*(x + y*disp.Dis_w))) = color ;
 8045308:	4b0a      	ldr	r3, [pc, #40]	; (8045334 <Draw_Pixel+0x64>)
 804530a:	689b      	ldr	r3, [r3, #8]
 804530c:	461a      	mov	r2, r3
 804530e:	68bb      	ldr	r3, [r7, #8]
 8045310:	fb03 f202 	mul.w	r2, r3, r2
 8045314:	68fb      	ldr	r3, [r7, #12]
 8045316:	4413      	add	r3, r2
 8045318:	005b      	lsls	r3, r3, #1
 804531a:	697a      	ldr	r2, [r7, #20]
 804531c:	4413      	add	r3, r2
 804531e:	687a      	ldr	r2, [r7, #4]
 8045320:	b292      	uxth	r2, r2
 8045322:	801a      	strh	r2, [r3, #0]
}
 8045324:	bf00      	nop
 8045326:	371c      	adds	r7, #28
 8045328:	46bd      	mov	sp, r7
 804532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804532e:	4770      	bx	lr
 8045330:	20000006 	.word	0x20000006
 8045334:	200001bc 	.word	0x200001bc

08045338 <renderChr>:

void renderChr(uint32_t x , uint32_t y , uint32_t color,char c)
{
 8045338:	b580      	push	{r7, lr}
 804533a:	b088      	sub	sp, #32
 804533c:	af00      	add	r7, sp, #0
 804533e:	60f8      	str	r0, [r7, #12]
 8045340:	60b9      	str	r1, [r7, #8]
 8045342:	607a      	str	r2, [r7, #4]
 8045344:	70fb      	strb	r3, [r7, #3]
    u8 *Ptable = (u8 *)font8x8 + (c-0x20)*CHAR_WIDTH ;
 8045346:	78fb      	ldrb	r3, [r7, #3]
 8045348:	3b20      	subs	r3, #32
 804534a:	00db      	lsls	r3, r3, #3
 804534c:	461a      	mov	r2, r3
 804534e:	4b18      	ldr	r3, [pc, #96]	; (80453b0 <renderChr+0x78>)
 8045350:	4413      	add	r3, r2
 8045352:	617b      	str	r3, [r7, #20]

    for(int i =0 ; i< CHAR_HEIGHT ; i++)
 8045354:	2300      	movs	r3, #0
 8045356:	61fb      	str	r3, [r7, #28]
 8045358:	e021      	b.n	804539e <renderChr+0x66>
    {
        for(int j = 0 ; j < CHAR_WIDTH ; j++)
 804535a:	2300      	movs	r3, #0
 804535c:	61bb      	str	r3, [r7, #24]
 804535e:	e018      	b.n	8045392 <renderChr+0x5a>
        {
           if((Ptable[i]>>j)&1)
 8045360:	69fb      	ldr	r3, [r7, #28]
 8045362:	697a      	ldr	r2, [r7, #20]
 8045364:	4413      	add	r3, r2
 8045366:	781b      	ldrb	r3, [r3, #0]
 8045368:	461a      	mov	r2, r3
 804536a:	69bb      	ldr	r3, [r7, #24]
 804536c:	fa42 f303 	asr.w	r3, r2, r3
 8045370:	f003 0301 	and.w	r3, r3, #1
 8045374:	2b00      	cmp	r3, #0
 8045376:	d009      	beq.n	804538c <renderChr+0x54>
		       Draw_Pixel(x+j,y+i,color) ;
 8045378:	69ba      	ldr	r2, [r7, #24]
 804537a:	68fb      	ldr	r3, [r7, #12]
 804537c:	18d0      	adds	r0, r2, r3
 804537e:	69fa      	ldr	r2, [r7, #28]
 8045380:	68bb      	ldr	r3, [r7, #8]
 8045382:	4413      	add	r3, r2
 8045384:	687a      	ldr	r2, [r7, #4]
 8045386:	4619      	mov	r1, r3
 8045388:	f7ff ffa2 	bl	80452d0 <Draw_Pixel>
        for(int j = 0 ; j < CHAR_WIDTH ; j++)
 804538c:	69bb      	ldr	r3, [r7, #24]
 804538e:	3301      	adds	r3, #1
 8045390:	61bb      	str	r3, [r7, #24]
 8045392:	69bb      	ldr	r3, [r7, #24]
 8045394:	2b07      	cmp	r3, #7
 8045396:	dde3      	ble.n	8045360 <renderChr+0x28>
    for(int i =0 ; i< CHAR_HEIGHT ; i++)
 8045398:	69fb      	ldr	r3, [r7, #28]
 804539a:	3301      	adds	r3, #1
 804539c:	61fb      	str	r3, [r7, #28]
 804539e:	69fb      	ldr	r3, [r7, #28]
 80453a0:	2b07      	cmp	r3, #7
 80453a2:	ddda      	ble.n	804535a <renderChr+0x22>
        }
    }
}
 80453a4:	bf00      	nop
 80453a6:	bf00      	nop
 80453a8:	3720      	adds	r7, #32
 80453aa:	46bd      	mov	sp, r7
 80453ac:	bd80      	pop	{r7, pc}
 80453ae:	bf00      	nop
 80453b0:	08049ab0 	.word	0x08049ab0

080453b4 <renderStr>:



void renderStr(uint32_t x , uint32_t y , uint32_t color,char *str)
{
 80453b4:	b580      	push	{r7, lr}
 80453b6:	b086      	sub	sp, #24
 80453b8:	af00      	add	r7, sp, #0
 80453ba:	60f8      	str	r0, [r7, #12]
 80453bc:	60b9      	str	r1, [r7, #8]
 80453be:	607a      	str	r2, [r7, #4]
 80453c0:	603b      	str	r3, [r7, #0]
	uint32_t first_x = x ;
 80453c2:	68fb      	ldr	r3, [r7, #12]
 80453c4:	617b      	str	r3, [r7, #20]
	while(*str)
 80453c6:	e018      	b.n	80453fa <renderStr+0x46>
	 {
		if( *str == '\n')
 80453c8:	683b      	ldr	r3, [r7, #0]
 80453ca:	781b      	ldrb	r3, [r3, #0]
 80453cc:	2b0a      	cmp	r3, #10
 80453ce:	d108      	bne.n	80453e2 <renderStr+0x2e>
				{
			        x = first_x   ;
 80453d0:	697b      	ldr	r3, [r7, #20]
 80453d2:	60fb      	str	r3, [r7, #12]
					y += CHAR_HEIGHT ;
 80453d4:	68bb      	ldr	r3, [r7, #8]
 80453d6:	3308      	adds	r3, #8
 80453d8:	60bb      	str	r3, [r7, #8]
					str++ ;
 80453da:	683b      	ldr	r3, [r7, #0]
 80453dc:	3301      	adds	r3, #1
 80453de:	603b      	str	r3, [r7, #0]
					continue ;
 80453e0:	e00b      	b.n	80453fa <renderStr+0x46>
				}
        renderChr(x , y , color ,*str++) ;
 80453e2:	683b      	ldr	r3, [r7, #0]
 80453e4:	1c5a      	adds	r2, r3, #1
 80453e6:	603a      	str	r2, [r7, #0]
 80453e8:	781b      	ldrb	r3, [r3, #0]
 80453ea:	687a      	ldr	r2, [r7, #4]
 80453ec:	68b9      	ldr	r1, [r7, #8]
 80453ee:	68f8      	ldr	r0, [r7, #12]
 80453f0:	f7ff ffa2 	bl	8045338 <renderChr>
        x += CHAR_WIDTH ;
 80453f4:	68fb      	ldr	r3, [r7, #12]
 80453f6:	3308      	adds	r3, #8
 80453f8:	60fb      	str	r3, [r7, #12]
	while(*str)
 80453fa:	683b      	ldr	r3, [r7, #0]
 80453fc:	781b      	ldrb	r3, [r3, #0]
 80453fe:	2b00      	cmp	r3, #0
 8045400:	d1e2      	bne.n	80453c8 <renderStr+0x14>
	 }
}
 8045402:	bf00      	nop
 8045404:	bf00      	nop
 8045406:	3718      	adds	r7, #24
 8045408:	46bd      	mov	sp, r7
 804540a:	bd80      	pop	{r7, pc}

0804540c <FlipBuffers>:
	}
}

#endif //FONT_BITMAP
void FlipBuffers(void)
{
 804540c:	b480      	push	{r7}
 804540e:	b083      	sub	sp, #12
 8045410:	af00      	add	r7, sp, #0
  void* temp = disp.Rendr_buf ;
 8045412:	4b0b      	ldr	r3, [pc, #44]	; (8045440 <FlipBuffers+0x34>)
 8045414:	681b      	ldr	r3, [r3, #0]
 8045416:	607b      	str	r3, [r7, #4]

  disp.Rendr_buf = disp.draw_buff ;
 8045418:	4b09      	ldr	r3, [pc, #36]	; (8045440 <FlipBuffers+0x34>)
 804541a:	685b      	ldr	r3, [r3, #4]
 804541c:	4a08      	ldr	r2, [pc, #32]	; (8045440 <FlipBuffers+0x34>)
 804541e:	6013      	str	r3, [r2, #0]
  disp.draw_buff = temp ;
 8045420:	4a07      	ldr	r2, [pc, #28]	; (8045440 <FlipBuffers+0x34>)
 8045422:	687b      	ldr	r3, [r7, #4]
 8045424:	6053      	str	r3, [r2, #4]
  LTDC_Layer2->CFBAR =(uint32_t) disp.Rendr_buf ;
 8045426:	4b06      	ldr	r3, [pc, #24]	; (8045440 <FlipBuffers+0x34>)
 8045428:	681a      	ldr	r2, [r3, #0]
 804542a:	4b06      	ldr	r3, [pc, #24]	; (8045444 <FlipBuffers+0x38>)
 804542c:	629a      	str	r2, [r3, #40]	; 0x28

 // __HAL_LTDC_ENABLE_IT(&hltdc, LTDC_IT_RR);
  LTDC->SRCR = LTDC_SRCR_VBR;  // reload shadow registers on vertical blank
 804542e:	4b06      	ldr	r3, [pc, #24]	; (8045448 <FlipBuffers+0x3c>)
 8045430:	2202      	movs	r2, #2
 8045432:	625a      	str	r2, [r3, #36]	; 0x24
}
 8045434:	bf00      	nop
 8045436:	370c      	adds	r7, #12
 8045438:	46bd      	mov	sp, r7
 804543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804543e:	4770      	bx	lr
 8045440:	200001bc 	.word	0x200001bc
 8045444:	40016904 	.word	0x40016904
 8045448:	40016800 	.word	0x40016800

0804544c <DMA2D_wait>:
hltdc.State = HAL_LTDC_STATE_READY;
__HAL_UNLOCK(&hltdc);
}

static void DMA2D_wait(void)
{
 804544c:	b580      	push	{r7, lr}
 804544e:	b082      	sub	sp, #8
 8045450:	af00      	add	r7, sp, #0
	Aux * aux = Get_AuxiliaryStatus() ;
 8045452:	f002 f9f9 	bl	8047848 <Get_AuxiliaryStatus>
 8045456:	6078      	str	r0, [r7, #4]
	while(HAL_DMA2D_PollForTransfer(&hdma2d, 0) == HAL_TIMEOUT)
 8045458:	e006      	b.n	8045468 <DMA2D_wait+0x1c>
	{
		//During waiting DMA2D to finish it's work we can do some small tasks
		if(aux->SmallTasks) aux->SmallTasks() ;
 804545a:	687b      	ldr	r3, [r7, #4]
 804545c:	681b      	ldr	r3, [r3, #0]
 804545e:	2b00      	cmp	r3, #0
 8045460:	d002      	beq.n	8045468 <DMA2D_wait+0x1c>
 8045462:	687b      	ldr	r3, [r7, #4]
 8045464:	681b      	ldr	r3, [r3, #0]
 8045466:	4798      	blx	r3
	while(HAL_DMA2D_PollForTransfer(&hdma2d, 0) == HAL_TIMEOUT)
 8045468:	2100      	movs	r1, #0
 804546a:	4805      	ldr	r0, [pc, #20]	; (8045480 <DMA2D_wait+0x34>)
 804546c:	f7fc f900 	bl	8041670 <HAL_DMA2D_PollForTransfer>
 8045470:	4603      	mov	r3, r0
 8045472:	2b03      	cmp	r3, #3
 8045474:	d0f1      	beq.n	804545a <DMA2D_wait+0xe>
	}
}
 8045476:	bf00      	nop
 8045478:	bf00      	nop
 804547a:	3708      	adds	r7, #8
 804547c:	46bd      	mov	sp, r7
 804547e:	bd80      	pop	{r7, pc}
 8045480:	2000016c 	.word	0x2000016c

08045484 <clearScreen>:

void clearScreen(void)
{
 8045484:	b580      	push	{r7, lr}
 8045486:	b084      	sub	sp, #16
 8045488:	af02      	add	r7, sp, #8
	void *buf = Dbuff? disp.draw_buff :  disp.Rendr_buf ;
 804548a:	4b0e      	ldr	r3, [pc, #56]	; (80454c4 <clearScreen+0x40>)
 804548c:	781b      	ldrb	r3, [r3, #0]
 804548e:	2b00      	cmp	r3, #0
 8045490:	d002      	beq.n	8045498 <clearScreen+0x14>
 8045492:	4b0d      	ldr	r3, [pc, #52]	; (80454c8 <clearScreen+0x44>)
 8045494:	685b      	ldr	r3, [r3, #4]
 8045496:	e001      	b.n	804549c <clearScreen+0x18>
 8045498:	4b0b      	ldr	r3, [pc, #44]	; (80454c8 <clearScreen+0x44>)
 804549a:	681b      	ldr	r3, [r3, #0]
 804549c:	607b      	str	r3, [r7, #4]
	// fill buffer with color keying color to make transparent for background layer
	Fill_color_buff(TRANSPARARENT_COLOR_RGB888, buf, disp.Dis_w, disp.Dis_w,disp.Dis_h) ;
 804549e:	4b0a      	ldr	r3, [pc, #40]	; (80454c8 <clearScreen+0x44>)
 80454a0:	689b      	ldr	r3, [r3, #8]
 80454a2:	b29a      	uxth	r2, r3
 80454a4:	4b08      	ldr	r3, [pc, #32]	; (80454c8 <clearScreen+0x44>)
 80454a6:	689b      	ldr	r3, [r3, #8]
 80454a8:	b299      	uxth	r1, r3
 80454aa:	4b07      	ldr	r3, [pc, #28]	; (80454c8 <clearScreen+0x44>)
 80454ac:	68db      	ldr	r3, [r3, #12]
 80454ae:	b29b      	uxth	r3, r3
 80454b0:	9300      	str	r3, [sp, #0]
 80454b2:	460b      	mov	r3, r1
 80454b4:	6879      	ldr	r1, [r7, #4]
 80454b6:	4805      	ldr	r0, [pc, #20]	; (80454cc <clearScreen+0x48>)
 80454b8:	f7ff fec8 	bl	804524c <Fill_color_buff>
}
 80454bc:	bf00      	nop
 80454be:	3708      	adds	r7, #8
 80454c0:	46bd      	mov	sp, r7
 80454c2:	bd80      	pop	{r7, pc}
 80454c4:	20000006 	.word	0x20000006
 80454c8:	200001bc 	.word	0x200001bc
 80454cc:	0052ff73 	.word	0x0052ff73

080454d0 <Fill_Backgroud_Color>:

static void Fill_Backgroud_Color(u32 color , void* buff , int w , int h)
{
 80454d0:	b580      	push	{r7, lr}
 80454d2:	b086      	sub	sp, #24
 80454d4:	af02      	add	r7, sp, #8
 80454d6:	60f8      	str	r0, [r7, #12]
 80454d8:	60b9      	str	r1, [r7, #8]
 80454da:	607a      	str	r2, [r7, #4]
 80454dc:	603b      	str	r3, [r7, #0]
	//for color keying
	hdma2d.Instance = DMA2D;
 80454de:	4b17      	ldr	r3, [pc, #92]	; (804553c <Fill_Backgroud_Color+0x6c>)
 80454e0:	4a17      	ldr	r2, [pc, #92]	; (8045540 <Fill_Backgroud_Color+0x70>)
 80454e2:	601a      	str	r2, [r3, #0]
    hdma2d.Init.Mode = DMA2D_R2M  ;
 80454e4:	4b15      	ldr	r3, [pc, #84]	; (804553c <Fill_Backgroud_Color+0x6c>)
 80454e6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80454ea:	605a      	str	r2, [r3, #4]
    hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80454ec:	4b13      	ldr	r3, [pc, #76]	; (804553c <Fill_Backgroud_Color+0x6c>)
 80454ee:	2202      	movs	r2, #2
 80454f0:	609a      	str	r2, [r3, #8]
	//hdma2d.Init.OutputOffset = disp.Dis_w - width;
    hdma2d.Init.OutputOffset = 0 ;
 80454f2:	4b12      	ldr	r3, [pc, #72]	; (804553c <Fill_Backgroud_Color+0x6c>)
 80454f4:	2200      	movs	r2, #0
 80454f6:	60da      	str	r2, [r3, #12]
    hdma2d.LayerCfg[0].InputOffset = 0;
 80454f8:	4b10      	ldr	r3, [pc, #64]	; (804553c <Fill_Backgroud_Color+0x6c>)
 80454fa:	2200      	movs	r2, #0
 80454fc:	619a      	str	r2, [r3, #24]
	hdma2d.LayerCfg[0].InputColorMode = DMA2D_INPUT_RGB565;
 80454fe:	4b0f      	ldr	r3, [pc, #60]	; (804553c <Fill_Backgroud_Color+0x6c>)
 8045500:	2202      	movs	r2, #2
 8045502:	61da      	str	r2, [r3, #28]
	hdma2d.LayerCfg[0].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8045504:	4b0d      	ldr	r3, [pc, #52]	; (804553c <Fill_Backgroud_Color+0x6c>)
 8045506:	2200      	movs	r2, #0
 8045508:	621a      	str	r2, [r3, #32]
	hdma2d.LayerCfg[0].InputAlpha = 0;
 804550a:	4b0c      	ldr	r3, [pc, #48]	; (804553c <Fill_Backgroud_Color+0x6c>)
 804550c:	2200      	movs	r2, #0
 804550e:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_DMA2D_Init(&hdma2d);
 8045510:	480a      	ldr	r0, [pc, #40]	; (804553c <Fill_Backgroud_Color+0x6c>)
 8045512:	f7fc f839 	bl	8041588 <HAL_DMA2D_Init>
	HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8045516:	2100      	movs	r1, #0
 8045518:	4808      	ldr	r0, [pc, #32]	; (804553c <Fill_Backgroud_Color+0x6c>)
 804551a:	f7fc f993 	bl	8041844 <HAL_DMA2D_ConfigLayer>

	//HAL_DMA2D_Start(&hdma2d, color , buff , width , height) ;
	HAL_DMA2D_Start(&hdma2d, color , (u32)buff , w , h) ;
 804551e:	68ba      	ldr	r2, [r7, #8]
 8045520:	6879      	ldr	r1, [r7, #4]
 8045522:	683b      	ldr	r3, [r7, #0]
 8045524:	9300      	str	r3, [sp, #0]
 8045526:	460b      	mov	r3, r1
 8045528:	68f9      	ldr	r1, [r7, #12]
 804552a:	4804      	ldr	r0, [pc, #16]	; (804553c <Fill_Backgroud_Color+0x6c>)
 804552c:	f7fc f875 	bl	804161a <HAL_DMA2D_Start>
	DMA2D_wait() ;
 8045530:	f7ff ff8c 	bl	804544c <DMA2D_wait>
}
 8045534:	bf00      	nop
 8045536:	3710      	adds	r7, #16
 8045538:	46bd      	mov	sp, r7
 804553a:	bd80      	pop	{r7, pc}
 804553c:	2000016c 	.word	0x2000016c
 8045540:	4002b000 	.word	0x4002b000

08045544 <LTDC_Init>:

void LTDC_Init(void)
{
 8045544:	b580      	push	{r7, lr}
 8045546:	b09a      	sub	sp, #104	; 0x68
 8045548:	af00      	add	r7, sp, #0

  LTDC_LayerCfgTypeDef pLayerCfg  , pLayerCfg1;

  /* Clock Configuration */

  LTDC_ClkConfig();
 804554a:	f7ff fdd6 	bl	80450fa <LTDC_ClkConfig>

  /* LTDC parameter configurations */

  hltdc.Instance = LTDC;
 804554e:	4b54      	ldr	r3, [pc, #336]	; (80456a0 <LTDC_Init+0x15c>)
 8045550:	4a54      	ldr	r2, [pc, #336]	; (80456a4 <LTDC_Init+0x160>)
 8045552:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8045554:	4b52      	ldr	r3, [pc, #328]	; (80456a0 <LTDC_Init+0x15c>)
 8045556:	2200      	movs	r2, #0
 8045558:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 804555a:	4b51      	ldr	r3, [pc, #324]	; (80456a0 <LTDC_Init+0x15c>)
 804555c:	2200      	movs	r2, #0
 804555e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8045560:	4b4f      	ldr	r3, [pc, #316]	; (80456a0 <LTDC_Init+0x15c>)
 8045562:	2200      	movs	r2, #0
 8045564:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8045566:	4b4e      	ldr	r3, [pc, #312]	; (80456a0 <LTDC_Init+0x15c>)
 8045568:	2200      	movs	r2, #0
 804556a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 804556c:	4b4c      	ldr	r3, [pc, #304]	; (80456a0 <LTDC_Init+0x15c>)
 804556e:	2209      	movs	r2, #9
 8045570:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8045572:	4b4b      	ldr	r3, [pc, #300]	; (80456a0 <LTDC_Init+0x15c>)
 8045574:	2201      	movs	r2, #1
 8045576:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8045578:	4b49      	ldr	r3, [pc, #292]	; (80456a0 <LTDC_Init+0x15c>)
 804557a:	221d      	movs	r2, #29
 804557c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 804557e:	4b48      	ldr	r3, [pc, #288]	; (80456a0 <LTDC_Init+0x15c>)
 8045580:	2203      	movs	r2, #3
 8045582:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8045584:	4b46      	ldr	r3, [pc, #280]	; (80456a0 <LTDC_Init+0x15c>)
 8045586:	f240 120d 	movw	r2, #269	; 0x10d
 804558a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 804558c:	4b44      	ldr	r3, [pc, #272]	; (80456a0 <LTDC_Init+0x15c>)
 804558e:	f240 1243 	movw	r2, #323	; 0x143
 8045592:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8045594:	4b42      	ldr	r3, [pc, #264]	; (80456a0 <LTDC_Init+0x15c>)
 8045596:	f240 1217 	movw	r2, #279	; 0x117
 804559a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 804559c:	4b40      	ldr	r3, [pc, #256]	; (80456a0 <LTDC_Init+0x15c>)
 804559e:	f240 1247 	movw	r2, #327	; 0x147
 80455a2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80455a4:	4b3e      	ldr	r3, [pc, #248]	; (80456a0 <LTDC_Init+0x15c>)
 80455a6:	2200      	movs	r2, #0
 80455a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80455ac:	4b3c      	ldr	r3, [pc, #240]	; (80456a0 <LTDC_Init+0x15c>)
 80455ae:	2200      	movs	r2, #0
 80455b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80455b4:	4b3a      	ldr	r3, [pc, #232]	; (80456a0 <LTDC_Init+0x15c>)
 80455b6:	2200      	movs	r2, #0
 80455b8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  HAL_LTDC_Init(&hltdc);
 80455bc:	4838      	ldr	r0, [pc, #224]	; (80456a0 <LTDC_Init+0x15c>)
 80455be:	f7fd fd61 	bl	8043084 <HAL_LTDC_Init>

  //Background layer
  pLayerCfg.WindowX0 = 0;
 80455c2:	2300      	movs	r3, #0
 80455c4:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 240;
 80455c6:	23f0      	movs	r3, #240	; 0xf0
 80455c8:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 80455ca:	2300      	movs	r3, #0
 80455cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 320;
 80455ce:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80455d2:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80455d4:	2302      	movs	r3, #2
 80455d6:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 80455d8:	23ff      	movs	r3, #255	; 0xff
 80455da:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 80455dc:	2300      	movs	r3, #0
 80455de:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80455e0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80455e4:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80455e6:	2307      	movs	r3, #7
 80455e8:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = (u32)background.data;
 80455ea:	4b2f      	ldr	r3, [pc, #188]	; (80456a8 <LTDC_Init+0x164>)
 80455ec:	681b      	ldr	r3, [r3, #0]
 80455ee:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 240;
 80455f0:	23f0      	movs	r3, #240	; 0xf0
 80455f2:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 320;
 80455f4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80455f8:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80455fa:	2300      	movs	r3, #0
 80455fc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8045600:	2300      	movs	r3, #0
 8045602:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8045606:	2300      	movs	r3, #0
 8045608:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

  //Foreground layer
  pLayerCfg1.WindowX0 = 0;
 804560c:	2300      	movs	r3, #0
 804560e:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 240;
 8045610:	23f0      	movs	r3, #240	; 0xf0
 8045612:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8045614:	2300      	movs	r3, #0
 8045616:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 320;
 8045618:	f44f 73a0 	mov.w	r3, #320	; 0x140
 804561c:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 804561e:	2302      	movs	r3, #2
 8045620:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 255;
 8045622:	23ff      	movs	r3, #255	; 0xff
 8045624:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8045626:	2300      	movs	r3, #0
 8045628:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 804562a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 804562e:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8045630:	2307      	movs	r3, #7
 8045632:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress =(uint32_t) disp.Rendr_buf;
 8045634:	4b1d      	ldr	r3, [pc, #116]	; (80456ac <LTDC_Init+0x168>)
 8045636:	681b      	ldr	r3, [r3, #0]
 8045638:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 240;
 804563a:	23f0      	movs	r3, #240	; 0xf0
 804563c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 320;
 804563e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8045642:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8045644:	2300      	movs	r3, #0
 8045646:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 804564a:	2300      	movs	r3, #0
 804564c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8045650:	2300      	movs	r3, #0
 8045652:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

  HAL_LTDC_ConfigColorKeying_NoReload(&hltdc, 0x52FF73, 1);
 8045656:	2201      	movs	r2, #1
 8045658:	4915      	ldr	r1, [pc, #84]	; (80456b0 <LTDC_Init+0x16c>)
 804565a:	4811      	ldr	r0, [pc, #68]	; (80456a0 <LTDC_Init+0x15c>)
 804565c:	f7fd fe20 	bl	80432a0 <HAL_LTDC_ConfigColorKeying_NoReload>
 HAL_LTDC_EnableColorKeying_NoReload(&hltdc, 1);
 8045660:	2101      	movs	r1, #1
 8045662:	480f      	ldr	r0, [pc, #60]	; (80456a0 <LTDC_Init+0x15c>)
 8045664:	f7fd fe5c 	bl	8043320 <HAL_LTDC_EnableColorKeying_NoReload>

  HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0);
 8045668:	f107 0334 	add.w	r3, r7, #52	; 0x34
 804566c:	2200      	movs	r2, #0
 804566e:	4619      	mov	r1, r3
 8045670:	480b      	ldr	r0, [pc, #44]	; (80456a0 <LTDC_Init+0x15c>)
 8045672:	f7fd fdd7 	bl	8043224 <HAL_LTDC_ConfigLayer>

  HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1);
 8045676:	463b      	mov	r3, r7
 8045678:	2201      	movs	r2, #1
 804567a:	4619      	mov	r1, r3
 804567c:	4808      	ldr	r0, [pc, #32]	; (80456a0 <LTDC_Init+0x15c>)
 804567e:	f7fd fdd1 	bl	8043224 <HAL_LTDC_ConfigLayer>

  __HAL_LTDC_ENABLE_IT(&hltdc, LTDC_IT_RR);
 8045682:	4b07      	ldr	r3, [pc, #28]	; (80456a0 <LTDC_Init+0x15c>)
 8045684:	681b      	ldr	r3, [r3, #0]
 8045686:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8045688:	4b05      	ldr	r3, [pc, #20]	; (80456a0 <LTDC_Init+0x15c>)
 804568a:	681b      	ldr	r3, [r3, #0]
 804568c:	f042 0208 	orr.w	r2, r2, #8
 8045690:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC->SRCR = LTDC_SRCR_VBR;  // reload shadow registers on vertical blank
 8045692:	4b04      	ldr	r3, [pc, #16]	; (80456a4 <LTDC_Init+0x160>)
 8045694:	2202      	movs	r2, #2
 8045696:	625a      	str	r2, [r3, #36]	; 0x24

}
 8045698:	bf00      	nop
 804569a:	3768      	adds	r7, #104	; 0x68
 804569c:	46bd      	mov	sp, r7
 804569e:	bd80      	pop	{r7, pc}
 80456a0:	200000c4 	.word	0x200000c4
 80456a4:	40016800 	.word	0x40016800
 80456a8:	200001ac 	.word	0x200001ac
 80456ac:	200001bc 	.word	0x200001bc
 80456b0:	0052ff73 	.word	0x0052ff73

080456b4 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80456b4:	b480      	push	{r7}
 80456b6:	b085      	sub	sp, #20
 80456b8:	af00      	add	r7, sp, #0
 80456ba:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80456bc:	687b      	ldr	r3, [r7, #4]
 80456be:	681b      	ldr	r3, [r3, #0]
 80456c0:	4a0b      	ldr	r2, [pc, #44]	; (80456f0 <HAL_DMA2D_MspInit+0x3c>)
 80456c2:	4293      	cmp	r3, r2
 80456c4:	d10d      	bne.n	80456e2 <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80456c6:	2300      	movs	r3, #0
 80456c8:	60fb      	str	r3, [r7, #12]
 80456ca:	4b0a      	ldr	r3, [pc, #40]	; (80456f4 <HAL_DMA2D_MspInit+0x40>)
 80456cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80456ce:	4a09      	ldr	r2, [pc, #36]	; (80456f4 <HAL_DMA2D_MspInit+0x40>)
 80456d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80456d4:	6313      	str	r3, [r2, #48]	; 0x30
 80456d6:	4b07      	ldr	r3, [pc, #28]	; (80456f4 <HAL_DMA2D_MspInit+0x40>)
 80456d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80456da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80456de:	60fb      	str	r3, [r7, #12]
 80456e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80456e2:	bf00      	nop
 80456e4:	3714      	adds	r7, #20
 80456e6:	46bd      	mov	sp, r7
 80456e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80456ec:	4770      	bx	lr
 80456ee:	bf00      	nop
 80456f0:	4002b000 	.word	0x4002b000
 80456f4:	40023800 	.word	0x40023800

080456f8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80456f8:	b580      	push	{r7, lr}
 80456fa:	b08e      	sub	sp, #56	; 0x38
 80456fc:	af00      	add	r7, sp, #0
 80456fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8045700:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8045704:	2200      	movs	r2, #0
 8045706:	601a      	str	r2, [r3, #0]
 8045708:	605a      	str	r2, [r3, #4]
 804570a:	609a      	str	r2, [r3, #8]
 804570c:	60da      	str	r2, [r3, #12]
 804570e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8045710:	687b      	ldr	r3, [r7, #4]
 8045712:	681b      	ldr	r3, [r3, #0]
 8045714:	4a77      	ldr	r2, [pc, #476]	; (80458f4 <HAL_LTDC_MspInit+0x1fc>)
 8045716:	4293      	cmp	r3, r2
 8045718:	f040 80e8 	bne.w	80458ec <HAL_LTDC_MspInit+0x1f4>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 804571c:	2300      	movs	r3, #0
 804571e:	623b      	str	r3, [r7, #32]
 8045720:	4b75      	ldr	r3, [pc, #468]	; (80458f8 <HAL_LTDC_MspInit+0x200>)
 8045722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8045724:	4a74      	ldr	r2, [pc, #464]	; (80458f8 <HAL_LTDC_MspInit+0x200>)
 8045726:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 804572a:	6453      	str	r3, [r2, #68]	; 0x44
 804572c:	4b72      	ldr	r3, [pc, #456]	; (80458f8 <HAL_LTDC_MspInit+0x200>)
 804572e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8045730:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8045734:	623b      	str	r3, [r7, #32]
 8045736:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8045738:	2300      	movs	r3, #0
 804573a:	61fb      	str	r3, [r7, #28]
 804573c:	4b6e      	ldr	r3, [pc, #440]	; (80458f8 <HAL_LTDC_MspInit+0x200>)
 804573e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8045740:	4a6d      	ldr	r2, [pc, #436]	; (80458f8 <HAL_LTDC_MspInit+0x200>)
 8045742:	f043 0320 	orr.w	r3, r3, #32
 8045746:	6313      	str	r3, [r2, #48]	; 0x30
 8045748:	4b6b      	ldr	r3, [pc, #428]	; (80458f8 <HAL_LTDC_MspInit+0x200>)
 804574a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804574c:	f003 0320 	and.w	r3, r3, #32
 8045750:	61fb      	str	r3, [r7, #28]
 8045752:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8045754:	2300      	movs	r3, #0
 8045756:	61bb      	str	r3, [r7, #24]
 8045758:	4b67      	ldr	r3, [pc, #412]	; (80458f8 <HAL_LTDC_MspInit+0x200>)
 804575a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804575c:	4a66      	ldr	r2, [pc, #408]	; (80458f8 <HAL_LTDC_MspInit+0x200>)
 804575e:	f043 0301 	orr.w	r3, r3, #1
 8045762:	6313      	str	r3, [r2, #48]	; 0x30
 8045764:	4b64      	ldr	r3, [pc, #400]	; (80458f8 <HAL_LTDC_MspInit+0x200>)
 8045766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8045768:	f003 0301 	and.w	r3, r3, #1
 804576c:	61bb      	str	r3, [r7, #24]
 804576e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8045770:	2300      	movs	r3, #0
 8045772:	617b      	str	r3, [r7, #20]
 8045774:	4b60      	ldr	r3, [pc, #384]	; (80458f8 <HAL_LTDC_MspInit+0x200>)
 8045776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8045778:	4a5f      	ldr	r2, [pc, #380]	; (80458f8 <HAL_LTDC_MspInit+0x200>)
 804577a:	f043 0302 	orr.w	r3, r3, #2
 804577e:	6313      	str	r3, [r2, #48]	; 0x30
 8045780:	4b5d      	ldr	r3, [pc, #372]	; (80458f8 <HAL_LTDC_MspInit+0x200>)
 8045782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8045784:	f003 0302 	and.w	r3, r3, #2
 8045788:	617b      	str	r3, [r7, #20]
 804578a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 804578c:	2300      	movs	r3, #0
 804578e:	613b      	str	r3, [r7, #16]
 8045790:	4b59      	ldr	r3, [pc, #356]	; (80458f8 <HAL_LTDC_MspInit+0x200>)
 8045792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8045794:	4a58      	ldr	r2, [pc, #352]	; (80458f8 <HAL_LTDC_MspInit+0x200>)
 8045796:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804579a:	6313      	str	r3, [r2, #48]	; 0x30
 804579c:	4b56      	ldr	r3, [pc, #344]	; (80458f8 <HAL_LTDC_MspInit+0x200>)
 804579e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80457a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80457a4:	613b      	str	r3, [r7, #16]
 80457a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80457a8:	2300      	movs	r3, #0
 80457aa:	60fb      	str	r3, [r7, #12]
 80457ac:	4b52      	ldr	r3, [pc, #328]	; (80458f8 <HAL_LTDC_MspInit+0x200>)
 80457ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80457b0:	4a51      	ldr	r2, [pc, #324]	; (80458f8 <HAL_LTDC_MspInit+0x200>)
 80457b2:	f043 0304 	orr.w	r3, r3, #4
 80457b6:	6313      	str	r3, [r2, #48]	; 0x30
 80457b8:	4b4f      	ldr	r3, [pc, #316]	; (80458f8 <HAL_LTDC_MspInit+0x200>)
 80457ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80457bc:	f003 0304 	and.w	r3, r3, #4
 80457c0:	60fb      	str	r3, [r7, #12]
 80457c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80457c4:	2300      	movs	r3, #0
 80457c6:	60bb      	str	r3, [r7, #8]
 80457c8:	4b4b      	ldr	r3, [pc, #300]	; (80458f8 <HAL_LTDC_MspInit+0x200>)
 80457ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80457cc:	4a4a      	ldr	r2, [pc, #296]	; (80458f8 <HAL_LTDC_MspInit+0x200>)
 80457ce:	f043 0308 	orr.w	r3, r3, #8
 80457d2:	6313      	str	r3, [r2, #48]	; 0x30
 80457d4:	4b48      	ldr	r3, [pc, #288]	; (80458f8 <HAL_LTDC_MspInit+0x200>)
 80457d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80457d8:	f003 0308 	and.w	r3, r3, #8
 80457dc:	60bb      	str	r3, [r7, #8]
 80457de:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80457e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80457e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80457e6:	2302      	movs	r3, #2
 80457e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80457ea:	2300      	movs	r3, #0
 80457ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80457ee:	2300      	movs	r3, #0
 80457f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80457f2:	230e      	movs	r3, #14
 80457f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80457f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80457fa:	4619      	mov	r1, r3
 80457fc:	483f      	ldr	r0, [pc, #252]	; (80458fc <HAL_LTDC_MspInit+0x204>)
 80457fe:	f7fc f94f 	bl	8041aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8045802:	f641 0358 	movw	r3, #6232	; 0x1858
 8045806:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8045808:	2302      	movs	r3, #2
 804580a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804580c:	2300      	movs	r3, #0
 804580e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8045810:	2300      	movs	r3, #0
 8045812:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8045814:	230e      	movs	r3, #14
 8045816:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8045818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 804581c:	4619      	mov	r1, r3
 804581e:	4838      	ldr	r0, [pc, #224]	; (8045900 <HAL_LTDC_MspInit+0x208>)
 8045820:	f7fc f93e 	bl	8041aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8045824:	2303      	movs	r3, #3
 8045826:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8045828:	2302      	movs	r3, #2
 804582a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804582c:	2300      	movs	r3, #0
 804582e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8045830:	2300      	movs	r3, #0
 8045832:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8045834:	2309      	movs	r3, #9
 8045836:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8045838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 804583c:	4619      	mov	r1, r3
 804583e:	4831      	ldr	r0, [pc, #196]	; (8045904 <HAL_LTDC_MspInit+0x20c>)
 8045840:	f7fc f92e 	bl	8041aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8045844:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8045848:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804584a:	2302      	movs	r3, #2
 804584c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804584e:	2300      	movs	r3, #0
 8045850:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8045852:	2300      	movs	r3, #0
 8045854:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8045856:	230e      	movs	r3, #14
 8045858:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 804585a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 804585e:	4619      	mov	r1, r3
 8045860:	4828      	ldr	r0, [pc, #160]	; (8045904 <HAL_LTDC_MspInit+0x20c>)
 8045862:	f7fc f91d 	bl	8041aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8045866:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 804586a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804586c:	2302      	movs	r3, #2
 804586e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8045870:	2300      	movs	r3, #0
 8045872:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8045874:	2300      	movs	r3, #0
 8045876:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8045878:	230e      	movs	r3, #14
 804587a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 804587c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8045880:	4619      	mov	r1, r3
 8045882:	4821      	ldr	r0, [pc, #132]	; (8045908 <HAL_LTDC_MspInit+0x210>)
 8045884:	f7fc f90c 	bl	8041aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8045888:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 804588c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804588e:	2302      	movs	r3, #2
 8045890:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8045892:	2300      	movs	r3, #0
 8045894:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8045896:	2300      	movs	r3, #0
 8045898:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 804589a:	230e      	movs	r3, #14
 804589c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 804589e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80458a2:	4619      	mov	r1, r3
 80458a4:	4819      	ldr	r0, [pc, #100]	; (804590c <HAL_LTDC_MspInit+0x214>)
 80458a6:	f7fc f8fb 	bl	8041aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80458aa:	2348      	movs	r3, #72	; 0x48
 80458ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80458ae:	2302      	movs	r3, #2
 80458b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80458b2:	2300      	movs	r3, #0
 80458b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80458b6:	2300      	movs	r3, #0
 80458b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80458ba:	230e      	movs	r3, #14
 80458bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80458be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80458c2:	4619      	mov	r1, r3
 80458c4:	4812      	ldr	r0, [pc, #72]	; (8045910 <HAL_LTDC_MspInit+0x218>)
 80458c6:	f7fc f8eb 	bl	8041aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80458ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80458ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80458d0:	2302      	movs	r3, #2
 80458d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80458d4:	2300      	movs	r3, #0
 80458d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80458d8:	2300      	movs	r3, #0
 80458da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80458dc:	2309      	movs	r3, #9
 80458de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80458e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80458e4:	4619      	mov	r1, r3
 80458e6:	4808      	ldr	r0, [pc, #32]	; (8045908 <HAL_LTDC_MspInit+0x210>)
 80458e8:	f7fc f8da 	bl	8041aa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80458ec:	bf00      	nop
 80458ee:	3738      	adds	r7, #56	; 0x38
 80458f0:	46bd      	mov	sp, r7
 80458f2:	bd80      	pop	{r7, pc}
 80458f4:	40016800 	.word	0x40016800
 80458f8:	40023800 	.word	0x40023800
 80458fc:	40021400 	.word	0x40021400
 8045900:	40020000 	.word	0x40020000
 8045904:	40020400 	.word	0x40020400
 8045908:	40021800 	.word	0x40021800
 804590c:	40020800 	.word	0x40020800
 8045910:	40020c00 	.word	0x40020c00

08045914 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8045914:	b580      	push	{r7, lr}
 8045916:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8045918:	f000 fc30 	bl	804617c <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 804591c:	20ca      	movs	r0, #202	; 0xca
 804591e:	f000 f943 	bl	8045ba8 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8045922:	20c3      	movs	r0, #195	; 0xc3
 8045924:	f000 f94d 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8045928:	2008      	movs	r0, #8
 804592a:	f000 f94a 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 804592e:	2050      	movs	r0, #80	; 0x50
 8045930:	f000 f947 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8045934:	20cf      	movs	r0, #207	; 0xcf
 8045936:	f000 f937 	bl	8045ba8 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 804593a:	2000      	movs	r0, #0
 804593c:	f000 f941 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8045940:	20c1      	movs	r0, #193	; 0xc1
 8045942:	f000 f93e 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8045946:	2030      	movs	r0, #48	; 0x30
 8045948:	f000 f93b 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 804594c:	20ed      	movs	r0, #237	; 0xed
 804594e:	f000 f92b 	bl	8045ba8 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8045952:	2064      	movs	r0, #100	; 0x64
 8045954:	f000 f935 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8045958:	2003      	movs	r0, #3
 804595a:	f000 f932 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 804595e:	2012      	movs	r0, #18
 8045960:	f000 f92f 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8045964:	2081      	movs	r0, #129	; 0x81
 8045966:	f000 f92c 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 804596a:	20e8      	movs	r0, #232	; 0xe8
 804596c:	f000 f91c 	bl	8045ba8 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8045970:	2085      	movs	r0, #133	; 0x85
 8045972:	f000 f926 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8045976:	2000      	movs	r0, #0
 8045978:	f000 f923 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 804597c:	2078      	movs	r0, #120	; 0x78
 804597e:	f000 f920 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8045982:	20cb      	movs	r0, #203	; 0xcb
 8045984:	f000 f910 	bl	8045ba8 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8045988:	2039      	movs	r0, #57	; 0x39
 804598a:	f000 f91a 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 804598e:	202c      	movs	r0, #44	; 0x2c
 8045990:	f000 f917 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8045994:	2000      	movs	r0, #0
 8045996:	f000 f914 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 804599a:	2034      	movs	r0, #52	; 0x34
 804599c:	f000 f911 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 80459a0:	2002      	movs	r0, #2
 80459a2:	f000 f90e 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 80459a6:	20f7      	movs	r0, #247	; 0xf7
 80459a8:	f000 f8fe 	bl	8045ba8 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 80459ac:	2020      	movs	r0, #32
 80459ae:	f000 f908 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80459b2:	20ea      	movs	r0, #234	; 0xea
 80459b4:	f000 f8f8 	bl	8045ba8 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80459b8:	2000      	movs	r0, #0
 80459ba:	f000 f902 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80459be:	2000      	movs	r0, #0
 80459c0:	f000 f8ff 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80459c4:	20b1      	movs	r0, #177	; 0xb1
 80459c6:	f000 f8ef 	bl	8045ba8 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80459ca:	2000      	movs	r0, #0
 80459cc:	f000 f8f9 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80459d0:	201b      	movs	r0, #27
 80459d2:	f000 f8f6 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80459d6:	20b6      	movs	r0, #182	; 0xb6
 80459d8:	f000 f8e6 	bl	8045ba8 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80459dc:	200a      	movs	r0, #10
 80459de:	f000 f8f0 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80459e2:	20a2      	movs	r0, #162	; 0xa2
 80459e4:	f000 f8ed 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80459e8:	20c0      	movs	r0, #192	; 0xc0
 80459ea:	f000 f8dd 	bl	8045ba8 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80459ee:	2010      	movs	r0, #16
 80459f0:	f000 f8e7 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80459f4:	20c1      	movs	r0, #193	; 0xc1
 80459f6:	f000 f8d7 	bl	8045ba8 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80459fa:	2010      	movs	r0, #16
 80459fc:	f000 f8e1 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8045a00:	20c5      	movs	r0, #197	; 0xc5
 8045a02:	f000 f8d1 	bl	8045ba8 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8045a06:	2045      	movs	r0, #69	; 0x45
 8045a08:	f000 f8db 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8045a0c:	2015      	movs	r0, #21
 8045a0e:	f000 f8d8 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8045a12:	20c7      	movs	r0, #199	; 0xc7
 8045a14:	f000 f8c8 	bl	8045ba8 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8045a18:	2090      	movs	r0, #144	; 0x90
 8045a1a:	f000 f8d2 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8045a1e:	2036      	movs	r0, #54	; 0x36
 8045a20:	f000 f8c2 	bl	8045ba8 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8045a24:	20c8      	movs	r0, #200	; 0xc8
 8045a26:	f000 f8cc 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8045a2a:	20f2      	movs	r0, #242	; 0xf2
 8045a2c:	f000 f8bc 	bl	8045ba8 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8045a30:	2000      	movs	r0, #0
 8045a32:	f000 f8c6 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8045a36:	20b0      	movs	r0, #176	; 0xb0
 8045a38:	f000 f8b6 	bl	8045ba8 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8045a3c:	20c2      	movs	r0, #194	; 0xc2
 8045a3e:	f000 f8c0 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8045a42:	20b6      	movs	r0, #182	; 0xb6
 8045a44:	f000 f8b0 	bl	8045ba8 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8045a48:	200a      	movs	r0, #10
 8045a4a:	f000 f8ba 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8045a4e:	20a7      	movs	r0, #167	; 0xa7
 8045a50:	f000 f8b7 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8045a54:	2027      	movs	r0, #39	; 0x27
 8045a56:	f000 f8b4 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8045a5a:	2004      	movs	r0, #4
 8045a5c:	f000 f8b1 	bl	8045bc2 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8045a60:	202a      	movs	r0, #42	; 0x2a
 8045a62:	f000 f8a1 	bl	8045ba8 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8045a66:	2000      	movs	r0, #0
 8045a68:	f000 f8ab 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8045a6c:	2000      	movs	r0, #0
 8045a6e:	f000 f8a8 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8045a72:	2000      	movs	r0, #0
 8045a74:	f000 f8a5 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8045a78:	20ef      	movs	r0, #239	; 0xef
 8045a7a:	f000 f8a2 	bl	8045bc2 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8045a7e:	202b      	movs	r0, #43	; 0x2b
 8045a80:	f000 f892 	bl	8045ba8 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8045a84:	2000      	movs	r0, #0
 8045a86:	f000 f89c 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8045a8a:	2000      	movs	r0, #0
 8045a8c:	f000 f899 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8045a90:	2001      	movs	r0, #1
 8045a92:	f000 f896 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8045a96:	203f      	movs	r0, #63	; 0x3f
 8045a98:	f000 f893 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8045a9c:	20f6      	movs	r0, #246	; 0xf6
 8045a9e:	f000 f883 	bl	8045ba8 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8045aa2:	2001      	movs	r0, #1
 8045aa4:	f000 f88d 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8045aa8:	2000      	movs	r0, #0
 8045aaa:	f000 f88a 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8045aae:	2006      	movs	r0, #6
 8045ab0:	f000 f887 	bl	8045bc2 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8045ab4:	202c      	movs	r0, #44	; 0x2c
 8045ab6:	f000 f877 	bl	8045ba8 <ili9341_WriteReg>
  LCD_Delay(200);
 8045aba:	20c8      	movs	r0, #200	; 0xc8
 8045abc:	f000 fc1a 	bl	80462f4 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8045ac0:	2026      	movs	r0, #38	; 0x26
 8045ac2:	f000 f871 	bl	8045ba8 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8045ac6:	2001      	movs	r0, #1
 8045ac8:	f000 f87b 	bl	8045bc2 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8045acc:	20e0      	movs	r0, #224	; 0xe0
 8045ace:	f000 f86b 	bl	8045ba8 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8045ad2:	200f      	movs	r0, #15
 8045ad4:	f000 f875 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8045ad8:	2029      	movs	r0, #41	; 0x29
 8045ada:	f000 f872 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8045ade:	2024      	movs	r0, #36	; 0x24
 8045ae0:	f000 f86f 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8045ae4:	200c      	movs	r0, #12
 8045ae6:	f000 f86c 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8045aea:	200e      	movs	r0, #14
 8045aec:	f000 f869 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8045af0:	2009      	movs	r0, #9
 8045af2:	f000 f866 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8045af6:	204e      	movs	r0, #78	; 0x4e
 8045af8:	f000 f863 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8045afc:	2078      	movs	r0, #120	; 0x78
 8045afe:	f000 f860 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8045b02:	203c      	movs	r0, #60	; 0x3c
 8045b04:	f000 f85d 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8045b08:	2009      	movs	r0, #9
 8045b0a:	f000 f85a 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8045b0e:	2013      	movs	r0, #19
 8045b10:	f000 f857 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8045b14:	2005      	movs	r0, #5
 8045b16:	f000 f854 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8045b1a:	2017      	movs	r0, #23
 8045b1c:	f000 f851 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8045b20:	2011      	movs	r0, #17
 8045b22:	f000 f84e 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8045b26:	2000      	movs	r0, #0
 8045b28:	f000 f84b 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8045b2c:	20e1      	movs	r0, #225	; 0xe1
 8045b2e:	f000 f83b 	bl	8045ba8 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8045b32:	2000      	movs	r0, #0
 8045b34:	f000 f845 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8045b38:	2016      	movs	r0, #22
 8045b3a:	f000 f842 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8045b3e:	201b      	movs	r0, #27
 8045b40:	f000 f83f 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8045b44:	2004      	movs	r0, #4
 8045b46:	f000 f83c 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8045b4a:	2011      	movs	r0, #17
 8045b4c:	f000 f839 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8045b50:	2007      	movs	r0, #7
 8045b52:	f000 f836 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8045b56:	2031      	movs	r0, #49	; 0x31
 8045b58:	f000 f833 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8045b5c:	2033      	movs	r0, #51	; 0x33
 8045b5e:	f000 f830 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8045b62:	2042      	movs	r0, #66	; 0x42
 8045b64:	f000 f82d 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8045b68:	2005      	movs	r0, #5
 8045b6a:	f000 f82a 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8045b6e:	200c      	movs	r0, #12
 8045b70:	f000 f827 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8045b74:	200a      	movs	r0, #10
 8045b76:	f000 f824 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8045b7a:	2028      	movs	r0, #40	; 0x28
 8045b7c:	f000 f821 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8045b80:	202f      	movs	r0, #47	; 0x2f
 8045b82:	f000 f81e 	bl	8045bc2 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8045b86:	200f      	movs	r0, #15
 8045b88:	f000 f81b 	bl	8045bc2 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8045b8c:	2011      	movs	r0, #17
 8045b8e:	f000 f80b 	bl	8045ba8 <ili9341_WriteReg>
  LCD_Delay(200);
 8045b92:	20c8      	movs	r0, #200	; 0xc8
 8045b94:	f000 fbae 	bl	80462f4 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8045b98:	2029      	movs	r0, #41	; 0x29
 8045b9a:	f000 f805 	bl	8045ba8 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8045b9e:	202c      	movs	r0, #44	; 0x2c
 8045ba0:	f000 f802 	bl	8045ba8 <ili9341_WriteReg>
}
 8045ba4:	bf00      	nop
 8045ba6:	bd80      	pop	{r7, pc}

08045ba8 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8045ba8:	b580      	push	{r7, lr}
 8045baa:	b082      	sub	sp, #8
 8045bac:	af00      	add	r7, sp, #0
 8045bae:	4603      	mov	r3, r0
 8045bb0:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8045bb2:	79fb      	ldrb	r3, [r7, #7]
 8045bb4:	4618      	mov	r0, r3
 8045bb6:	f000 fb7b 	bl	80462b0 <LCD_IO_WriteReg>
}
 8045bba:	bf00      	nop
 8045bbc:	3708      	adds	r7, #8
 8045bbe:	46bd      	mov	sp, r7
 8045bc0:	bd80      	pop	{r7, pc}

08045bc2 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8045bc2:	b580      	push	{r7, lr}
 8045bc4:	b082      	sub	sp, #8
 8045bc6:	af00      	add	r7, sp, #0
 8045bc8:	4603      	mov	r3, r0
 8045bca:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8045bcc:	88fb      	ldrh	r3, [r7, #6]
 8045bce:	4618      	mov	r0, r3
 8045bd0:	f000 fb4c 	bl	804626c <LCD_IO_WriteData>
}
 8045bd4:	bf00      	nop
 8045bd6:	3708      	adds	r7, #8
 8045bd8:	46bd      	mov	sp, r7
 8045bda:	bd80      	pop	{r7, pc}

08045bdc <MCU_Init>:
*  Configures specific hardware.
*
**/
/******************************************************************************/
void MCU_Init( void )
{
 8045bdc:	b580      	push	{r7, lr}
 8045bde:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	  HAL_Init();
 8045be0:	f7fb f96c 	bl	8040ebc <HAL_Init>
	  MX_GPIO_Init();
 8045be4:	f000 f8c4 	bl	8045d70 <MX_GPIO_Init>

	/* Configure the system clock */
	  SystemClock_Config();
 8045be8:	f000 f808 	bl	8045bfc <SystemClock_Config>
	  MX_RNG_Init() ;
 8045bec:	f000 f8ac 	bl	8045d48 <MX_RNG_Init>
	  //MX_USART1_UART_Init();
	  MX_SPI4_Init();
 8045bf0:	f000 f874 	bl	8045cdc <MX_SPI4_Init>
	  Init_TrigoTables() ;
 8045bf4:	f001 faa2 	bl	804713c <Init_TrigoTables>
}
 8045bf8:	bf00      	nop
 8045bfa:	bd80      	pop	{r7, pc}

08045bfc <SystemClock_Config>:
#endif


#if 1  // 180 Mhz
static void SystemClock_Config(void)
{
 8045bfc:	b580      	push	{r7, lr}
 8045bfe:	b094      	sub	sp, #80	; 0x50
 8045c00:	af00      	add	r7, sp, #0

   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8045c02:	f107 0320 	add.w	r3, r7, #32
 8045c06:	2230      	movs	r2, #48	; 0x30
 8045c08:	2100      	movs	r1, #0
 8045c0a:	4618      	mov	r0, r3
 8045c0c:	f002 fd3e 	bl	804868c <memset>
   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8045c10:	f107 030c 	add.w	r3, r7, #12
 8045c14:	2200      	movs	r2, #0
 8045c16:	601a      	str	r2, [r3, #0]
 8045c18:	605a      	str	r2, [r3, #4]
 8045c1a:	609a      	str	r2, [r3, #8]
 8045c1c:	60da      	str	r2, [r3, #12]
 8045c1e:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
    */
    __HAL_RCC_PWR_CLK_ENABLE();
 8045c20:	2300      	movs	r3, #0
 8045c22:	60bb      	str	r3, [r7, #8]
 8045c24:	4b2b      	ldr	r3, [pc, #172]	; (8045cd4 <SystemClock_Config+0xd8>)
 8045c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8045c28:	4a2a      	ldr	r2, [pc, #168]	; (8045cd4 <SystemClock_Config+0xd8>)
 8045c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8045c2e:	6413      	str	r3, [r2, #64]	; 0x40
 8045c30:	4b28      	ldr	r3, [pc, #160]	; (8045cd4 <SystemClock_Config+0xd8>)
 8045c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8045c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8045c38:	60bb      	str	r3, [r7, #8]
 8045c3a:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8045c3c:	2300      	movs	r3, #0
 8045c3e:	607b      	str	r3, [r7, #4]
 8045c40:	4b25      	ldr	r3, [pc, #148]	; (8045cd8 <SystemClock_Config+0xdc>)
 8045c42:	681b      	ldr	r3, [r3, #0]
 8045c44:	4a24      	ldr	r2, [pc, #144]	; (8045cd8 <SystemClock_Config+0xdc>)
 8045c46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8045c4a:	6013      	str	r3, [r2, #0]
 8045c4c:	4b22      	ldr	r3, [pc, #136]	; (8045cd8 <SystemClock_Config+0xdc>)
 8045c4e:	681b      	ldr	r3, [r3, #0]
 8045c50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8045c54:	607b      	str	r3, [r7, #4]
 8045c56:	687b      	ldr	r3, [r7, #4]
    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8045c58:	2301      	movs	r3, #1
 8045c5a:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8045c5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8045c60:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8045c62:	2302      	movs	r3, #2
 8045c64:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8045c66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8045c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 4;
 8045c6c:	2304      	movs	r3, #4
 8045c6e:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 180;
 8045c70:	23b4      	movs	r3, #180	; 0xb4
 8045c72:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8045c74:	2302      	movs	r3, #2
 8045c76:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 3;
 8045c78:	2303      	movs	r3, #3
 8045c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8045c7c:	f107 0320 	add.w	r3, r7, #32
 8045c80:	4618      	mov	r0, r3
 8045c82:	f7fd fd69 	bl	8043758 <HAL_RCC_OscConfig>
 8045c86:	4603      	mov	r3, r0
 8045c88:	2b00      	cmp	r3, #0
 8045c8a:	d001      	beq.n	8045c90 <SystemClock_Config+0x94>
    {
      Error_Handler();
 8045c8c:	f000 f89c 	bl	8045dc8 <Error_Handler>
    }
    /** Activate the Over-Drive mode
    */
    if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8045c90:	f7fd fd12 	bl	80436b8 <HAL_PWREx_EnableOverDrive>
 8045c94:	4603      	mov	r3, r0
 8045c96:	2b00      	cmp	r3, #0
 8045c98:	d001      	beq.n	8045c9e <SystemClock_Config+0xa2>
    {
      Error_Handler();
 8045c9a:	f000 f895 	bl	8045dc8 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8045c9e:	230f      	movs	r3, #15
 8045ca0:	60fb      	str	r3, [r7, #12]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8045ca2:	2302      	movs	r3, #2
 8045ca4:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8045ca6:	2300      	movs	r3, #0
 8045ca8:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8045caa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8045cae:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8045cb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8045cb4:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8045cb6:	f107 030c 	add.w	r3, r7, #12
 8045cba:	2105      	movs	r1, #5
 8045cbc:	4618      	mov	r0, r3
 8045cbe:	f7fd ffb9 	bl	8043c34 <HAL_RCC_ClockConfig>
 8045cc2:	4603      	mov	r3, r0
 8045cc4:	2b00      	cmp	r3, #0
 8045cc6:	d001      	beq.n	8045ccc <SystemClock_Config+0xd0>
    {
      Error_Handler();
 8045cc8:	f000 f87e 	bl	8045dc8 <Error_Handler>
    }


}
 8045ccc:	bf00      	nop
 8045cce:	3750      	adds	r7, #80	; 0x50
 8045cd0:	46bd      	mov	sp, r7
 8045cd2:	bd80      	pop	{r7, pc}
 8045cd4:	40023800 	.word	0x40023800
 8045cd8:	40007000 	.word	0x40007000

08045cdc <MX_SPI4_Init>:
    Error_Handler();
  }
}

static void MX_SPI4_Init(void)
{
 8045cdc:	b580      	push	{r7, lr}
 8045cde:	af00      	add	r7, sp, #0
  hspi4.Instance = SPI4;
 8045ce0:	4b17      	ldr	r3, [pc, #92]	; (8045d40 <MX_SPI4_Init+0x64>)
 8045ce2:	4a18      	ldr	r2, [pc, #96]	; (8045d44 <MX_SPI4_Init+0x68>)
 8045ce4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8045ce6:	4b16      	ldr	r3, [pc, #88]	; (8045d40 <MX_SPI4_Init+0x64>)
 8045ce8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8045cec:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8045cee:	4b14      	ldr	r3, [pc, #80]	; (8045d40 <MX_SPI4_Init+0x64>)
 8045cf0:	2200      	movs	r2, #0
 8045cf2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8045cf4:	4b12      	ldr	r3, [pc, #72]	; (8045d40 <MX_SPI4_Init+0x64>)
 8045cf6:	2200      	movs	r2, #0
 8045cf8:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8045cfa:	4b11      	ldr	r3, [pc, #68]	; (8045d40 <MX_SPI4_Init+0x64>)
 8045cfc:	2200      	movs	r2, #0
 8045cfe:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8045d00:	4b0f      	ldr	r3, [pc, #60]	; (8045d40 <MX_SPI4_Init+0x64>)
 8045d02:	2200      	movs	r2, #0
 8045d04:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8045d06:	4b0e      	ldr	r3, [pc, #56]	; (8045d40 <MX_SPI4_Init+0x64>)
 8045d08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8045d0c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;  // SPI baud rate should be less than 12Mbps
 8045d0e:	4b0c      	ldr	r3, [pc, #48]	; (8045d40 <MX_SPI4_Init+0x64>)
 8045d10:	2210      	movs	r2, #16
 8045d12:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8045d14:	4b0a      	ldr	r3, [pc, #40]	; (8045d40 <MX_SPI4_Init+0x64>)
 8045d16:	2200      	movs	r2, #0
 8045d18:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8045d1a:	4b09      	ldr	r3, [pc, #36]	; (8045d40 <MX_SPI4_Init+0x64>)
 8045d1c:	2200      	movs	r2, #0
 8045d1e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8045d20:	4b07      	ldr	r3, [pc, #28]	; (8045d40 <MX_SPI4_Init+0x64>)
 8045d22:	2200      	movs	r2, #0
 8045d24:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8045d26:	4b06      	ldr	r3, [pc, #24]	; (8045d40 <MX_SPI4_Init+0x64>)
 8045d28:	220a      	movs	r2, #10
 8045d2a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8045d2c:	4804      	ldr	r0, [pc, #16]	; (8045d40 <MX_SPI4_Init+0x64>)
 8045d2e:	f7fe fc4f 	bl	80445d0 <HAL_SPI_Init>
 8045d32:	4603      	mov	r3, r0
 8045d34:	2b00      	cmp	r3, #0
 8045d36:	d001      	beq.n	8045d3c <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8045d38:	f000 f846 	bl	8045dc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8045d3c:	bf00      	nop
 8045d3e:	bd80      	pop	{r7, pc}
 8045d40:	200001cc 	.word	0x200001cc
 8045d44:	40013400 	.word	0x40013400

08045d48 <MX_RNG_Init>:
{
	HAL_SPI_MspDeInit(&hspi4) ;
	//HAL_SPI_MspDeInit(&hspi5) ;
}
static void MX_RNG_Init(void)
{
 8045d48:	b580      	push	{r7, lr}
 8045d4a:	af00      	add	r7, sp, #0
  hrng.Instance = RNG;
 8045d4c:	4b06      	ldr	r3, [pc, #24]	; (8045d68 <MX_RNG_Init+0x20>)
 8045d4e:	4a07      	ldr	r2, [pc, #28]	; (8045d6c <MX_RNG_Init+0x24>)
 8045d50:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8045d52:	4805      	ldr	r0, [pc, #20]	; (8045d68 <MX_RNG_Init+0x20>)
 8045d54:	f7fe fb3a 	bl	80443cc <HAL_RNG_Init>
 8045d58:	4603      	mov	r3, r0
 8045d5a:	2b00      	cmp	r3, #0
 8045d5c:	d001      	beq.n	8045d62 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8045d5e:	f000 f833 	bl	8045dc8 <Error_Handler>
  }

}
 8045d62:	bf00      	nop
 8045d64:	bd80      	pop	{r7, pc}
 8045d66:	bf00      	nop
 8045d68:	20000224 	.word	0x20000224
 8045d6c:	50060800 	.word	0x50060800

08045d70 <MX_GPIO_Init>:
#if 1
static void MX_GPIO_Init(void)
{
 8045d70:	b580      	push	{r7, lr}
 8045d72:	b086      	sub	sp, #24
 8045d74:	af00      	add	r7, sp, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH   ;

	HAL_GPIO_Init(LED3_GPIO_PORT, &GPIO_InitStruct);
#endif

	__HAL_RCC_GPIOE_CLK_ENABLE();
 8045d76:	2300      	movs	r3, #0
 8045d78:	603b      	str	r3, [r7, #0]
 8045d7a:	4b11      	ldr	r3, [pc, #68]	; (8045dc0 <MX_GPIO_Init+0x50>)
 8045d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8045d7e:	4a10      	ldr	r2, [pc, #64]	; (8045dc0 <MX_GPIO_Init+0x50>)
 8045d80:	f043 0310 	orr.w	r3, r3, #16
 8045d84:	6313      	str	r3, [r2, #48]	; 0x30
 8045d86:	4b0e      	ldr	r3, [pc, #56]	; (8045dc0 <MX_GPIO_Init+0x50>)
 8045d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8045d8a:	f003 0310 	and.w	r3, r3, #16
 8045d8e:	603b      	str	r3, [r7, #0]
 8045d90:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8045d92:	2200      	movs	r2, #0
 8045d94:	2108      	movs	r1, #8
 8045d96:	480b      	ldr	r0, [pc, #44]	; (8045dc4 <MX_GPIO_Init+0x54>)
 8045d98:	f7fc f952 	bl	8042040 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PE3 */
	  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8045d9c:	2308      	movs	r3, #8
 8045d9e:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8045da0:	2301      	movs	r3, #1
 8045da2:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8045da4:	2300      	movs	r3, #0
 8045da6:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8045da8:	2300      	movs	r3, #0
 8045daa:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8045dac:	1d3b      	adds	r3, r7, #4
 8045dae:	4619      	mov	r1, r3
 8045db0:	4804      	ldr	r0, [pc, #16]	; (8045dc4 <MX_GPIO_Init+0x54>)
 8045db2:	f7fb fe75 	bl	8041aa0 <HAL_GPIO_Init>
}
 8045db6:	bf00      	nop
 8045db8:	3718      	adds	r7, #24
 8045dba:	46bd      	mov	sp, r7
 8045dbc:	bd80      	pop	{r7, pc}
 8045dbe:	bf00      	nop
 8045dc0:	40023800 	.word	0x40023800
 8045dc4:	40021000 	.word	0x40021000

08045dc8 <Error_Handler>:

void Error_Handler(void)
{
 8045dc8:	b480      	push	{r7}
 8045dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	while(1)
 8045dcc:	e7fe      	b.n	8045dcc <Error_Handler+0x4>
	...

08045dd0 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8045dd0:	b580      	push	{r7, lr}
 8045dd2:	b08a      	sub	sp, #40	; 0x28
 8045dd4:	af00      	add	r7, sp, #0
 8045dd6:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8045dd8:	687b      	ldr	r3, [r7, #4]
 8045dda:	681b      	ldr	r3, [r3, #0]
 8045ddc:	4a33      	ldr	r2, [pc, #204]	; (8045eac <I2Cx_MspInit+0xdc>)
 8045dde:	4293      	cmp	r3, r2
 8045de0:	d15f      	bne.n	8045ea2 <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8045de2:	2300      	movs	r3, #0
 8045de4:	613b      	str	r3, [r7, #16]
 8045de6:	4b32      	ldr	r3, [pc, #200]	; (8045eb0 <I2Cx_MspInit+0xe0>)
 8045de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8045dea:	4a31      	ldr	r2, [pc, #196]	; (8045eb0 <I2Cx_MspInit+0xe0>)
 8045dec:	f043 0304 	orr.w	r3, r3, #4
 8045df0:	6313      	str	r3, [r2, #48]	; 0x30
 8045df2:	4b2f      	ldr	r3, [pc, #188]	; (8045eb0 <I2Cx_MspInit+0xe0>)
 8045df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8045df6:	f003 0304 	and.w	r3, r3, #4
 8045dfa:	613b      	str	r3, [r7, #16]
 8045dfc:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8045dfe:	2300      	movs	r3, #0
 8045e00:	60fb      	str	r3, [r7, #12]
 8045e02:	4b2b      	ldr	r3, [pc, #172]	; (8045eb0 <I2Cx_MspInit+0xe0>)
 8045e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8045e06:	4a2a      	ldr	r2, [pc, #168]	; (8045eb0 <I2Cx_MspInit+0xe0>)
 8045e08:	f043 0301 	orr.w	r3, r3, #1
 8045e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8045e0e:	4b28      	ldr	r3, [pc, #160]	; (8045eb0 <I2Cx_MspInit+0xe0>)
 8045e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8045e12:	f003 0301 	and.w	r3, r3, #1
 8045e16:	60fb      	str	r3, [r7, #12]
 8045e18:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8045e1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8045e1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8045e20:	2312      	movs	r3, #18
 8045e22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8045e24:	2300      	movs	r3, #0
 8045e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8045e28:	2302      	movs	r3, #2
 8045e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8045e2c:	2304      	movs	r3, #4
 8045e2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8045e30:	f107 0314 	add.w	r3, r7, #20
 8045e34:	4619      	mov	r1, r3
 8045e36:	481f      	ldr	r0, [pc, #124]	; (8045eb4 <I2Cx_MspInit+0xe4>)
 8045e38:	f7fb fe32 	bl	8041aa0 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8045e3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8045e40:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8045e42:	f107 0314 	add.w	r3, r7, #20
 8045e46:	4619      	mov	r1, r3
 8045e48:	481b      	ldr	r0, [pc, #108]	; (8045eb8 <I2Cx_MspInit+0xe8>)
 8045e4a:	f7fb fe29 	bl	8041aa0 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8045e4e:	2300      	movs	r3, #0
 8045e50:	60bb      	str	r3, [r7, #8]
 8045e52:	4b17      	ldr	r3, [pc, #92]	; (8045eb0 <I2Cx_MspInit+0xe0>)
 8045e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8045e56:	4a16      	ldr	r2, [pc, #88]	; (8045eb0 <I2Cx_MspInit+0xe0>)
 8045e58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8045e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8045e5e:	4b14      	ldr	r3, [pc, #80]	; (8045eb0 <I2Cx_MspInit+0xe0>)
 8045e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8045e62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8045e66:	60bb      	str	r3, [r7, #8]
 8045e68:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 8045e6a:	4b11      	ldr	r3, [pc, #68]	; (8045eb0 <I2Cx_MspInit+0xe0>)
 8045e6c:	6a1b      	ldr	r3, [r3, #32]
 8045e6e:	4a10      	ldr	r2, [pc, #64]	; (8045eb0 <I2Cx_MspInit+0xe0>)
 8045e70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8045e74:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 8045e76:	4b0e      	ldr	r3, [pc, #56]	; (8045eb0 <I2Cx_MspInit+0xe0>)
 8045e78:	6a1b      	ldr	r3, [r3, #32]
 8045e7a:	4a0d      	ldr	r2, [pc, #52]	; (8045eb0 <I2Cx_MspInit+0xe0>)
 8045e7c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8045e80:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8045e82:	2200      	movs	r2, #0
 8045e84:	210f      	movs	r1, #15
 8045e86:	2048      	movs	r0, #72	; 0x48
 8045e88:	f7fb f989 	bl	804119e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8045e8c:	2048      	movs	r0, #72	; 0x48
 8045e8e:	f7fb f9a2 	bl	80411d6 <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8045e92:	2200      	movs	r2, #0
 8045e94:	210f      	movs	r1, #15
 8045e96:	2049      	movs	r0, #73	; 0x49
 8045e98:	f7fb f981 	bl	804119e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 8045e9c:	2049      	movs	r0, #73	; 0x49
 8045e9e:	f7fb f99a 	bl	80411d6 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 8045ea2:	bf00      	nop
 8045ea4:	3728      	adds	r7, #40	; 0x28
 8045ea6:	46bd      	mov	sp, r7
 8045ea8:	bd80      	pop	{r7, pc}
 8045eaa:	bf00      	nop
 8045eac:	40005c00 	.word	0x40005c00
 8045eb0:	40023800 	.word	0x40023800
 8045eb4:	40020000 	.word	0x40020000
 8045eb8:	40020800 	.word	0x40020800

08045ebc <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8045ebc:	b580      	push	{r7, lr}
 8045ebe:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8045ec0:	4814      	ldr	r0, [pc, #80]	; (8045f14 <I2Cx_Init+0x58>)
 8045ec2:	f7fc fd75 	bl	80429b0 <HAL_I2C_GetState>
 8045ec6:	4603      	mov	r3, r0
 8045ec8:	2b00      	cmp	r3, #0
 8045eca:	d121      	bne.n	8045f10 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8045ecc:	4b11      	ldr	r3, [pc, #68]	; (8045f14 <I2Cx_Init+0x58>)
 8045ece:	4a12      	ldr	r2, [pc, #72]	; (8045f18 <I2Cx_Init+0x5c>)
 8045ed0:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8045ed2:	4b10      	ldr	r3, [pc, #64]	; (8045f14 <I2Cx_Init+0x58>)
 8045ed4:	4a11      	ldr	r2, [pc, #68]	; (8045f1c <I2Cx_Init+0x60>)
 8045ed6:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8045ed8:	4b0e      	ldr	r3, [pc, #56]	; (8045f14 <I2Cx_Init+0x58>)
 8045eda:	2200      	movs	r2, #0
 8045edc:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 8045ede:	4b0d      	ldr	r3, [pc, #52]	; (8045f14 <I2Cx_Init+0x58>)
 8045ee0:	2200      	movs	r2, #0
 8045ee2:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8045ee4:	4b0b      	ldr	r3, [pc, #44]	; (8045f14 <I2Cx_Init+0x58>)
 8045ee6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8045eea:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8045eec:	4b09      	ldr	r3, [pc, #36]	; (8045f14 <I2Cx_Init+0x58>)
 8045eee:	2200      	movs	r2, #0
 8045ef0:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 8045ef2:	4b08      	ldr	r3, [pc, #32]	; (8045f14 <I2Cx_Init+0x58>)
 8045ef4:	2200      	movs	r2, #0
 8045ef6:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8045ef8:	4b06      	ldr	r3, [pc, #24]	; (8045f14 <I2Cx_Init+0x58>)
 8045efa:	2200      	movs	r2, #0
 8045efc:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8045efe:	4b05      	ldr	r3, [pc, #20]	; (8045f14 <I2Cx_Init+0x58>)
 8045f00:	2200      	movs	r2, #0
 8045f02:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8045f04:	4803      	ldr	r0, [pc, #12]	; (8045f14 <I2Cx_Init+0x58>)
 8045f06:	f7ff ff63 	bl	8045dd0 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8045f0a:	4802      	ldr	r0, [pc, #8]	; (8045f14 <I2Cx_Init+0x58>)
 8045f0c:	f7fc f8b2 	bl	8042074 <HAL_I2C_Init>
  }
}
 8045f10:	bf00      	nop
 8045f12:	bd80      	pop	{r7, pc}
 8045f14:	20000234 	.word	0x20000234
 8045f18:	40005c00 	.word	0x40005c00
 8045f1c:	000186a0 	.word	0x000186a0

08045f20 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 8045f20:	b580      	push	{r7, lr}
 8045f22:	b088      	sub	sp, #32
 8045f24:	af04      	add	r7, sp, #16
 8045f26:	4603      	mov	r3, r0
 8045f28:	71fb      	strb	r3, [r7, #7]
 8045f2a:	460b      	mov	r3, r1
 8045f2c:	71bb      	strb	r3, [r7, #6]
 8045f2e:	4613      	mov	r3, r2
 8045f30:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8045f32:	2300      	movs	r3, #0
 8045f34:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8045f36:	79fb      	ldrb	r3, [r7, #7]
 8045f38:	b299      	uxth	r1, r3
 8045f3a:	79bb      	ldrb	r3, [r7, #6]
 8045f3c:	b29a      	uxth	r2, r3
 8045f3e:	4b0b      	ldr	r3, [pc, #44]	; (8045f6c <I2Cx_WriteData+0x4c>)
 8045f40:	681b      	ldr	r3, [r3, #0]
 8045f42:	9302      	str	r3, [sp, #8]
 8045f44:	2301      	movs	r3, #1
 8045f46:	9301      	str	r3, [sp, #4]
 8045f48:	1d7b      	adds	r3, r7, #5
 8045f4a:	9300      	str	r3, [sp, #0]
 8045f4c:	2301      	movs	r3, #1
 8045f4e:	4808      	ldr	r0, [pc, #32]	; (8045f70 <I2Cx_WriteData+0x50>)
 8045f50:	f7fc fa0e 	bl	8042370 <HAL_I2C_Mem_Write>
 8045f54:	4603      	mov	r3, r0
 8045f56:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8045f58:	7bfb      	ldrb	r3, [r7, #15]
 8045f5a:	2b00      	cmp	r3, #0
 8045f5c:	d001      	beq.n	8045f62 <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8045f5e:	f000 f863 	bl	8046028 <I2Cx_Error>
  }        
}
 8045f62:	bf00      	nop
 8045f64:	3710      	adds	r7, #16
 8045f66:	46bd      	mov	sp, r7
 8045f68:	bd80      	pop	{r7, pc}
 8045f6a:	bf00      	nop
 8045f6c:	20000008 	.word	0x20000008
 8045f70:	20000234 	.word	0x20000234

08045f74 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8045f74:	b580      	push	{r7, lr}
 8045f76:	b088      	sub	sp, #32
 8045f78:	af04      	add	r7, sp, #16
 8045f7a:	4603      	mov	r3, r0
 8045f7c:	460a      	mov	r2, r1
 8045f7e:	71fb      	strb	r3, [r7, #7]
 8045f80:	4613      	mov	r3, r2
 8045f82:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8045f84:	2300      	movs	r3, #0
 8045f86:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8045f88:	2300      	movs	r3, #0
 8045f8a:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8045f8c:	79fb      	ldrb	r3, [r7, #7]
 8045f8e:	b299      	uxth	r1, r3
 8045f90:	79bb      	ldrb	r3, [r7, #6]
 8045f92:	b29a      	uxth	r2, r3
 8045f94:	4b0b      	ldr	r3, [pc, #44]	; (8045fc4 <I2Cx_ReadData+0x50>)
 8045f96:	681b      	ldr	r3, [r3, #0]
 8045f98:	9302      	str	r3, [sp, #8]
 8045f9a:	2301      	movs	r3, #1
 8045f9c:	9301      	str	r3, [sp, #4]
 8045f9e:	f107 030e 	add.w	r3, r7, #14
 8045fa2:	9300      	str	r3, [sp, #0]
 8045fa4:	2301      	movs	r3, #1
 8045fa6:	4808      	ldr	r0, [pc, #32]	; (8045fc8 <I2Cx_ReadData+0x54>)
 8045fa8:	f7fc fadc 	bl	8042564 <HAL_I2C_Mem_Read>
 8045fac:	4603      	mov	r3, r0
 8045fae:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8045fb0:	7bfb      	ldrb	r3, [r7, #15]
 8045fb2:	2b00      	cmp	r3, #0
 8045fb4:	d001      	beq.n	8045fba <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8045fb6:	f000 f837 	bl	8046028 <I2Cx_Error>
  
  }
  return value;
 8045fba:	7bbb      	ldrb	r3, [r7, #14]
}
 8045fbc:	4618      	mov	r0, r3
 8045fbe:	3710      	adds	r7, #16
 8045fc0:	46bd      	mov	sp, r7
 8045fc2:	bd80      	pop	{r7, pc}
 8045fc4:	20000008 	.word	0x20000008
 8045fc8:	20000234 	.word	0x20000234

08045fcc <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8045fcc:	b580      	push	{r7, lr}
 8045fce:	b088      	sub	sp, #32
 8045fd0:	af04      	add	r7, sp, #16
 8045fd2:	603a      	str	r2, [r7, #0]
 8045fd4:	461a      	mov	r2, r3
 8045fd6:	4603      	mov	r3, r0
 8045fd8:	71fb      	strb	r3, [r7, #7]
 8045fda:	460b      	mov	r3, r1
 8045fdc:	71bb      	strb	r3, [r7, #6]
 8045fde:	4613      	mov	r3, r2
 8045fe0:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8045fe2:	2300      	movs	r3, #0
 8045fe4:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8045fe6:	79fb      	ldrb	r3, [r7, #7]
 8045fe8:	b299      	uxth	r1, r3
 8045fea:	79bb      	ldrb	r3, [r7, #6]
 8045fec:	b29a      	uxth	r2, r3
 8045fee:	4b0c      	ldr	r3, [pc, #48]	; (8046020 <I2Cx_ReadBuffer+0x54>)
 8045ff0:	681b      	ldr	r3, [r3, #0]
 8045ff2:	9302      	str	r3, [sp, #8]
 8045ff4:	88bb      	ldrh	r3, [r7, #4]
 8045ff6:	9301      	str	r3, [sp, #4]
 8045ff8:	683b      	ldr	r3, [r7, #0]
 8045ffa:	9300      	str	r3, [sp, #0]
 8045ffc:	2301      	movs	r3, #1
 8045ffe:	4809      	ldr	r0, [pc, #36]	; (8046024 <I2Cx_ReadBuffer+0x58>)
 8046000:	f7fc fab0 	bl	8042564 <HAL_I2C_Mem_Read>
 8046004:	4603      	mov	r3, r0
 8046006:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 8046008:	7bfb      	ldrb	r3, [r7, #15]
 804600a:	2b00      	cmp	r3, #0
 804600c:	d101      	bne.n	8046012 <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 804600e:	2300      	movs	r3, #0
 8046010:	e002      	b.n	8046018 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8046012:	f000 f809 	bl	8046028 <I2Cx_Error>

    return 1;
 8046016:	2301      	movs	r3, #1
  }
}
 8046018:	4618      	mov	r0, r3
 804601a:	3710      	adds	r7, #16
 804601c:	46bd      	mov	sp, r7
 804601e:	bd80      	pop	{r7, pc}
 8046020:	20000008 	.word	0x20000008
 8046024:	20000234 	.word	0x20000234

08046028 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8046028:	b580      	push	{r7, lr}
 804602a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 804602c:	4803      	ldr	r0, [pc, #12]	; (804603c <I2Cx_Error+0x14>)
 804602e:	f7fc f965 	bl	80422fc <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 8046032:	f7ff ff43 	bl	8045ebc <I2Cx_Init>
}
 8046036:	bf00      	nop
 8046038:	bd80      	pop	{r7, pc}
 804603a:	bf00      	nop
 804603c:	20000234 	.word	0x20000234

08046040 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8046040:	b580      	push	{r7, lr}
 8046042:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8046044:	4819      	ldr	r0, [pc, #100]	; (80460ac <SPIx_Init+0x6c>)
 8046046:	f7fe fc83 	bl	8044950 <HAL_SPI_GetState>
 804604a:	4603      	mov	r3, r0
 804604c:	2b00      	cmp	r3, #0
 804604e:	d12b      	bne.n	80460a8 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8046050:	4b16      	ldr	r3, [pc, #88]	; (80460ac <SPIx_Init+0x6c>)
 8046052:	4a17      	ldr	r2, [pc, #92]	; (80460b0 <SPIx_Init+0x70>)
 8046054:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8046056:	4b15      	ldr	r3, [pc, #84]	; (80460ac <SPIx_Init+0x6c>)
 8046058:	2218      	movs	r2, #24
 804605a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 804605c:	4b13      	ldr	r3, [pc, #76]	; (80460ac <SPIx_Init+0x6c>)
 804605e:	2200      	movs	r2, #0
 8046060:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8046062:	4b12      	ldr	r3, [pc, #72]	; (80460ac <SPIx_Init+0x6c>)
 8046064:	2200      	movs	r2, #0
 8046066:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8046068:	4b10      	ldr	r3, [pc, #64]	; (80460ac <SPIx_Init+0x6c>)
 804606a:	2200      	movs	r2, #0
 804606c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 804606e:	4b0f      	ldr	r3, [pc, #60]	; (80460ac <SPIx_Init+0x6c>)
 8046070:	2200      	movs	r2, #0
 8046072:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8046074:	4b0d      	ldr	r3, [pc, #52]	; (80460ac <SPIx_Init+0x6c>)
 8046076:	2207      	movs	r2, #7
 8046078:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 804607a:	4b0c      	ldr	r3, [pc, #48]	; (80460ac <SPIx_Init+0x6c>)
 804607c:	2200      	movs	r2, #0
 804607e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8046080:	4b0a      	ldr	r3, [pc, #40]	; (80460ac <SPIx_Init+0x6c>)
 8046082:	2200      	movs	r2, #0
 8046084:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8046086:	4b09      	ldr	r3, [pc, #36]	; (80460ac <SPIx_Init+0x6c>)
 8046088:	f44f 7200 	mov.w	r2, #512	; 0x200
 804608c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 804608e:	4b07      	ldr	r3, [pc, #28]	; (80460ac <SPIx_Init+0x6c>)
 8046090:	2200      	movs	r2, #0
 8046092:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8046094:	4b05      	ldr	r3, [pc, #20]	; (80460ac <SPIx_Init+0x6c>)
 8046096:	f44f 7282 	mov.w	r2, #260	; 0x104
 804609a:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 804609c:	4803      	ldr	r0, [pc, #12]	; (80460ac <SPIx_Init+0x6c>)
 804609e:	f000 f833 	bl	8046108 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80460a2:	4802      	ldr	r0, [pc, #8]	; (80460ac <SPIx_Init+0x6c>)
 80460a4:	f7fe fa94 	bl	80445d0 <HAL_SPI_Init>
  } 
}
 80460a8:	bf00      	nop
 80460aa:	bd80      	pop	{r7, pc}
 80460ac:	20000288 	.word	0x20000288
 80460b0:	40015000 	.word	0x40015000

080460b4 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80460b4:	b580      	push	{r7, lr}
 80460b6:	b084      	sub	sp, #16
 80460b8:	af00      	add	r7, sp, #0
 80460ba:	4603      	mov	r3, r0
 80460bc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80460be:	2300      	movs	r3, #0
 80460c0:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80460c2:	4b09      	ldr	r3, [pc, #36]	; (80460e8 <SPIx_Write+0x34>)
 80460c4:	681b      	ldr	r3, [r3, #0]
 80460c6:	1db9      	adds	r1, r7, #6
 80460c8:	2201      	movs	r2, #1
 80460ca:	4808      	ldr	r0, [pc, #32]	; (80460ec <SPIx_Write+0x38>)
 80460cc:	f7fe fb0c 	bl	80446e8 <HAL_SPI_Transmit>
 80460d0:	4603      	mov	r3, r0
 80460d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80460d4:	7bfb      	ldrb	r3, [r7, #15]
 80460d6:	2b00      	cmp	r3, #0
 80460d8:	d001      	beq.n	80460de <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80460da:	f000 f809 	bl	80460f0 <SPIx_Error>
  }
}
 80460de:	bf00      	nop
 80460e0:	3710      	adds	r7, #16
 80460e2:	46bd      	mov	sp, r7
 80460e4:	bd80      	pop	{r7, pc}
 80460e6:	bf00      	nop
 80460e8:	2000000c 	.word	0x2000000c
 80460ec:	20000288 	.word	0x20000288

080460f0 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80460f0:	b580      	push	{r7, lr}
 80460f2:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80460f4:	4803      	ldr	r0, [pc, #12]	; (8046104 <SPIx_Error+0x14>)
 80460f6:	f7fe facf 	bl	8044698 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80460fa:	f7ff ffa1 	bl	8046040 <SPIx_Init>
}
 80460fe:	bf00      	nop
 8046100:	bd80      	pop	{r7, pc}
 8046102:	bf00      	nop
 8046104:	20000288 	.word	0x20000288

08046108 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8046108:	b580      	push	{r7, lr}
 804610a:	b08a      	sub	sp, #40	; 0x28
 804610c:	af00      	add	r7, sp, #0
 804610e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8046110:	2300      	movs	r3, #0
 8046112:	613b      	str	r3, [r7, #16]
 8046114:	4b17      	ldr	r3, [pc, #92]	; (8046174 <SPIx_MspInit+0x6c>)
 8046116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8046118:	4a16      	ldr	r2, [pc, #88]	; (8046174 <SPIx_MspInit+0x6c>)
 804611a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 804611e:	6453      	str	r3, [r2, #68]	; 0x44
 8046120:	4b14      	ldr	r3, [pc, #80]	; (8046174 <SPIx_MspInit+0x6c>)
 8046122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8046124:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8046128:	613b      	str	r3, [r7, #16]
 804612a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 804612c:	2300      	movs	r3, #0
 804612e:	60fb      	str	r3, [r7, #12]
 8046130:	4b10      	ldr	r3, [pc, #64]	; (8046174 <SPIx_MspInit+0x6c>)
 8046132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8046134:	4a0f      	ldr	r2, [pc, #60]	; (8046174 <SPIx_MspInit+0x6c>)
 8046136:	f043 0320 	orr.w	r3, r3, #32
 804613a:	6313      	str	r3, [r2, #48]	; 0x30
 804613c:	4b0d      	ldr	r3, [pc, #52]	; (8046174 <SPIx_MspInit+0x6c>)
 804613e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8046140:	f003 0320 	and.w	r3, r3, #32
 8046144:	60fb      	str	r3, [r7, #12]
 8046146:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8046148:	f44f 7360 	mov.w	r3, #896	; 0x380
 804614c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 804614e:	2302      	movs	r3, #2
 8046150:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8046152:	2302      	movs	r3, #2
 8046154:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8046156:	2301      	movs	r3, #1
 8046158:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 804615a:	2305      	movs	r3, #5
 804615c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 804615e:	f107 0314 	add.w	r3, r7, #20
 8046162:	4619      	mov	r1, r3
 8046164:	4804      	ldr	r0, [pc, #16]	; (8046178 <SPIx_MspInit+0x70>)
 8046166:	f7fb fc9b 	bl	8041aa0 <HAL_GPIO_Init>
}
 804616a:	bf00      	nop
 804616c:	3728      	adds	r7, #40	; 0x28
 804616e:	46bd      	mov	sp, r7
 8046170:	bd80      	pop	{r7, pc}
 8046172:	bf00      	nop
 8046174:	40023800 	.word	0x40023800
 8046178:	40021400 	.word	0x40021400

0804617c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 804617c:	b580      	push	{r7, lr}
 804617e:	b088      	sub	sp, #32
 8046180:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8046182:	4b36      	ldr	r3, [pc, #216]	; (804625c <LCD_IO_Init+0xe0>)
 8046184:	781b      	ldrb	r3, [r3, #0]
 8046186:	2b00      	cmp	r3, #0
 8046188:	d164      	bne.n	8046254 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 804618a:	4b34      	ldr	r3, [pc, #208]	; (804625c <LCD_IO_Init+0xe0>)
 804618c:	2201      	movs	r2, #1
 804618e:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8046190:	2300      	movs	r3, #0
 8046192:	60bb      	str	r3, [r7, #8]
 8046194:	4b32      	ldr	r3, [pc, #200]	; (8046260 <LCD_IO_Init+0xe4>)
 8046196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8046198:	4a31      	ldr	r2, [pc, #196]	; (8046260 <LCD_IO_Init+0xe4>)
 804619a:	f043 0308 	orr.w	r3, r3, #8
 804619e:	6313      	str	r3, [r2, #48]	; 0x30
 80461a0:	4b2f      	ldr	r3, [pc, #188]	; (8046260 <LCD_IO_Init+0xe4>)
 80461a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80461a4:	f003 0308 	and.w	r3, r3, #8
 80461a8:	60bb      	str	r3, [r7, #8]
 80461aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80461ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80461b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80461b2:	2301      	movs	r3, #1
 80461b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80461b6:	2300      	movs	r3, #0
 80461b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80461ba:	2302      	movs	r3, #2
 80461bc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80461be:	f107 030c 	add.w	r3, r7, #12
 80461c2:	4619      	mov	r1, r3
 80461c4:	4827      	ldr	r0, [pc, #156]	; (8046264 <LCD_IO_Init+0xe8>)
 80461c6:	f7fb fc6b 	bl	8041aa0 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80461ca:	2300      	movs	r3, #0
 80461cc:	607b      	str	r3, [r7, #4]
 80461ce:	4b24      	ldr	r3, [pc, #144]	; (8046260 <LCD_IO_Init+0xe4>)
 80461d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80461d2:	4a23      	ldr	r2, [pc, #140]	; (8046260 <LCD_IO_Init+0xe4>)
 80461d4:	f043 0308 	orr.w	r3, r3, #8
 80461d8:	6313      	str	r3, [r2, #48]	; 0x30
 80461da:	4b21      	ldr	r3, [pc, #132]	; (8046260 <LCD_IO_Init+0xe4>)
 80461dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80461de:	f003 0308 	and.w	r3, r3, #8
 80461e2:	607b      	str	r3, [r7, #4]
 80461e4:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80461e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80461ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80461ec:	2301      	movs	r3, #1
 80461ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80461f0:	2300      	movs	r3, #0
 80461f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80461f4:	2302      	movs	r3, #2
 80461f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80461f8:	f107 030c 	add.w	r3, r7, #12
 80461fc:	4619      	mov	r1, r3
 80461fe:	4819      	ldr	r0, [pc, #100]	; (8046264 <LCD_IO_Init+0xe8>)
 8046200:	f7fb fc4e 	bl	8041aa0 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8046204:	2300      	movs	r3, #0
 8046206:	603b      	str	r3, [r7, #0]
 8046208:	4b15      	ldr	r3, [pc, #84]	; (8046260 <LCD_IO_Init+0xe4>)
 804620a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804620c:	4a14      	ldr	r2, [pc, #80]	; (8046260 <LCD_IO_Init+0xe4>)
 804620e:	f043 0304 	orr.w	r3, r3, #4
 8046212:	6313      	str	r3, [r2, #48]	; 0x30
 8046214:	4b12      	ldr	r3, [pc, #72]	; (8046260 <LCD_IO_Init+0xe4>)
 8046216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8046218:	f003 0304 	and.w	r3, r3, #4
 804621c:	603b      	str	r3, [r7, #0]
 804621e:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8046220:	2304      	movs	r3, #4
 8046222:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8046224:	2301      	movs	r3, #1
 8046226:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8046228:	2300      	movs	r3, #0
 804622a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 804622c:	2302      	movs	r3, #2
 804622e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8046230:	f107 030c 	add.w	r3, r7, #12
 8046234:	4619      	mov	r1, r3
 8046236:	480c      	ldr	r0, [pc, #48]	; (8046268 <LCD_IO_Init+0xec>)
 8046238:	f7fb fc32 	bl	8041aa0 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 804623c:	2200      	movs	r2, #0
 804623e:	2104      	movs	r1, #4
 8046240:	4809      	ldr	r0, [pc, #36]	; (8046268 <LCD_IO_Init+0xec>)
 8046242:	f7fb fefd 	bl	8042040 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8046246:	2201      	movs	r2, #1
 8046248:	2104      	movs	r1, #4
 804624a:	4807      	ldr	r0, [pc, #28]	; (8046268 <LCD_IO_Init+0xec>)
 804624c:	f7fb fef8 	bl	8042040 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8046250:	f7ff fef6 	bl	8046040 <SPIx_Init>
  }
}
 8046254:	bf00      	nop
 8046256:	3720      	adds	r7, #32
 8046258:	46bd      	mov	sp, r7
 804625a:	bd80      	pop	{r7, pc}
 804625c:	200002e0 	.word	0x200002e0
 8046260:	40023800 	.word	0x40023800
 8046264:	40020c00 	.word	0x40020c00
 8046268:	40020800 	.word	0x40020800

0804626c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 804626c:	b580      	push	{r7, lr}
 804626e:	b082      	sub	sp, #8
 8046270:	af00      	add	r7, sp, #0
 8046272:	4603      	mov	r3, r0
 8046274:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8046276:	2201      	movs	r2, #1
 8046278:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 804627c:	480a      	ldr	r0, [pc, #40]	; (80462a8 <LCD_IO_WriteData+0x3c>)
 804627e:	f7fb fedf 	bl	8042040 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8046282:	2200      	movs	r2, #0
 8046284:	2104      	movs	r1, #4
 8046286:	4809      	ldr	r0, [pc, #36]	; (80462ac <LCD_IO_WriteData+0x40>)
 8046288:	f7fb feda 	bl	8042040 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 804628c:	88fb      	ldrh	r3, [r7, #6]
 804628e:	4618      	mov	r0, r3
 8046290:	f7ff ff10 	bl	80460b4 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8046294:	2201      	movs	r2, #1
 8046296:	2104      	movs	r1, #4
 8046298:	4804      	ldr	r0, [pc, #16]	; (80462ac <LCD_IO_WriteData+0x40>)
 804629a:	f7fb fed1 	bl	8042040 <HAL_GPIO_WritePin>
}
 804629e:	bf00      	nop
 80462a0:	3708      	adds	r7, #8
 80462a2:	46bd      	mov	sp, r7
 80462a4:	bd80      	pop	{r7, pc}
 80462a6:	bf00      	nop
 80462a8:	40020c00 	.word	0x40020c00
 80462ac:	40020800 	.word	0x40020800

080462b0 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80462b0:	b580      	push	{r7, lr}
 80462b2:	b082      	sub	sp, #8
 80462b4:	af00      	add	r7, sp, #0
 80462b6:	4603      	mov	r3, r0
 80462b8:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80462ba:	2200      	movs	r2, #0
 80462bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80462c0:	480a      	ldr	r0, [pc, #40]	; (80462ec <LCD_IO_WriteReg+0x3c>)
 80462c2:	f7fb febd 	bl	8042040 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80462c6:	2200      	movs	r2, #0
 80462c8:	2104      	movs	r1, #4
 80462ca:	4809      	ldr	r0, [pc, #36]	; (80462f0 <LCD_IO_WriteReg+0x40>)
 80462cc:	f7fb feb8 	bl	8042040 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80462d0:	79fb      	ldrb	r3, [r7, #7]
 80462d2:	b29b      	uxth	r3, r3
 80462d4:	4618      	mov	r0, r3
 80462d6:	f7ff feed 	bl	80460b4 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80462da:	2201      	movs	r2, #1
 80462dc:	2104      	movs	r1, #4
 80462de:	4804      	ldr	r0, [pc, #16]	; (80462f0 <LCD_IO_WriteReg+0x40>)
 80462e0:	f7fb feae 	bl	8042040 <HAL_GPIO_WritePin>
}
 80462e4:	bf00      	nop
 80462e6:	3708      	adds	r7, #8
 80462e8:	46bd      	mov	sp, r7
 80462ea:	bd80      	pop	{r7, pc}
 80462ec:	40020c00 	.word	0x40020c00
 80462f0:	40020800 	.word	0x40020800

080462f4 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80462f4:	b580      	push	{r7, lr}
 80462f6:	b082      	sub	sp, #8
 80462f8:	af00      	add	r7, sp, #0
 80462fa:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80462fc:	6878      	ldr	r0, [r7, #4]
 80462fe:	f7fa fe4f 	bl	8040fa0 <HAL_Delay>
}
 8046302:	bf00      	nop
 8046304:	3708      	adds	r7, #8
 8046306:	46bd      	mov	sp, r7
 8046308:	bd80      	pop	{r7, pc}

0804630a <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 804630a:	b580      	push	{r7, lr}
 804630c:	af00      	add	r7, sp, #0
  I2Cx_Init();
 804630e:	f7ff fdd5 	bl	8045ebc <I2Cx_Init>
}
 8046312:	bf00      	nop
 8046314:	bd80      	pop	{r7, pc}

08046316 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8046316:	b580      	push	{r7, lr}
 8046318:	b082      	sub	sp, #8
 804631a:	af00      	add	r7, sp, #0
 804631c:	4603      	mov	r3, r0
 804631e:	71fb      	strb	r3, [r7, #7]
 8046320:	460b      	mov	r3, r1
 8046322:	71bb      	strb	r3, [r7, #6]
 8046324:	4613      	mov	r3, r2
 8046326:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8046328:	797a      	ldrb	r2, [r7, #5]
 804632a:	79b9      	ldrb	r1, [r7, #6]
 804632c:	79fb      	ldrb	r3, [r7, #7]
 804632e:	4618      	mov	r0, r3
 8046330:	f7ff fdf6 	bl	8045f20 <I2Cx_WriteData>
}
 8046334:	bf00      	nop
 8046336:	3708      	adds	r7, #8
 8046338:	46bd      	mov	sp, r7
 804633a:	bd80      	pop	{r7, pc}

0804633c <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 804633c:	b580      	push	{r7, lr}
 804633e:	b082      	sub	sp, #8
 8046340:	af00      	add	r7, sp, #0
 8046342:	4603      	mov	r3, r0
 8046344:	460a      	mov	r2, r1
 8046346:	71fb      	strb	r3, [r7, #7]
 8046348:	4613      	mov	r3, r2
 804634a:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 804634c:	79ba      	ldrb	r2, [r7, #6]
 804634e:	79fb      	ldrb	r3, [r7, #7]
 8046350:	4611      	mov	r1, r2
 8046352:	4618      	mov	r0, r3
 8046354:	f7ff fe0e 	bl	8045f74 <I2Cx_ReadData>
 8046358:	4603      	mov	r3, r0
}
 804635a:	4618      	mov	r0, r3
 804635c:	3708      	adds	r7, #8
 804635e:	46bd      	mov	sp, r7
 8046360:	bd80      	pop	{r7, pc}

08046362 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8046362:	b580      	push	{r7, lr}
 8046364:	b082      	sub	sp, #8
 8046366:	af00      	add	r7, sp, #0
 8046368:	603a      	str	r2, [r7, #0]
 804636a:	461a      	mov	r2, r3
 804636c:	4603      	mov	r3, r0
 804636e:	71fb      	strb	r3, [r7, #7]
 8046370:	460b      	mov	r3, r1
 8046372:	71bb      	strb	r3, [r7, #6]
 8046374:	4613      	mov	r3, r2
 8046376:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8046378:	88bb      	ldrh	r3, [r7, #4]
 804637a:	79b9      	ldrb	r1, [r7, #6]
 804637c:	79f8      	ldrb	r0, [r7, #7]
 804637e:	683a      	ldr	r2, [r7, #0]
 8046380:	f7ff fe24 	bl	8045fcc <I2Cx_ReadBuffer>
 8046384:	4603      	mov	r3, r0
 8046386:	b29b      	uxth	r3, r3
}
 8046388:	4618      	mov	r0, r3
 804638a:	3708      	adds	r7, #8
 804638c:	46bd      	mov	sp, r7
 804638e:	bd80      	pop	{r7, pc}

08046390 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8046390:	b580      	push	{r7, lr}
 8046392:	b082      	sub	sp, #8
 8046394:	af00      	add	r7, sp, #0
 8046396:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8046398:	6878      	ldr	r0, [r7, #4]
 804639a:	f7fa fe01 	bl	8040fa0 <HAL_Delay>
}
 804639e:	bf00      	nop
 80463a0:	3708      	adds	r7, #8
 80463a2:	46bd      	mov	sp, r7
 80463a4:	bd80      	pop	{r7, pc}
	...

080463a8 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 80463a8:	b580      	push	{r7, lr}
 80463aa:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80463ac:	4b29      	ldr	r3, [pc, #164]	; (8046454 <BSP_SDRAM_Init+0xac>)
 80463ae:	4a2a      	ldr	r2, [pc, #168]	; (8046458 <BSP_SDRAM_Init+0xb0>)
 80463b0:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 80463b2:	4b2a      	ldr	r3, [pc, #168]	; (804645c <BSP_SDRAM_Init+0xb4>)
 80463b4:	2202      	movs	r2, #2
 80463b6:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 80463b8:	4b28      	ldr	r3, [pc, #160]	; (804645c <BSP_SDRAM_Init+0xb4>)
 80463ba:	2207      	movs	r2, #7
 80463bc:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 80463be:	4b27      	ldr	r3, [pc, #156]	; (804645c <BSP_SDRAM_Init+0xb4>)
 80463c0:	2204      	movs	r2, #4
 80463c2:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 80463c4:	4b25      	ldr	r3, [pc, #148]	; (804645c <BSP_SDRAM_Init+0xb4>)
 80463c6:	2207      	movs	r2, #7
 80463c8:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 80463ca:	4b24      	ldr	r3, [pc, #144]	; (804645c <BSP_SDRAM_Init+0xb4>)
 80463cc:	2202      	movs	r2, #2
 80463ce:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 80463d0:	4b22      	ldr	r3, [pc, #136]	; (804645c <BSP_SDRAM_Init+0xb4>)
 80463d2:	2202      	movs	r2, #2
 80463d4:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80463d6:	4b21      	ldr	r3, [pc, #132]	; (804645c <BSP_SDRAM_Init+0xb4>)
 80463d8:	2202      	movs	r2, #2
 80463da:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80463dc:	4b1d      	ldr	r3, [pc, #116]	; (8046454 <BSP_SDRAM_Init+0xac>)
 80463de:	2201      	movs	r2, #1
 80463e0:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80463e2:	4b1c      	ldr	r3, [pc, #112]	; (8046454 <BSP_SDRAM_Init+0xac>)
 80463e4:	2200      	movs	r2, #0
 80463e6:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80463e8:	4b1a      	ldr	r3, [pc, #104]	; (8046454 <BSP_SDRAM_Init+0xac>)
 80463ea:	2204      	movs	r2, #4
 80463ec:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80463ee:	4b19      	ldr	r3, [pc, #100]	; (8046454 <BSP_SDRAM_Init+0xac>)
 80463f0:	2210      	movs	r2, #16
 80463f2:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80463f4:	4b17      	ldr	r3, [pc, #92]	; (8046454 <BSP_SDRAM_Init+0xac>)
 80463f6:	2240      	movs	r2, #64	; 0x40
 80463f8:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80463fa:	4b16      	ldr	r3, [pc, #88]	; (8046454 <BSP_SDRAM_Init+0xac>)
 80463fc:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8046400:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8046402:	4b14      	ldr	r3, [pc, #80]	; (8046454 <BSP_SDRAM_Init+0xac>)
 8046404:	2200      	movs	r2, #0
 8046406:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8046408:	4b12      	ldr	r3, [pc, #72]	; (8046454 <BSP_SDRAM_Init+0xac>)
 804640a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 804640e:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8046410:	4b10      	ldr	r3, [pc, #64]	; (8046454 <BSP_SDRAM_Init+0xac>)
 8046412:	2200      	movs	r2, #0
 8046414:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8046416:	4b0f      	ldr	r3, [pc, #60]	; (8046454 <BSP_SDRAM_Init+0xac>)
 8046418:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 804641c:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 804641e:	2100      	movs	r1, #0
 8046420:	480c      	ldr	r0, [pc, #48]	; (8046454 <BSP_SDRAM_Init+0xac>)
 8046422:	f000 f87f 	bl	8046524 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8046426:	490d      	ldr	r1, [pc, #52]	; (804645c <BSP_SDRAM_Init+0xb4>)
 8046428:	480a      	ldr	r0, [pc, #40]	; (8046454 <BSP_SDRAM_Init+0xac>)
 804642a:	f7fe f848 	bl	80444be <HAL_SDRAM_Init>
 804642e:	4603      	mov	r3, r0
 8046430:	2b00      	cmp	r3, #0
 8046432:	d003      	beq.n	804643c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8046434:	4b0a      	ldr	r3, [pc, #40]	; (8046460 <BSP_SDRAM_Init+0xb8>)
 8046436:	2201      	movs	r2, #1
 8046438:	701a      	strb	r2, [r3, #0]
 804643a:	e002      	b.n	8046442 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 804643c:	4b08      	ldr	r3, [pc, #32]	; (8046460 <BSP_SDRAM_Init+0xb8>)
 804643e:	2200      	movs	r2, #0
 8046440:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8046442:	f240 506a 	movw	r0, #1386	; 0x56a
 8046446:	f000 f80d 	bl	8046464 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 804644a:	4b05      	ldr	r3, [pc, #20]	; (8046460 <BSP_SDRAM_Init+0xb8>)
 804644c:	781b      	ldrb	r3, [r3, #0]
}
 804644e:	4618      	mov	r0, r3
 8046450:	bd80      	pop	{r7, pc}
 8046452:	bf00      	nop
 8046454:	200002e4 	.word	0x200002e4
 8046458:	a0000140 	.word	0xa0000140
 804645c:	20000318 	.word	0x20000318
 8046460:	20000010 	.word	0x20000010

08046464 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8046464:	b580      	push	{r7, lr}
 8046466:	b084      	sub	sp, #16
 8046468:	af00      	add	r7, sp, #0
 804646a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 804646c:	2300      	movs	r3, #0
 804646e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8046470:	4b2a      	ldr	r3, [pc, #168]	; (804651c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8046472:	2201      	movs	r2, #1
 8046474:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8046476:	4b29      	ldr	r3, [pc, #164]	; (804651c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8046478:	2208      	movs	r2, #8
 804647a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 804647c:	4b27      	ldr	r3, [pc, #156]	; (804651c <BSP_SDRAM_Initialization_sequence+0xb8>)
 804647e:	2201      	movs	r2, #1
 8046480:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8046482:	4b26      	ldr	r3, [pc, #152]	; (804651c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8046484:	2200      	movs	r2, #0
 8046486:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8046488:	f64f 72ff 	movw	r2, #65535	; 0xffff
 804648c:	4923      	ldr	r1, [pc, #140]	; (804651c <BSP_SDRAM_Initialization_sequence+0xb8>)
 804648e:	4824      	ldr	r0, [pc, #144]	; (8046520 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8046490:	f7fe f853 	bl	804453a <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8046494:	2001      	movs	r0, #1
 8046496:	f7fa fd83 	bl	8040fa0 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 804649a:	4b20      	ldr	r3, [pc, #128]	; (804651c <BSP_SDRAM_Initialization_sequence+0xb8>)
 804649c:	2202      	movs	r2, #2
 804649e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80464a0:	4b1e      	ldr	r3, [pc, #120]	; (804651c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80464a2:	2208      	movs	r2, #8
 80464a4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80464a6:	4b1d      	ldr	r3, [pc, #116]	; (804651c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80464a8:	2201      	movs	r2, #1
 80464aa:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80464ac:	4b1b      	ldr	r3, [pc, #108]	; (804651c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80464ae:	2200      	movs	r2, #0
 80464b0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 80464b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80464b6:	4919      	ldr	r1, [pc, #100]	; (804651c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80464b8:	4819      	ldr	r0, [pc, #100]	; (8046520 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80464ba:	f7fe f83e 	bl	804453a <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80464be:	4b17      	ldr	r3, [pc, #92]	; (804651c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80464c0:	2203      	movs	r2, #3
 80464c2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80464c4:	4b15      	ldr	r3, [pc, #84]	; (804651c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80464c6:	2208      	movs	r2, #8
 80464c8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 80464ca:	4b14      	ldr	r3, [pc, #80]	; (804651c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80464cc:	2204      	movs	r2, #4
 80464ce:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80464d0:	4b12      	ldr	r3, [pc, #72]	; (804651c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80464d2:	2200      	movs	r2, #0
 80464d4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80464d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80464da:	4910      	ldr	r1, [pc, #64]	; (804651c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80464dc:	4810      	ldr	r0, [pc, #64]	; (8046520 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80464de:	f7fe f82c 	bl	804453a <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80464e2:	f44f 730c 	mov.w	r3, #560	; 0x230
 80464e6:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80464e8:	4b0c      	ldr	r3, [pc, #48]	; (804651c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80464ea:	2204      	movs	r2, #4
 80464ec:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80464ee:	4b0b      	ldr	r3, [pc, #44]	; (804651c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80464f0:	2208      	movs	r2, #8
 80464f2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80464f4:	4b09      	ldr	r3, [pc, #36]	; (804651c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80464f6:	2201      	movs	r2, #1
 80464f8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 80464fa:	68fb      	ldr	r3, [r7, #12]
 80464fc:	4a07      	ldr	r2, [pc, #28]	; (804651c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80464fe:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8046500:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8046504:	4905      	ldr	r1, [pc, #20]	; (804651c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8046506:	4806      	ldr	r0, [pc, #24]	; (8046520 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8046508:	f7fe f817 	bl	804453a <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 804650c:	6879      	ldr	r1, [r7, #4]
 804650e:	4804      	ldr	r0, [pc, #16]	; (8046520 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8046510:	f7fe f83e 	bl	8044590 <HAL_SDRAM_ProgramRefreshRate>
}
 8046514:	bf00      	nop
 8046516:	3710      	adds	r7, #16
 8046518:	46bd      	mov	sp, r7
 804651a:	bd80      	pop	{r7, pc}
 804651c:	20000334 	.word	0x20000334
 8046520:	200002e4 	.word	0x200002e4

08046524 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8046524:	b580      	push	{r7, lr}
 8046526:	b090      	sub	sp, #64	; 0x40
 8046528:	af00      	add	r7, sp, #0
 804652a:	6078      	str	r0, [r7, #4]
 804652c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 804652e:	687b      	ldr	r3, [r7, #4]
 8046530:	2b00      	cmp	r3, #0
 8046532:	f000 80ec 	beq.w	804670e <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8046536:	2300      	movs	r3, #0
 8046538:	62bb      	str	r3, [r7, #40]	; 0x28
 804653a:	4b77      	ldr	r3, [pc, #476]	; (8046718 <BSP_SDRAM_MspInit+0x1f4>)
 804653c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804653e:	4a76      	ldr	r2, [pc, #472]	; (8046718 <BSP_SDRAM_MspInit+0x1f4>)
 8046540:	f043 0301 	orr.w	r3, r3, #1
 8046544:	6393      	str	r3, [r2, #56]	; 0x38
 8046546:	4b74      	ldr	r3, [pc, #464]	; (8046718 <BSP_SDRAM_MspInit+0x1f4>)
 8046548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804654a:	f003 0301 	and.w	r3, r3, #1
 804654e:	62bb      	str	r3, [r7, #40]	; 0x28
 8046550:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8046552:	2300      	movs	r3, #0
 8046554:	627b      	str	r3, [r7, #36]	; 0x24
 8046556:	4b70      	ldr	r3, [pc, #448]	; (8046718 <BSP_SDRAM_MspInit+0x1f4>)
 8046558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804655a:	4a6f      	ldr	r2, [pc, #444]	; (8046718 <BSP_SDRAM_MspInit+0x1f4>)
 804655c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8046560:	6313      	str	r3, [r2, #48]	; 0x30
 8046562:	4b6d      	ldr	r3, [pc, #436]	; (8046718 <BSP_SDRAM_MspInit+0x1f4>)
 8046564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8046566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 804656a:	627b      	str	r3, [r7, #36]	; 0x24
 804656c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 804656e:	2300      	movs	r3, #0
 8046570:	623b      	str	r3, [r7, #32]
 8046572:	4b69      	ldr	r3, [pc, #420]	; (8046718 <BSP_SDRAM_MspInit+0x1f4>)
 8046574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8046576:	4a68      	ldr	r2, [pc, #416]	; (8046718 <BSP_SDRAM_MspInit+0x1f4>)
 8046578:	f043 0302 	orr.w	r3, r3, #2
 804657c:	6313      	str	r3, [r2, #48]	; 0x30
 804657e:	4b66      	ldr	r3, [pc, #408]	; (8046718 <BSP_SDRAM_MspInit+0x1f4>)
 8046580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8046582:	f003 0302 	and.w	r3, r3, #2
 8046586:	623b      	str	r3, [r7, #32]
 8046588:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 804658a:	2300      	movs	r3, #0
 804658c:	61fb      	str	r3, [r7, #28]
 804658e:	4b62      	ldr	r3, [pc, #392]	; (8046718 <BSP_SDRAM_MspInit+0x1f4>)
 8046590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8046592:	4a61      	ldr	r2, [pc, #388]	; (8046718 <BSP_SDRAM_MspInit+0x1f4>)
 8046594:	f043 0304 	orr.w	r3, r3, #4
 8046598:	6313      	str	r3, [r2, #48]	; 0x30
 804659a:	4b5f      	ldr	r3, [pc, #380]	; (8046718 <BSP_SDRAM_MspInit+0x1f4>)
 804659c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804659e:	f003 0304 	and.w	r3, r3, #4
 80465a2:	61fb      	str	r3, [r7, #28]
 80465a4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80465a6:	2300      	movs	r3, #0
 80465a8:	61bb      	str	r3, [r7, #24]
 80465aa:	4b5b      	ldr	r3, [pc, #364]	; (8046718 <BSP_SDRAM_MspInit+0x1f4>)
 80465ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80465ae:	4a5a      	ldr	r2, [pc, #360]	; (8046718 <BSP_SDRAM_MspInit+0x1f4>)
 80465b0:	f043 0308 	orr.w	r3, r3, #8
 80465b4:	6313      	str	r3, [r2, #48]	; 0x30
 80465b6:	4b58      	ldr	r3, [pc, #352]	; (8046718 <BSP_SDRAM_MspInit+0x1f4>)
 80465b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80465ba:	f003 0308 	and.w	r3, r3, #8
 80465be:	61bb      	str	r3, [r7, #24]
 80465c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80465c2:	2300      	movs	r3, #0
 80465c4:	617b      	str	r3, [r7, #20]
 80465c6:	4b54      	ldr	r3, [pc, #336]	; (8046718 <BSP_SDRAM_MspInit+0x1f4>)
 80465c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80465ca:	4a53      	ldr	r2, [pc, #332]	; (8046718 <BSP_SDRAM_MspInit+0x1f4>)
 80465cc:	f043 0310 	orr.w	r3, r3, #16
 80465d0:	6313      	str	r3, [r2, #48]	; 0x30
 80465d2:	4b51      	ldr	r3, [pc, #324]	; (8046718 <BSP_SDRAM_MspInit+0x1f4>)
 80465d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80465d6:	f003 0310 	and.w	r3, r3, #16
 80465da:	617b      	str	r3, [r7, #20]
 80465dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80465de:	2300      	movs	r3, #0
 80465e0:	613b      	str	r3, [r7, #16]
 80465e2:	4b4d      	ldr	r3, [pc, #308]	; (8046718 <BSP_SDRAM_MspInit+0x1f4>)
 80465e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80465e6:	4a4c      	ldr	r2, [pc, #304]	; (8046718 <BSP_SDRAM_MspInit+0x1f4>)
 80465e8:	f043 0320 	orr.w	r3, r3, #32
 80465ec:	6313      	str	r3, [r2, #48]	; 0x30
 80465ee:	4b4a      	ldr	r3, [pc, #296]	; (8046718 <BSP_SDRAM_MspInit+0x1f4>)
 80465f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80465f2:	f003 0320 	and.w	r3, r3, #32
 80465f6:	613b      	str	r3, [r7, #16]
 80465f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80465fa:	2300      	movs	r3, #0
 80465fc:	60fb      	str	r3, [r7, #12]
 80465fe:	4b46      	ldr	r3, [pc, #280]	; (8046718 <BSP_SDRAM_MspInit+0x1f4>)
 8046600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8046602:	4a45      	ldr	r2, [pc, #276]	; (8046718 <BSP_SDRAM_MspInit+0x1f4>)
 8046604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8046608:	6313      	str	r3, [r2, #48]	; 0x30
 804660a:	4b43      	ldr	r3, [pc, #268]	; (8046718 <BSP_SDRAM_MspInit+0x1f4>)
 804660c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804660e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8046612:	60fb      	str	r3, [r7, #12]
 8046614:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8046616:	2302      	movs	r3, #2
 8046618:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 804661a:	2302      	movs	r3, #2
 804661c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 804661e:	2300      	movs	r3, #0
 8046620:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8046622:	230c      	movs	r3, #12
 8046624:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8046626:	2360      	movs	r3, #96	; 0x60
 8046628:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 804662a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 804662e:	4619      	mov	r1, r3
 8046630:	483a      	ldr	r0, [pc, #232]	; (804671c <BSP_SDRAM_MspInit+0x1f8>)
 8046632:	f7fb fa35 	bl	8041aa0 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8046636:	2301      	movs	r3, #1
 8046638:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 804663a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 804663e:	4619      	mov	r1, r3
 8046640:	4837      	ldr	r0, [pc, #220]	; (8046720 <BSP_SDRAM_MspInit+0x1fc>)
 8046642:	f7fb fa2d 	bl	8041aa0 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8046646:	f24c 7303 	movw	r3, #50947	; 0xc703
 804664a:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 804664c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8046650:	4619      	mov	r1, r3
 8046652:	4834      	ldr	r0, [pc, #208]	; (8046724 <BSP_SDRAM_MspInit+0x200>)
 8046654:	f7fb fa24 	bl	8041aa0 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8046658:	f64f 7383 	movw	r3, #65411	; 0xff83
 804665c:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 804665e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8046662:	4619      	mov	r1, r3
 8046664:	4830      	ldr	r0, [pc, #192]	; (8046728 <BSP_SDRAM_MspInit+0x204>)
 8046666:	f7fb fa1b 	bl	8041aa0 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 804666a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 804666e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8046670:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8046674:	4619      	mov	r1, r3
 8046676:	482d      	ldr	r0, [pc, #180]	; (804672c <BSP_SDRAM_MspInit+0x208>)
 8046678:	f7fb fa12 	bl	8041aa0 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 804667c:	f248 1333 	movw	r3, #33075	; 0x8133
 8046680:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8046682:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8046686:	4619      	mov	r1, r3
 8046688:	4829      	ldr	r0, [pc, #164]	; (8046730 <BSP_SDRAM_MspInit+0x20c>)
 804668a:	f7fb fa09 	bl	8041aa0 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 804668e:	4b29      	ldr	r3, [pc, #164]	; (8046734 <BSP_SDRAM_MspInit+0x210>)
 8046690:	2200      	movs	r2, #0
 8046692:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8046694:	4b27      	ldr	r3, [pc, #156]	; (8046734 <BSP_SDRAM_MspInit+0x210>)
 8046696:	2280      	movs	r2, #128	; 0x80
 8046698:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 804669a:	4b26      	ldr	r3, [pc, #152]	; (8046734 <BSP_SDRAM_MspInit+0x210>)
 804669c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80466a0:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80466a2:	4b24      	ldr	r3, [pc, #144]	; (8046734 <BSP_SDRAM_MspInit+0x210>)
 80466a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80466a8:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80466aa:	4b22      	ldr	r3, [pc, #136]	; (8046734 <BSP_SDRAM_MspInit+0x210>)
 80466ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80466b0:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80466b2:	4b20      	ldr	r3, [pc, #128]	; (8046734 <BSP_SDRAM_MspInit+0x210>)
 80466b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80466b8:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 80466ba:	4b1e      	ldr	r3, [pc, #120]	; (8046734 <BSP_SDRAM_MspInit+0x210>)
 80466bc:	2200      	movs	r2, #0
 80466be:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 80466c0:	4b1c      	ldr	r3, [pc, #112]	; (8046734 <BSP_SDRAM_MspInit+0x210>)
 80466c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80466c6:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80466c8:	4b1a      	ldr	r3, [pc, #104]	; (8046734 <BSP_SDRAM_MspInit+0x210>)
 80466ca:	2200      	movs	r2, #0
 80466cc:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80466ce:	4b19      	ldr	r3, [pc, #100]	; (8046734 <BSP_SDRAM_MspInit+0x210>)
 80466d0:	2203      	movs	r2, #3
 80466d2:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80466d4:	4b17      	ldr	r3, [pc, #92]	; (8046734 <BSP_SDRAM_MspInit+0x210>)
 80466d6:	2200      	movs	r2, #0
 80466d8:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80466da:	4b16      	ldr	r3, [pc, #88]	; (8046734 <BSP_SDRAM_MspInit+0x210>)
 80466dc:	2200      	movs	r2, #0
 80466de:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 80466e0:	4b14      	ldr	r3, [pc, #80]	; (8046734 <BSP_SDRAM_MspInit+0x210>)
 80466e2:	4a15      	ldr	r2, [pc, #84]	; (8046738 <BSP_SDRAM_MspInit+0x214>)
 80466e4:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 80466e6:	687b      	ldr	r3, [r7, #4]
 80466e8:	4a12      	ldr	r2, [pc, #72]	; (8046734 <BSP_SDRAM_MspInit+0x210>)
 80466ea:	631a      	str	r2, [r3, #48]	; 0x30
 80466ec:	4a11      	ldr	r2, [pc, #68]	; (8046734 <BSP_SDRAM_MspInit+0x210>)
 80466ee:	687b      	ldr	r3, [r7, #4]
 80466f0:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 80466f2:	4810      	ldr	r0, [pc, #64]	; (8046734 <BSP_SDRAM_MspInit+0x210>)
 80466f4:	f7fa fe38 	bl	8041368 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 80466f8:	480e      	ldr	r0, [pc, #56]	; (8046734 <BSP_SDRAM_MspInit+0x210>)
 80466fa:	f7fa fd87 	bl	804120c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80466fe:	2200      	movs	r2, #0
 8046700:	210f      	movs	r1, #15
 8046702:	2038      	movs	r0, #56	; 0x38
 8046704:	f7fa fd4b 	bl	804119e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8046708:	2038      	movs	r0, #56	; 0x38
 804670a:	f7fa fd64 	bl	80411d6 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 804670e:	bf00      	nop
 8046710:	3740      	adds	r7, #64	; 0x40
 8046712:	46bd      	mov	sp, r7
 8046714:	bd80      	pop	{r7, pc}
 8046716:	bf00      	nop
 8046718:	40023800 	.word	0x40023800
 804671c:	40020400 	.word	0x40020400
 8046720:	40020800 	.word	0x40020800
 8046724:	40020c00 	.word	0x40020c00
 8046728:	40021000 	.word	0x40021000
 804672c:	40021400 	.word	0x40021400
 8046730:	40021800 	.word	0x40021800
 8046734:	20000344 	.word	0x20000344
 8046738:	40026410 	.word	0x40026410

0804673c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 804673c:	b580      	push	{r7, lr}
 804673e:	b082      	sub	sp, #8
 8046740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8046742:	2300      	movs	r3, #0
 8046744:	607b      	str	r3, [r7, #4]
 8046746:	4b12      	ldr	r3, [pc, #72]	; (8046790 <HAL_MspInit+0x54>)
 8046748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804674a:	4a11      	ldr	r2, [pc, #68]	; (8046790 <HAL_MspInit+0x54>)
 804674c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8046750:	6453      	str	r3, [r2, #68]	; 0x44
 8046752:	4b0f      	ldr	r3, [pc, #60]	; (8046790 <HAL_MspInit+0x54>)
 8046754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8046756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 804675a:	607b      	str	r3, [r7, #4]
 804675c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 804675e:	2300      	movs	r3, #0
 8046760:	603b      	str	r3, [r7, #0]
 8046762:	4b0b      	ldr	r3, [pc, #44]	; (8046790 <HAL_MspInit+0x54>)
 8046764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8046766:	4a0a      	ldr	r2, [pc, #40]	; (8046790 <HAL_MspInit+0x54>)
 8046768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 804676c:	6413      	str	r3, [r2, #64]	; 0x40
 804676e:	4b08      	ldr	r3, [pc, #32]	; (8046790 <HAL_MspInit+0x54>)
 8046770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8046772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8046776:	603b      	str	r3, [r7, #0]
 8046778:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 804677a:	2200      	movs	r2, #0
 804677c:	210f      	movs	r1, #15
 804677e:	f06f 0001 	mvn.w	r0, #1
 8046782:	f7fa fd0c 	bl	804119e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8046786:	bf00      	nop
 8046788:	3708      	adds	r7, #8
 804678a:	46bd      	mov	sp, r7
 804678c:	bd80      	pop	{r7, pc}
 804678e:	bf00      	nop
 8046790:	40023800 	.word	0x40023800

08046794 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8046794:	b580      	push	{r7, lr}
 8046796:	b08a      	sub	sp, #40	; 0x28
 8046798:	af00      	add	r7, sp, #0
 804679a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804679c:	f107 0314 	add.w	r3, r7, #20
 80467a0:	2200      	movs	r2, #0
 80467a2:	601a      	str	r2, [r3, #0]
 80467a4:	605a      	str	r2, [r3, #4]
 80467a6:	609a      	str	r2, [r3, #8]
 80467a8:	60da      	str	r2, [r3, #12]
 80467aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 80467ac:	687b      	ldr	r3, [r7, #4]
 80467ae:	681b      	ldr	r3, [r3, #0]
 80467b0:	4a19      	ldr	r2, [pc, #100]	; (8046818 <HAL_SPI_MspInit+0x84>)
 80467b2:	4293      	cmp	r3, r2
 80467b4:	d12b      	bne.n	804680e <HAL_SPI_MspInit+0x7a>
  {
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80467b6:	2300      	movs	r3, #0
 80467b8:	613b      	str	r3, [r7, #16]
 80467ba:	4b18      	ldr	r3, [pc, #96]	; (804681c <HAL_SPI_MspInit+0x88>)
 80467bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80467be:	4a17      	ldr	r2, [pc, #92]	; (804681c <HAL_SPI_MspInit+0x88>)
 80467c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80467c4:	6453      	str	r3, [r2, #68]	; 0x44
 80467c6:	4b15      	ldr	r3, [pc, #84]	; (804681c <HAL_SPI_MspInit+0x88>)
 80467c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80467ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80467ce:	613b      	str	r3, [r7, #16]
 80467d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80467d2:	2300      	movs	r3, #0
 80467d4:	60fb      	str	r3, [r7, #12]
 80467d6:	4b11      	ldr	r3, [pc, #68]	; (804681c <HAL_SPI_MspInit+0x88>)
 80467d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80467da:	4a10      	ldr	r2, [pc, #64]	; (804681c <HAL_SPI_MspInit+0x88>)
 80467dc:	f043 0310 	orr.w	r3, r3, #16
 80467e0:	6313      	str	r3, [r2, #48]	; 0x30
 80467e2:	4b0e      	ldr	r3, [pc, #56]	; (804681c <HAL_SPI_MspInit+0x88>)
 80467e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80467e6:	f003 0310 	and.w	r3, r3, #16
 80467ea:	60fb      	str	r3, [r7, #12]
 80467ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80467ee:	2364      	movs	r3, #100	; 0x64
 80467f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80467f2:	2302      	movs	r3, #2
 80467f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80467f6:	2300      	movs	r3, #0
 80467f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80467fa:	2303      	movs	r3, #3
 80467fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80467fe:	2305      	movs	r3, #5
 8046800:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8046802:	f107 0314 	add.w	r3, r7, #20
 8046806:	4619      	mov	r1, r3
 8046808:	4805      	ldr	r0, [pc, #20]	; (8046820 <HAL_SPI_MspInit+0x8c>)
 804680a:	f7fb f949 	bl	8041aa0 <HAL_GPIO_Init>

  }
}
 804680e:	bf00      	nop
 8046810:	3728      	adds	r7, #40	; 0x28
 8046812:	46bd      	mov	sp, r7
 8046814:	bd80      	pop	{r7, pc}
 8046816:	bf00      	nop
 8046818:	40013400 	.word	0x40013400
 804681c:	40023800 	.word	0x40023800
 8046820:	40021000 	.word	0x40021000

08046824 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8046824:	b580      	push	{r7, lr}
 8046826:	b08a      	sub	sp, #40	; 0x28
 8046828:	af00      	add	r7, sp, #0
 804682a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804682c:	f107 0314 	add.w	r3, r7, #20
 8046830:	2200      	movs	r2, #0
 8046832:	601a      	str	r2, [r3, #0]
 8046834:	605a      	str	r2, [r3, #4]
 8046836:	609a      	str	r2, [r3, #8]
 8046838:	60da      	str	r2, [r3, #12]
 804683a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 804683c:	687b      	ldr	r3, [r7, #4]
 804683e:	681b      	ldr	r3, [r3, #0]
 8046840:	4a29      	ldr	r2, [pc, #164]	; (80468e8 <HAL_I2C_MspInit+0xc4>)
 8046842:	4293      	cmp	r3, r2
 8046844:	d14b      	bne.n	80468de <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8046846:	2300      	movs	r3, #0
 8046848:	613b      	str	r3, [r7, #16]
 804684a:	4b28      	ldr	r3, [pc, #160]	; (80468ec <HAL_I2C_MspInit+0xc8>)
 804684c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804684e:	4a27      	ldr	r2, [pc, #156]	; (80468ec <HAL_I2C_MspInit+0xc8>)
 8046850:	f043 0304 	orr.w	r3, r3, #4
 8046854:	6313      	str	r3, [r2, #48]	; 0x30
 8046856:	4b25      	ldr	r3, [pc, #148]	; (80468ec <HAL_I2C_MspInit+0xc8>)
 8046858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804685a:	f003 0304 	and.w	r3, r3, #4
 804685e:	613b      	str	r3, [r7, #16]
 8046860:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8046862:	2300      	movs	r3, #0
 8046864:	60fb      	str	r3, [r7, #12]
 8046866:	4b21      	ldr	r3, [pc, #132]	; (80468ec <HAL_I2C_MspInit+0xc8>)
 8046868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804686a:	4a20      	ldr	r2, [pc, #128]	; (80468ec <HAL_I2C_MspInit+0xc8>)
 804686c:	f043 0301 	orr.w	r3, r3, #1
 8046870:	6313      	str	r3, [r2, #48]	; 0x30
 8046872:	4b1e      	ldr	r3, [pc, #120]	; (80468ec <HAL_I2C_MspInit+0xc8>)
 8046874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8046876:	f003 0301 	and.w	r3, r3, #1
 804687a:	60fb      	str	r3, [r7, #12]
 804687c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 804687e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8046882:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8046884:	2312      	movs	r3, #18
 8046886:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8046888:	2301      	movs	r3, #1
 804688a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804688c:	2300      	movs	r3, #0
 804688e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8046890:	2304      	movs	r3, #4
 8046892:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8046894:	f107 0314 	add.w	r3, r7, #20
 8046898:	4619      	mov	r1, r3
 804689a:	4815      	ldr	r0, [pc, #84]	; (80468f0 <HAL_I2C_MspInit+0xcc>)
 804689c:	f7fb f900 	bl	8041aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80468a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80468a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80468a6:	2312      	movs	r3, #18
 80468a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80468aa:	2301      	movs	r3, #1
 80468ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80468ae:	2300      	movs	r3, #0
 80468b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80468b2:	2304      	movs	r3, #4
 80468b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80468b6:	f107 0314 	add.w	r3, r7, #20
 80468ba:	4619      	mov	r1, r3
 80468bc:	480d      	ldr	r0, [pc, #52]	; (80468f4 <HAL_I2C_MspInit+0xd0>)
 80468be:	f7fb f8ef 	bl	8041aa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80468c2:	2300      	movs	r3, #0
 80468c4:	60bb      	str	r3, [r7, #8]
 80468c6:	4b09      	ldr	r3, [pc, #36]	; (80468ec <HAL_I2C_MspInit+0xc8>)
 80468c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80468ca:	4a08      	ldr	r2, [pc, #32]	; (80468ec <HAL_I2C_MspInit+0xc8>)
 80468cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80468d0:	6413      	str	r3, [r2, #64]	; 0x40
 80468d2:	4b06      	ldr	r3, [pc, #24]	; (80468ec <HAL_I2C_MspInit+0xc8>)
 80468d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80468d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80468da:	60bb      	str	r3, [r7, #8]
 80468dc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80468de:	bf00      	nop
 80468e0:	3728      	adds	r7, #40	; 0x28
 80468e2:	46bd      	mov	sp, r7
 80468e4:	bd80      	pop	{r7, pc}
 80468e6:	bf00      	nop
 80468e8:	40005c00 	.word	0x40005c00
 80468ec:	40023800 	.word	0x40023800
 80468f0:	40020800 	.word	0x40020800
 80468f4:	40020000 	.word	0x40020000

080468f8 <HAL_RNG_MspInit>:
/* USER CODE BEGIN 1 */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80468f8:	b480      	push	{r7}
 80468fa:	b085      	sub	sp, #20
 80468fc:	af00      	add	r7, sp, #0
 80468fe:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8046900:	687b      	ldr	r3, [r7, #4]
 8046902:	681b      	ldr	r3, [r3, #0]
 8046904:	4a0b      	ldr	r2, [pc, #44]	; (8046934 <HAL_RNG_MspInit+0x3c>)
 8046906:	4293      	cmp	r3, r2
 8046908:	d10d      	bne.n	8046926 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 804690a:	2300      	movs	r3, #0
 804690c:	60fb      	str	r3, [r7, #12]
 804690e:	4b0a      	ldr	r3, [pc, #40]	; (8046938 <HAL_RNG_MspInit+0x40>)
 8046910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8046912:	4a09      	ldr	r2, [pc, #36]	; (8046938 <HAL_RNG_MspInit+0x40>)
 8046914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8046918:	6353      	str	r3, [r2, #52]	; 0x34
 804691a:	4b07      	ldr	r3, [pc, #28]	; (8046938 <HAL_RNG_MspInit+0x40>)
 804691c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 804691e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8046922:	60fb      	str	r3, [r7, #12]
 8046924:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8046926:	bf00      	nop
 8046928:	3714      	adds	r7, #20
 804692a:	46bd      	mov	sp, r7
 804692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046930:	4770      	bx	lr
 8046932:	bf00      	nop
 8046934:	50060800 	.word	0x50060800
 8046938:	40023800 	.word	0x40023800

0804693c <HAL_SPI_MspDeInit>:

}


void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 804693c:	b580      	push	{r7, lr}
 804693e:	b082      	sub	sp, #8
 8046940:	af00      	add	r7, sp, #0
 8046942:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI4)
 8046944:	687b      	ldr	r3, [r7, #4]
 8046946:	681b      	ldr	r3, [r3, #0]
 8046948:	4a08      	ldr	r2, [pc, #32]	; (804696c <HAL_SPI_MspDeInit+0x30>)
 804694a:	4293      	cmp	r3, r2
 804694c:	d109      	bne.n	8046962 <HAL_SPI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN SPI4_MspDeInit 0 */

  /* USER CODE END SPI4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI4_CLK_DISABLE();
 804694e:	4b08      	ldr	r3, [pc, #32]	; (8046970 <HAL_SPI_MspDeInit+0x34>)
 8046950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8046952:	4a07      	ldr	r2, [pc, #28]	; (8046970 <HAL_SPI_MspDeInit+0x34>)
 8046954:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8046958:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6);
 804695a:	2164      	movs	r1, #100	; 0x64
 804695c:	4805      	ldr	r0, [pc, #20]	; (8046974 <HAL_SPI_MspDeInit+0x38>)
 804695e:	f7fb fa4b 	bl	8041df8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
#endif
}
 8046962:	bf00      	nop
 8046964:	3708      	adds	r7, #8
 8046966:	46bd      	mov	sp, r7
 8046968:	bd80      	pop	{r7, pc}
 804696a:	bf00      	nop
 804696c:	40013400 	.word	0x40013400
 8046970:	40023800 	.word	0x40023800
 8046974:	40021000 	.word	0x40021000

08046978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8046978:	b480      	push	{r7}
 804697a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 804697c:	bf00      	nop
 804697e:	46bd      	mov	sp, r7
 8046980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046984:	4770      	bx	lr

08046986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8046986:	b480      	push	{r7}
 8046988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 804698a:	e7fe      	b.n	804698a <HardFault_Handler+0x4>

0804698c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 804698c:	b480      	push	{r7}
 804698e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8046990:	e7fe      	b.n	8046990 <MemManage_Handler+0x4>

08046992 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8046992:	b480      	push	{r7}
 8046994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8046996:	e7fe      	b.n	8046996 <BusFault_Handler+0x4>

08046998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8046998:	b480      	push	{r7}
 804699a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 804699c:	e7fe      	b.n	804699c <UsageFault_Handler+0x4>

0804699e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 804699e:	b480      	push	{r7}
 80469a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80469a2:	bf00      	nop
 80469a4:	46bd      	mov	sp, r7
 80469a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80469aa:	4770      	bx	lr

080469ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80469ac:	b480      	push	{r7}
 80469ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80469b0:	bf00      	nop
 80469b2:	46bd      	mov	sp, r7
 80469b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80469b8:	4770      	bx	lr

080469ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80469ba:	b480      	push	{r7}
 80469bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80469be:	bf00      	nop
 80469c0:	46bd      	mov	sp, r7
 80469c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80469c6:	4770      	bx	lr

080469c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80469c8:	b580      	push	{r7, lr}
 80469ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80469cc:	f7fa fac8 	bl	8040f60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80469d0:	bf00      	nop
 80469d2:	bd80      	pop	{r7, pc}

080469d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80469d4:	b480      	push	{r7}
 80469d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80469d8:	4b07      	ldr	r3, [pc, #28]	; (80469f8 <SystemInit+0x24>)
 80469da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80469de:	4a06      	ldr	r2, [pc, #24]	; (80469f8 <SystemInit+0x24>)
 80469e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80469e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80469e8:	4b03      	ldr	r3, [pc, #12]	; (80469f8 <SystemInit+0x24>)
 80469ea:	4a04      	ldr	r2, [pc, #16]	; (80469fc <SystemInit+0x28>)
 80469ec:	609a      	str	r2, [r3, #8]
#endif


}
 80469ee:	bf00      	nop
 80469f0:	46bd      	mov	sp, r7
 80469f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80469f6:	4770      	bx	lr
 80469f8:	e000ed00 	.word	0xe000ed00
 80469fc:	08040000 	.word	0x08040000

08046a00 <Rand_num>:
#include "STMGame.h"

extern RNG_HandleTypeDef hrng ;

 uint32_t Rand_num(void)
{
 8046a00:	b580      	push	{r7, lr}
 8046a02:	af00      	add	r7, sp, #0
	 if (HAL_RNG_GenerateRandomNumber(&hrng, &(hrng.RandomNumber)) == HAL_OK)
 8046a04:	4906      	ldr	r1, [pc, #24]	; (8046a20 <Rand_num+0x20>)
 8046a06:	4807      	ldr	r0, [pc, #28]	; (8046a24 <Rand_num+0x24>)
 8046a08:	f7fd fd0a 	bl	8044420 <HAL_RNG_GenerateRandomNumber>
 8046a0c:	4603      	mov	r3, r0
 8046a0e:	2b00      	cmp	r3, #0
 8046a10:	d102      	bne.n	8046a18 <Rand_num+0x18>
	   {
	     return hrng.RandomNumber;
 8046a12:	4b04      	ldr	r3, [pc, #16]	; (8046a24 <Rand_num+0x24>)
 8046a14:	68db      	ldr	r3, [r3, #12]
 8046a16:	e000      	b.n	8046a1a <Rand_num+0x1a>
	   }
	   else
	   {
	     return 0U;
 8046a18:	2300      	movs	r3, #0
	   }
}
 8046a1a:	4618      	mov	r0, r3
 8046a1c:	bd80      	pop	{r7, pc}
 8046a1e:	bf00      	nop
 8046a20:	20000230 	.word	0x20000230
 8046a24:	20000224 	.word	0x20000224

08046a28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8046a28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8046a60 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8046a2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8046a2e:	e003      	b.n	8046a38 <LoopCopyDataInit>

08046a30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8046a30:	4b0c      	ldr	r3, [pc, #48]	; (8046a64 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8046a32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8046a34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8046a36:	3104      	adds	r1, #4

08046a38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8046a38:	480b      	ldr	r0, [pc, #44]	; (8046a68 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8046a3a:	4b0c      	ldr	r3, [pc, #48]	; (8046a6c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8046a3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8046a3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8046a40:	d3f6      	bcc.n	8046a30 <CopyDataInit>
  ldr  r2, =_sbss
 8046a42:	4a0b      	ldr	r2, [pc, #44]	; (8046a70 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8046a44:	e002      	b.n	8046a4c <LoopFillZerobss>

08046a46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8046a46:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8046a48:	f842 3b04 	str.w	r3, [r2], #4

08046a4c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8046a4c:	4b09      	ldr	r3, [pc, #36]	; (8046a74 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8046a4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8046a50:	d3f9      	bcc.n	8046a46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8046a52:	f7ff ffbf 	bl	80469d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8046a56:	f001 fde7 	bl	8048628 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8046a5a:	f000 feff 	bl	804785c <main>
  bx  lr    
 8046a5e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8046a60:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8046a64:	08081200 	.word	0x08081200
  ldr  r0, =_sdata
 8046a68:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8046a6c:	200000a4 	.word	0x200000a4
  ldr  r2, =_sbss
 8046a70:	200000a4 	.word	0x200000a4
  ldr  r3, = _ebss
 8046a74:	200060b8 	.word	0x200060b8

08046a78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8046a78:	e7fe      	b.n	8046a78 <ADC_IRQHandler>
	...

08046a7c <GamePad_Init>:
#define GAMEPAD_PORT    GPIOB

//Functions definitions 

void GamePad_Init(void) 
{
 8046a7c:	b580      	push	{r7, lr}
 8046a7e:	b086      	sub	sp, #24
 8046a80:	af00      	add	r7, sp, #0

	*(u8*)(&(GamePad.button)) = 0xFF ;
 8046a82:	4b15      	ldr	r3, [pc, #84]	; (8046ad8 <GamePad_Init+0x5c>)
 8046a84:	22ff      	movs	r2, #255	; 0xff
 8046a86:	701a      	strb	r2, [r3, #0]
	GamePad.Prev_rd = 0xFF ;
 8046a88:	4b14      	ldr	r3, [pc, #80]	; (8046adc <GamePad_Init+0x60>)
 8046a8a:	22ff      	movs	r2, #255	; 0xff
 8046a8c:	705a      	strb	r2, [r3, #1]

	memset(GamePad.BtnDebouceCounter , 0 , GAMEPAD_NO_BTN) ;
 8046a8e:	2208      	movs	r2, #8
 8046a90:	2100      	movs	r1, #0
 8046a92:	4813      	ldr	r0, [pc, #76]	; (8046ae0 <GamePad_Init+0x64>)
 8046a94:	f001 fdfa 	bl	804868c <memset>
  GPIO_InitTypeDef GPIO_InitStruct;
	
  GPIO_InitStruct.Pin = GAMEPAD_SH_LD|GAMEPAD_CLK;
 8046a98:	2318      	movs	r3, #24
 8046a9a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8046a9c:	2301      	movs	r3, #1
 8046a9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8046aa0:	2300      	movs	r3, #0
 8046aa2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH   ;
 8046aa4:	2302      	movs	r3, #2
 8046aa6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GAMEPAD_PORT, &GPIO_InitStruct);
 8046aa8:	1d3b      	adds	r3, r7, #4
 8046aaa:	4619      	mov	r1, r3
 8046aac:	480d      	ldr	r0, [pc, #52]	; (8046ae4 <GamePad_Init+0x68>)
 8046aae:	f7fa fff7 	bl	8041aa0 <HAL_GPIO_Init>
	
  GPIO_InitStruct.Pin = GAMEPAD_DATAIN0;
 8046ab2:	2380      	movs	r3, #128	; 0x80
 8046ab4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8046ab6:	2300      	movs	r3, #0
 8046ab8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8046aba:	2302      	movs	r3, #2
 8046abc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GAMEPAD_PORT, &GPIO_InitStruct);
 8046abe:	1d3b      	adds	r3, r7, #4
 8046ac0:	4619      	mov	r1, r3
 8046ac2:	4808      	ldr	r0, [pc, #32]	; (8046ae4 <GamePad_Init+0x68>)
 8046ac4:	f7fa ffec 	bl	8041aa0 <HAL_GPIO_Init>
	
	GAMEPAD_PORT->ODR = 0 ;
 8046ac8:	4b06      	ldr	r3, [pc, #24]	; (8046ae4 <GamePad_Init+0x68>)
 8046aca:	2200      	movs	r2, #0
 8046acc:	615a      	str	r2, [r3, #20]
	
}
 8046ace:	bf00      	nop
 8046ad0:	3718      	adds	r7, #24
 8046ad2:	46bd      	mov	sp, r7
 8046ad4:	bd80      	pop	{r7, pc}
 8046ad6:	bf00      	nop
 8046ad8:	200003a6 	.word	0x200003a6
 8046adc:	200003a4 	.word	0x200003a4
 8046ae0:	200003a7 	.word	0x200003a7
 8046ae4:	40020400 	.word	0x40020400

08046ae8 <GamePad_Read>:

GAMEPAD_BUTTON GamePad_Read(void)
{
 8046ae8:	b590      	push	{r4, r7, lr}
 8046aea:	b085      	sub	sp, #20
 8046aec:	af00      	add	r7, sp, #0
 8046aee:	6078      	str	r0, [r7, #4]
	volatile u8 currState ;
	for(u8 i = 0 ; i < GAMEPAD_NO_BTN ; i++)
 8046af0:	2300      	movs	r3, #0
 8046af2:	73fb      	strb	r3, [r7, #15]
 8046af4:	e059      	b.n	8046baa <GamePad_Read+0xc2>
	{
	 currState = ReadCurrentState() ;
 8046af6:	f000 f86b 	bl	8046bd0 <ReadCurrentState>
 8046afa:	4603      	mov	r3, r0
 8046afc:	73bb      	strb	r3, [r7, #14]
	 if(currState == 0) // All button released
 8046afe:	7bbb      	ldrb	r3, [r7, #14]
 8046b00:	b2db      	uxtb	r3, r3
 8046b02:	2b00      	cmp	r3, #0
 8046b04:	d102      	bne.n	8046b0c <GamePad_Read+0x24>
	 {
		 *(u8*)(&(GamePad.button)) = 0xFF ;
 8046b06:	4b30      	ldr	r3, [pc, #192]	; (8046bc8 <GamePad_Read+0xe0>)
 8046b08:	22ff      	movs	r2, #255	; 0xff
 8046b0a:	701a      	strb	r2, [r3, #0]
	 }
		if( currState & (1<< i) )
 8046b0c:	7bbb      	ldrb	r3, [r7, #14]
 8046b0e:	b2db      	uxtb	r3, r3
 8046b10:	461a      	mov	r2, r3
 8046b12:	7bfb      	ldrb	r3, [r7, #15]
 8046b14:	fa42 f303 	asr.w	r3, r2, r3
 8046b18:	f003 0301 	and.w	r3, r3, #1
 8046b1c:	2b00      	cmp	r3, #0
 8046b1e:	d01f      	beq.n	8046b60 <GamePad_Read+0x78>
		{
			if(( currState & (1<< i)) == (GamePad.Prev_rd & (1<<i))  )
 8046b20:	4b2a      	ldr	r3, [pc, #168]	; (8046bcc <GamePad_Read+0xe4>)
 8046b22:	785b      	ldrb	r3, [r3, #1]
 8046b24:	b2da      	uxtb	r2, r3
 8046b26:	7bbb      	ldrb	r3, [r7, #14]
 8046b28:	b2db      	uxtb	r3, r3
 8046b2a:	4053      	eors	r3, r2
 8046b2c:	b2db      	uxtb	r3, r3
 8046b2e:	461a      	mov	r2, r3
 8046b30:	7bfb      	ldrb	r3, [r7, #15]
 8046b32:	fa42 f303 	asr.w	r3, r2, r3
 8046b36:	f003 0301 	and.w	r3, r3, #1
 8046b3a:	2b00      	cmp	r3, #0
 8046b3c:	d10b      	bne.n	8046b56 <GamePad_Read+0x6e>
			{
				  GamePad.BtnDebouceCounter[i]++ ;
 8046b3e:	7bfb      	ldrb	r3, [r7, #15]
 8046b40:	4a22      	ldr	r2, [pc, #136]	; (8046bcc <GamePad_Read+0xe4>)
 8046b42:	441a      	add	r2, r3
 8046b44:	78d2      	ldrb	r2, [r2, #3]
 8046b46:	b2d2      	uxtb	r2, r2
 8046b48:	3201      	adds	r2, #1
 8046b4a:	b2d1      	uxtb	r1, r2
 8046b4c:	4a1f      	ldr	r2, [pc, #124]	; (8046bcc <GamePad_Read+0xe4>)
 8046b4e:	4413      	add	r3, r2
 8046b50:	460a      	mov	r2, r1
 8046b52:	70da      	strb	r2, [r3, #3]
 8046b54:	e004      	b.n	8046b60 <GamePad_Read+0x78>
			}
			else
				{
				  GamePad.BtnDebouceCounter[i] = 0 ;
 8046b56:	7bfb      	ldrb	r3, [r7, #15]
 8046b58:	4a1c      	ldr	r2, [pc, #112]	; (8046bcc <GamePad_Read+0xe4>)
 8046b5a:	4413      	add	r3, r2
 8046b5c:	2200      	movs	r2, #0
 8046b5e:	70da      	strb	r2, [r3, #3]
				}

		}


		if(GamePad.BtnDebouceCounter[i] >= MAX_DEBOUNCE_COUNT)
 8046b60:	7bfb      	ldrb	r3, [r7, #15]
 8046b62:	4a1a      	ldr	r2, [pc, #104]	; (8046bcc <GamePad_Read+0xe4>)
 8046b64:	4413      	add	r3, r2
 8046b66:	78db      	ldrb	r3, [r3, #3]
 8046b68:	b2db      	uxtb	r3, r3
 8046b6a:	2b04      	cmp	r3, #4
 8046b6c:	d916      	bls.n	8046b9c <GamePad_Read+0xb4>
		{
			*(u8*)(&(GamePad.button)) = 0xFF ;
 8046b6e:	4b16      	ldr	r3, [pc, #88]	; (8046bc8 <GamePad_Read+0xe0>)
 8046b70:	22ff      	movs	r2, #255	; 0xff
 8046b72:	701a      	strb	r2, [r3, #0]
			(*(u8*)(&(GamePad.button))) &= ~(1<<i) ;   // set 0 means pressed
 8046b74:	4b14      	ldr	r3, [pc, #80]	; (8046bc8 <GamePad_Read+0xe0>)
 8046b76:	781b      	ldrb	r3, [r3, #0]
 8046b78:	b25a      	sxtb	r2, r3
 8046b7a:	7bfb      	ldrb	r3, [r7, #15]
 8046b7c:	2101      	movs	r1, #1
 8046b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8046b82:	b25b      	sxtb	r3, r3
 8046b84:	43db      	mvns	r3, r3
 8046b86:	b25b      	sxtb	r3, r3
 8046b88:	4013      	ands	r3, r2
 8046b8a:	b25a      	sxtb	r2, r3
 8046b8c:	4b0e      	ldr	r3, [pc, #56]	; (8046bc8 <GamePad_Read+0xe0>)
 8046b8e:	b2d2      	uxtb	r2, r2
 8046b90:	701a      	strb	r2, [r3, #0]
			GamePad.BtnDebouceCounter[i] = 0 ;
 8046b92:	7bfb      	ldrb	r3, [r7, #15]
 8046b94:	4a0d      	ldr	r2, [pc, #52]	; (8046bcc <GamePad_Read+0xe4>)
 8046b96:	4413      	add	r3, r2
 8046b98:	2200      	movs	r2, #0
 8046b9a:	70da      	strb	r2, [r3, #3]
		}
		GamePad.Prev_rd = currState ;
 8046b9c:	7bbb      	ldrb	r3, [r7, #14]
 8046b9e:	b2da      	uxtb	r2, r3
 8046ba0:	4b0a      	ldr	r3, [pc, #40]	; (8046bcc <GamePad_Read+0xe4>)
 8046ba2:	705a      	strb	r2, [r3, #1]
	for(u8 i = 0 ; i < GAMEPAD_NO_BTN ; i++)
 8046ba4:	7bfb      	ldrb	r3, [r7, #15]
 8046ba6:	3301      	adds	r3, #1
 8046ba8:	73fb      	strb	r3, [r7, #15]
 8046baa:	7bfb      	ldrb	r3, [r7, #15]
 8046bac:	2b07      	cmp	r3, #7
 8046bae:	d9a2      	bls.n	8046af6 <GamePad_Read+0xe>
	}

	return GamePad ;
 8046bb0:	687b      	ldr	r3, [r7, #4]
 8046bb2:	4a06      	ldr	r2, [pc, #24]	; (8046bcc <GamePad_Read+0xe4>)
 8046bb4:	461c      	mov	r4, r3
 8046bb6:	4613      	mov	r3, r2
 8046bb8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8046bba:	6020      	str	r0, [r4, #0]
 8046bbc:	6061      	str	r1, [r4, #4]
 8046bbe:	60a2      	str	r2, [r4, #8]
}
 8046bc0:	6878      	ldr	r0, [r7, #4]
 8046bc2:	3714      	adds	r7, #20
 8046bc4:	46bd      	mov	sp, r7
 8046bc6:	bd90      	pop	{r4, r7, pc}
 8046bc8:	200003a6 	.word	0x200003a6
 8046bcc:	200003a4 	.word	0x200003a4

08046bd0 <ReadCurrentState>:

static u8 ReadCurrentState(void)
{
 8046bd0:	b590      	push	{r4, r7, lr}
 8046bd2:	b083      	sub	sp, #12
 8046bd4:	af00      	add	r7, sp, #0
	volatile u8 current =0 ;
 8046bd6:	2300      	movs	r3, #0
 8046bd8:	71bb      	strb	r3, [r7, #6]

	HAL_GPIO_WritePin(GAMEPAD_PORT , GAMEPAD_CLK , GPIO_PIN_RESET) ;
 8046bda:	2200      	movs	r2, #0
 8046bdc:	2110      	movs	r1, #16
 8046bde:	4822      	ldr	r0, [pc, #136]	; (8046c68 <ReadCurrentState+0x98>)
 8046be0:	f7fb fa2e 	bl	8042040 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GAMEPAD_PORT , GAMEPAD_SH_LD , GPIO_PIN_RESET) ;
 8046be4:	2200      	movs	r2, #0
 8046be6:	2108      	movs	r1, #8
 8046be8:	481f      	ldr	r0, [pc, #124]	; (8046c68 <ReadCurrentState+0x98>)
 8046bea:	f7fb fa29 	bl	8042040 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GAMEPAD_PORT , GAMEPAD_SH_LD , GPIO_PIN_SET) ;
 8046bee:	2201      	movs	r2, #1
 8046bf0:	2108      	movs	r1, #8
 8046bf2:	481d      	ldr	r0, [pc, #116]	; (8046c68 <ReadCurrentState+0x98>)
 8046bf4:	f7fb fa24 	bl	8042040 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GAMEPAD_PORT , GAMEPAD_SH_LD , GPIO_PIN_RESET) ;
 8046bf8:	2200      	movs	r2, #0
 8046bfa:	2108      	movs	r1, #8
 8046bfc:	481a      	ldr	r0, [pc, #104]	; (8046c68 <ReadCurrentState+0x98>)
 8046bfe:	f7fb fa1f 	bl	8042040 <HAL_GPIO_WritePin>

	for ( u8 i = 0 ;  i < GAMEPAD_NO_BTN ; i++)
 8046c02:	2300      	movs	r3, #0
 8046c04:	71fb      	strb	r3, [r7, #7]
 8046c06:	e01a      	b.n	8046c3e <ReadCurrentState+0x6e>
		{
		current = (current <<1)| HAL_GPIO_ReadPin(GAMEPAD_PORT , GAMEPAD_DATAIN0) ;
 8046c08:	79bb      	ldrb	r3, [r7, #6]
 8046c0a:	b2db      	uxtb	r3, r3
 8046c0c:	005b      	lsls	r3, r3, #1
 8046c0e:	b25c      	sxtb	r4, r3
 8046c10:	2180      	movs	r1, #128	; 0x80
 8046c12:	4815      	ldr	r0, [pc, #84]	; (8046c68 <ReadCurrentState+0x98>)
 8046c14:	f7fb f9fc 	bl	8042010 <HAL_GPIO_ReadPin>
 8046c18:	4603      	mov	r3, r0
 8046c1a:	b25b      	sxtb	r3, r3
 8046c1c:	4323      	orrs	r3, r4
 8046c1e:	b25b      	sxtb	r3, r3
 8046c20:	b2db      	uxtb	r3, r3
 8046c22:	71bb      	strb	r3, [r7, #6]

		//clock
		HAL_GPIO_WritePin(GAMEPAD_PORT , GAMEPAD_CLK  , GPIO_PIN_SET)   ;
 8046c24:	2201      	movs	r2, #1
 8046c26:	2110      	movs	r1, #16
 8046c28:	480f      	ldr	r0, [pc, #60]	; (8046c68 <ReadCurrentState+0x98>)
 8046c2a:	f7fb fa09 	bl	8042040 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GAMEPAD_PORT , GAMEPAD_CLK  , GPIO_PIN_RESET) ;
 8046c2e:	2200      	movs	r2, #0
 8046c30:	2110      	movs	r1, #16
 8046c32:	480d      	ldr	r0, [pc, #52]	; (8046c68 <ReadCurrentState+0x98>)
 8046c34:	f7fb fa04 	bl	8042040 <HAL_GPIO_WritePin>
	for ( u8 i = 0 ;  i < GAMEPAD_NO_BTN ; i++)
 8046c38:	79fb      	ldrb	r3, [r7, #7]
 8046c3a:	3301      	adds	r3, #1
 8046c3c:	71fb      	strb	r3, [r7, #7]
 8046c3e:	79fb      	ldrb	r3, [r7, #7]
 8046c40:	2b07      	cmp	r3, #7
 8046c42:	d9e1      	bls.n	8046c08 <ReadCurrentState+0x38>

		}
	GamePad.Connection = current ?GP_CONNECTED: GP_NOT_CONNECTED ;
 8046c44:	79bb      	ldrb	r3, [r7, #6]
 8046c46:	b2db      	uxtb	r3, r3
 8046c48:	2b00      	cmp	r3, #0
 8046c4a:	bf14      	ite	ne
 8046c4c:	2301      	movne	r3, #1
 8046c4e:	2300      	moveq	r3, #0
 8046c50:	b2db      	uxtb	r3, r3
 8046c52:	461a      	mov	r2, r3
 8046c54:	4b05      	ldr	r3, [pc, #20]	; (8046c6c <ReadCurrentState+0x9c>)
 8046c56:	72da      	strb	r2, [r3, #11]
	return ~current ;
 8046c58:	79bb      	ldrb	r3, [r7, #6]
 8046c5a:	b2db      	uxtb	r3, r3
 8046c5c:	43db      	mvns	r3, r3
 8046c5e:	b2db      	uxtb	r3, r3
}
 8046c60:	4618      	mov	r0, r3
 8046c62:	370c      	adds	r7, #12
 8046c64:	46bd      	mov	sp, r7
 8046c66:	bd90      	pop	{r4, r7, pc}
 8046c68:	40020400 	.word	0x40020400
 8046c6c:	200003a4 	.word	0x200003a4

08046c70 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8046c70:	b580      	push	{r7, lr}
 8046c72:	b084      	sub	sp, #16
 8046c74:	af00      	add	r7, sp, #0
 8046c76:	4603      	mov	r3, r0
 8046c78:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8046c7a:	88fb      	ldrh	r3, [r7, #6]
 8046c7c:	4618      	mov	r0, r3
 8046c7e:	f000 f949 	bl	8046f14 <stmpe811_GetInstance>
 8046c82:	4603      	mov	r3, r0
 8046c84:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8046c86:	7bfb      	ldrb	r3, [r7, #15]
 8046c88:	2bff      	cmp	r3, #255	; 0xff
 8046c8a:	d112      	bne.n	8046cb2 <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8046c8c:	2000      	movs	r0, #0
 8046c8e:	f000 f941 	bl	8046f14 <stmpe811_GetInstance>
 8046c92:	4603      	mov	r3, r0
 8046c94:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8046c96:	7bbb      	ldrb	r3, [r7, #14]
 8046c98:	2b01      	cmp	r3, #1
 8046c9a:	d80a      	bhi.n	8046cb2 <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8046c9c:	7bbb      	ldrb	r3, [r7, #14]
 8046c9e:	88fa      	ldrh	r2, [r7, #6]
 8046ca0:	b2d1      	uxtb	r1, r2
 8046ca2:	4a06      	ldr	r2, [pc, #24]	; (8046cbc <stmpe811_Init+0x4c>)
 8046ca4:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init();
 8046ca6:	f7ff fb30 	bl	804630a <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8046caa:	88fb      	ldrh	r3, [r7, #6]
 8046cac:	4618      	mov	r0, r3
 8046cae:	f000 f807 	bl	8046cc0 <stmpe811_Reset>
    }
  }
}
 8046cb2:	bf00      	nop
 8046cb4:	3710      	adds	r7, #16
 8046cb6:	46bd      	mov	sp, r7
 8046cb8:	bd80      	pop	{r7, pc}
 8046cba:	bf00      	nop
 8046cbc:	200003b0 	.word	0x200003b0

08046cc0 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8046cc0:	b580      	push	{r7, lr}
 8046cc2:	b082      	sub	sp, #8
 8046cc4:	af00      	add	r7, sp, #0
 8046cc6:	4603      	mov	r3, r0
 8046cc8:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8046cca:	88fb      	ldrh	r3, [r7, #6]
 8046ccc:	b2db      	uxtb	r3, r3
 8046cce:	2202      	movs	r2, #2
 8046cd0:	2103      	movs	r1, #3
 8046cd2:	4618      	mov	r0, r3
 8046cd4:	f7ff fb1f 	bl	8046316 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8046cd8:	200a      	movs	r0, #10
 8046cda:	f7ff fb59 	bl	8046390 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8046cde:	88fb      	ldrh	r3, [r7, #6]
 8046ce0:	b2db      	uxtb	r3, r3
 8046ce2:	2200      	movs	r2, #0
 8046ce4:	2103      	movs	r1, #3
 8046ce6:	4618      	mov	r0, r3
 8046ce8:	f7ff fb15 	bl	8046316 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8046cec:	2002      	movs	r0, #2
 8046cee:	f7ff fb4f 	bl	8046390 <IOE_Delay>
}
 8046cf2:	bf00      	nop
 8046cf4:	3708      	adds	r7, #8
 8046cf6:	46bd      	mov	sp, r7
 8046cf8:	bd80      	pop	{r7, pc}

08046cfa <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8046cfa:	b580      	push	{r7, lr}
 8046cfc:	b084      	sub	sp, #16
 8046cfe:	af00      	add	r7, sp, #0
 8046d00:	4603      	mov	r3, r0
 8046d02:	6039      	str	r1, [r7, #0]
 8046d04:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8046d06:	2300      	movs	r3, #0
 8046d08:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8046d0a:	88fb      	ldrh	r3, [r7, #6]
 8046d0c:	b2db      	uxtb	r3, r3
 8046d0e:	2117      	movs	r1, #23
 8046d10:	4618      	mov	r0, r3
 8046d12:	f7ff fb13 	bl	804633c <IOE_Read>
 8046d16:	4603      	mov	r3, r0
 8046d18:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8046d1a:	683b      	ldr	r3, [r7, #0]
 8046d1c:	b25b      	sxtb	r3, r3
 8046d1e:	43db      	mvns	r3, r3
 8046d20:	b25a      	sxtb	r2, r3
 8046d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8046d26:	4013      	ands	r3, r2
 8046d28:	b25b      	sxtb	r3, r3
 8046d2a:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8046d2c:	88fb      	ldrh	r3, [r7, #6]
 8046d2e:	b2db      	uxtb	r3, r3
 8046d30:	7bfa      	ldrb	r2, [r7, #15]
 8046d32:	2117      	movs	r1, #23
 8046d34:	4618      	mov	r0, r3
 8046d36:	f7ff faee 	bl	8046316 <IOE_Write>
}
 8046d3a:	bf00      	nop
 8046d3c:	3710      	adds	r7, #16
 8046d3e:	46bd      	mov	sp, r7
 8046d40:	bd80      	pop	{r7, pc}

08046d42 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8046d42:	b580      	push	{r7, lr}
 8046d44:	b084      	sub	sp, #16
 8046d46:	af00      	add	r7, sp, #0
 8046d48:	4603      	mov	r3, r0
 8046d4a:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8046d4c:	88fb      	ldrh	r3, [r7, #6]
 8046d4e:	b2db      	uxtb	r3, r3
 8046d50:	2104      	movs	r1, #4
 8046d52:	4618      	mov	r0, r3
 8046d54:	f7ff faf2 	bl	804633c <IOE_Read>
 8046d58:	4603      	mov	r3, r0
 8046d5a:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8046d5c:	7bfb      	ldrb	r3, [r7, #15]
 8046d5e:	f023 0304 	bic.w	r3, r3, #4
 8046d62:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8046d64:	88fb      	ldrh	r3, [r7, #6]
 8046d66:	b2db      	uxtb	r3, r3
 8046d68:	7bfa      	ldrb	r2, [r7, #15]
 8046d6a:	2104      	movs	r1, #4
 8046d6c:	4618      	mov	r0, r3
 8046d6e:	f7ff fad2 	bl	8046316 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8046d72:	88fb      	ldrh	r3, [r7, #6]
 8046d74:	21f0      	movs	r1, #240	; 0xf0
 8046d76:	4618      	mov	r0, r3
 8046d78:	f7ff ffbf 	bl	8046cfa <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8046d7c:	7bfb      	ldrb	r3, [r7, #15]
 8046d7e:	f023 0303 	bic.w	r3, r3, #3
 8046d82:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8046d84:	88fb      	ldrh	r3, [r7, #6]
 8046d86:	b2db      	uxtb	r3, r3
 8046d88:	7bfa      	ldrb	r2, [r7, #15]
 8046d8a:	2104      	movs	r1, #4
 8046d8c:	4618      	mov	r0, r3
 8046d8e:	f7ff fac2 	bl	8046316 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8046d92:	88fb      	ldrh	r3, [r7, #6]
 8046d94:	b2db      	uxtb	r3, r3
 8046d96:	2249      	movs	r2, #73	; 0x49
 8046d98:	2120      	movs	r1, #32
 8046d9a:	4618      	mov	r0, r3
 8046d9c:	f7ff fabb 	bl	8046316 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8046da0:	2002      	movs	r0, #2
 8046da2:	f7ff faf5 	bl	8046390 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8046da6:	88fb      	ldrh	r3, [r7, #6]
 8046da8:	b2db      	uxtb	r3, r3
 8046daa:	2201      	movs	r2, #1
 8046dac:	2121      	movs	r1, #33	; 0x21
 8046dae:	4618      	mov	r0, r3
 8046db0:	f7ff fab1 	bl	8046316 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8046db4:	88fb      	ldrh	r3, [r7, #6]
 8046db6:	b2db      	uxtb	r3, r3
 8046db8:	229a      	movs	r2, #154	; 0x9a
 8046dba:	2141      	movs	r1, #65	; 0x41
 8046dbc:	4618      	mov	r0, r3
 8046dbe:	f7ff faaa 	bl	8046316 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8046dc2:	88fb      	ldrh	r3, [r7, #6]
 8046dc4:	b2db      	uxtb	r3, r3
 8046dc6:	2201      	movs	r2, #1
 8046dc8:	214a      	movs	r1, #74	; 0x4a
 8046dca:	4618      	mov	r0, r3
 8046dcc:	f7ff faa3 	bl	8046316 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8046dd0:	88fb      	ldrh	r3, [r7, #6]
 8046dd2:	b2db      	uxtb	r3, r3
 8046dd4:	2201      	movs	r2, #1
 8046dd6:	214b      	movs	r1, #75	; 0x4b
 8046dd8:	4618      	mov	r0, r3
 8046dda:	f7ff fa9c 	bl	8046316 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8046dde:	88fb      	ldrh	r3, [r7, #6]
 8046de0:	b2db      	uxtb	r3, r3
 8046de2:	2200      	movs	r2, #0
 8046de4:	214b      	movs	r1, #75	; 0x4b
 8046de6:	4618      	mov	r0, r3
 8046de8:	f7ff fa95 	bl	8046316 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8046dec:	88fb      	ldrh	r3, [r7, #6]
 8046dee:	b2db      	uxtb	r3, r3
 8046df0:	2201      	movs	r2, #1
 8046df2:	2156      	movs	r1, #86	; 0x56
 8046df4:	4618      	mov	r0, r3
 8046df6:	f7ff fa8e 	bl	8046316 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8046dfa:	88fb      	ldrh	r3, [r7, #6]
 8046dfc:	b2db      	uxtb	r3, r3
 8046dfe:	2201      	movs	r2, #1
 8046e00:	2158      	movs	r1, #88	; 0x58
 8046e02:	4618      	mov	r0, r3
 8046e04:	f7ff fa87 	bl	8046316 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8046e08:	88fb      	ldrh	r3, [r7, #6]
 8046e0a:	b2db      	uxtb	r3, r3
 8046e0c:	2201      	movs	r2, #1
 8046e0e:	2140      	movs	r1, #64	; 0x40
 8046e10:	4618      	mov	r0, r3
 8046e12:	f7ff fa80 	bl	8046316 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8046e16:	88fb      	ldrh	r3, [r7, #6]
 8046e18:	b2db      	uxtb	r3, r3
 8046e1a:	22ff      	movs	r2, #255	; 0xff
 8046e1c:	210b      	movs	r1, #11
 8046e1e:	4618      	mov	r0, r3
 8046e20:	f7ff fa79 	bl	8046316 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8046e24:	2002      	movs	r0, #2
 8046e26:	f7ff fab3 	bl	8046390 <IOE_Delay>
}
 8046e2a:	bf00      	nop
 8046e2c:	3710      	adds	r7, #16
 8046e2e:	46bd      	mov	sp, r7
 8046e30:	bd80      	pop	{r7, pc}

08046e32 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8046e32:	b580      	push	{r7, lr}
 8046e34:	b084      	sub	sp, #16
 8046e36:	af00      	add	r7, sp, #0
 8046e38:	4603      	mov	r3, r0
 8046e3a:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8046e3c:	2300      	movs	r3, #0
 8046e3e:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8046e40:	88fb      	ldrh	r3, [r7, #6]
 8046e42:	b2db      	uxtb	r3, r3
 8046e44:	2140      	movs	r1, #64	; 0x40
 8046e46:	4618      	mov	r0, r3
 8046e48:	f7ff fa78 	bl	804633c <IOE_Read>
 8046e4c:	4603      	mov	r3, r0
 8046e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8046e52:	2b80      	cmp	r3, #128	; 0x80
 8046e54:	bf0c      	ite	eq
 8046e56:	2301      	moveq	r3, #1
 8046e58:	2300      	movne	r3, #0
 8046e5a:	b2db      	uxtb	r3, r3
 8046e5c:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8046e5e:	7bbb      	ldrb	r3, [r7, #14]
 8046e60:	2b00      	cmp	r3, #0
 8046e62:	d00b      	beq.n	8046e7c <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8046e64:	88fb      	ldrh	r3, [r7, #6]
 8046e66:	b2db      	uxtb	r3, r3
 8046e68:	214c      	movs	r1, #76	; 0x4c
 8046e6a:	4618      	mov	r0, r3
 8046e6c:	f7ff fa66 	bl	804633c <IOE_Read>
 8046e70:	4603      	mov	r3, r0
 8046e72:	2b00      	cmp	r3, #0
 8046e74:	d010      	beq.n	8046e98 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8046e76:	2301      	movs	r3, #1
 8046e78:	73fb      	strb	r3, [r7, #15]
 8046e7a:	e00d      	b.n	8046e98 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8046e7c:	88fb      	ldrh	r3, [r7, #6]
 8046e7e:	b2db      	uxtb	r3, r3
 8046e80:	2201      	movs	r2, #1
 8046e82:	214b      	movs	r1, #75	; 0x4b
 8046e84:	4618      	mov	r0, r3
 8046e86:	f7ff fa46 	bl	8046316 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8046e8a:	88fb      	ldrh	r3, [r7, #6]
 8046e8c:	b2db      	uxtb	r3, r3
 8046e8e:	2200      	movs	r2, #0
 8046e90:	214b      	movs	r1, #75	; 0x4b
 8046e92:	4618      	mov	r0, r3
 8046e94:	f7ff fa3f 	bl	8046316 <IOE_Write>
  }
  
  return ret;
 8046e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8046e9a:	4618      	mov	r0, r3
 8046e9c:	3710      	adds	r7, #16
 8046e9e:	46bd      	mov	sp, r7
 8046ea0:	bd80      	pop	{r7, pc}

08046ea2 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8046ea2:	b580      	push	{r7, lr}
 8046ea4:	b086      	sub	sp, #24
 8046ea6:	af00      	add	r7, sp, #0
 8046ea8:	4603      	mov	r3, r0
 8046eaa:	60b9      	str	r1, [r7, #8]
 8046eac:	607a      	str	r2, [r7, #4]
 8046eae:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8046eb0:	89fb      	ldrh	r3, [r7, #14]
 8046eb2:	b2d8      	uxtb	r0, r3
 8046eb4:	f107 0210 	add.w	r2, r7, #16
 8046eb8:	2304      	movs	r3, #4
 8046eba:	21d7      	movs	r1, #215	; 0xd7
 8046ebc:	f7ff fa51 	bl	8046362 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8046ec0:	7c3b      	ldrb	r3, [r7, #16]
 8046ec2:	061a      	lsls	r2, r3, #24
 8046ec4:	7c7b      	ldrb	r3, [r7, #17]
 8046ec6:	041b      	lsls	r3, r3, #16
 8046ec8:	431a      	orrs	r2, r3
 8046eca:	7cbb      	ldrb	r3, [r7, #18]
 8046ecc:	021b      	lsls	r3, r3, #8
 8046ece:	4313      	orrs	r3, r2
 8046ed0:	7cfa      	ldrb	r2, [r7, #19]
 8046ed2:	4313      	orrs	r3, r2
 8046ed4:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8046ed6:	697b      	ldr	r3, [r7, #20]
 8046ed8:	0d1b      	lsrs	r3, r3, #20
 8046eda:	b29a      	uxth	r2, r3
 8046edc:	68bb      	ldr	r3, [r7, #8]
 8046ede:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8046ee0:	697b      	ldr	r3, [r7, #20]
 8046ee2:	0a1b      	lsrs	r3, r3, #8
 8046ee4:	b29b      	uxth	r3, r3
 8046ee6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8046eea:	b29a      	uxth	r2, r3
 8046eec:	687b      	ldr	r3, [r7, #4]
 8046eee:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8046ef0:	89fb      	ldrh	r3, [r7, #14]
 8046ef2:	b2db      	uxtb	r3, r3
 8046ef4:	2201      	movs	r2, #1
 8046ef6:	214b      	movs	r1, #75	; 0x4b
 8046ef8:	4618      	mov	r0, r3
 8046efa:	f7ff fa0c 	bl	8046316 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8046efe:	89fb      	ldrh	r3, [r7, #14]
 8046f00:	b2db      	uxtb	r3, r3
 8046f02:	2200      	movs	r2, #0
 8046f04:	214b      	movs	r1, #75	; 0x4b
 8046f06:	4618      	mov	r0, r3
 8046f08:	f7ff fa05 	bl	8046316 <IOE_Write>
}
 8046f0c:	bf00      	nop
 8046f0e:	3718      	adds	r7, #24
 8046f10:	46bd      	mov	sp, r7
 8046f12:	bd80      	pop	{r7, pc}

08046f14 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8046f14:	b480      	push	{r7}
 8046f16:	b085      	sub	sp, #20
 8046f18:	af00      	add	r7, sp, #0
 8046f1a:	4603      	mov	r3, r0
 8046f1c:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8046f1e:	2300      	movs	r3, #0
 8046f20:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8046f22:	2300      	movs	r3, #0
 8046f24:	73fb      	strb	r3, [r7, #15]
 8046f26:	e00b      	b.n	8046f40 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8046f28:	7bfb      	ldrb	r3, [r7, #15]
 8046f2a:	4a0a      	ldr	r2, [pc, #40]	; (8046f54 <stmpe811_GetInstance+0x40>)
 8046f2c:	5cd3      	ldrb	r3, [r2, r3]
 8046f2e:	b29b      	uxth	r3, r3
 8046f30:	88fa      	ldrh	r2, [r7, #6]
 8046f32:	429a      	cmp	r2, r3
 8046f34:	d101      	bne.n	8046f3a <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8046f36:	7bfb      	ldrb	r3, [r7, #15]
 8046f38:	e006      	b.n	8046f48 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8046f3a:	7bfb      	ldrb	r3, [r7, #15]
 8046f3c:	3301      	adds	r3, #1
 8046f3e:	73fb      	strb	r3, [r7, #15]
 8046f40:	7bfb      	ldrb	r3, [r7, #15]
 8046f42:	2b01      	cmp	r3, #1
 8046f44:	d9f0      	bls.n	8046f28 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8046f46:	23ff      	movs	r3, #255	; 0xff
}
 8046f48:	4618      	mov	r0, r3
 8046f4a:	3714      	adds	r7, #20
 8046f4c:	46bd      	mov	sp, r7
 8046f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046f52:	4770      	bx	lr
 8046f54:	200003b0 	.word	0x200003b0

08046f58 <touchpad_init>:
static TC_Panel TC_status ;

static uint8_t touchpad_get_xy(int16_t *x, int16_t *y);

void touchpad_init(void)
{
 8046f58:	b580      	push	{r7, lr}
 8046f5a:	af00      	add	r7, sp, #0
	stmpe811_Init(TS_I2C_ADDRESS);
 8046f5c:	2082      	movs	r0, #130	; 0x82
 8046f5e:	f7ff fe87 	bl	8046c70 <stmpe811_Init>
	stmpe811_TS_Start(TS_I2C_ADDRESS);
 8046f62:	2082      	movs	r0, #130	; 0x82
 8046f64:	f7ff feed 	bl	8046d42 <stmpe811_TS_Start>
}
 8046f68:	bf00      	nop
 8046f6a:	bd80      	pop	{r7, pc}

08046f6c <touchpad_read>:

TC_Panel touchpad_read(void)
{
 8046f6c:	b580      	push	{r7, lr}
 8046f6e:	b084      	sub	sp, #16
 8046f70:	af00      	add	r7, sp, #0
 8046f72:	6078      	str	r0, [r7, #4]
	static int16_t last_x = 0;
	static int16_t last_y = 0;

	uint8_t detected;

	detected = touchpad_get_xy(&TC_status.x, &TC_status.y);
 8046f74:	4916      	ldr	r1, [pc, #88]	; (8046fd0 <touchpad_read+0x64>)
 8046f76:	4817      	ldr	r0, [pc, #92]	; (8046fd4 <touchpad_read+0x68>)
 8046f78:	f000 f832 	bl	8046fe0 <touchpad_get_xy>
 8046f7c:	4603      	mov	r3, r0
 8046f7e:	73fb      	strb	r3, [r7, #15]
	if(detected)
 8046f80:	7bfb      	ldrb	r3, [r7, #15]
 8046f82:	2b00      	cmp	r3, #0
 8046f84:	d00d      	beq.n	8046fa2 <touchpad_read+0x36>
	{

		last_x = TC_status.x;
 8046f86:	4b13      	ldr	r3, [pc, #76]	; (8046fd4 <touchpad_read+0x68>)
 8046f88:	f9b3 2000 	ldrsh.w	r2, [r3]
 8046f8c:	4b12      	ldr	r3, [pc, #72]	; (8046fd8 <touchpad_read+0x6c>)
 8046f8e:	801a      	strh	r2, [r3, #0]
		last_y = TC_status.y;
 8046f90:	4b10      	ldr	r3, [pc, #64]	; (8046fd4 <touchpad_read+0x68>)
 8046f92:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8046f96:	4b11      	ldr	r3, [pc, #68]	; (8046fdc <touchpad_read+0x70>)
 8046f98:	801a      	strh	r2, [r3, #0]

		TC_status.state = TC_PRESSED ;
 8046f9a:	4b0e      	ldr	r3, [pc, #56]	; (8046fd4 <touchpad_read+0x68>)
 8046f9c:	2201      	movs	r2, #1
 8046f9e:	711a      	strb	r2, [r3, #4]
 8046fa0:	e00c      	b.n	8046fbc <touchpad_read+0x50>
	}
	else
	{
		TC_status.x = last_x;
 8046fa2:	4b0d      	ldr	r3, [pc, #52]	; (8046fd8 <touchpad_read+0x6c>)
 8046fa4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8046fa8:	4b0a      	ldr	r3, [pc, #40]	; (8046fd4 <touchpad_read+0x68>)
 8046faa:	801a      	strh	r2, [r3, #0]
		TC_status.y = last_y;
 8046fac:	4b0b      	ldr	r3, [pc, #44]	; (8046fdc <touchpad_read+0x70>)
 8046fae:	f9b3 2000 	ldrsh.w	r2, [r3]
 8046fb2:	4b08      	ldr	r3, [pc, #32]	; (8046fd4 <touchpad_read+0x68>)
 8046fb4:	805a      	strh	r2, [r3, #2]
		TC_status.state = TC_RELEASED ;
 8046fb6:	4b07      	ldr	r3, [pc, #28]	; (8046fd4 <touchpad_read+0x68>)
 8046fb8:	2200      	movs	r2, #0
 8046fba:	711a      	strb	r2, [r3, #4]
	}

	return TC_status;
 8046fbc:	687b      	ldr	r3, [r7, #4]
 8046fbe:	4a05      	ldr	r2, [pc, #20]	; (8046fd4 <touchpad_read+0x68>)
 8046fc0:	6810      	ldr	r0, [r2, #0]
 8046fc2:	6018      	str	r0, [r3, #0]
 8046fc4:	8892      	ldrh	r2, [r2, #4]
 8046fc6:	809a      	strh	r2, [r3, #4]
}
 8046fc8:	6878      	ldr	r0, [r7, #4]
 8046fca:	3710      	adds	r7, #16
 8046fcc:	46bd      	mov	sp, r7
 8046fce:	bd80      	pop	{r7, pc}
 8046fd0:	200003b6 	.word	0x200003b6
 8046fd4:	200003b4 	.word	0x200003b4
 8046fd8:	200003ba 	.word	0x200003ba
 8046fdc:	200003bc 	.word	0x200003bc

08046fe0 <touchpad_get_xy>:


//Private functions

static uint8_t touchpad_get_xy(int16_t *x, int16_t *y)
{
 8046fe0:	b580      	push	{r7, lr}
 8046fe2:	b086      	sub	sp, #24
 8046fe4:	af00      	add	r7, sp, #0
 8046fe6:	6078      	str	r0, [r7, #4]
 8046fe8:	6039      	str	r1, [r7, #0]
	static int32_t _x = 0, _y = 0;
	int16_t xDiff, yDiff, xr, yr;
	uint16_t x_raw, y_raw;;

	uint8_t detected;
	detected = stmpe811_TS_DetectTouch(TS_I2C_ADDRESS);
 8046fea:	2082      	movs	r0, #130	; 0x82
 8046fec:	f7ff ff21 	bl	8046e32 <stmpe811_TS_DetectTouch>
 8046ff0:	4603      	mov	r3, r0
 8046ff2:	74fb      	strb	r3, [r7, #19]

	if(!detected) return FALSE;
 8046ff4:	7cfb      	ldrb	r3, [r7, #19]
 8046ff6:	2b00      	cmp	r3, #0
 8046ff8:	d101      	bne.n	8046ffe <touchpad_get_xy+0x1e>
 8046ffa:	2300      	movs	r3, #0
 8046ffc:	e092      	b.n	8047124 <touchpad_get_xy+0x144>


	stmpe811_TS_GetXY(TS_I2C_ADDRESS, &x_raw, &y_raw);
 8046ffe:	f107 020a 	add.w	r2, r7, #10
 8047002:	f107 030c 	add.w	r3, r7, #12
 8047006:	4619      	mov	r1, r3
 8047008:	2082      	movs	r0, #130	; 0x82
 804700a:	f7ff ff4a 	bl	8046ea2 <stmpe811_TS_GetXY>

	/* Y value first correction */
	y_raw -= 360;
 804700e:	897b      	ldrh	r3, [r7, #10]
 8047010:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8047014:	b29b      	uxth	r3, r3
 8047016:	817b      	strh	r3, [r7, #10]

	/* Y value second correction */
	yr = y_raw / 11;
 8047018:	897b      	ldrh	r3, [r7, #10]
 804701a:	4a44      	ldr	r2, [pc, #272]	; (804712c <touchpad_get_xy+0x14c>)
 804701c:	fba2 2303 	umull	r2, r3, r2, r3
 8047020:	08db      	lsrs	r3, r3, #3
 8047022:	b29b      	uxth	r3, r3
 8047024:	82bb      	strh	r3, [r7, #20]

	/* Return y_raw position value */
	if(yr <= 0) yr = 0;
 8047026:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 804702a:	2b00      	cmp	r3, #0
 804702c:	dc02      	bgt.n	8047034 <touchpad_get_xy+0x54>
 804702e:	2300      	movs	r3, #0
 8047030:	82bb      	strh	r3, [r7, #20]
 8047032:	e007      	b.n	8047044 <touchpad_get_xy+0x64>
	else if (yr > TFT_VER_RES) yr = TFT_VER_RES - 1;
 8047034:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8047038:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 804703c:	dd02      	ble.n	8047044 <touchpad_get_xy+0x64>
 804703e:	f240 133f 	movw	r3, #319	; 0x13f
 8047042:	82bb      	strh	r3, [r7, #20]

	y_raw = yr;
 8047044:	8abb      	ldrh	r3, [r7, #20]
 8047046:	817b      	strh	r3, [r7, #10]

	/* X value first correction */
	if(x_raw <= 3000) x_raw = 3870 - x_raw;
 8047048:	89bb      	ldrh	r3, [r7, #12]
 804704a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 804704e:	4293      	cmp	r3, r2
 8047050:	d806      	bhi.n	8047060 <touchpad_get_xy+0x80>
 8047052:	89bb      	ldrh	r3, [r7, #12]
 8047054:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 8047058:	330e      	adds	r3, #14
 804705a:	b29b      	uxth	r3, r3
 804705c:	81bb      	strh	r3, [r7, #12]
 804705e:	e005      	b.n	804706c <touchpad_get_xy+0x8c>
	else  x_raw = 3800 - x_raw;
 8047060:	89bb      	ldrh	r3, [r7, #12]
 8047062:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 8047066:	3308      	adds	r3, #8
 8047068:	b29b      	uxth	r3, r3
 804706a:	81bb      	strh	r3, [r7, #12]

	/* X value second correction */
	xr = x_raw / 15;
 804706c:	89bb      	ldrh	r3, [r7, #12]
 804706e:	4a30      	ldr	r2, [pc, #192]	; (8047130 <touchpad_get_xy+0x150>)
 8047070:	fba2 2303 	umull	r2, r3, r2, r3
 8047074:	08db      	lsrs	r3, r3, #3
 8047076:	b29b      	uxth	r3, r3
 8047078:	82fb      	strh	r3, [r7, #22]

	/* Return X position value */
	if(xr <= 0) xr = 0;
 804707a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 804707e:	2b00      	cmp	r3, #0
 8047080:	dc02      	bgt.n	8047088 <touchpad_get_xy+0xa8>
 8047082:	2300      	movs	r3, #0
 8047084:	82fb      	strh	r3, [r7, #22]
 8047086:	e005      	b.n	8047094 <touchpad_get_xy+0xb4>
	else if (xr > TFT_HOR_RES) xr = TFT_HOR_RES - 1;
 8047088:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 804708c:	2bf0      	cmp	r3, #240	; 0xf0
 804708e:	dd01      	ble.n	8047094 <touchpad_get_xy+0xb4>
 8047090:	23ef      	movs	r3, #239	; 0xef
 8047092:	82fb      	strh	r3, [r7, #22]

	x_raw = xr;
 8047094:	8afb      	ldrh	r3, [r7, #22]
 8047096:	81bb      	strh	r3, [r7, #12]
	xDiff = x_raw > _x? (x_raw - _x): (_x - x_raw);
 8047098:	89bb      	ldrh	r3, [r7, #12]
 804709a:	461a      	mov	r2, r3
 804709c:	4b25      	ldr	r3, [pc, #148]	; (8047134 <touchpad_get_xy+0x154>)
 804709e:	681b      	ldr	r3, [r3, #0]
 80470a0:	429a      	cmp	r2, r3
 80470a2:	dd07      	ble.n	80470b4 <touchpad_get_xy+0xd4>
 80470a4:	89ba      	ldrh	r2, [r7, #12]
 80470a6:	4b23      	ldr	r3, [pc, #140]	; (8047134 <touchpad_get_xy+0x154>)
 80470a8:	681b      	ldr	r3, [r3, #0]
 80470aa:	b29b      	uxth	r3, r3
 80470ac:	1ad3      	subs	r3, r2, r3
 80470ae:	b29b      	uxth	r3, r3
 80470b0:	b21b      	sxth	r3, r3
 80470b2:	e006      	b.n	80470c2 <touchpad_get_xy+0xe2>
 80470b4:	4b1f      	ldr	r3, [pc, #124]	; (8047134 <touchpad_get_xy+0x154>)
 80470b6:	681b      	ldr	r3, [r3, #0]
 80470b8:	b29a      	uxth	r2, r3
 80470ba:	89bb      	ldrh	r3, [r7, #12]
 80470bc:	1ad3      	subs	r3, r2, r3
 80470be:	b29b      	uxth	r3, r3
 80470c0:	b21b      	sxth	r3, r3
 80470c2:	823b      	strh	r3, [r7, #16]
	yDiff = y_raw > _y? (y_raw - _y): (_y - y_raw);
 80470c4:	897b      	ldrh	r3, [r7, #10]
 80470c6:	461a      	mov	r2, r3
 80470c8:	4b1b      	ldr	r3, [pc, #108]	; (8047138 <touchpad_get_xy+0x158>)
 80470ca:	681b      	ldr	r3, [r3, #0]
 80470cc:	429a      	cmp	r2, r3
 80470ce:	dd07      	ble.n	80470e0 <touchpad_get_xy+0x100>
 80470d0:	897a      	ldrh	r2, [r7, #10]
 80470d2:	4b19      	ldr	r3, [pc, #100]	; (8047138 <touchpad_get_xy+0x158>)
 80470d4:	681b      	ldr	r3, [r3, #0]
 80470d6:	b29b      	uxth	r3, r3
 80470d8:	1ad3      	subs	r3, r2, r3
 80470da:	b29b      	uxth	r3, r3
 80470dc:	b21b      	sxth	r3, r3
 80470de:	e006      	b.n	80470ee <touchpad_get_xy+0x10e>
 80470e0:	4b15      	ldr	r3, [pc, #84]	; (8047138 <touchpad_get_xy+0x158>)
 80470e2:	681b      	ldr	r3, [r3, #0]
 80470e4:	b29a      	uxth	r2, r3
 80470e6:	897b      	ldrh	r3, [r7, #10]
 80470e8:	1ad3      	subs	r3, r2, r3
 80470ea:	b29b      	uxth	r3, r3
 80470ec:	b21b      	sxth	r3, r3
 80470ee:	81fb      	strh	r3, [r7, #14]

	if (xDiff + yDiff > 5) {
 80470f0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80470f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80470f8:	4413      	add	r3, r2
 80470fa:	2b05      	cmp	r3, #5
 80470fc:	dd07      	ble.n	804710e <touchpad_get_xy+0x12e>
		_x = x_raw;
 80470fe:	89bb      	ldrh	r3, [r7, #12]
 8047100:	461a      	mov	r2, r3
 8047102:	4b0c      	ldr	r3, [pc, #48]	; (8047134 <touchpad_get_xy+0x154>)
 8047104:	601a      	str	r2, [r3, #0]
		_y = y_raw;
 8047106:	897b      	ldrh	r3, [r7, #10]
 8047108:	461a      	mov	r2, r3
 804710a:	4b0b      	ldr	r3, [pc, #44]	; (8047138 <touchpad_get_xy+0x158>)
 804710c:	601a      	str	r2, [r3, #0]
	}

	/* Update the X and Y position */
	*x = _x;
 804710e:	4b09      	ldr	r3, [pc, #36]	; (8047134 <touchpad_get_xy+0x154>)
 8047110:	681b      	ldr	r3, [r3, #0]
 8047112:	b21a      	sxth	r2, r3
 8047114:	687b      	ldr	r3, [r7, #4]
 8047116:	801a      	strh	r2, [r3, #0]
	*y = _y;
 8047118:	4b07      	ldr	r3, [pc, #28]	; (8047138 <touchpad_get_xy+0x158>)
 804711a:	681b      	ldr	r3, [r3, #0]
 804711c:	b21a      	sxth	r2, r3
 804711e:	683b      	ldr	r3, [r7, #0]
 8047120:	801a      	strh	r2, [r3, #0]

	return TRUE;
 8047122:	2301      	movs	r3, #1
}
 8047124:	4618      	mov	r0, r3
 8047126:	3718      	adds	r7, #24
 8047128:	46bd      	mov	sp, r7
 804712a:	bd80      	pop	{r7, pc}
 804712c:	ba2e8ba3 	.word	0xba2e8ba3
 8047130:	88888889 	.word	0x88888889
 8047134:	200003c0 	.word	0x200003c0
 8047138:	200003c4 	.word	0x200003c4

0804713c <Init_TrigoTables>:
static float Sin_table[360] ;
static float Cos_table[360] ;


void Init_TrigoTables(void)
{
 804713c:	b580      	push	{r7, lr}
 804713e:	b082      	sub	sp, #8
 8047140:	af00      	add	r7, sp, #0
	for(int i = 0 ; i < 360 ; i++)
 8047142:	2300      	movs	r3, #0
 8047144:	607b      	str	r3, [r7, #4]
 8047146:	e052      	b.n	80471ee <Init_TrigoTables+0xb2>
	    {
		     Sin_table[i] = sin(i*PI/180.0);
 8047148:	687b      	ldr	r3, [r7, #4]
 804714a:	ee07 3a90 	vmov	s15, r3
 804714e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8047152:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8047200 <Init_TrigoTables+0xc4>
 8047156:	ee67 7a87 	vmul.f32	s15, s15, s14
 804715a:	ee17 0a90 	vmov	r0, s15
 804715e:	f7f9 f9ab 	bl	80404b8 <__aeabi_f2d>
 8047162:	f04f 0200 	mov.w	r2, #0
 8047166:	4b27      	ldr	r3, [pc, #156]	; (8047204 <Init_TrigoTables+0xc8>)
 8047168:	f7f9 fb28 	bl	80407bc <__aeabi_ddiv>
 804716c:	4602      	mov	r2, r0
 804716e:	460b      	mov	r3, r1
 8047170:	ec43 2b17 	vmov	d7, r2, r3
 8047174:	eeb0 0a47 	vmov.f32	s0, s14
 8047178:	eef0 0a67 	vmov.f32	s1, s15
 804717c:	f001 fae4 	bl	8048748 <sin>
 8047180:	ec53 2b10 	vmov	r2, r3, d0
 8047184:	4610      	mov	r0, r2
 8047186:	4619      	mov	r1, r3
 8047188:	f7f9 fcc6 	bl	8040b18 <__aeabi_d2f>
 804718c:	4602      	mov	r2, r0
 804718e:	491e      	ldr	r1, [pc, #120]	; (8047208 <Init_TrigoTables+0xcc>)
 8047190:	687b      	ldr	r3, [r7, #4]
 8047192:	009b      	lsls	r3, r3, #2
 8047194:	440b      	add	r3, r1
 8047196:	601a      	str	r2, [r3, #0]
		     Cos_table[i] = cos(i*PI/180.0);
 8047198:	687b      	ldr	r3, [r7, #4]
 804719a:	ee07 3a90 	vmov	s15, r3
 804719e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80471a2:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8047200 <Init_TrigoTables+0xc4>
 80471a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80471aa:	ee17 0a90 	vmov	r0, s15
 80471ae:	f7f9 f983 	bl	80404b8 <__aeabi_f2d>
 80471b2:	f04f 0200 	mov.w	r2, #0
 80471b6:	4b13      	ldr	r3, [pc, #76]	; (8047204 <Init_TrigoTables+0xc8>)
 80471b8:	f7f9 fb00 	bl	80407bc <__aeabi_ddiv>
 80471bc:	4602      	mov	r2, r0
 80471be:	460b      	mov	r3, r1
 80471c0:	ec43 2b17 	vmov	d7, r2, r3
 80471c4:	eeb0 0a47 	vmov.f32	s0, s14
 80471c8:	eef0 0a67 	vmov.f32	s1, s15
 80471cc:	f001 fa68 	bl	80486a0 <cos>
 80471d0:	ec53 2b10 	vmov	r2, r3, d0
 80471d4:	4610      	mov	r0, r2
 80471d6:	4619      	mov	r1, r3
 80471d8:	f7f9 fc9e 	bl	8040b18 <__aeabi_d2f>
 80471dc:	4602      	mov	r2, r0
 80471de:	490b      	ldr	r1, [pc, #44]	; (804720c <Init_TrigoTables+0xd0>)
 80471e0:	687b      	ldr	r3, [r7, #4]
 80471e2:	009b      	lsls	r3, r3, #2
 80471e4:	440b      	add	r3, r1
 80471e6:	601a      	str	r2, [r3, #0]
	for(int i = 0 ; i < 360 ; i++)
 80471e8:	687b      	ldr	r3, [r7, #4]
 80471ea:	3301      	adds	r3, #1
 80471ec:	607b      	str	r3, [r7, #4]
 80471ee:	687b      	ldr	r3, [r7, #4]
 80471f0:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80471f4:	dba8      	blt.n	8047148 <Init_TrigoTables+0xc>
	    }
}
 80471f6:	bf00      	nop
 80471f8:	bf00      	nop
 80471fa:	3708      	adds	r7, #8
 80471fc:	46bd      	mov	sp, r7
 80471fe:	bd80      	pop	{r7, pc}
 8047200:	404923a3 	.word	0x404923a3
 8047204:	40668000 	.word	0x40668000
 8047208:	200003c8 	.word	0x200003c8
 804720c:	20000968 	.word	0x20000968

08047210 <Fast_Sin>:

float Fast_Sin(float angle)
{
 8047210:	b580      	push	{r7, lr}
 8047212:	b084      	sub	sp, #16
 8047214:	af00      	add	r7, sp, #0
 8047216:	ed87 0a01 	vstr	s0, [r7, #4]
	angle = fmod(angle,360) ;
 804721a:	6878      	ldr	r0, [r7, #4]
 804721c:	f7f9 f94c 	bl	80404b8 <__aeabi_f2d>
 8047220:	4602      	mov	r2, r0
 8047222:	460b      	mov	r3, r1
 8047224:	ed9f 1b28 	vldr	d1, [pc, #160]	; 80472c8 <Fast_Sin+0xb8>
 8047228:	ec43 2b10 	vmov	d0, r2, r3
 804722c:	f001 fae4 	bl	80487f8 <fmod>
 8047230:	ec53 2b10 	vmov	r2, r3, d0
 8047234:	4610      	mov	r0, r2
 8047236:	4619      	mov	r1, r3
 8047238:	f7f9 fc6e 	bl	8040b18 <__aeabi_d2f>
 804723c:	4603      	mov	r3, r0
 804723e:	607b      	str	r3, [r7, #4]

	if(angle < 0) angle += 360.0f ;
 8047240:	edd7 7a01 	vldr	s15, [r7, #4]
 8047244:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8047248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 804724c:	d507      	bpl.n	804725e <Fast_Sin+0x4e>
 804724e:	edd7 7a01 	vldr	s15, [r7, #4]
 8047252:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80472d0 <Fast_Sin+0xc0>
 8047256:	ee77 7a87 	vadd.f32	s15, s15, s14
 804725a:	edc7 7a01 	vstr	s15, [r7, #4]

	u16   INT_angle = (u16)angle ;
 804725e:	edd7 7a01 	vldr	s15, [r7, #4]
 8047262:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8047266:	ee17 3a90 	vmov	r3, s15
 804726a:	81fb      	strh	r3, [r7, #14]
	float frc_angle = angle - INT_angle ;
 804726c:	89fb      	ldrh	r3, [r7, #14]
 804726e:	ee07 3a90 	vmov	s15, r3
 8047272:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8047276:	ed97 7a01 	vldr	s14, [r7, #4]
 804727a:	ee77 7a67 	vsub.f32	s15, s14, s15
 804727e:	edc7 7a02 	vstr	s15, [r7, #8]

	return  Sin_table[INT_angle] +
 8047282:	89fb      	ldrh	r3, [r7, #14]
 8047284:	4a13      	ldr	r2, [pc, #76]	; (80472d4 <Fast_Sin+0xc4>)
 8047286:	009b      	lsls	r3, r3, #2
 8047288:	4413      	add	r3, r2
 804728a:	ed93 7a00 	vldr	s14, [r3]
			frc_angle*( Sin_table[INT_angle+1] - Sin_table[INT_angle]  ) ;
 804728e:	89fb      	ldrh	r3, [r7, #14]
 8047290:	3301      	adds	r3, #1
 8047292:	4a10      	ldr	r2, [pc, #64]	; (80472d4 <Fast_Sin+0xc4>)
 8047294:	009b      	lsls	r3, r3, #2
 8047296:	4413      	add	r3, r2
 8047298:	edd3 6a00 	vldr	s13, [r3]
 804729c:	89fb      	ldrh	r3, [r7, #14]
 804729e:	4a0d      	ldr	r2, [pc, #52]	; (80472d4 <Fast_Sin+0xc4>)
 80472a0:	009b      	lsls	r3, r3, #2
 80472a2:	4413      	add	r3, r2
 80472a4:	edd3 7a00 	vldr	s15, [r3]
 80472a8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80472ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80472b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
	return  Sin_table[INT_angle] +
 80472b4:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80472b8:	eeb0 0a67 	vmov.f32	s0, s15
 80472bc:	3710      	adds	r7, #16
 80472be:	46bd      	mov	sp, r7
 80472c0:	bd80      	pop	{r7, pc}
 80472c2:	bf00      	nop
 80472c4:	f3af 8000 	nop.w
 80472c8:	00000000 	.word	0x00000000
 80472cc:	40768000 	.word	0x40768000
 80472d0:	43b40000 	.word	0x43b40000
 80472d4:	200003c8 	.word	0x200003c8

080472d8 <Fast_Cos>:



float Fast_Cos(float angle)
{
 80472d8:	b580      	push	{r7, lr}
 80472da:	b084      	sub	sp, #16
 80472dc:	af00      	add	r7, sp, #0
 80472de:	ed87 0a01 	vstr	s0, [r7, #4]
	angle = fmod(angle,360) ;
 80472e2:	6878      	ldr	r0, [r7, #4]
 80472e4:	f7f9 f8e8 	bl	80404b8 <__aeabi_f2d>
 80472e8:	4602      	mov	r2, r0
 80472ea:	460b      	mov	r3, r1
 80472ec:	ed9f 1b28 	vldr	d1, [pc, #160]	; 8047390 <Fast_Cos+0xb8>
 80472f0:	ec43 2b10 	vmov	d0, r2, r3
 80472f4:	f001 fa80 	bl	80487f8 <fmod>
 80472f8:	ec53 2b10 	vmov	r2, r3, d0
 80472fc:	4610      	mov	r0, r2
 80472fe:	4619      	mov	r1, r3
 8047300:	f7f9 fc0a 	bl	8040b18 <__aeabi_d2f>
 8047304:	4603      	mov	r3, r0
 8047306:	607b      	str	r3, [r7, #4]

	if(angle < 0) angle += 360.0f ;
 8047308:	edd7 7a01 	vldr	s15, [r7, #4]
 804730c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8047310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8047314:	d507      	bpl.n	8047326 <Fast_Cos+0x4e>
 8047316:	edd7 7a01 	vldr	s15, [r7, #4]
 804731a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8047398 <Fast_Cos+0xc0>
 804731e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8047322:	edc7 7a01 	vstr	s15, [r7, #4]

	u16   INT_angle = (u16)angle ;
 8047326:	edd7 7a01 	vldr	s15, [r7, #4]
 804732a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 804732e:	ee17 3a90 	vmov	r3, s15
 8047332:	81fb      	strh	r3, [r7, #14]
	float frc_angle = angle - INT_angle ;
 8047334:	89fb      	ldrh	r3, [r7, #14]
 8047336:	ee07 3a90 	vmov	s15, r3
 804733a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 804733e:	ed97 7a01 	vldr	s14, [r7, #4]
 8047342:	ee77 7a67 	vsub.f32	s15, s14, s15
 8047346:	edc7 7a02 	vstr	s15, [r7, #8]

	return  Cos_table[INT_angle] +
 804734a:	89fb      	ldrh	r3, [r7, #14]
 804734c:	4a13      	ldr	r2, [pc, #76]	; (804739c <Fast_Cos+0xc4>)
 804734e:	009b      	lsls	r3, r3, #2
 8047350:	4413      	add	r3, r2
 8047352:	ed93 7a00 	vldr	s14, [r3]
			frc_angle*( Cos_table[INT_angle+1] - Cos_table[INT_angle]  ) ;
 8047356:	89fb      	ldrh	r3, [r7, #14]
 8047358:	3301      	adds	r3, #1
 804735a:	4a10      	ldr	r2, [pc, #64]	; (804739c <Fast_Cos+0xc4>)
 804735c:	009b      	lsls	r3, r3, #2
 804735e:	4413      	add	r3, r2
 8047360:	edd3 6a00 	vldr	s13, [r3]
 8047364:	89fb      	ldrh	r3, [r7, #14]
 8047366:	4a0d      	ldr	r2, [pc, #52]	; (804739c <Fast_Cos+0xc4>)
 8047368:	009b      	lsls	r3, r3, #2
 804736a:	4413      	add	r3, r2
 804736c:	edd3 7a00 	vldr	s15, [r3]
 8047370:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8047374:	edd7 7a02 	vldr	s15, [r7, #8]
 8047378:	ee66 7aa7 	vmul.f32	s15, s13, s15
	return  Cos_table[INT_angle] +
 804737c:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8047380:	eeb0 0a67 	vmov.f32	s0, s15
 8047384:	3710      	adds	r7, #16
 8047386:	46bd      	mov	sp, r7
 8047388:	bd80      	pop	{r7, pc}
 804738a:	bf00      	nop
 804738c:	f3af 8000 	nop.w
 8047390:	00000000 	.word	0x00000000
 8047394:	40768000 	.word	0x40768000
 8047398:	43b40000 	.word	0x43b40000
 804739c:	20000968 	.word	0x20000968

080473a0 <umm_blocks>:
#include "umm_poison.c"
#include "umm_info.c"
*/
/* ------------------------------------------------------------------------ */

static uint16_t umm_blocks(size_t size) {
 80473a0:	b480      	push	{r7}
 80473a2:	b085      	sub	sp, #20
 80473a4:	af00      	add	r7, sp, #0
 80473a6:	6078      	str	r0, [r7, #4]
     * minus the overhead of the top and bottom bookkeeping blocks) then we
     * will return an incorrectly truncated value when the result is cast to
     * a uint16_t.
     */

    if (size <= (sizeof(((umm_block *)0)->body))) {
 80473a8:	687b      	ldr	r3, [r7, #4]
 80473aa:	2b04      	cmp	r3, #4
 80473ac:	d801      	bhi.n	80473b2 <umm_blocks+0x12>
        return 1;
 80473ae:	2301      	movs	r3, #1
 80473b0:	e010      	b.n	80473d4 <umm_blocks+0x34>
     * additional whole blocks the size of an umm_block are required, so
     * reduce the size request by the number of bytes in the body of the
     * first block.
     */

    size -= (sizeof(((umm_block *)0)->body));
 80473b2:	687b      	ldr	r3, [r7, #4]
 80473b4:	3b04      	subs	r3, #4
 80473b6:	607b      	str	r3, [r7, #4]
     *     5          1                          0      2
     *    12          8                          0      2
     *    13          9                          1      3
     */

    size_t blocks = (2 + ((size-1) / (UMM_BLOCKSIZE)));
 80473b8:	687b      	ldr	r3, [r7, #4]
 80473ba:	3b01      	subs	r3, #1
 80473bc:	08db      	lsrs	r3, r3, #3
 80473be:	3302      	adds	r3, #2
 80473c0:	60fb      	str	r3, [r7, #12]

    if (blocks > (INT16_MAX)) {
 80473c2:	68fb      	ldr	r3, [r7, #12]
 80473c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80473c8:	d302      	bcc.n	80473d0 <umm_blocks+0x30>
        blocks = INT16_MAX;
 80473ca:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80473ce:	60fb      	str	r3, [r7, #12]
    }

    return (uint16_t)blocks;
 80473d0:	68fb      	ldr	r3, [r7, #12]
 80473d2:	b29b      	uxth	r3, r3
}
 80473d4:	4618      	mov	r0, r3
 80473d6:	3714      	adds	r7, #20
 80473d8:	46bd      	mov	sp, r7
 80473da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80473de:	4770      	bx	lr

080473e0 <umm_split_block>:
 *
 * Note that free pointers are NOT modified by this function.
 */
static void umm_split_block(uint16_t c,
    uint16_t blocks,
    uint16_t new_freemask) {
 80473e0:	b480      	push	{r7}
 80473e2:	b083      	sub	sp, #12
 80473e4:	af00      	add	r7, sp, #0
 80473e6:	4603      	mov	r3, r0
 80473e8:	80fb      	strh	r3, [r7, #6]
 80473ea:	460b      	mov	r3, r1
 80473ec:	80bb      	strh	r3, [r7, #4]
 80473ee:	4613      	mov	r3, r2
 80473f0:	807b      	strh	r3, [r7, #2]

    UMM_NBLOCK(c + blocks) = (UMM_NBLOCK(c) & UMM_BLOCKNO_MASK) | new_freemask;
 80473f2:	4b21      	ldr	r3, [pc, #132]	; (8047478 <umm_split_block+0x98>)
 80473f4:	681a      	ldr	r2, [r3, #0]
 80473f6:	88fb      	ldrh	r3, [r7, #6]
 80473f8:	00db      	lsls	r3, r3, #3
 80473fa:	4413      	add	r3, r2
 80473fc:	881b      	ldrh	r3, [r3, #0]
 80473fe:	b29b      	uxth	r3, r3
 8047400:	b21b      	sxth	r3, r3
 8047402:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8047406:	b21a      	sxth	r2, r3
 8047408:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 804740c:	4313      	orrs	r3, r2
 804740e:	b218      	sxth	r0, r3
 8047410:	4b19      	ldr	r3, [pc, #100]	; (8047478 <umm_split_block+0x98>)
 8047412:	681a      	ldr	r2, [r3, #0]
 8047414:	88f9      	ldrh	r1, [r7, #6]
 8047416:	88bb      	ldrh	r3, [r7, #4]
 8047418:	440b      	add	r3, r1
 804741a:	00db      	lsls	r3, r3, #3
 804741c:	4413      	add	r3, r2
 804741e:	b282      	uxth	r2, r0
 8047420:	801a      	strh	r2, [r3, #0]
    UMM_PBLOCK(c + blocks) = c;
 8047422:	4b15      	ldr	r3, [pc, #84]	; (8047478 <umm_split_block+0x98>)
 8047424:	681a      	ldr	r2, [r3, #0]
 8047426:	88f9      	ldrh	r1, [r7, #6]
 8047428:	88bb      	ldrh	r3, [r7, #4]
 804742a:	440b      	add	r3, r1
 804742c:	00db      	lsls	r3, r3, #3
 804742e:	4413      	add	r3, r2
 8047430:	88fa      	ldrh	r2, [r7, #6]
 8047432:	805a      	strh	r2, [r3, #2]

    UMM_PBLOCK(UMM_NBLOCK(c) & UMM_BLOCKNO_MASK) = (c + blocks);
 8047434:	4b10      	ldr	r3, [pc, #64]	; (8047478 <umm_split_block+0x98>)
 8047436:	681a      	ldr	r2, [r3, #0]
 8047438:	4b0f      	ldr	r3, [pc, #60]	; (8047478 <umm_split_block+0x98>)
 804743a:	6819      	ldr	r1, [r3, #0]
 804743c:	88fb      	ldrh	r3, [r7, #6]
 804743e:	00db      	lsls	r3, r3, #3
 8047440:	440b      	add	r3, r1
 8047442:	881b      	ldrh	r3, [r3, #0]
 8047444:	b29b      	uxth	r3, r3
 8047446:	f3c3 030e 	ubfx	r3, r3, #0, #15
 804744a:	00db      	lsls	r3, r3, #3
 804744c:	4413      	add	r3, r2
 804744e:	88f9      	ldrh	r1, [r7, #6]
 8047450:	88ba      	ldrh	r2, [r7, #4]
 8047452:	440a      	add	r2, r1
 8047454:	b292      	uxth	r2, r2
 8047456:	805a      	strh	r2, [r3, #2]
    UMM_NBLOCK(c) = (c + blocks);
 8047458:	4b07      	ldr	r3, [pc, #28]	; (8047478 <umm_split_block+0x98>)
 804745a:	681a      	ldr	r2, [r3, #0]
 804745c:	88fb      	ldrh	r3, [r7, #6]
 804745e:	00db      	lsls	r3, r3, #3
 8047460:	4413      	add	r3, r2
 8047462:	88f9      	ldrh	r1, [r7, #6]
 8047464:	88ba      	ldrh	r2, [r7, #4]
 8047466:	440a      	add	r2, r1
 8047468:	b292      	uxth	r2, r2
 804746a:	801a      	strh	r2, [r3, #0]
}
 804746c:	bf00      	nop
 804746e:	370c      	adds	r7, #12
 8047470:	46bd      	mov	sp, r7
 8047472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047476:	4770      	bx	lr
 8047478:	20000f08 	.word	0x20000f08

0804747c <umm_disconnect_from_free_list>:

/* ------------------------------------------------------------------------ */

static void umm_disconnect_from_free_list(uint16_t c) {
 804747c:	b480      	push	{r7}
 804747e:	b083      	sub	sp, #12
 8047480:	af00      	add	r7, sp, #0
 8047482:	4603      	mov	r3, r0
 8047484:	80fb      	strh	r3, [r7, #6]
    /* Disconnect this block from the FREE list */

    UMM_NFREE(UMM_PFREE(c)) = UMM_NFREE(c);
 8047486:	4b1e      	ldr	r3, [pc, #120]	; (8047500 <umm_disconnect_from_free_list+0x84>)
 8047488:	681a      	ldr	r2, [r3, #0]
 804748a:	88fb      	ldrh	r3, [r7, #6]
 804748c:	00db      	lsls	r3, r3, #3
 804748e:	441a      	add	r2, r3
 8047490:	4b1b      	ldr	r3, [pc, #108]	; (8047500 <umm_disconnect_from_free_list+0x84>)
 8047492:	6819      	ldr	r1, [r3, #0]
 8047494:	4b1a      	ldr	r3, [pc, #104]	; (8047500 <umm_disconnect_from_free_list+0x84>)
 8047496:	6818      	ldr	r0, [r3, #0]
 8047498:	88fb      	ldrh	r3, [r7, #6]
 804749a:	00db      	lsls	r3, r3, #3
 804749c:	4403      	add	r3, r0
 804749e:	88db      	ldrh	r3, [r3, #6]
 80474a0:	b29b      	uxth	r3, r3
 80474a2:	00db      	lsls	r3, r3, #3
 80474a4:	440b      	add	r3, r1
 80474a6:	8892      	ldrh	r2, [r2, #4]
 80474a8:	b292      	uxth	r2, r2
 80474aa:	809a      	strh	r2, [r3, #4]
    UMM_PFREE(UMM_NFREE(c)) = UMM_PFREE(c);
 80474ac:	4b14      	ldr	r3, [pc, #80]	; (8047500 <umm_disconnect_from_free_list+0x84>)
 80474ae:	681a      	ldr	r2, [r3, #0]
 80474b0:	88fb      	ldrh	r3, [r7, #6]
 80474b2:	00db      	lsls	r3, r3, #3
 80474b4:	441a      	add	r2, r3
 80474b6:	4b12      	ldr	r3, [pc, #72]	; (8047500 <umm_disconnect_from_free_list+0x84>)
 80474b8:	6819      	ldr	r1, [r3, #0]
 80474ba:	4b11      	ldr	r3, [pc, #68]	; (8047500 <umm_disconnect_from_free_list+0x84>)
 80474bc:	6818      	ldr	r0, [r3, #0]
 80474be:	88fb      	ldrh	r3, [r7, #6]
 80474c0:	00db      	lsls	r3, r3, #3
 80474c2:	4403      	add	r3, r0
 80474c4:	889b      	ldrh	r3, [r3, #4]
 80474c6:	b29b      	uxth	r3, r3
 80474c8:	00db      	lsls	r3, r3, #3
 80474ca:	440b      	add	r3, r1
 80474cc:	88d2      	ldrh	r2, [r2, #6]
 80474ce:	b292      	uxth	r2, r2
 80474d0:	80da      	strh	r2, [r3, #6]

    /* And clear the free block indicator */

    UMM_NBLOCK(c) &= (~UMM_FREELIST_MASK);
 80474d2:	4b0b      	ldr	r3, [pc, #44]	; (8047500 <umm_disconnect_from_free_list+0x84>)
 80474d4:	681a      	ldr	r2, [r3, #0]
 80474d6:	88fb      	ldrh	r3, [r7, #6]
 80474d8:	00db      	lsls	r3, r3, #3
 80474da:	4413      	add	r3, r2
 80474dc:	881b      	ldrh	r3, [r3, #0]
 80474de:	b29a      	uxth	r2, r3
 80474e0:	4b07      	ldr	r3, [pc, #28]	; (8047500 <umm_disconnect_from_free_list+0x84>)
 80474e2:	6819      	ldr	r1, [r3, #0]
 80474e4:	88fb      	ldrh	r3, [r7, #6]
 80474e6:	00db      	lsls	r3, r3, #3
 80474e8:	440b      	add	r3, r1
 80474ea:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80474ee:	b292      	uxth	r2, r2
 80474f0:	801a      	strh	r2, [r3, #0]
}
 80474f2:	bf00      	nop
 80474f4:	370c      	adds	r7, #12
 80474f6:	46bd      	mov	sp, r7
 80474f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80474fc:	4770      	bx	lr
 80474fe:	bf00      	nop
 8047500:	20000f08 	.word	0x20000f08

08047504 <umm_init_heap>:
}

/* ------------------------------------------------------------------------- */

void umm_init_heap(void *ptr, size_t size)
{
 8047504:	b580      	push	{r7, lr}
 8047506:	b082      	sub	sp, #8
 8047508:	af00      	add	r7, sp, #0
 804750a:	6078      	str	r0, [r7, #4]
 804750c:	6039      	str	r1, [r7, #0]
    /* init heap pointer and size, and memset it to 0 */
    UMM_HEAP = (umm_block *)ptr;
 804750e:	4a27      	ldr	r2, [pc, #156]	; (80475ac <umm_init_heap+0xa8>)
 8047510:	687b      	ldr	r3, [r7, #4]
 8047512:	6013      	str	r3, [r2, #0]
    UMM_HEAPSIZE = size;
 8047514:	4a25      	ldr	r2, [pc, #148]	; (80475ac <umm_init_heap+0xa8>)
 8047516:	683b      	ldr	r3, [r7, #0]
 8047518:	6053      	str	r3, [r2, #4]
    UMM_NUMBLOCKS = (UMM_HEAPSIZE / UMM_BLOCKSIZE);
 804751a:	4b24      	ldr	r3, [pc, #144]	; (80475ac <umm_init_heap+0xa8>)
 804751c:	685b      	ldr	r3, [r3, #4]
 804751e:	08db      	lsrs	r3, r3, #3
 8047520:	b29a      	uxth	r2, r3
 8047522:	4b22      	ldr	r3, [pc, #136]	; (80475ac <umm_init_heap+0xa8>)
 8047524:	811a      	strh	r2, [r3, #8]
    memset(UMM_HEAP, 0x00, UMM_HEAPSIZE);
 8047526:	4b21      	ldr	r3, [pc, #132]	; (80475ac <umm_init_heap+0xa8>)
 8047528:	681b      	ldr	r3, [r3, #0]
 804752a:	4a20      	ldr	r2, [pc, #128]	; (80475ac <umm_init_heap+0xa8>)
 804752c:	6852      	ldr	r2, [r2, #4]
 804752e:	2100      	movs	r1, #0
 8047530:	4618      	mov	r0, r3
 8047532:	f001 f8ab 	bl	804868c <memset>

    /* setup initial blank heap structure */
    UMM_FRAGMENTATION_METRIC_INIT();

    /* Set up umm_block[0], which just points to umm_block[1] */
    UMM_NBLOCK(0) = 1;
 8047536:	4b1d      	ldr	r3, [pc, #116]	; (80475ac <umm_init_heap+0xa8>)
 8047538:	681b      	ldr	r3, [r3, #0]
 804753a:	2200      	movs	r2, #0
 804753c:	f042 0201 	orr.w	r2, r2, #1
 8047540:	701a      	strb	r2, [r3, #0]
 8047542:	2200      	movs	r2, #0
 8047544:	705a      	strb	r2, [r3, #1]
    UMM_NFREE(0) = 1;
 8047546:	4b19      	ldr	r3, [pc, #100]	; (80475ac <umm_init_heap+0xa8>)
 8047548:	681b      	ldr	r3, [r3, #0]
 804754a:	2200      	movs	r2, #0
 804754c:	f042 0201 	orr.w	r2, r2, #1
 8047550:	711a      	strb	r2, [r3, #4]
 8047552:	2200      	movs	r2, #0
 8047554:	715a      	strb	r2, [r3, #5]
    UMM_PFREE(0) = 1;
 8047556:	4b15      	ldr	r3, [pc, #84]	; (80475ac <umm_init_heap+0xa8>)
 8047558:	681b      	ldr	r3, [r3, #0]
 804755a:	2200      	movs	r2, #0
 804755c:	f042 0201 	orr.w	r2, r2, #1
 8047560:	719a      	strb	r2, [r3, #6]
 8047562:	2200      	movs	r2, #0
 8047564:	71da      	strb	r2, [r3, #7]
     * And it's the last free block, so the next free block is 0 which marks
     * the end of the list. The previous block and free block pointer are 0
     * too, there is no need to initialize these values due to the init code
     * that memsets the entire umm_ space to 0.
     */
    UMM_NBLOCK(1) = UMM_BLOCK_LAST | UMM_FREELIST_MASK;
 8047566:	4b11      	ldr	r3, [pc, #68]	; (80475ac <umm_init_heap+0xa8>)
 8047568:	891b      	ldrh	r3, [r3, #8]
 804756a:	3b01      	subs	r3, #1
 804756c:	b29b      	uxth	r3, r3
 804756e:	b21b      	sxth	r3, r3
 8047570:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8047574:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8047578:	b21a      	sxth	r2, r3
 804757a:	4b0c      	ldr	r3, [pc, #48]	; (80475ac <umm_init_heap+0xa8>)
 804757c:	681b      	ldr	r3, [r3, #0]
 804757e:	3308      	adds	r3, #8
 8047580:	b292      	uxth	r2, r2
 8047582:	801a      	strh	r2, [r3, #0]
     *
     * The last block is a special block and can never be part of the
     * free list, so its pointers are left at 0 too.
     */

    UMM_PBLOCK(UMM_BLOCK_LAST) = 1;
 8047584:	4b09      	ldr	r3, [pc, #36]	; (80475ac <umm_init_heap+0xa8>)
 8047586:	681a      	ldr	r2, [r3, #0]
 8047588:	4b08      	ldr	r3, [pc, #32]	; (80475ac <umm_init_heap+0xa8>)
 804758a:	891b      	ldrh	r3, [r3, #8]
 804758c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8047590:	3b01      	subs	r3, #1
 8047592:	00db      	lsls	r3, r3, #3
 8047594:	4413      	add	r3, r2
 8047596:	2200      	movs	r2, #0
 8047598:	f042 0201 	orr.w	r2, r2, #1
 804759c:	709a      	strb	r2, [r3, #2]
 804759e:	2200      	movs	r2, #0
 80475a0:	70da      	strb	r2, [r3, #3]

// DBGLOG_FORCE(true, "nblock(0) %04x pblock(0) %04x nfree(0) %04x pfree(0) %04x\n", UMM_NBLOCK(0) & UMM_BLOCKNO_MASK, UMM_PBLOCK(0), UMM_NFREE(0), UMM_PFREE(0));
// DBGLOG_FORCE(true, "nblock(1) %04x pblock(1) %04x nfree(1) %04x pfree(1) %04x\n", UMM_NBLOCK(1) & UMM_BLOCKNO_MASK, UMM_PBLOCK(1), UMM_NFREE(1), UMM_PFREE(1));

}
 80475a2:	bf00      	nop
 80475a4:	3708      	adds	r7, #8
 80475a6:	46bd      	mov	sp, r7
 80475a8:	bd80      	pop	{r7, pc}
 80475aa:	bf00      	nop
 80475ac:	20000f08 	.word	0x20000f08

080475b0 <umm_init>:

void umm_init(void) {
 80475b0:	b580      	push	{r7, lr}
 80475b2:	af00      	add	r7, sp, #0
    /* Initialize the heap from linker supplied values */

    umm_init_heap(UMM_MALLOC_CFG_HEAP_ADDR, UMM_MALLOC_CFG_HEAP_SIZE);
 80475b4:	4b04      	ldr	r3, [pc, #16]	; (80475c8 <umm_init+0x18>)
 80475b6:	681b      	ldr	r3, [r3, #0]
 80475b8:	f44f 31c8 	mov.w	r1, #102400	; 0x19000
 80475bc:	4618      	mov	r0, r3
 80475be:	f7ff ffa1 	bl	8047504 <umm_init_heap>
}
 80475c2:	bf00      	nop
 80475c4:	bd80      	pop	{r7, pc}
 80475c6:	bf00      	nop
 80475c8:	20000018 	.word	0x20000018

080475cc <umm_malloc_core>:
/* ------------------------------------------------------------------------
 * Must be called only from within critical sections guarded by
 * UMM_CRITICAL_ENTRY(id) and UMM_CRITICAL_EXIT(id).
 */

static void *umm_malloc_core(size_t size) {
 80475cc:	b580      	push	{r7, lr}
 80475ce:	b086      	sub	sp, #24
 80475d0:	af00      	add	r7, sp, #0
 80475d2:	6078      	str	r0, [r7, #4]
    uint16_t blocks;
    uint16_t blockSize = 0;
 80475d4:	2300      	movs	r3, #0
 80475d6:	82fb      	strh	r3, [r7, #22]
    uint16_t bestSize;
    uint16_t bestBlock;

    uint16_t cf;

    blocks = umm_blocks(size);
 80475d8:	6878      	ldr	r0, [r7, #4]
 80475da:	f7ff fee1 	bl	80473a0 <umm_blocks>
 80475de:	4603      	mov	r3, r0
 80475e0:	81fb      	strh	r3, [r7, #14]
     *
     * This part may be customized to be a best-fit, worst-fit, or first-fit
     * algorithm
     */

    cf = UMM_NFREE(0);
 80475e2:	4b55      	ldr	r3, [pc, #340]	; (8047738 <umm_malloc_core+0x16c>)
 80475e4:	681b      	ldr	r3, [r3, #0]
 80475e6:	791a      	ldrb	r2, [r3, #4]
 80475e8:	795b      	ldrb	r3, [r3, #5]
 80475ea:	021b      	lsls	r3, r3, #8
 80475ec:	4313      	orrs	r3, r2
 80475ee:	823b      	strh	r3, [r7, #16]

    bestBlock = UMM_NFREE(0);
 80475f0:	4b51      	ldr	r3, [pc, #324]	; (8047738 <umm_malloc_core+0x16c>)
 80475f2:	681b      	ldr	r3, [r3, #0]
 80475f4:	791a      	ldrb	r2, [r3, #4]
 80475f6:	795b      	ldrb	r3, [r3, #5]
 80475f8:	021b      	lsls	r3, r3, #8
 80475fa:	4313      	orrs	r3, r2
 80475fc:	827b      	strh	r3, [r7, #18]
    bestSize = 0x7FFF;
 80475fe:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8047602:	82bb      	strh	r3, [r7, #20]

    while (cf) {
 8047604:	e022      	b.n	804764c <umm_malloc_core+0x80>
        blockSize = (UMM_NBLOCK(cf) & UMM_BLOCKNO_MASK) - cf;
 8047606:	4b4c      	ldr	r3, [pc, #304]	; (8047738 <umm_malloc_core+0x16c>)
 8047608:	681a      	ldr	r2, [r3, #0]
 804760a:	8a3b      	ldrh	r3, [r7, #16]
 804760c:	00db      	lsls	r3, r3, #3
 804760e:	4413      	add	r3, r2
 8047610:	881b      	ldrh	r3, [r3, #0]
 8047612:	b29b      	uxth	r3, r3
 8047614:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8047618:	b29a      	uxth	r2, r3
 804761a:	8a3b      	ldrh	r3, [r7, #16]
 804761c:	1ad3      	subs	r3, r2, r3
 804761e:	82fb      	strh	r3, [r7, #22]

        DBGLOG_TRACE("Looking at block %6i size %6i\n", cf, blockSize);

        #if defined UMM_BEST_FIT
        if ((blockSize >= blocks) && (blockSize < bestSize)) {
 8047620:	8afa      	ldrh	r2, [r7, #22]
 8047622:	89fb      	ldrh	r3, [r7, #14]
 8047624:	429a      	cmp	r2, r3
 8047626:	d307      	bcc.n	8047638 <umm_malloc_core+0x6c>
 8047628:	8afa      	ldrh	r2, [r7, #22]
 804762a:	8abb      	ldrh	r3, [r7, #20]
 804762c:	429a      	cmp	r2, r3
 804762e:	d203      	bcs.n	8047638 <umm_malloc_core+0x6c>
            bestBlock = cf;
 8047630:	8a3b      	ldrh	r3, [r7, #16]
 8047632:	827b      	strh	r3, [r7, #18]
            bestSize = blockSize;
 8047634:	8afb      	ldrh	r3, [r7, #22]
 8047636:	82bb      	strh	r3, [r7, #20]
        }
        #else
        #error "No UMM_*_FIT is defined - check umm_malloc_cfg.h"
        #endif

        cf = UMM_NFREE(cf);
 8047638:	4b3f      	ldr	r3, [pc, #252]	; (8047738 <umm_malloc_core+0x16c>)
 804763a:	681a      	ldr	r2, [r3, #0]
 804763c:	8a3b      	ldrh	r3, [r7, #16]
 804763e:	00db      	lsls	r3, r3, #3
 8047640:	4413      	add	r3, r2
 8047642:	791a      	ldrb	r2, [r3, #4]
 8047644:	795b      	ldrb	r3, [r3, #5]
 8047646:	021b      	lsls	r3, r3, #8
 8047648:	4313      	orrs	r3, r2
 804764a:	823b      	strh	r3, [r7, #16]
    while (cf) {
 804764c:	8a3b      	ldrh	r3, [r7, #16]
 804764e:	2b00      	cmp	r3, #0
 8047650:	d1d9      	bne.n	8047606 <umm_malloc_core+0x3a>
    }

    if (0x7FFF != bestSize) {
 8047652:	8abb      	ldrh	r3, [r7, #20]
 8047654:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8047658:	4293      	cmp	r3, r2
 804765a:	d003      	beq.n	8047664 <umm_malloc_core+0x98>
        cf = bestBlock;
 804765c:	8a7b      	ldrh	r3, [r7, #18]
 804765e:	823b      	strh	r3, [r7, #16]
        blockSize = bestSize;
 8047660:	8abb      	ldrh	r3, [r7, #20]
 8047662:	82fb      	strh	r3, [r7, #22]
    }

    if (UMM_NBLOCK(cf) & UMM_BLOCKNO_MASK && blockSize >= blocks) {
 8047664:	4b34      	ldr	r3, [pc, #208]	; (8047738 <umm_malloc_core+0x16c>)
 8047666:	681a      	ldr	r2, [r3, #0]
 8047668:	8a3b      	ldrh	r3, [r7, #16]
 804766a:	00db      	lsls	r3, r3, #3
 804766c:	4413      	add	r3, r2
 804766e:	881b      	ldrh	r3, [r3, #0]
 8047670:	b29b      	uxth	r3, r3
 8047672:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8047676:	2b00      	cmp	r3, #0
 8047678:	d052      	beq.n	8047720 <umm_malloc_core+0x154>
 804767a:	8afa      	ldrh	r2, [r7, #22]
 804767c:	89fb      	ldrh	r3, [r7, #14]
 804767e:	429a      	cmp	r2, r3
 8047680:	d34e      	bcc.n	8047720 <umm_malloc_core+0x154>
         * what we need, unlink it from the free list and mark it as in use, and
         * link the rest of the block back into the freelist as if it was a new
         * block on the free list...
         */

        if (blockSize == blocks) {
 8047682:	8afa      	ldrh	r2, [r7, #22]
 8047684:	89fb      	ldrh	r3, [r7, #14]
 8047686:	429a      	cmp	r2, r3
 8047688:	d104      	bne.n	8047694 <umm_malloc_core+0xc8>
            /* It's an exact fit and we don't neet to split off a block. */
            DBGLOG_DEBUG("Allocating %6i blocks starting at %6i - exact\n", blocks, cf);

            /* Disconnect this block from the FREE list */

            umm_disconnect_from_free_list(cf);
 804768a:	8a3b      	ldrh	r3, [r7, #16]
 804768c:	4618      	mov	r0, r3
 804768e:	f7ff fef5 	bl	804747c <umm_disconnect_from_free_list>
        if (blockSize == blocks) {
 8047692:	e047      	b.n	8047724 <umm_malloc_core+0x158>

            /*
             * split current free block `cf` into two blocks. The first one will be
             * returned to user, so it's not free, and the second one will be free.
             */
            umm_split_block(cf, blocks, UMM_FREELIST_MASK /*new block is free*/);
 8047694:	89f9      	ldrh	r1, [r7, #14]
 8047696:	8a3b      	ldrh	r3, [r7, #16]
 8047698:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 804769c:	4618      	mov	r0, r3
 804769e:	f7ff fe9f 	bl	80473e0 <umm_split_block>
             * free block from `cf` to `cf + blocks`. So we have to adjust pointers
             * to and from adjacent free blocks.
             */

            /* previous free block */
            UMM_NFREE(UMM_PFREE(cf)) = cf + blocks;
 80476a2:	4b25      	ldr	r3, [pc, #148]	; (8047738 <umm_malloc_core+0x16c>)
 80476a4:	681a      	ldr	r2, [r3, #0]
 80476a6:	4b24      	ldr	r3, [pc, #144]	; (8047738 <umm_malloc_core+0x16c>)
 80476a8:	6819      	ldr	r1, [r3, #0]
 80476aa:	8a3b      	ldrh	r3, [r7, #16]
 80476ac:	00db      	lsls	r3, r3, #3
 80476ae:	440b      	add	r3, r1
 80476b0:	88db      	ldrh	r3, [r3, #6]
 80476b2:	b29b      	uxth	r3, r3
 80476b4:	00db      	lsls	r3, r3, #3
 80476b6:	4413      	add	r3, r2
 80476b8:	8a39      	ldrh	r1, [r7, #16]
 80476ba:	89fa      	ldrh	r2, [r7, #14]
 80476bc:	440a      	add	r2, r1
 80476be:	b292      	uxth	r2, r2
 80476c0:	809a      	strh	r2, [r3, #4]
            UMM_PFREE(cf + blocks) = UMM_PFREE(cf);
 80476c2:	4b1d      	ldr	r3, [pc, #116]	; (8047738 <umm_malloc_core+0x16c>)
 80476c4:	681a      	ldr	r2, [r3, #0]
 80476c6:	8a3b      	ldrh	r3, [r7, #16]
 80476c8:	00db      	lsls	r3, r3, #3
 80476ca:	441a      	add	r2, r3
 80476cc:	4b1a      	ldr	r3, [pc, #104]	; (8047738 <umm_malloc_core+0x16c>)
 80476ce:	6819      	ldr	r1, [r3, #0]
 80476d0:	8a38      	ldrh	r0, [r7, #16]
 80476d2:	89fb      	ldrh	r3, [r7, #14]
 80476d4:	4403      	add	r3, r0
 80476d6:	00db      	lsls	r3, r3, #3
 80476d8:	440b      	add	r3, r1
 80476da:	88d2      	ldrh	r2, [r2, #6]
 80476dc:	b292      	uxth	r2, r2
 80476de:	80da      	strh	r2, [r3, #6]

            /* next free block */
            UMM_PFREE(UMM_NFREE(cf)) = cf + blocks;
 80476e0:	4b15      	ldr	r3, [pc, #84]	; (8047738 <umm_malloc_core+0x16c>)
 80476e2:	681a      	ldr	r2, [r3, #0]
 80476e4:	4b14      	ldr	r3, [pc, #80]	; (8047738 <umm_malloc_core+0x16c>)
 80476e6:	6819      	ldr	r1, [r3, #0]
 80476e8:	8a3b      	ldrh	r3, [r7, #16]
 80476ea:	00db      	lsls	r3, r3, #3
 80476ec:	440b      	add	r3, r1
 80476ee:	889b      	ldrh	r3, [r3, #4]
 80476f0:	b29b      	uxth	r3, r3
 80476f2:	00db      	lsls	r3, r3, #3
 80476f4:	4413      	add	r3, r2
 80476f6:	8a39      	ldrh	r1, [r7, #16]
 80476f8:	89fa      	ldrh	r2, [r7, #14]
 80476fa:	440a      	add	r2, r1
 80476fc:	b292      	uxth	r2, r2
 80476fe:	80da      	strh	r2, [r3, #6]
            UMM_NFREE(cf + blocks) = UMM_NFREE(cf);
 8047700:	4b0d      	ldr	r3, [pc, #52]	; (8047738 <umm_malloc_core+0x16c>)
 8047702:	681a      	ldr	r2, [r3, #0]
 8047704:	8a3b      	ldrh	r3, [r7, #16]
 8047706:	00db      	lsls	r3, r3, #3
 8047708:	441a      	add	r2, r3
 804770a:	4b0b      	ldr	r3, [pc, #44]	; (8047738 <umm_malloc_core+0x16c>)
 804770c:	6819      	ldr	r1, [r3, #0]
 804770e:	8a38      	ldrh	r0, [r7, #16]
 8047710:	89fb      	ldrh	r3, [r7, #14]
 8047712:	4403      	add	r3, r0
 8047714:	00db      	lsls	r3, r3, #3
 8047716:	440b      	add	r3, r1
 8047718:	8892      	ldrh	r2, [r2, #4]
 804771a:	b292      	uxth	r2, r2
 804771c:	809a      	strh	r2, [r3, #4]
        if (blockSize == blocks) {
 804771e:	e001      	b.n	8047724 <umm_malloc_core+0x158>
    } else {
        /* Out of memory */

        DBGLOG_DEBUG("Can't allocate %5i blocks\n", blocks);

        return (void *)NULL;
 8047720:	2300      	movs	r3, #0
 8047722:	e005      	b.n	8047730 <umm_malloc_core+0x164>
    }

    return (void *)&UMM_DATA(cf);
 8047724:	4b04      	ldr	r3, [pc, #16]	; (8047738 <umm_malloc_core+0x16c>)
 8047726:	681a      	ldr	r2, [r3, #0]
 8047728:	8a3b      	ldrh	r3, [r7, #16]
 804772a:	00db      	lsls	r3, r3, #3
 804772c:	4413      	add	r3, r2
 804772e:	3304      	adds	r3, #4
}
 8047730:	4618      	mov	r0, r3
 8047732:	3718      	adds	r7, #24
 8047734:	46bd      	mov	sp, r7
 8047736:	bd80      	pop	{r7, pc}
 8047738:	20000f08 	.word	0x20000f08

0804773c <umm_malloc>:

/* ------------------------------------------------------------------------ */

void *umm_malloc(size_t size) {
 804773c:	b580      	push	{r7, lr}
 804773e:	b084      	sub	sp, #16
 8047740:	af00      	add	r7, sp, #0
 8047742:	6078      	str	r0, [r7, #4]
    UMM_CRITICAL_DECL(id_malloc);

    void *ptr = NULL;
 8047744:	2300      	movs	r3, #0
 8047746:	60fb      	str	r3, [r7, #12]
     * a size of 0 - and if we are we'll simply return a null pointer. if not
     * then reduce the size by 1 byte so that the subsequent calculations on
     * the number of blocks to allocate are easier...
     */

    if (0 == size) {
 8047748:	687b      	ldr	r3, [r7, #4]
 804774a:	2b00      	cmp	r3, #0
 804774c:	d101      	bne.n	8047752 <umm_malloc+0x16>
        DBGLOG_DEBUG("malloc a block of 0 bytes -> do nothing\n");

        return ptr;
 804774e:	68fb      	ldr	r3, [r7, #12]
 8047750:	e004      	b.n	804775c <umm_malloc+0x20>

    /* Allocate the memory withing a protected critical section */

    UMM_CRITICAL_ENTRY(id_malloc);

    ptr = umm_malloc_core(size);
 8047752:	6878      	ldr	r0, [r7, #4]
 8047754:	f7ff ff3a 	bl	80475cc <umm_malloc_core>
 8047758:	60f8      	str	r0, [r7, #12]

    UMM_CRITICAL_EXIT(id_malloc);

    return ptr;
 804775a:	68fb      	ldr	r3, [r7, #12]
}
 804775c:	4618      	mov	r0, r3
 804775e:	3710      	adds	r7, #16
 8047760:	46bd      	mov	sp, r7
 8047762:	bd80      	pop	{r7, pc}

08047764 <SCH_AddHandlerTable>:
	tsk_cnt++ ;
}
#endif

void SCH_AddHandlerTable(TaskConfigType* CfgTable , uint8_t size)
{
 8047764:	b480      	push	{r7}
 8047766:	b083      	sub	sp, #12
 8047768:	af00      	add	r7, sp, #0
 804776a:	6078      	str	r0, [r7, #4]
 804776c:	460b      	mov	r3, r1
 804776e:	70fb      	strb	r3, [r7, #3]
	TasksTable = CfgTable ;
 8047770:	4a05      	ldr	r2, [pc, #20]	; (8047788 <SCH_AddHandlerTable+0x24>)
 8047772:	687b      	ldr	r3, [r7, #4]
 8047774:	6013      	str	r3, [r2, #0]
	TableSize = size ;
 8047776:	4a05      	ldr	r2, [pc, #20]	; (804778c <SCH_AddHandlerTable+0x28>)
 8047778:	78fb      	ldrb	r3, [r7, #3]
 804777a:	7013      	strb	r3, [r2, #0]
}
 804777c:	bf00      	nop
 804777e:	370c      	adds	r7, #12
 8047780:	46bd      	mov	sp, r7
 8047782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047786:	4770      	bx	lr
 8047788:	20000f14 	.word	0x20000f14
 804778c:	20000f18 	.word	0x20000f18

08047790 <SCH_Dispatch>:
void Setup_Scheduler(void)
{

}
void SCH_Dispatch(void)
{
 8047790:	b580      	push	{r7, lr}
 8047792:	b082      	sub	sp, #8
 8047794:	af00      	add	r7, sp, #0
	uint32_t tick = HAL_GetTick();    // Get current system tick
 8047796:	f7f9 fbf7 	bl	8040f88 <HAL_GetTick>
 804779a:	6038      	str	r0, [r7, #0]
	//uint32_t NumTasks = Tsk_GetNumTasks() ;

	// Loop through all tasks.  First, run all continuous tasks.  Then,
	// if the number of ticks since the last time the task was run is
	// greater than or equal to the task interval, execute the task.
	for(uint32_t TaskIndex = 0; TaskIndex < TableSize ; TaskIndex++)
 804779c:	2300      	movs	r3, #0
 804779e:	607b      	str	r3, [r7, #4]
 80477a0:	e042      	b.n	8047828 <SCH_Dispatch+0x98>
	        {
	          if(TasksTable[TaskIndex].Interval == 0)
 80477a2:	4b27      	ldr	r3, [pc, #156]	; (8047840 <SCH_Dispatch+0xb0>)
 80477a4:	6819      	ldr	r1, [r3, #0]
 80477a6:	687a      	ldr	r2, [r7, #4]
 80477a8:	4613      	mov	r3, r2
 80477aa:	005b      	lsls	r3, r3, #1
 80477ac:	4413      	add	r3, r2
 80477ae:	009b      	lsls	r3, r3, #2
 80477b0:	440b      	add	r3, r1
 80477b2:	889b      	ldrh	r3, [r3, #4]
 80477b4:	2b00      	cmp	r3, #0
 80477b6:	d10a      	bne.n	80477ce <SCH_Dispatch+0x3e>
	          {
	            // Run continuous tasks.
	            (TasksTable[TaskIndex].Func)();
 80477b8:	4b21      	ldr	r3, [pc, #132]	; (8047840 <SCH_Dispatch+0xb0>)
 80477ba:	6819      	ldr	r1, [r3, #0]
 80477bc:	687a      	ldr	r2, [r7, #4]
 80477be:	4613      	mov	r3, r2
 80477c0:	005b      	lsls	r3, r3, #1
 80477c2:	4413      	add	r3, r2
 80477c4:	009b      	lsls	r3, r3, #2
 80477c6:	440b      	add	r3, r1
 80477c8:	681b      	ldr	r3, [r3, #0]
 80477ca:	4798      	blx	r3
 80477cc:	e029      	b.n	8047822 <SCH_Dispatch+0x92>
	          }
	         else if((tick - TasksTable[TaskIndex].LastTick) >= TasksTable[TaskIndex].Interval)
 80477ce:	4b1c      	ldr	r3, [pc, #112]	; (8047840 <SCH_Dispatch+0xb0>)
 80477d0:	6819      	ldr	r1, [r3, #0]
 80477d2:	687a      	ldr	r2, [r7, #4]
 80477d4:	4613      	mov	r3, r2
 80477d6:	005b      	lsls	r3, r3, #1
 80477d8:	4413      	add	r3, r2
 80477da:	009b      	lsls	r3, r3, #2
 80477dc:	440b      	add	r3, r1
 80477de:	689b      	ldr	r3, [r3, #8]
 80477e0:	683a      	ldr	r2, [r7, #0]
 80477e2:	1ad1      	subs	r1, r2, r3
 80477e4:	4b16      	ldr	r3, [pc, #88]	; (8047840 <SCH_Dispatch+0xb0>)
 80477e6:	6818      	ldr	r0, [r3, #0]
 80477e8:	687a      	ldr	r2, [r7, #4]
 80477ea:	4613      	mov	r3, r2
 80477ec:	005b      	lsls	r3, r3, #1
 80477ee:	4413      	add	r3, r2
 80477f0:	009b      	lsls	r3, r3, #2
 80477f2:	4403      	add	r3, r0
 80477f4:	889b      	ldrh	r3, [r3, #4]
 80477f6:	4299      	cmp	r1, r3
 80477f8:	d313      	bcc.n	8047822 <SCH_Dispatch+0x92>
	          {
	            (TasksTable[TaskIndex].Func)();         // Execute Task
 80477fa:	4b11      	ldr	r3, [pc, #68]	; (8047840 <SCH_Dispatch+0xb0>)
 80477fc:	6819      	ldr	r1, [r3, #0]
 80477fe:	687a      	ldr	r2, [r7, #4]
 8047800:	4613      	mov	r3, r2
 8047802:	005b      	lsls	r3, r3, #1
 8047804:	4413      	add	r3, r2
 8047806:	009b      	lsls	r3, r3, #2
 8047808:	440b      	add	r3, r1
 804780a:	681b      	ldr	r3, [r3, #0]
 804780c:	4798      	blx	r3

	            TasksTable[TaskIndex].LastTick = tick;  // Save last tick the task was ran.
 804780e:	4b0c      	ldr	r3, [pc, #48]	; (8047840 <SCH_Dispatch+0xb0>)
 8047810:	6819      	ldr	r1, [r3, #0]
 8047812:	687a      	ldr	r2, [r7, #4]
 8047814:	4613      	mov	r3, r2
 8047816:	005b      	lsls	r3, r3, #1
 8047818:	4413      	add	r3, r2
 804781a:	009b      	lsls	r3, r3, #2
 804781c:	440b      	add	r3, r1
 804781e:	683a      	ldr	r2, [r7, #0]
 8047820:	609a      	str	r2, [r3, #8]
	for(uint32_t TaskIndex = 0; TaskIndex < TableSize ; TaskIndex++)
 8047822:	687b      	ldr	r3, [r7, #4]
 8047824:	3301      	adds	r3, #1
 8047826:	607b      	str	r3, [r7, #4]
 8047828:	4b06      	ldr	r3, [pc, #24]	; (8047844 <SCH_Dispatch+0xb4>)
 804782a:	781b      	ldrb	r3, [r3, #0]
 804782c:	461a      	mov	r2, r3
 804782e:	687b      	ldr	r3, [r7, #4]
 8047830:	4293      	cmp	r3, r2
 8047832:	d3b6      	bcc.n	80477a2 <SCH_Dispatch+0x12>
	          }
	        }
}
 8047834:	bf00      	nop
 8047836:	bf00      	nop
 8047838:	3708      	adds	r7, #8
 804783a:	46bd      	mov	sp, r7
 804783c:	bd80      	pop	{r7, pc}
 804783e:	bf00      	nop
 8047840:	20000f14 	.word	0x20000f14
 8047844:	20000f18 	.word	0x20000f18

08047848 <Get_AuxiliaryStatus>:
{
	aux_var.SmallTasks = fun ;
}

Aux *Get_AuxiliaryStatus(void)
{
 8047848:	b480      	push	{r7}
 804784a:	af00      	add	r7, sp, #0
	return &aux_var ;
 804784c:	4b02      	ldr	r3, [pc, #8]	; (8047858 <Get_AuxiliaryStatus+0x10>)
}
 804784e:	4618      	mov	r0, r3
 8047850:	46bd      	mov	sp, r7
 8047852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047856:	4770      	bx	lr
 8047858:	20000f1c 	.word	0x20000f1c

0804785c <main>:
u8 pipe_passed = 0 ;


/* Main function ----------------------------------------------------------------------*/
int main(void)
{
 804785c:	b580      	push	{r7, lr}
 804785e:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/


  MCU_Init() ;
 8047860:	f7fe f9bc 	bl	8045bdc <MCU_Init>

  InitDisplay((void*)AST_background , 0);
 8047864:	2100      	movs	r1, #0
 8047866:	4808      	ldr	r0, [pc, #32]	; (8047888 <main+0x2c>)
 8047868:	f7fd fc72 	bl	8045150 <InitDisplay>
  GamePad_Init();
 804786c:	f7ff f906 	bl	8046a7c <GamePad_Init>
  touchpad_init();
 8047870:	f7ff fb72 	bl	8046f58 <touchpad_init>

  //umm_init() for dynamic memory allocation ,
  //and it must be called after SDRAM initialization !!
  umm_init();
 8047874:	f7ff fe9c 	bl	80475b0 <umm_init>
		  {GamePad_InputsUpdate,  INTERVAL_20MS, 0 } ,
		  {TouchPad_InputsUpdate, INTERVAL_30MS, 0 } ,
		  {game_main,             INTERVAL_16MS, 0 }
  };

  SCH_AddHandlerTable(tskArray , sizeof(tskArray) /sizeof(TaskConfigType)) ;
 8047878:	2103      	movs	r1, #3
 804787a:	4804      	ldr	r0, [pc, #16]	; (804788c <main+0x30>)
 804787c:	f7ff ff72 	bl	8047764 <SCH_AddHandlerTable>

  while (1)
  {
	  SCH_Dispatch() ;
 8047880:	f7ff ff86 	bl	8047790 <SCH_Dispatch>
 8047884:	e7fc      	b.n	8047880 <main+0x24>
 8047886:	bf00      	nop
 8047888:	0805b808 	.word	0x0805b808
 804788c:	2000001c 	.word	0x2000001c

08047890 <game_main>:
}//main


/* Functions ----------------------------------------------------------------------*/
void game_main(void)
{
 8047890:	b580      	push	{r7, lr}
 8047892:	b082      	sub	sp, #8
 8047894:	af00      	add	r7, sp, #0


	switch(state)
 8047896:	4b31      	ldr	r3, [pc, #196]	; (804795c <game_main+0xcc>)
 8047898:	781b      	ldrb	r3, [r3, #0]
 804789a:	2b03      	cmp	r3, #3
 804789c:	d85a      	bhi.n	8047954 <game_main+0xc4>
 804789e:	a201      	add	r2, pc, #4	; (adr r2, 80478a4 <game_main+0x14>)
 80478a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80478a4:	080478b5 	.word	0x080478b5
 80478a8:	080478f9 	.word	0x080478f9
 80478ac:	08047907 	.word	0x08047907
 80478b0:	0804790d 	.word	0x0804790d
	case GAME_STATE_INIT :

		/*
		 * At this state init background , Paddle , ball.
		 */
		BufferConfig(ANIMATED) ;
 80478b4:	2001      	movs	r0, #1
 80478b6:	f7fd fa47 	bl	8044d48 <BufferConfig>
		Init_backGround(&BackGround);
 80478ba:	4829      	ldr	r0, [pc, #164]	; (8047960 <game_main+0xd0>)
 80478bc:	f000 f85e 	bl	804797c <Init_backGround>
		Ship_Init();
 80478c0:	f000 fbb2 	bl	8048028 <Ship_Init>
		//Explosion_Init(&Explo[0] , 0);
		for(int i = 0 ; i < NUM_ASTEROIDS ; i++)
 80478c4:	2300      	movs	r3, #0
 80478c6:	607b      	str	r3, [r7, #4]
 80478c8:	e00f      	b.n	80478ea <game_main+0x5a>
		      {
			     Asteriod_Init(&BigAStr[i],i) ;
 80478ca:	687b      	ldr	r3, [r7, #4]
 80478cc:	f44f 72a8 	mov.w	r2, #336	; 0x150
 80478d0:	fb02 f303 	mul.w	r3, r2, r3
 80478d4:	4a23      	ldr	r2, [pc, #140]	; (8047964 <game_main+0xd4>)
 80478d6:	4413      	add	r3, r2
 80478d8:	687a      	ldr	r2, [r7, #4]
 80478da:	b2d2      	uxtb	r2, r2
 80478dc:	4611      	mov	r1, r2
 80478de:	4618      	mov	r0, r3
 80478e0:	f000 f8a4 	bl	8047a2c <Asteriod_Init>
		for(int i = 0 ; i < NUM_ASTEROIDS ; i++)
 80478e4:	687b      	ldr	r3, [r7, #4]
 80478e6:	3301      	adds	r3, #1
 80478e8:	607b      	str	r3, [r7, #4]
 80478ea:	687b      	ldr	r3, [r7, #4]
 80478ec:	2b04      	cmp	r3, #4
 80478ee:	ddec      	ble.n	80478ca <game_main+0x3a>
		      }
		//Transition to level selection state
		state = GAME_STATE_LEVEL ;
 80478f0:	4b1a      	ldr	r3, [pc, #104]	; (804795c <game_main+0xcc>)
 80478f2:	2201      	movs	r2, #1
 80478f4:	701a      	strb	r2, [r3, #0]
		break ;
 80478f6:	e02d      	b.n	8047954 <game_main+0xc4>
		 * At this state we go for init the game level
		 */

		//zeroing score

		score =0;
 80478f8:	4b1b      	ldr	r3, [pc, #108]	; (8047968 <game_main+0xd8>)
 80478fa:	2200      	movs	r2, #0
 80478fc:	601a      	str	r2, [r3, #0]
	//	snprintf(strbuf,10,"Score %d" , score);
		//Transition to level selection state
		state = GAME_STATE_RUN ;
 80478fe:	4b17      	ldr	r3, [pc, #92]	; (804795c <game_main+0xcc>)
 8047900:	2202      	movs	r2, #2
 8047902:	701a      	strb	r2, [r3, #0]
		break ;
 8047904:	e026      	b.n	8047954 <game_main+0xc4>
	case GAME_STATE_RUN :

		/*
		 * The core of the game logic goes here.
		 */
		ship_test() ;
 8047906:	f000 fbf7 	bl	80480f8 <ship_test>

		break;
 804790a:	e023      	b.n	8047954 <game_main+0xc4>

	case GAME_STATE_END :

		//Kill_Sprites() ;
		BufferConfig(NON_ANIMATED) ;
 804790c:	2000      	movs	r0, #0
 804790e:	f7fd fa1b 	bl	8044d48 <BufferConfig>

		do{ // render only once
		   clearScreen();
 8047912:	f7fd fdb7 	bl	8045484 <clearScreen>
		   renderStr(80, 160,BLACK,"GAME OVER!!") ;
 8047916:	4b15      	ldr	r3, [pc, #84]	; (804796c <game_main+0xdc>)
 8047918:	2200      	movs	r2, #0
 804791a:	21a0      	movs	r1, #160	; 0xa0
 804791c:	2050      	movs	r0, #80	; 0x50
 804791e:	f7fd fd49 	bl	80453b4 <renderStr>
		   renderStr(5, 180,BLACK,"Press Start or\n\n"
 8047922:	4b13      	ldr	r3, [pc, #76]	; (8047970 <game_main+0xe0>)
 8047924:	2200      	movs	r2, #0
 8047926:	21b4      	movs	r1, #180	; 0xb4
 8047928:	2005      	movs	r0, #5
 804792a:	f7fd fd43 	bl	80453b4 <renderStr>
				                                   "touch for new game") ;
		}while( state !=GAME_STATE_END );
 804792e:	4b0b      	ldr	r3, [pc, #44]	; (804795c <game_main+0xcc>)
 8047930:	781b      	ldrb	r3, [r3, #0]
 8047932:	2b03      	cmp	r3, #3
 8047934:	d1ed      	bne.n	8047912 <game_main+0x82>


		if( GamePad.button.start == PRESSED || tc.state == TC_PRESSED)
 8047936:	4b0f      	ldr	r3, [pc, #60]	; (8047974 <game_main+0xe4>)
 8047938:	789b      	ldrb	r3, [r3, #2]
 804793a:	f003 0310 	and.w	r3, r3, #16
 804793e:	b2db      	uxtb	r3, r3
 8047940:	2b00      	cmp	r3, #0
 8047942:	d003      	beq.n	804794c <game_main+0xbc>
 8047944:	4b0c      	ldr	r3, [pc, #48]	; (8047978 <game_main+0xe8>)
 8047946:	791b      	ldrb	r3, [r3, #4]
 8047948:	2b01      	cmp	r3, #1
 804794a:	d102      	bne.n	8047952 <game_main+0xc2>
		{
			state = GAME_STATE_INIT ; // Start new game
 804794c:	4b03      	ldr	r3, [pc, #12]	; (804795c <game_main+0xcc>)
 804794e:	2200      	movs	r2, #0
 8047950:	701a      	strb	r2, [r3, #0]
		}

		break ;
 8047952:	bf00      	nop
	}//switch state


}
 8047954:	bf00      	nop
 8047956:	3708      	adds	r7, #8
 8047958:	46bd      	mov	sp, r7
 804795a:	bd80      	pop	{r7, pc}
 804795c:	20006080 	.word	0x20006080
 8047960:	20000f20 	.word	0x20000f20
 8047964:	200011c0 	.word	0x200011c0
 8047968:	20006098 	.word	0x20006098
 804796c:	08049a78 	.word	0x08049a78
 8047970:	08049a84 	.word	0x08049a84
 8047974:	20006084 	.word	0x20006084
 8047978:	20006090 	.word	0x20006090

0804797c <Init_backGround>:


/***** Private Game functions *****/
void Init_backGround(Sprite *spr)
{
 804797c:	b480      	push	{r7}
 804797e:	b083      	sub	sp, #12
 8047980:	af00      	add	r7, sp, #0
 8047982:	6078      	str	r0, [r7, #4]
   spr->x = 0 ;
 8047984:	687b      	ldr	r3, [r7, #4]
 8047986:	f04f 0200 	mov.w	r2, #0
 804798a:	605a      	str	r2, [r3, #4]
   spr->y = 0 ;
 804798c:	687b      	ldr	r3, [r7, #4]
 804798e:	f04f 0200 	mov.w	r2, #0
 8047992:	609a      	str	r2, [r3, #8]
   spr->Width =  SCREEN_W ;
 8047994:	687b      	ldr	r3, [r7, #4]
 8047996:	22f0      	movs	r2, #240	; 0xf0
 8047998:	60da      	str	r2, [r3, #12]
   spr->Height = SCREEN_H;
 804799a:	687b      	ldr	r3, [r7, #4]
 804799c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80479a0:	611a      	str	r2, [r3, #16]
   spr->ImageData =(uint16_t*) AST_background ;
 80479a2:	687b      	ldr	r3, [r7, #4]
 80479a4:	4a05      	ldr	r2, [pc, #20]	; (80479bc <Init_backGround+0x40>)
 80479a6:	601a      	str	r2, [r3, #0]
   spr->active =1 ;
 80479a8:	687b      	ldr	r3, [r7, #4]
 80479aa:	2201      	movs	r2, #1
 80479ac:	639a      	str	r2, [r3, #56]	; 0x38
}
 80479ae:	bf00      	nop
 80479b0:	370c      	adds	r7, #12
 80479b2:	46bd      	mov	sp, r7
 80479b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80479b8:	4770      	bx	lr
 80479ba:	bf00      	nop
 80479bc:	0805b808 	.word	0x0805b808

080479c0 <GamePad_InputsUpdate>:


void GamePad_InputsUpdate(void)
{
 80479c0:	b590      	push	{r4, r7, lr}
 80479c2:	b085      	sub	sp, #20
 80479c4:	af00      	add	r7, sp, #0
	GamePad = GamePad_Read();
 80479c6:	4c07      	ldr	r4, [pc, #28]	; (80479e4 <GamePad_InputsUpdate+0x24>)
 80479c8:	463b      	mov	r3, r7
 80479ca:	4618      	mov	r0, r3
 80479cc:	f7ff f88c 	bl	8046ae8 <GamePad_Read>
 80479d0:	4623      	mov	r3, r4
 80479d2:	463a      	mov	r2, r7
 80479d4:	6810      	ldr	r0, [r2, #0]
 80479d6:	6851      	ldr	r1, [r2, #4]
 80479d8:	6892      	ldr	r2, [r2, #8]
 80479da:	c307      	stmia	r3!, {r0, r1, r2}
}
 80479dc:	bf00      	nop
 80479de:	3714      	adds	r7, #20
 80479e0:	46bd      	mov	sp, r7
 80479e2:	bd90      	pop	{r4, r7, pc}
 80479e4:	20006084 	.word	0x20006084

080479e8 <TouchPad_InputsUpdate>:

void TouchPad_InputsUpdate(void)
{
 80479e8:	b590      	push	{r4, r7, lr}
 80479ea:	b083      	sub	sp, #12
 80479ec:	af00      	add	r7, sp, #0
	GPIOG->ODR |=1<<13 ;   //debug pulse view program
 80479ee:	4b0d      	ldr	r3, [pc, #52]	; (8047a24 <TouchPad_InputsUpdate+0x3c>)
 80479f0:	695b      	ldr	r3, [r3, #20]
 80479f2:	4a0c      	ldr	r2, [pc, #48]	; (8047a24 <TouchPad_InputsUpdate+0x3c>)
 80479f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80479f8:	6153      	str	r3, [r2, #20]
	tc =touchpad_read() ;
 80479fa:	4c0b      	ldr	r4, [pc, #44]	; (8047a28 <TouchPad_InputsUpdate+0x40>)
 80479fc:	463b      	mov	r3, r7
 80479fe:	4618      	mov	r0, r3
 8047a00:	f7ff fab4 	bl	8046f6c <touchpad_read>
 8047a04:	4622      	mov	r2, r4
 8047a06:	463b      	mov	r3, r7
 8047a08:	6818      	ldr	r0, [r3, #0]
 8047a0a:	6010      	str	r0, [r2, #0]
 8047a0c:	889b      	ldrh	r3, [r3, #4]
 8047a0e:	8093      	strh	r3, [r2, #4]
	GPIOG->ODR &=~(1<<13) ;   //debug pulse view program
 8047a10:	4b04      	ldr	r3, [pc, #16]	; (8047a24 <TouchPad_InputsUpdate+0x3c>)
 8047a12:	695b      	ldr	r3, [r3, #20]
 8047a14:	4a03      	ldr	r2, [pc, #12]	; (8047a24 <TouchPad_InputsUpdate+0x3c>)
 8047a16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8047a1a:	6153      	str	r3, [r2, #20]
}
 8047a1c:	bf00      	nop
 8047a1e:	370c      	adds	r7, #12
 8047a20:	46bd      	mov	sp, r7
 8047a22:	bd90      	pop	{r4, r7, pc}
 8047a24:	40021800 	.word	0x40021800
 8047a28:	20006090 	.word	0x20006090

08047a2c <Asteriod_Init>:


void Asteriod_Init(Sprite * astr , u8 index)
{
 8047a2c:	b580      	push	{r7, lr}
 8047a2e:	b0c8      	sub	sp, #288	; 0x120
 8047a30:	af00      	add	r7, sp, #0
 8047a32:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8047a36:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8047a3a:	6018      	str	r0, [r3, #0]
 8047a3c:	460a      	mov	r2, r1
 8047a3e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8047a42:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8047a46:	701a      	strb	r2, [r3, #0]
	Bitmap frames_arr[16] ;


	astr->x = RANGE_RAND(0,SCREEN_W) ;
 8047a48:	f7fe ffda 	bl	8046a00 <Rand_num>
 8047a4c:	4601      	mov	r1, r0
 8047a4e:	4b8c      	ldr	r3, [pc, #560]	; (8047c80 <Asteriod_Init+0x254>)
 8047a50:	fba3 2301 	umull	r2, r3, r3, r1
 8047a54:	091a      	lsrs	r2, r3, #4
 8047a56:	4613      	mov	r3, r2
 8047a58:	011b      	lsls	r3, r3, #4
 8047a5a:	1a9b      	subs	r3, r3, r2
 8047a5c:	011b      	lsls	r3, r3, #4
 8047a5e:	4413      	add	r3, r2
 8047a60:	1aca      	subs	r2, r1, r3
 8047a62:	ee07 2a90 	vmov	s15, r2
 8047a66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8047a6a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8047a6e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8047a72:	681b      	ldr	r3, [r3, #0]
 8047a74:	edc3 7a01 	vstr	s15, [r3, #4]
	astr->y = RANGE_RAND(0,SCREEN_H) ;
 8047a78:	f7fe ffc2 	bl	8046a00 <Rand_num>
 8047a7c:	4601      	mov	r1, r0
 8047a7e:	4b81      	ldr	r3, [pc, #516]	; (8047c84 <Asteriod_Init+0x258>)
 8047a80:	fba3 2301 	umull	r2, r3, r3, r1
 8047a84:	0a1a      	lsrs	r2, r3, #8
 8047a86:	4613      	mov	r3, r2
 8047a88:	009b      	lsls	r3, r3, #2
 8047a8a:	4413      	add	r3, r2
 8047a8c:	019b      	lsls	r3, r3, #6
 8047a8e:	4413      	add	r3, r2
 8047a90:	1aca      	subs	r2, r1, r3
 8047a92:	ee07 2a90 	vmov	s15, r2
 8047a96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8047a9a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8047a9e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8047aa2:	681b      	ldr	r3, [r3, #0]
 8047aa4:	edc3 7a02 	vstr	s15, [r3, #8]

	astr->xSpeed = RANGE_RAND(1,3) ;
 8047aa8:	f7fe ffaa 	bl	8046a00 <Rand_num>
 8047aac:	4601      	mov	r1, r0
 8047aae:	4b76      	ldr	r3, [pc, #472]	; (8047c88 <Asteriod_Init+0x25c>)
 8047ab0:	fba3 2301 	umull	r2, r3, r3, r1
 8047ab4:	085a      	lsrs	r2, r3, #1
 8047ab6:	4613      	mov	r3, r2
 8047ab8:	005b      	lsls	r3, r3, #1
 8047aba:	4413      	add	r3, r2
 8047abc:	1aca      	subs	r2, r1, r3
 8047abe:	1c53      	adds	r3, r2, #1
 8047ac0:	ee07 3a90 	vmov	s15, r3
 8047ac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8047ac8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8047acc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8047ad0:	681b      	ldr	r3, [r3, #0]
 8047ad2:	edc3 7a05 	vstr	s15, [r3, #20]
	astr->ySpeed = RANGE_RAND(1,3) ;
 8047ad6:	f7fe ff93 	bl	8046a00 <Rand_num>
 8047ada:	4601      	mov	r1, r0
 8047adc:	4b6a      	ldr	r3, [pc, #424]	; (8047c88 <Asteriod_Init+0x25c>)
 8047ade:	fba3 2301 	umull	r2, r3, r3, r1
 8047ae2:	085a      	lsrs	r2, r3, #1
 8047ae4:	4613      	mov	r3, r2
 8047ae6:	005b      	lsls	r3, r3, #1
 8047ae8:	4413      	add	r3, r2
 8047aea:	1aca      	subs	r2, r1, r3
 8047aec:	1c53      	adds	r3, r2, #1
 8047aee:	ee07 3a90 	vmov	s15, r3
 8047af2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8047af6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8047afa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8047afe:	681b      	ldr	r3, [r3, #0]
 8047b00:	edc3 7a06 	vstr	s15, [r3, #24]
	//Init frames
	astr->Frames_no = 16 ;
 8047b04:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8047b08:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8047b0c:	681b      	ldr	r3, [r3, #0]
 8047b0e:	2210      	movs	r2, #16
 8047b10:	641a      	str	r2, [r3, #64]	; 0x40
	astr->curr_frame = 0 ;
 8047b12:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8047b16:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8047b1a:	681b      	ldr	r3, [r3, #0]
 8047b1c:	2200      	movs	r2, #0
 8047b1e:	63da      	str	r2, [r3, #60]	; 0x3c

	for( u8 i =0 ; i<16 ; i++)
 8047b20:	2300      	movs	r3, #0
 8047b22:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8047b26:	e01c      	b.n	8047b62 <Asteriod_Init+0x136>
			{
				astr->frames[i].w = 32 ;
 8047b28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8047b2c:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8047b30:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 8047b34:	6812      	ldr	r2, [r2, #0]
 8047b36:	011b      	lsls	r3, r3, #4
 8047b38:	4413      	add	r3, r2
 8047b3a:	3358      	adds	r3, #88	; 0x58
 8047b3c:	2220      	movs	r2, #32
 8047b3e:	601a      	str	r2, [r3, #0]
				astr->frames[i].h = 32 ;
 8047b40:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8047b44:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8047b48:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 8047b4c:	6812      	ldr	r2, [r2, #0]
 8047b4e:	011b      	lsls	r3, r3, #4
 8047b50:	4413      	add	r3, r2
 8047b52:	335c      	adds	r3, #92	; 0x5c
 8047b54:	2220      	movs	r2, #32
 8047b56:	601a      	str	r2, [r3, #0]
	for( u8 i =0 ; i<16 ; i++)
 8047b58:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8047b5c:	3301      	adds	r3, #1
 8047b5e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8047b62:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8047b66:	2b0f      	cmp	r3, #15
 8047b68:	d9de      	bls.n	8047b28 <Asteriod_Init+0xfc>
			}

	if(astr->active==0) // to prevent dynamic memory allocation while the sprite already created.
 8047b6a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8047b6e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8047b72:	681b      	ldr	r3, [r3, #0]
 8047b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8047b76:	2b00      	cmp	r3, #0
 8047b78:	d147      	bne.n	8047c0a <Asteriod_Init+0x1de>
			{
		       Bitmap src_bmp ;
		       src_bmp.data = (void*) image_bigastr ;
 8047b7a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8047b7e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8047b82:	4a42      	ldr	r2, [pc, #264]	; (8047c8c <Asteriod_Init+0x260>)
 8047b84:	601a      	str	r2, [r3, #0]
		       src_bmp.w    = 32*16 ;
 8047b86:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8047b8a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8047b8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8047b92:	609a      	str	r2, [r3, #8]
		       src_bmp.h    = 32 ;
 8047b94:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8047b98:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8047b9c:	2220      	movs	r2, #32
 8047b9e:	60da      	str	r2, [r3, #12]
		       if(index == 0) // grape frames once (only at astr[0])
 8047ba0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8047ba4:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8047ba8:	781b      	ldrb	r3, [r3, #0]
 8047baa:	2b00      	cmp	r3, #0
 8047bac:	d113      	bne.n	8047bd6 <Asteriod_Init+0x1aa>
			   {
		    	   Grape_frames(astr->frames ,&src_bmp , astr->Frames_no  );
 8047bae:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8047bb2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8047bb6:	681b      	ldr	r3, [r3, #0]
 8047bb8:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8047bbc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8047bc0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8047bc4:	681b      	ldr	r3, [r3, #0]
 8047bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8047bc8:	b2da      	uxtb	r2, r3
 8047bca:	f107 030c 	add.w	r3, r7, #12
 8047bce:	4619      	mov	r1, r3
 8047bd0:	f7fd f9b2 	bl	8044f38 <Grape_frames>
 8047bd4:	e019      	b.n	8047c0a <Asteriod_Init+0x1de>
			   }
		       else
		       {
		    	   //Copy frames from the preceding asteroid frame ex astr[4].frames = astr[0].frames
		    	   memcpy(astr->frames , (astr-1)->frames , astr->Frames_no * sizeof(Bitmap));
 8047bd6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8047bda:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8047bde:	681b      	ldr	r3, [r3, #0]
 8047be0:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8047be4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8047be8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8047bec:	681b      	ldr	r3, [r3, #0]
 8047bee:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8047bf2:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8047bf6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8047bfa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8047bfe:	681b      	ldr	r3, [r3, #0]
 8047c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8047c02:	011b      	lsls	r3, r3, #4
 8047c04:	461a      	mov	r2, r3
 8047c06:	f000 fd33 	bl	8048670 <memcpy>
		       }
			}
	astr->ImageData = astr->frames[0].data ;
 8047c0a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8047c0e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8047c12:	681b      	ldr	r3, [r3, #0]
 8047c14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8047c16:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8047c1a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8047c1e:	681b      	ldr	r3, [r3, #0]
 8047c20:	601a      	str	r2, [r3, #0]
	astr->anim_cnt = 0 ;
 8047c22:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8047c26:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8047c2a:	681b      	ldr	r3, [r3, #0]
 8047c2c:	2200      	movs	r2, #0
 8047c2e:	645a      	str	r2, [r3, #68]	; 0x44
	astr->anim_sp  = 2 ;
 8047c30:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8047c34:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8047c38:	681b      	ldr	r3, [r3, #0]
 8047c3a:	2202      	movs	r2, #2
 8047c3c:	649a      	str	r2, [r3, #72]	; 0x48

	astr->Width =  32 ;
 8047c3e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8047c42:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8047c46:	681b      	ldr	r3, [r3, #0]
 8047c48:	2220      	movs	r2, #32
 8047c4a:	60da      	str	r2, [r3, #12]
	astr->Height = 32 ;
 8047c4c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8047c50:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8047c54:	681b      	ldr	r3, [r3, #0]
 8047c56:	2220      	movs	r2, #32
 8047c58:	611a      	str	r2, [r3, #16]
	astr->active =  1 ;
 8047c5a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8047c5e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8047c62:	681b      	ldr	r3, [r3, #0]
 8047c64:	2201      	movs	r2, #1
 8047c66:	639a      	str	r2, [r3, #56]	; 0x38
	astr->continus_anim = 1 ;
 8047c68:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8047c6c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8047c70:	681b      	ldr	r3, [r3, #0]
 8047c72:	2201      	movs	r2, #1
 8047c74:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8047c76:	bf00      	nop
 8047c78:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8047c7c:	46bd      	mov	sp, r7
 8047c7e:	bd80      	pop	{r7, pc}
 8047c80:	10fef011 	.word	0x10fef011
 8047c84:	cc29786d 	.word	0xcc29786d
 8047c88:	aaaaaaab 	.word	0xaaaaaaab
 8047c8c:	08053808 	.word	0x08053808

08047c90 <Asteriod_update>:

void Asteriod_update(Sprite * astr)
{
 8047c90:	b480      	push	{r7}
 8047c92:	b083      	sub	sp, #12
 8047c94:	af00      	add	r7, sp, #0
 8047c96:	6078      	str	r0, [r7, #4]
	astr->x += astr->xSpeed ;
 8047c98:	687b      	ldr	r3, [r7, #4]
 8047c9a:	ed93 7a01 	vldr	s14, [r3, #4]
 8047c9e:	687b      	ldr	r3, [r7, #4]
 8047ca0:	edd3 7a05 	vldr	s15, [r3, #20]
 8047ca4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8047ca8:	687b      	ldr	r3, [r7, #4]
 8047caa:	edc3 7a01 	vstr	s15, [r3, #4]
	astr->y += astr->ySpeed ;
 8047cae:	687b      	ldr	r3, [r7, #4]
 8047cb0:	ed93 7a02 	vldr	s14, [r3, #8]
 8047cb4:	687b      	ldr	r3, [r7, #4]
 8047cb6:	edd3 7a06 	vldr	s15, [r3, #24]
 8047cba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8047cbe:	687b      	ldr	r3, [r7, #4]
 8047cc0:	edc3 7a02 	vstr	s15, [r3, #8]

	if(astr->x > SCREEN_W) astr->x = 0 ;
 8047cc4:	687b      	ldr	r3, [r7, #4]
 8047cc6:	edd3 7a01 	vldr	s15, [r3, #4]
 8047cca:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8047d38 <Asteriod_update+0xa8>
 8047cce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8047cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8047cd6:	dd03      	ble.n	8047ce0 <Asteriod_update+0x50>
 8047cd8:	687b      	ldr	r3, [r7, #4]
 8047cda:	f04f 0200 	mov.w	r2, #0
 8047cde:	605a      	str	r2, [r3, #4]
	if(astr->x < 0)        astr->x = SCREEN_W;
 8047ce0:	687b      	ldr	r3, [r7, #4]
 8047ce2:	edd3 7a01 	vldr	s15, [r3, #4]
 8047ce6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8047cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8047cee:	d502      	bpl.n	8047cf6 <Asteriod_update+0x66>
 8047cf0:	687b      	ldr	r3, [r7, #4]
 8047cf2:	4a12      	ldr	r2, [pc, #72]	; (8047d3c <Asteriod_update+0xac>)
 8047cf4:	605a      	str	r2, [r3, #4]
	if(astr->y > SCREEN_H) astr->y = 0 ;
 8047cf6:	687b      	ldr	r3, [r7, #4]
 8047cf8:	edd3 7a02 	vldr	s15, [r3, #8]
 8047cfc:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8047d40 <Asteriod_update+0xb0>
 8047d00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8047d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8047d08:	dd03      	ble.n	8047d12 <Asteriod_update+0x82>
 8047d0a:	687b      	ldr	r3, [r7, #4]
 8047d0c:	f04f 0200 	mov.w	r2, #0
 8047d10:	609a      	str	r2, [r3, #8]
	if(astr->y < 0)        astr->y = SCREEN_H;
 8047d12:	687b      	ldr	r3, [r7, #4]
 8047d14:	edd3 7a02 	vldr	s15, [r3, #8]
 8047d18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8047d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8047d20:	d400      	bmi.n	8047d24 <Asteriod_update+0x94>

}
 8047d22:	e002      	b.n	8047d2a <Asteriod_update+0x9a>
	if(astr->y < 0)        astr->y = SCREEN_H;
 8047d24:	687b      	ldr	r3, [r7, #4]
 8047d26:	4a07      	ldr	r2, [pc, #28]	; (8047d44 <Asteriod_update+0xb4>)
 8047d28:	609a      	str	r2, [r3, #8]
}
 8047d2a:	bf00      	nop
 8047d2c:	370c      	adds	r7, #12
 8047d2e:	46bd      	mov	sp, r7
 8047d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047d34:	4770      	bx	lr
 8047d36:	bf00      	nop
 8047d38:	43700000 	.word	0x43700000
 8047d3c:	43700000 	.word	0x43700000
 8047d40:	43a00000 	.word	0x43a00000
 8047d44:	43a00000 	.word	0x43a00000

08047d48 <fire>:



void fire(Sprite *shp , Sprite * bul)
{
 8047d48:	b5b0      	push	{r4, r5, r7, lr}
 8047d4a:	ed2d 8b02 	vpush	{d8}
 8047d4e:	b084      	sub	sp, #16
 8047d50:	af00      	add	r7, sp, #0
 8047d52:	6078      	str	r0, [r7, #4]
 8047d54:	6039      	str	r1, [r7, #0]
	//init each bullet depending on the space position and angle

	int r = SHIP_H/2 ;
 8047d56:	2310      	movs	r3, #16
 8047d58:	60fb      	str	r3, [r7, #12]

	bul->x = r*Fast_Sin(shp->angle) + shp->x + shp->Width/2.0  ;
 8047d5a:	68fb      	ldr	r3, [r7, #12]
 8047d5c:	ee07 3a90 	vmov	s15, r3
 8047d60:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8047d64:	687b      	ldr	r3, [r7, #4]
 8047d66:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8047d6a:	eeb0 0a67 	vmov.f32	s0, s15
 8047d6e:	f7ff fa4f 	bl	8047210 <Fast_Sin>
 8047d72:	eef0 7a40 	vmov.f32	s15, s0
 8047d76:	ee28 7a27 	vmul.f32	s14, s16, s15
 8047d7a:	687b      	ldr	r3, [r7, #4]
 8047d7c:	edd3 7a01 	vldr	s15, [r3, #4]
 8047d80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8047d84:	ee17 0a90 	vmov	r0, s15
 8047d88:	f7f8 fb96 	bl	80404b8 <__aeabi_f2d>
 8047d8c:	4604      	mov	r4, r0
 8047d8e:	460d      	mov	r5, r1
 8047d90:	687b      	ldr	r3, [r7, #4]
 8047d92:	68db      	ldr	r3, [r3, #12]
 8047d94:	4618      	mov	r0, r3
 8047d96:	f7f8 fb7d 	bl	8040494 <__aeabi_i2d>
 8047d9a:	f04f 0200 	mov.w	r2, #0
 8047d9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8047da2:	f7f8 fd0b 	bl	80407bc <__aeabi_ddiv>
 8047da6:	4602      	mov	r2, r0
 8047da8:	460b      	mov	r3, r1
 8047daa:	4620      	mov	r0, r4
 8047dac:	4629      	mov	r1, r5
 8047dae:	f7f8 fa25 	bl	80401fc <__adddf3>
 8047db2:	4602      	mov	r2, r0
 8047db4:	460b      	mov	r3, r1
 8047db6:	4610      	mov	r0, r2
 8047db8:	4619      	mov	r1, r3
 8047dba:	f7f8 fead 	bl	8040b18 <__aeabi_d2f>
 8047dbe:	4602      	mov	r2, r0
 8047dc0:	683b      	ldr	r3, [r7, #0]
 8047dc2:	605a      	str	r2, [r3, #4]
	bul->y = r*(1-Fast_Cos(shp->angle) ) + shp->y ;
 8047dc4:	68fb      	ldr	r3, [r7, #12]
 8047dc6:	ee07 3a90 	vmov	s15, r3
 8047dca:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8047dce:	687b      	ldr	r3, [r7, #4]
 8047dd0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8047dd4:	eeb0 0a67 	vmov.f32	s0, s15
 8047dd8:	f7ff fa7e 	bl	80472d8 <Fast_Cos>
 8047ddc:	eef0 7a40 	vmov.f32	s15, s0
 8047de0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8047de4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8047de8:	ee28 7a27 	vmul.f32	s14, s16, s15
 8047dec:	687b      	ldr	r3, [r7, #4]
 8047dee:	edd3 7a02 	vldr	s15, [r3, #8]
 8047df2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8047df6:	683b      	ldr	r3, [r7, #0]
 8047df8:	edc3 7a02 	vstr	s15, [r3, #8]
	bul->xSpeed =  Fast_Sin(shp->angle) *4.0f + shp->xSpeed ;
 8047dfc:	687b      	ldr	r3, [r7, #4]
 8047dfe:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8047e02:	eeb0 0a67 	vmov.f32	s0, s15
 8047e06:	f7ff fa03 	bl	8047210 <Fast_Sin>
 8047e0a:	eef0 7a40 	vmov.f32	s15, s0
 8047e0e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8047e12:	ee27 7a87 	vmul.f32	s14, s15, s14
 8047e16:	687b      	ldr	r3, [r7, #4]
 8047e18:	edd3 7a05 	vldr	s15, [r3, #20]
 8047e1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8047e20:	683b      	ldr	r3, [r7, #0]
 8047e22:	edc3 7a05 	vstr	s15, [r3, #20]
	bul->ySpeed = -Fast_Cos(shp->angle) *4.0f + shp->ySpeed ;
 8047e26:	687b      	ldr	r3, [r7, #4]
 8047e28:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8047e2c:	eeb0 0a67 	vmov.f32	s0, s15
 8047e30:	f7ff fa52 	bl	80472d8 <Fast_Cos>
 8047e34:	eef0 7a40 	vmov.f32	s15, s0
 8047e38:	eef1 7a67 	vneg.f32	s15, s15
 8047e3c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8047e40:	ee27 7a87 	vmul.f32	s14, s15, s14
 8047e44:	687b      	ldr	r3, [r7, #4]
 8047e46:	edd3 7a06 	vldr	s15, [r3, #24]
 8047e4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8047e4e:	683b      	ldr	r3, [r7, #0]
 8047e50:	edc3 7a06 	vstr	s15, [r3, #24]
	bul->ImageData = image_bullet ;
 8047e54:	683b      	ldr	r3, [r7, #0]
 8047e56:	4a08      	ldr	r2, [pc, #32]	; (8047e78 <fire+0x130>)
 8047e58:	601a      	str	r2, [r3, #0]
	bul->Width  = BULLET_W ;
 8047e5a:	683b      	ldr	r3, [r7, #0]
 8047e5c:	2204      	movs	r2, #4
 8047e5e:	60da      	str	r2, [r3, #12]
	bul->Height = BULLET_H ;
 8047e60:	683b      	ldr	r3, [r7, #0]
 8047e62:	2204      	movs	r2, #4
 8047e64:	611a      	str	r2, [r3, #16]
	bul->active = 1 ;
 8047e66:	683b      	ldr	r3, [r7, #0]
 8047e68:	2201      	movs	r2, #1
 8047e6a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8047e6c:	bf00      	nop
 8047e6e:	3710      	adds	r7, #16
 8047e70:	46bd      	mov	sp, r7
 8047e72:	ecbd 8b02 	vpop	{d8}
 8047e76:	bdb0      	pop	{r4, r5, r7, pc}
 8047e78:	080537e8 	.word	0x080537e8

08047e7c <Bullet_update>:

void Bullet_update(Sprite * bul)
{
 8047e7c:	b480      	push	{r7}
 8047e7e:	b083      	sub	sp, #12
 8047e80:	af00      	add	r7, sp, #0
 8047e82:	6078      	str	r0, [r7, #4]
	bul->x += bul->xSpeed ;
 8047e84:	687b      	ldr	r3, [r7, #4]
 8047e86:	ed93 7a01 	vldr	s14, [r3, #4]
 8047e8a:	687b      	ldr	r3, [r7, #4]
 8047e8c:	edd3 7a05 	vldr	s15, [r3, #20]
 8047e90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8047e94:	687b      	ldr	r3, [r7, #4]
 8047e96:	edc3 7a01 	vstr	s15, [r3, #4]
	bul->y += bul->ySpeed ;
 8047e9a:	687b      	ldr	r3, [r7, #4]
 8047e9c:	ed93 7a02 	vldr	s14, [r3, #8]
 8047ea0:	687b      	ldr	r3, [r7, #4]
 8047ea2:	edd3 7a06 	vldr	s15, [r3, #24]
 8047ea6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8047eaa:	687b      	ldr	r3, [r7, #4]
 8047eac:	edc3 7a02 	vstr	s15, [r3, #8]

	//Boundaries

	if(bul->x < 0 || bul->x > (SCREEN_W - bul->Width)
 8047eb0:	687b      	ldr	r3, [r7, #4]
 8047eb2:	edd3 7a01 	vldr	s15, [r3, #4]
 8047eb6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8047eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8047ebe:	d428      	bmi.n	8047f12 <Bullet_update+0x96>
 8047ec0:	687b      	ldr	r3, [r7, #4]
 8047ec2:	ed93 7a01 	vldr	s14, [r3, #4]
 8047ec6:	687b      	ldr	r3, [r7, #4]
 8047ec8:	68db      	ldr	r3, [r3, #12]
 8047eca:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8047ece:	ee07 3a90 	vmov	s15, r3
 8047ed2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8047ed6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8047eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8047ede:	dc18      	bgt.n	8047f12 <Bullet_update+0x96>
			|| bul-> y < 0 || bul->y > (SCREEN_H - bul->Height) )
 8047ee0:	687b      	ldr	r3, [r7, #4]
 8047ee2:	edd3 7a02 	vldr	s15, [r3, #8]
 8047ee6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8047eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8047eee:	d410      	bmi.n	8047f12 <Bullet_update+0x96>
 8047ef0:	687b      	ldr	r3, [r7, #4]
 8047ef2:	ed93 7a02 	vldr	s14, [r3, #8]
 8047ef6:	687b      	ldr	r3, [r7, #4]
 8047ef8:	691b      	ldr	r3, [r3, #16]
 8047efa:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8047efe:	ee07 3a90 	vmov	s15, r3
 8047f02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8047f06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8047f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8047f0e:	dc00      	bgt.n	8047f12 <Bullet_update+0x96>
	{
		bul->active = 0;
	}
}
 8047f10:	e002      	b.n	8047f18 <Bullet_update+0x9c>
		bul->active = 0;
 8047f12:	687b      	ldr	r3, [r7, #4]
 8047f14:	2200      	movs	r2, #0
 8047f16:	639a      	str	r2, [r3, #56]	; 0x38
}
 8047f18:	bf00      	nop
 8047f1a:	370c      	adds	r7, #12
 8047f1c:	46bd      	mov	sp, r7
 8047f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047f22:	4770      	bx	lr

08047f24 <Explosion_Init>:

void Explosion_Init(Sprite * exp ,Sprite * ast , u8 index)
{
 8047f24:	b580      	push	{r7, lr}
 8047f26:	b08a      	sub	sp, #40	; 0x28
 8047f28:	af00      	add	r7, sp, #0
 8047f2a:	60f8      	str	r0, [r7, #12]
 8047f2c:	60b9      	str	r1, [r7, #8]
 8047f2e:	4613      	mov	r3, r2
 8047f30:	71fb      	strb	r3, [r7, #7]

	exp->x = ast->x ;
 8047f32:	68bb      	ldr	r3, [r7, #8]
 8047f34:	685a      	ldr	r2, [r3, #4]
 8047f36:	68fb      	ldr	r3, [r7, #12]
 8047f38:	605a      	str	r2, [r3, #4]
	exp->y = ast->y ;
 8047f3a:	68bb      	ldr	r3, [r7, #8]
 8047f3c:	689a      	ldr	r2, [r3, #8]
 8047f3e:	68fb      	ldr	r3, [r7, #12]
 8047f40:	609a      	str	r2, [r3, #8]
	exp->Frames_no = EXPLOS_FRAMES ;
 8047f42:	68fb      	ldr	r3, [r7, #12]
 8047f44:	2204      	movs	r2, #4
 8047f46:	641a      	str	r2, [r3, #64]	; 0x40
	exp->curr_frame = 0 ;
 8047f48:	68fb      	ldr	r3, [r7, #12]
 8047f4a:	2200      	movs	r2, #0
 8047f4c:	63da      	str	r2, [r3, #60]	; 0x3c

	for(u8 i =0 ; i< EXPLOS_FRAMES ; i++)
 8047f4e:	2300      	movs	r3, #0
 8047f50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8047f54:	e014      	b.n	8047f80 <Explosion_Init+0x5c>
	{
		exp->frames[i].w = EXPLOS_W ;
 8047f56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8047f5a:	68fa      	ldr	r2, [r7, #12]
 8047f5c:	011b      	lsls	r3, r3, #4
 8047f5e:	4413      	add	r3, r2
 8047f60:	3358      	adds	r3, #88	; 0x58
 8047f62:	2221      	movs	r2, #33	; 0x21
 8047f64:	601a      	str	r2, [r3, #0]
		exp->frames[i].h = EXPLOS_H  ;
 8047f66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8047f6a:	68fa      	ldr	r2, [r7, #12]
 8047f6c:	011b      	lsls	r3, r3, #4
 8047f6e:	4413      	add	r3, r2
 8047f70:	335c      	adds	r3, #92	; 0x5c
 8047f72:	2225      	movs	r2, #37	; 0x25
 8047f74:	601a      	str	r2, [r3, #0]
	for(u8 i =0 ; i< EXPLOS_FRAMES ; i++)
 8047f76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8047f7a:	3301      	adds	r3, #1
 8047f7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8047f80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8047f84:	2b03      	cmp	r3, #3
 8047f86:	d9e6      	bls.n	8047f56 <Explosion_Init+0x32>
	}

	exp->anim_cnt = 0 ;
 8047f88:	68fb      	ldr	r3, [r7, #12]
 8047f8a:	2200      	movs	r2, #0
 8047f8c:	645a      	str	r2, [r3, #68]	; 0x44
	exp->anim_sp = 2 ;
 8047f8e:	68fb      	ldr	r3, [r7, #12]
 8047f90:	2202      	movs	r2, #2
 8047f92:	649a      	str	r2, [r3, #72]	; 0x48

	exp->Width = EXPLOS_W ;
 8047f94:	68fb      	ldr	r3, [r7, #12]
 8047f96:	2221      	movs	r2, #33	; 0x21
 8047f98:	60da      	str	r2, [r3, #12]
	exp->Height = EXPLOS_H ;
 8047f9a:	68fb      	ldr	r3, [r7, #12]
 8047f9c:	2225      	movs	r2, #37	; 0x25
 8047f9e:	611a      	str	r2, [r3, #16]

	if(exp->active==0) // to prevent dynamic memory allocation while the sprite already created.
 8047fa0:	68fb      	ldr	r3, [r7, #12]
 8047fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8047fa4:	2b00      	cmp	r3, #0
 8047fa6:	d11c      	bne.n	8047fe2 <Explosion_Init+0xbe>
			{
		       Bitmap src_bmp ;
		       src_bmp.data = (void*) image_explosion ;
 8047fa8:	4b15      	ldr	r3, [pc, #84]	; (8048000 <Explosion_Init+0xdc>)
 8047faa:	617b      	str	r3, [r7, #20]
		       src_bmp.w    = EXPLOS_W * EXPLOS_FRAMES ;
 8047fac:	2384      	movs	r3, #132	; 0x84
 8047fae:	61fb      	str	r3, [r7, #28]
		       src_bmp.h    = EXPLOS_H ;
 8047fb0:	2325      	movs	r3, #37	; 0x25
 8047fb2:	623b      	str	r3, [r7, #32]

			   if(index == 0) // grape frames once (only at astr[0])
 8047fb4:	79fb      	ldrb	r3, [r7, #7]
 8047fb6:	2b00      	cmp	r3, #0
 8047fb8:	d108      	bne.n	8047fcc <Explosion_Init+0xa8>
			   {
		    	   Grape_frames(exp->frames ,&src_bmp , EXPLOS_FRAMES  );
 8047fba:	68fb      	ldr	r3, [r7, #12]
 8047fbc:	3350      	adds	r3, #80	; 0x50
 8047fbe:	f107 0114 	add.w	r1, r7, #20
 8047fc2:	2204      	movs	r2, #4
 8047fc4:	4618      	mov	r0, r3
 8047fc6:	f7fc ffb7 	bl	8044f38 <Grape_frames>
 8047fca:	e00a      	b.n	8047fe2 <Explosion_Init+0xbe>
			   }
		       else
		       {
		    	   //Copy frames from the preceding asteroid frame ex astr[4].frames = astr[0].frames
		    	   memcpy(exp->frames , (exp-1)->frames , EXPLOS_FRAMES * sizeof(Bitmap));
 8047fcc:	68fb      	ldr	r3, [r7, #12]
 8047fce:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8047fd2:	68fb      	ldr	r3, [r7, #12]
 8047fd4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8047fd8:	3350      	adds	r3, #80	; 0x50
 8047fda:	2240      	movs	r2, #64	; 0x40
 8047fdc:	4619      	mov	r1, r3
 8047fde:	f000 fb47 	bl	8048670 <memcpy>
		       }
			}
	exp->ImageData = exp->frames[0].data ;
 8047fe2:	68fb      	ldr	r3, [r7, #12]
 8047fe4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8047fe6:	68fb      	ldr	r3, [r7, #12]
 8047fe8:	601a      	str	r2, [r3, #0]
	exp->active = 1 ;
 8047fea:	68fb      	ldr	r3, [r7, #12]
 8047fec:	2201      	movs	r2, #1
 8047fee:	639a      	str	r2, [r3, #56]	; 0x38
	exp->continus_anim = 0 ;
 8047ff0:	68fb      	ldr	r3, [r7, #12]
 8047ff2:	2200      	movs	r2, #0
 8047ff4:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8047ff6:	bf00      	nop
 8047ff8:	3728      	adds	r7, #40	; 0x28
 8047ffa:	46bd      	mov	sp, r7
 8047ffc:	bd80      	pop	{r7, pc}
 8047ffe:	bf00      	nop
 8048000:	08049dc0 	.word	0x08049dc0

08048004 <Explode>:

void Explode(Sprite * exp ,Sprite * ast , u8 index)
{
 8048004:	b580      	push	{r7, lr}
 8048006:	b084      	sub	sp, #16
 8048008:	af00      	add	r7, sp, #0
 804800a:	60f8      	str	r0, [r7, #12]
 804800c:	60b9      	str	r1, [r7, #8]
 804800e:	4613      	mov	r3, r2
 8048010:	71fb      	strb	r3, [r7, #7]
	Explosion_Init(exp ,ast, index) ;
 8048012:	79fb      	ldrb	r3, [r7, #7]
 8048014:	461a      	mov	r2, r3
 8048016:	68b9      	ldr	r1, [r7, #8]
 8048018:	68f8      	ldr	r0, [r7, #12]
 804801a:	f7ff ff83 	bl	8047f24 <Explosion_Init>

}
 804801e:	bf00      	nop
 8048020:	3710      	adds	r7, #16
 8048022:	46bd      	mov	sp, r7
 8048024:	bd80      	pop	{r7, pc}
	...

08048028 <Ship_Init>:

void Ship_Init(void)
{
 8048028:	b580      	push	{r7, lr}
 804802a:	b086      	sub	sp, #24
 804802c:	af00      	add	r7, sp, #0
		Ship.x = (SCREEN_W -SHIP_W)/2 ;
 804802e:	4b2d      	ldr	r3, [pc, #180]	; (80480e4 <Ship_Init+0xbc>)
 8048030:	4a2d      	ldr	r2, [pc, #180]	; (80480e8 <Ship_Init+0xc0>)
 8048032:	605a      	str	r2, [r3, #4]
		Ship.y = (SCREEN_H - SHIP_H)/2 ;
 8048034:	4b2b      	ldr	r3, [pc, #172]	; (80480e4 <Ship_Init+0xbc>)
 8048036:	4a2d      	ldr	r2, [pc, #180]	; (80480ec <Ship_Init+0xc4>)
 8048038:	609a      	str	r2, [r3, #8]
		Ship.xSpeed = 0 ;
 804803a:	4b2a      	ldr	r3, [pc, #168]	; (80480e4 <Ship_Init+0xbc>)
 804803c:	f04f 0200 	mov.w	r2, #0
 8048040:	615a      	str	r2, [r3, #20]
		Ship.ySpeed = 0 ;
 8048042:	4b28      	ldr	r3, [pc, #160]	; (80480e4 <Ship_Init+0xbc>)
 8048044:	f04f 0200 	mov.w	r2, #0
 8048048:	619a      	str	r2, [r3, #24]
		//Init frames
		Ship.Frames_no = 16 ;
 804804a:	4b26      	ldr	r3, [pc, #152]	; (80480e4 <Ship_Init+0xbc>)
 804804c:	2210      	movs	r2, #16
 804804e:	641a      	str	r2, [r3, #64]	; 0x40
		Ship.curr_frame = 0 ;
 8048050:	4b24      	ldr	r3, [pc, #144]	; (80480e4 <Ship_Init+0xbc>)
 8048052:	2200      	movs	r2, #0
 8048054:	63da      	str	r2, [r3, #60]	; 0x3c


		for( u8 i =0 ; i<16 ; i++)
 8048056:	2300      	movs	r3, #0
 8048058:	75fb      	strb	r3, [r7, #23]
 804805a:	e010      	b.n	804807e <Ship_Init+0x56>
		{
			Ship.frames[i].w = SHIP_W ;
 804805c:	7dfb      	ldrb	r3, [r7, #23]
 804805e:	4a21      	ldr	r2, [pc, #132]	; (80480e4 <Ship_Init+0xbc>)
 8048060:	011b      	lsls	r3, r3, #4
 8048062:	4413      	add	r3, r2
 8048064:	3358      	adds	r3, #88	; 0x58
 8048066:	221d      	movs	r2, #29
 8048068:	601a      	str	r2, [r3, #0]
			Ship.frames[i].h = SHIP_H ;
 804806a:	7dfb      	ldrb	r3, [r7, #23]
 804806c:	4a1d      	ldr	r2, [pc, #116]	; (80480e4 <Ship_Init+0xbc>)
 804806e:	011b      	lsls	r3, r3, #4
 8048070:	4413      	add	r3, r2
 8048072:	335c      	adds	r3, #92	; 0x5c
 8048074:	2220      	movs	r2, #32
 8048076:	601a      	str	r2, [r3, #0]
		for( u8 i =0 ; i<16 ; i++)
 8048078:	7dfb      	ldrb	r3, [r7, #23]
 804807a:	3301      	adds	r3, #1
 804807c:	75fb      	strb	r3, [r7, #23]
 804807e:	7dfb      	ldrb	r3, [r7, #23]
 8048080:	2b0f      	cmp	r3, #15
 8048082:	d9eb      	bls.n	804805c <Ship_Init+0x34>
		}

		Ship.anim_cnt = 0 ;
 8048084:	4b17      	ldr	r3, [pc, #92]	; (80480e4 <Ship_Init+0xbc>)
 8048086:	2200      	movs	r2, #0
 8048088:	645a      	str	r2, [r3, #68]	; 0x44
		Ship.anim_sp = 2 ;
 804808a:	4b16      	ldr	r3, [pc, #88]	; (80480e4 <Ship_Init+0xbc>)
 804808c:	2202      	movs	r2, #2
 804808e:	649a      	str	r2, [r3, #72]	; 0x48

		Ship.Width = SHIP_W ;
 8048090:	4b14      	ldr	r3, [pc, #80]	; (80480e4 <Ship_Init+0xbc>)
 8048092:	221d      	movs	r2, #29
 8048094:	60da      	str	r2, [r3, #12]
		Ship.Height = SHIP_H ;
 8048096:	4b13      	ldr	r3, [pc, #76]	; (80480e4 <Ship_Init+0xbc>)
 8048098:	2220      	movs	r2, #32
 804809a:	611a      	str	r2, [r3, #16]

		if(Ship.active==0) // to prevent dynamic memory allocation while the sprite already created.
 804809c:	4b11      	ldr	r3, [pc, #68]	; (80480e4 <Ship_Init+0xbc>)
 804809e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80480a0:	2b00      	cmp	r3, #0
 80480a2:	d113      	bne.n	80480cc <Ship_Init+0xa4>
		{
	       Bitmap src_bmp ;
	       src_bmp.data = (void*) image_spaceship ;
 80480a4:	4b12      	ldr	r3, [pc, #72]	; (80480f0 <Ship_Init+0xc8>)
 80480a6:	607b      	str	r3, [r7, #4]
	       src_bmp.w    = SHIP_W * Ship.Frames_no ;
 80480a8:	4b0e      	ldr	r3, [pc, #56]	; (80480e4 <Ship_Init+0xbc>)
 80480aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80480ac:	4613      	mov	r3, r2
 80480ae:	00db      	lsls	r3, r3, #3
 80480b0:	1a9b      	subs	r3, r3, r2
 80480b2:	009b      	lsls	r3, r3, #2
 80480b4:	4413      	add	r3, r2
 80480b6:	60fb      	str	r3, [r7, #12]
	       src_bmp.h    = SHIP_H ;
 80480b8:	2320      	movs	r3, #32
 80480ba:	613b      	str	r3, [r7, #16]
		   Grape_frames(Ship.frames ,&src_bmp , Ship.Frames_no  );
 80480bc:	4b09      	ldr	r3, [pc, #36]	; (80480e4 <Ship_Init+0xbc>)
 80480be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80480c0:	b2da      	uxtb	r2, r3
 80480c2:	1d3b      	adds	r3, r7, #4
 80480c4:	4619      	mov	r1, r3
 80480c6:	480b      	ldr	r0, [pc, #44]	; (80480f4 <Ship_Init+0xcc>)
 80480c8:	f7fc ff36 	bl	8044f38 <Grape_frames>
		}
		Ship.ImageData = Ship.frames[0].data ;
 80480cc:	4b05      	ldr	r3, [pc, #20]	; (80480e4 <Ship_Init+0xbc>)
 80480ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80480d0:	4a04      	ldr	r2, [pc, #16]	; (80480e4 <Ship_Init+0xbc>)
 80480d2:	6013      	str	r3, [r2, #0]

		Ship.active = 1 ;
 80480d4:	4b03      	ldr	r3, [pc, #12]	; (80480e4 <Ship_Init+0xbc>)
 80480d6:	2201      	movs	r2, #1
 80480d8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80480da:	bf00      	nop
 80480dc:	3718      	adds	r7, #24
 80480de:	46bd      	mov	sp, r7
 80480e0:	bd80      	pop	{r7, pc}
 80480e2:	bf00      	nop
 80480e4:	20001070 	.word	0x20001070
 80480e8:	42d20000 	.word	0x42d20000
 80480ec:	43100000 	.word	0x43100000
 80480f0:	0804c3e8 	.word	0x0804c3e8
 80480f4:	200010c0 	.word	0x200010c0

080480f8 <ship_test>:

void ship_test(void)
{
 80480f8:	b580      	push	{r7, lr}
 80480fa:	b088      	sub	sp, #32
 80480fc:	af00      	add	r7, sp, #0
	static int i  , rgt_cnt , lft_cnt , up_cnt , down_cnt,  fire_pressed,fire_cnt ;
	static int expl_cnt ;
	for(int n = 0 ; n < NUM_ASTEROIDS ; n++)
 80480fe:	2300      	movs	r3, #0
 8048100:	61fb      	str	r3, [r7, #28]
 8048102:	e016      	b.n	8048132 <ship_test+0x3a>
	{
		Update_animation(&BigAStr[n]) ;
 8048104:	69fb      	ldr	r3, [r7, #28]
 8048106:	f44f 72a8 	mov.w	r2, #336	; 0x150
 804810a:	fb02 f303 	mul.w	r3, r2, r3
 804810e:	4a5b      	ldr	r2, [pc, #364]	; (804827c <ship_test+0x184>)
 8048110:	4413      	add	r3, r2
 8048112:	4618      	mov	r0, r3
 8048114:	f7fc ff5c 	bl	8044fd0 <Update_animation>
		Asteriod_update(&BigAStr[n]);
 8048118:	69fb      	ldr	r3, [r7, #28]
 804811a:	f44f 72a8 	mov.w	r2, #336	; 0x150
 804811e:	fb02 f303 	mul.w	r3, r2, r3
 8048122:	4a56      	ldr	r2, [pc, #344]	; (804827c <ship_test+0x184>)
 8048124:	4413      	add	r3, r2
 8048126:	4618      	mov	r0, r3
 8048128:	f7ff fdb2 	bl	8047c90 <Asteriod_update>
	for(int n = 0 ; n < NUM_ASTEROIDS ; n++)
 804812c:	69fb      	ldr	r3, [r7, #28]
 804812e:	3301      	adds	r3, #1
 8048130:	61fb      	str	r3, [r7, #28]
 8048132:	69fb      	ldr	r3, [r7, #28]
 8048134:	2b04      	cmp	r3, #4
 8048136:	dde5      	ble.n	8048104 <ship_test+0xc>
	}

	for(int n = 0 ; n< MAX_BULLETS; n++)
 8048138:	2300      	movs	r3, #0
 804813a:	61bb      	str	r3, [r7, #24]
 804813c:	e00c      	b.n	8048158 <ship_test+0x60>
	{
		Bullet_update(&bullet[n]);
 804813e:	69bb      	ldr	r3, [r7, #24]
 8048140:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8048144:	fb02 f303 	mul.w	r3, r2, r3
 8048148:	4a4d      	ldr	r2, [pc, #308]	; (8048280 <ship_test+0x188>)
 804814a:	4413      	add	r3, r2
 804814c:	4618      	mov	r0, r3
 804814e:	f7ff fe95 	bl	8047e7c <Bullet_update>
	for(int n = 0 ; n< MAX_BULLETS; n++)
 8048152:	69bb      	ldr	r3, [r7, #24]
 8048154:	3301      	adds	r3, #1
 8048156:	61bb      	str	r3, [r7, #24]
 8048158:	69bb      	ldr	r3, [r7, #24]
 804815a:	2b31      	cmp	r3, #49	; 0x31
 804815c:	ddef      	ble.n	804813e <ship_test+0x46>
	}

   for(int n = 0; n <MAX_EXPLODES ; n++ )
 804815e:	2300      	movs	r3, #0
 8048160:	617b      	str	r3, [r7, #20]
 8048162:	e00c      	b.n	804817e <ship_test+0x86>
   { 
	 Update_animation(&Explo[n]) ;
 8048164:	697b      	ldr	r3, [r7, #20]
 8048166:	f44f 72a8 	mov.w	r2, #336	; 0x150
 804816a:	fb02 f303 	mul.w	r3, r2, r3
 804816e:	4a45      	ldr	r2, [pc, #276]	; (8048284 <ship_test+0x18c>)
 8048170:	4413      	add	r3, r2
 8048172:	4618      	mov	r0, r3
 8048174:	f7fc ff2c 	bl	8044fd0 <Update_animation>
   for(int n = 0; n <MAX_EXPLODES ; n++ )
 8048178:	697b      	ldr	r3, [r7, #20]
 804817a:	3301      	adds	r3, #1
 804817c:	617b      	str	r3, [r7, #20]
 804817e:	697b      	ldr	r3, [r7, #20]
 8048180:	2b04      	cmp	r3, #4
 8048182:	ddef      	ble.n	8048164 <ship_test+0x6c>
   }
	if(GamePad.button.left == PRESSED && ++lft_cnt >2 )
 8048184:	4b40      	ldr	r3, [pc, #256]	; (8048288 <ship_test+0x190>)
 8048186:	789b      	ldrb	r3, [r3, #2]
 8048188:	f003 0302 	and.w	r3, r3, #2
 804818c:	b2db      	uxtb	r3, r3
 804818e:	2b00      	cmp	r3, #0
 8048190:	d117      	bne.n	80481c2 <ship_test+0xca>
 8048192:	4b3e      	ldr	r3, [pc, #248]	; (804828c <ship_test+0x194>)
 8048194:	681b      	ldr	r3, [r3, #0]
 8048196:	3301      	adds	r3, #1
 8048198:	4a3c      	ldr	r2, [pc, #240]	; (804828c <ship_test+0x194>)
 804819a:	6013      	str	r3, [r2, #0]
 804819c:	4b3b      	ldr	r3, [pc, #236]	; (804828c <ship_test+0x194>)
 804819e:	681b      	ldr	r3, [r3, #0]
 80481a0:	2b02      	cmp	r3, #2
 80481a2:	dd0e      	ble.n	80481c2 <ship_test+0xca>
	{
		lft_cnt = 0;
 80481a4:	4b39      	ldr	r3, [pc, #228]	; (804828c <ship_test+0x194>)
 80481a6:	2200      	movs	r2, #0
 80481a8:	601a      	str	r2, [r3, #0]
		if(++i>15) i= 0 ;
 80481aa:	4b39      	ldr	r3, [pc, #228]	; (8048290 <ship_test+0x198>)
 80481ac:	681b      	ldr	r3, [r3, #0]
 80481ae:	3301      	adds	r3, #1
 80481b0:	4a37      	ldr	r2, [pc, #220]	; (8048290 <ship_test+0x198>)
 80481b2:	6013      	str	r3, [r2, #0]
 80481b4:	4b36      	ldr	r3, [pc, #216]	; (8048290 <ship_test+0x198>)
 80481b6:	681b      	ldr	r3, [r3, #0]
 80481b8:	2b0f      	cmp	r3, #15
 80481ba:	dd02      	ble.n	80481c2 <ship_test+0xca>
 80481bc:	4b34      	ldr	r3, [pc, #208]	; (8048290 <ship_test+0x198>)
 80481be:	2200      	movs	r2, #0
 80481c0:	601a      	str	r2, [r3, #0]

	}
	if(GamePad.button.right == PRESSED && ++rgt_cnt >2)
 80481c2:	4b31      	ldr	r3, [pc, #196]	; (8048288 <ship_test+0x190>)
 80481c4:	789b      	ldrb	r3, [r3, #2]
 80481c6:	f003 0301 	and.w	r3, r3, #1
 80481ca:	b2db      	uxtb	r3, r3
 80481cc:	2b00      	cmp	r3, #0
 80481ce:	d117      	bne.n	8048200 <ship_test+0x108>
 80481d0:	4b30      	ldr	r3, [pc, #192]	; (8048294 <ship_test+0x19c>)
 80481d2:	681b      	ldr	r3, [r3, #0]
 80481d4:	3301      	adds	r3, #1
 80481d6:	4a2f      	ldr	r2, [pc, #188]	; (8048294 <ship_test+0x19c>)
 80481d8:	6013      	str	r3, [r2, #0]
 80481da:	4b2e      	ldr	r3, [pc, #184]	; (8048294 <ship_test+0x19c>)
 80481dc:	681b      	ldr	r3, [r3, #0]
 80481de:	2b02      	cmp	r3, #2
 80481e0:	dd0e      	ble.n	8048200 <ship_test+0x108>
	{
		rgt_cnt = 0 ;
 80481e2:	4b2c      	ldr	r3, [pc, #176]	; (8048294 <ship_test+0x19c>)
 80481e4:	2200      	movs	r2, #0
 80481e6:	601a      	str	r2, [r3, #0]
		if(--i<0) i=15 ;
 80481e8:	4b29      	ldr	r3, [pc, #164]	; (8048290 <ship_test+0x198>)
 80481ea:	681b      	ldr	r3, [r3, #0]
 80481ec:	3b01      	subs	r3, #1
 80481ee:	4a28      	ldr	r2, [pc, #160]	; (8048290 <ship_test+0x198>)
 80481f0:	6013      	str	r3, [r2, #0]
 80481f2:	4b27      	ldr	r3, [pc, #156]	; (8048290 <ship_test+0x198>)
 80481f4:	681b      	ldr	r3, [r3, #0]
 80481f6:	2b00      	cmp	r3, #0
 80481f8:	da02      	bge.n	8048200 <ship_test+0x108>
 80481fa:	4b25      	ldr	r3, [pc, #148]	; (8048290 <ship_test+0x198>)
 80481fc:	220f      	movs	r2, #15
 80481fe:	601a      	str	r2, [r3, #0]

	}

	if(GamePad.button.up == PRESSED && ++up_cnt >2)
 8048200:	4b21      	ldr	r3, [pc, #132]	; (8048288 <ship_test+0x190>)
 8048202:	789b      	ldrb	r3, [r3, #2]
 8048204:	f003 0308 	and.w	r3, r3, #8
 8048208:	b2db      	uxtb	r3, r3
 804820a:	2b00      	cmp	r3, #0
 804820c:	d14a      	bne.n	80482a4 <ship_test+0x1ac>
 804820e:	4b22      	ldr	r3, [pc, #136]	; (8048298 <ship_test+0x1a0>)
 8048210:	681b      	ldr	r3, [r3, #0]
 8048212:	3301      	adds	r3, #1
 8048214:	4a20      	ldr	r2, [pc, #128]	; (8048298 <ship_test+0x1a0>)
 8048216:	6013      	str	r3, [r2, #0]
 8048218:	4b1f      	ldr	r3, [pc, #124]	; (8048298 <ship_test+0x1a0>)
 804821a:	681b      	ldr	r3, [r3, #0]
 804821c:	2b02      	cmp	r3, #2
 804821e:	dd41      	ble.n	80482a4 <ship_test+0x1ac>
		{
			up_cnt = 0 ;
 8048220:	4b1d      	ldr	r3, [pc, #116]	; (8048298 <ship_test+0x1a0>)
 8048222:	2200      	movs	r2, #0
 8048224:	601a      	str	r2, [r3, #0]
			Ship.xSpeed += Fast_Sin(Ship.angle)*0.2f;
 8048226:	4b1d      	ldr	r3, [pc, #116]	; (804829c <ship_test+0x1a4>)
 8048228:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 804822c:	eeb0 0a67 	vmov.f32	s0, s15
 8048230:	f7fe ffee 	bl	8047210 <Fast_Sin>
 8048234:	eef0 7a40 	vmov.f32	s15, s0
 8048238:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80482a0 <ship_test+0x1a8>
 804823c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8048240:	4b16      	ldr	r3, [pc, #88]	; (804829c <ship_test+0x1a4>)
 8048242:	edd3 7a05 	vldr	s15, [r3, #20]
 8048246:	ee77 7a27 	vadd.f32	s15, s14, s15
 804824a:	4b14      	ldr	r3, [pc, #80]	; (804829c <ship_test+0x1a4>)
 804824c:	edc3 7a05 	vstr	s15, [r3, #20]
			Ship.ySpeed -= Fast_Cos(Ship.angle)*0.2f;
 8048250:	4b12      	ldr	r3, [pc, #72]	; (804829c <ship_test+0x1a4>)
 8048252:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8048256:	eeb0 0a67 	vmov.f32	s0, s15
 804825a:	f7ff f83d 	bl	80472d8 <Fast_Cos>
 804825e:	eef0 7a40 	vmov.f32	s15, s0
 8048262:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80482a0 <ship_test+0x1a8>
 8048266:	ee67 7a87 	vmul.f32	s15, s15, s14
 804826a:	4b0c      	ldr	r3, [pc, #48]	; (804829c <ship_test+0x1a4>)
 804826c:	ed93 7a06 	vldr	s14, [r3, #24]
 8048270:	ee77 7a67 	vsub.f32	s15, s14, s15
 8048274:	4b09      	ldr	r3, [pc, #36]	; (804829c <ship_test+0x1a4>)
 8048276:	edc3 7a06 	vstr	s15, [r3, #24]
 804827a:	e039      	b.n	80482f0 <ship_test+0x1f8>
 804827c:	200011c0 	.word	0x200011c0
 8048280:	20001850 	.word	0x20001850
 8048284:	200059f0 	.word	0x200059f0
 8048288:	20006084 	.word	0x20006084
 804828c:	2000609c 	.word	0x2000609c
 8048290:	200060a0 	.word	0x200060a0
 8048294:	200060a4 	.word	0x200060a4
 8048298:	200060a8 	.word	0x200060a8
 804829c:	20001070 	.word	0x20001070
 80482a0:	3e4ccccd 	.word	0x3e4ccccd

		}
	else
	{
		Ship.xSpeed *= 0.99;
 80482a4:	4bb0      	ldr	r3, [pc, #704]	; (8048568 <ship_test+0x470>)
 80482a6:	695b      	ldr	r3, [r3, #20]
 80482a8:	4618      	mov	r0, r3
 80482aa:	f7f8 f905 	bl	80404b8 <__aeabi_f2d>
 80482ae:	a3ac      	add	r3, pc, #688	; (adr r3, 8048560 <ship_test+0x468>)
 80482b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80482b4:	f7f8 f958 	bl	8040568 <__aeabi_dmul>
 80482b8:	4602      	mov	r2, r0
 80482ba:	460b      	mov	r3, r1
 80482bc:	4610      	mov	r0, r2
 80482be:	4619      	mov	r1, r3
 80482c0:	f7f8 fc2a 	bl	8040b18 <__aeabi_d2f>
 80482c4:	4603      	mov	r3, r0
 80482c6:	4aa8      	ldr	r2, [pc, #672]	; (8048568 <ship_test+0x470>)
 80482c8:	6153      	str	r3, [r2, #20]
		Ship.ySpeed *= 0.99;
 80482ca:	4ba7      	ldr	r3, [pc, #668]	; (8048568 <ship_test+0x470>)
 80482cc:	699b      	ldr	r3, [r3, #24]
 80482ce:	4618      	mov	r0, r3
 80482d0:	f7f8 f8f2 	bl	80404b8 <__aeabi_f2d>
 80482d4:	a3a2      	add	r3, pc, #648	; (adr r3, 8048560 <ship_test+0x468>)
 80482d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80482da:	f7f8 f945 	bl	8040568 <__aeabi_dmul>
 80482de:	4602      	mov	r2, r0
 80482e0:	460b      	mov	r3, r1
 80482e2:	4610      	mov	r0, r2
 80482e4:	4619      	mov	r1, r3
 80482e6:	f7f8 fc17 	bl	8040b18 <__aeabi_d2f>
 80482ea:	4603      	mov	r3, r0
 80482ec:	4a9e      	ldr	r2, [pc, #632]	; (8048568 <ship_test+0x470>)
 80482ee:	6193      	str	r3, [r2, #24]
	}


	if(GamePad.button.yellow == PRESSED && !fire_pressed)
 80482f0:	4b9e      	ldr	r3, [pc, #632]	; (804856c <ship_test+0x474>)
 80482f2:	789b      	ldrb	r3, [r3, #2]
 80482f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80482f8:	b2db      	uxtb	r3, r3
 80482fa:	2b00      	cmp	r3, #0
 80482fc:	d11c      	bne.n	8048338 <ship_test+0x240>
 80482fe:	4b9c      	ldr	r3, [pc, #624]	; (8048570 <ship_test+0x478>)
 8048300:	681b      	ldr	r3, [r3, #0]
 8048302:	2b00      	cmp	r3, #0
 8048304:	d118      	bne.n	8048338 <ship_test+0x240>
			{
		        fire_pressed = 1 ;
 8048306:	4b9a      	ldr	r3, [pc, #616]	; (8048570 <ship_test+0x478>)
 8048308:	2201      	movs	r2, #1
 804830a:	601a      	str	r2, [r3, #0]
				fire(&Ship ,&bullet[fire_cnt] );
 804830c:	4b99      	ldr	r3, [pc, #612]	; (8048574 <ship_test+0x47c>)
 804830e:	681b      	ldr	r3, [r3, #0]
 8048310:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8048314:	fb02 f303 	mul.w	r3, r2, r3
 8048318:	4a97      	ldr	r2, [pc, #604]	; (8048578 <ship_test+0x480>)
 804831a:	4413      	add	r3, r2
 804831c:	4619      	mov	r1, r3
 804831e:	4892      	ldr	r0, [pc, #584]	; (8048568 <ship_test+0x470>)
 8048320:	f7ff fd12 	bl	8047d48 <fire>
				if(fire_cnt++ > MAX_BULLETS) fire_cnt = 0;
 8048324:	4b93      	ldr	r3, [pc, #588]	; (8048574 <ship_test+0x47c>)
 8048326:	681b      	ldr	r3, [r3, #0]
 8048328:	1c5a      	adds	r2, r3, #1
 804832a:	4992      	ldr	r1, [pc, #584]	; (8048574 <ship_test+0x47c>)
 804832c:	600a      	str	r2, [r1, #0]
 804832e:	2b32      	cmp	r3, #50	; 0x32
 8048330:	dd02      	ble.n	8048338 <ship_test+0x240>
 8048332:	4b90      	ldr	r3, [pc, #576]	; (8048574 <ship_test+0x47c>)
 8048334:	2200      	movs	r2, #0
 8048336:	601a      	str	r2, [r3, #0]

			}
	if(GamePad.button.yellow == RELEASED && fire_pressed)
 8048338:	4b8c      	ldr	r3, [pc, #560]	; (804856c <ship_test+0x474>)
 804833a:	789b      	ldrb	r3, [r3, #2]
 804833c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8048340:	b2db      	uxtb	r3, r3
 8048342:	2b00      	cmp	r3, #0
 8048344:	d006      	beq.n	8048354 <ship_test+0x25c>
 8048346:	4b8a      	ldr	r3, [pc, #552]	; (8048570 <ship_test+0x478>)
 8048348:	681b      	ldr	r3, [r3, #0]
 804834a:	2b00      	cmp	r3, #0
 804834c:	d002      	beq.n	8048354 <ship_test+0x25c>
	{
		fire_pressed = 0;
 804834e:	4b88      	ldr	r3, [pc, #544]	; (8048570 <ship_test+0x478>)
 8048350:	2200      	movs	r2, #0
 8048352:	601a      	str	r2, [r3, #0]
	}

	Ship.angle = (16-i)*22.5f ;
 8048354:	4b89      	ldr	r3, [pc, #548]	; (804857c <ship_test+0x484>)
 8048356:	681b      	ldr	r3, [r3, #0]
 8048358:	f1c3 0310 	rsb	r3, r3, #16
 804835c:	ee07 3a90 	vmov	s15, r3
 8048360:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8048364:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8048580 <ship_test+0x488>
 8048368:	ee67 7a87 	vmul.f32	s15, s15, s14
 804836c:	4b7e      	ldr	r3, [pc, #504]	; (8048568 <ship_test+0x470>)
 804836e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

	Ship.x += Ship.xSpeed ;
 8048372:	4b7d      	ldr	r3, [pc, #500]	; (8048568 <ship_test+0x470>)
 8048374:	ed93 7a01 	vldr	s14, [r3, #4]
 8048378:	4b7b      	ldr	r3, [pc, #492]	; (8048568 <ship_test+0x470>)
 804837a:	edd3 7a05 	vldr	s15, [r3, #20]
 804837e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8048382:	4b79      	ldr	r3, [pc, #484]	; (8048568 <ship_test+0x470>)
 8048384:	edc3 7a01 	vstr	s15, [r3, #4]
	Ship.y += Ship.ySpeed ;
 8048388:	4b77      	ldr	r3, [pc, #476]	; (8048568 <ship_test+0x470>)
 804838a:	ed93 7a02 	vldr	s14, [r3, #8]
 804838e:	4b76      	ldr	r3, [pc, #472]	; (8048568 <ship_test+0x470>)
 8048390:	edd3 7a06 	vldr	s15, [r3, #24]
 8048394:	ee77 7a27 	vadd.f32	s15, s14, s15
 8048398:	4b73      	ldr	r3, [pc, #460]	; (8048568 <ship_test+0x470>)
 804839a:	edc3 7a02 	vstr	s15, [r3, #8]
	if(Ship.x < 0) Ship.x = SCREEN_W - Ship.Width ;
 804839e:	4b72      	ldr	r3, [pc, #456]	; (8048568 <ship_test+0x470>)
 80483a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80483a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80483a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80483ac:	d50a      	bpl.n	80483c4 <ship_test+0x2cc>
 80483ae:	4b6e      	ldr	r3, [pc, #440]	; (8048568 <ship_test+0x470>)
 80483b0:	68db      	ldr	r3, [r3, #12]
 80483b2:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80483b6:	ee07 3a90 	vmov	s15, r3
 80483ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80483be:	4b6a      	ldr	r3, [pc, #424]	; (8048568 <ship_test+0x470>)
 80483c0:	edc3 7a01 	vstr	s15, [r3, #4]
	if(Ship.x >SCREEN_W) Ship.x =0 ;
 80483c4:	4b68      	ldr	r3, [pc, #416]	; (8048568 <ship_test+0x470>)
 80483c6:	edd3 7a01 	vldr	s15, [r3, #4]
 80483ca:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8048584 <ship_test+0x48c>
 80483ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80483d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80483d6:	dd03      	ble.n	80483e0 <ship_test+0x2e8>
 80483d8:	4b63      	ldr	r3, [pc, #396]	; (8048568 <ship_test+0x470>)
 80483da:	f04f 0200 	mov.w	r2, #0
 80483de:	605a      	str	r2, [r3, #4]
	if(Ship.y < 0) Ship.y = SCREEN_H - Ship.Height ;
 80483e0:	4b61      	ldr	r3, [pc, #388]	; (8048568 <ship_test+0x470>)
 80483e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80483e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80483ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80483ee:	d50a      	bpl.n	8048406 <ship_test+0x30e>
 80483f0:	4b5d      	ldr	r3, [pc, #372]	; (8048568 <ship_test+0x470>)
 80483f2:	691b      	ldr	r3, [r3, #16]
 80483f4:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 80483f8:	ee07 3a90 	vmov	s15, r3
 80483fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8048400:	4b59      	ldr	r3, [pc, #356]	; (8048568 <ship_test+0x470>)
 8048402:	edc3 7a02 	vstr	s15, [r3, #8]
    if(Ship.y >SCREEN_H) Ship.y =0 ;
 8048406:	4b58      	ldr	r3, [pc, #352]	; (8048568 <ship_test+0x470>)
 8048408:	edd3 7a02 	vldr	s15, [r3, #8]
 804840c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8048588 <ship_test+0x490>
 8048410:	eef4 7ac7 	vcmpe.f32	s15, s14
 8048414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8048418:	dd03      	ble.n	8048422 <ship_test+0x32a>
 804841a:	4b53      	ldr	r3, [pc, #332]	; (8048568 <ship_test+0x470>)
 804841c:	f04f 0200 	mov.w	r2, #0
 8048420:	609a      	str	r2, [r3, #8]

	Ship.ImageData = Ship.frames[i].data ;
 8048422:	4b56      	ldr	r3, [pc, #344]	; (804857c <ship_test+0x484>)
 8048424:	681b      	ldr	r3, [r3, #0]
 8048426:	4a50      	ldr	r2, [pc, #320]	; (8048568 <ship_test+0x470>)
 8048428:	3305      	adds	r3, #5
 804842a:	011b      	lsls	r3, r3, #4
 804842c:	4413      	add	r3, r2
 804842e:	681b      	ldr	r3, [r3, #0]
 8048430:	4a4d      	ldr	r2, [pc, #308]	; (8048568 <ship_test+0x470>)
 8048432:	6013      	str	r3, [r2, #0]


	//Collision check
	for(u8 a = 0 ; a< NUM_ASTEROIDS ; a++)
 8048434:	2300      	movs	r3, #0
 8048436:	74fb      	strb	r3, [r7, #19]
 8048438:	e083      	b.n	8048542 <ship_test+0x44a>
	{
		if(BigAStr[a].active == 0) continue ;
 804843a:	7cfb      	ldrb	r3, [r7, #19]
 804843c:	4a53      	ldr	r2, [pc, #332]	; (804858c <ship_test+0x494>)
 804843e:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8048442:	fb01 f303 	mul.w	r3, r1, r3
 8048446:	4413      	add	r3, r2
 8048448:	3338      	adds	r3, #56	; 0x38
 804844a:	681b      	ldr	r3, [r3, #0]
 804844c:	2b00      	cmp	r3, #0
 804844e:	d074      	beq.n	804853a <ship_test+0x442>
		for(u8 b = 0 ; b< fire_cnt ; b++)
 8048450:	2300      	movs	r3, #0
 8048452:	74bb      	strb	r3, [r7, #18]
 8048454:	e06b      	b.n	804852e <ship_test+0x436>
		{
			if(bullet[b].active == 0) continue ;
 8048456:	7cbb      	ldrb	r3, [r7, #18]
 8048458:	4a47      	ldr	r2, [pc, #284]	; (8048578 <ship_test+0x480>)
 804845a:	f44f 71a8 	mov.w	r1, #336	; 0x150
 804845e:	fb01 f303 	mul.w	r3, r1, r3
 8048462:	4413      	add	r3, r2
 8048464:	3338      	adds	r3, #56	; 0x38
 8048466:	681b      	ldr	r3, [r3, #0]
 8048468:	2b00      	cmp	r3, #0
 804846a:	d05c      	beq.n	8048526 <ship_test+0x42e>
			if( collision(&BigAStr[a], &bullet[b]) && BigAStr[a].active )
 804846c:	7cfb      	ldrb	r3, [r7, #19]
 804846e:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8048472:	fb02 f303 	mul.w	r3, r2, r3
 8048476:	4a45      	ldr	r2, [pc, #276]	; (804858c <ship_test+0x494>)
 8048478:	441a      	add	r2, r3
 804847a:	7cbb      	ldrb	r3, [r7, #18]
 804847c:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8048480:	fb01 f303 	mul.w	r3, r1, r3
 8048484:	493c      	ldr	r1, [pc, #240]	; (8048578 <ship_test+0x480>)
 8048486:	440b      	add	r3, r1
 8048488:	4619      	mov	r1, r3
 804848a:	4610      	mov	r0, r2
 804848c:	f7fc fddb 	bl	8045046 <collision>
 8048490:	4603      	mov	r3, r0
 8048492:	2b00      	cmp	r3, #0
 8048494:	d048      	beq.n	8048528 <ship_test+0x430>
 8048496:	7cfb      	ldrb	r3, [r7, #19]
 8048498:	4a3c      	ldr	r2, [pc, #240]	; (804858c <ship_test+0x494>)
 804849a:	f44f 71a8 	mov.w	r1, #336	; 0x150
 804849e:	fb01 f303 	mul.w	r3, r1, r3
 80484a2:	4413      	add	r3, r2
 80484a4:	3338      	adds	r3, #56	; 0x38
 80484a6:	681b      	ldr	r3, [r3, #0]
 80484a8:	2b00      	cmp	r3, #0
 80484aa:	d03d      	beq.n	8048528 <ship_test+0x430>
			{
				BigAStr[a].active = bullet[b].active = 0;
 80484ac:	7cbb      	ldrb	r3, [r7, #18]
 80484ae:	4932      	ldr	r1, [pc, #200]	; (8048578 <ship_test+0x480>)
 80484b0:	f44f 72a8 	mov.w	r2, #336	; 0x150
 80484b4:	fb03 f202 	mul.w	r2, r3, r2
 80484b8:	440a      	add	r2, r1
 80484ba:	3238      	adds	r2, #56	; 0x38
 80484bc:	2100      	movs	r1, #0
 80484be:	6011      	str	r1, [r2, #0]
 80484c0:	7cf9      	ldrb	r1, [r7, #19]
 80484c2:	4a2d      	ldr	r2, [pc, #180]	; (8048578 <ship_test+0x480>)
 80484c4:	f44f 70a8 	mov.w	r0, #336	; 0x150
 80484c8:	fb00 f303 	mul.w	r3, r0, r3
 80484cc:	4413      	add	r3, r2
 80484ce:	3338      	adds	r3, #56	; 0x38
 80484d0:	681a      	ldr	r2, [r3, #0]
 80484d2:	482e      	ldr	r0, [pc, #184]	; (804858c <ship_test+0x494>)
 80484d4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80484d8:	fb01 f303 	mul.w	r3, r1, r3
 80484dc:	4403      	add	r3, r0
 80484de:	3338      	adds	r3, #56	; 0x38
 80484e0:	601a      	str	r2, [r3, #0]
				Explode(&Explo[expl_cnt] ,&BigAStr[a], expl_cnt) ;
 80484e2:	4b2b      	ldr	r3, [pc, #172]	; (8048590 <ship_test+0x498>)
 80484e4:	681b      	ldr	r3, [r3, #0]
 80484e6:	f44f 72a8 	mov.w	r2, #336	; 0x150
 80484ea:	fb02 f303 	mul.w	r3, r2, r3
 80484ee:	4a29      	ldr	r2, [pc, #164]	; (8048594 <ship_test+0x49c>)
 80484f0:	1898      	adds	r0, r3, r2
 80484f2:	7cfb      	ldrb	r3, [r7, #19]
 80484f4:	f44f 72a8 	mov.w	r2, #336	; 0x150
 80484f8:	fb02 f303 	mul.w	r3, r2, r3
 80484fc:	4a23      	ldr	r2, [pc, #140]	; (804858c <ship_test+0x494>)
 80484fe:	4413      	add	r3, r2
 8048500:	4a23      	ldr	r2, [pc, #140]	; (8048590 <ship_test+0x498>)
 8048502:	6812      	ldr	r2, [r2, #0]
 8048504:	b2d2      	uxtb	r2, r2
 8048506:	4619      	mov	r1, r3
 8048508:	f7ff fd7c 	bl	8048004 <Explode>
				if(++expl_cnt> MAX_EXPLODES) expl_cnt = 0 ;
 804850c:	4b20      	ldr	r3, [pc, #128]	; (8048590 <ship_test+0x498>)
 804850e:	681b      	ldr	r3, [r3, #0]
 8048510:	3301      	adds	r3, #1
 8048512:	4a1f      	ldr	r2, [pc, #124]	; (8048590 <ship_test+0x498>)
 8048514:	6013      	str	r3, [r2, #0]
 8048516:	4b1e      	ldr	r3, [pc, #120]	; (8048590 <ship_test+0x498>)
 8048518:	681b      	ldr	r3, [r3, #0]
 804851a:	2b05      	cmp	r3, #5
 804851c:	dd04      	ble.n	8048528 <ship_test+0x430>
 804851e:	4b1c      	ldr	r3, [pc, #112]	; (8048590 <ship_test+0x498>)
 8048520:	2200      	movs	r2, #0
 8048522:	601a      	str	r2, [r3, #0]
 8048524:	e000      	b.n	8048528 <ship_test+0x430>
			if(bullet[b].active == 0) continue ;
 8048526:	bf00      	nop
		for(u8 b = 0 ; b< fire_cnt ; b++)
 8048528:	7cbb      	ldrb	r3, [r7, #18]
 804852a:	3301      	adds	r3, #1
 804852c:	74bb      	strb	r3, [r7, #18]
 804852e:	7cba      	ldrb	r2, [r7, #18]
 8048530:	4b10      	ldr	r3, [pc, #64]	; (8048574 <ship_test+0x47c>)
 8048532:	681b      	ldr	r3, [r3, #0]
 8048534:	429a      	cmp	r2, r3
 8048536:	db8e      	blt.n	8048456 <ship_test+0x35e>
 8048538:	e000      	b.n	804853c <ship_test+0x444>
		if(BigAStr[a].active == 0) continue ;
 804853a:	bf00      	nop
	for(u8 a = 0 ; a< NUM_ASTEROIDS ; a++)
 804853c:	7cfb      	ldrb	r3, [r7, #19]
 804853e:	3301      	adds	r3, #1
 8048540:	74fb      	strb	r3, [r7, #19]
 8048542:	7cfb      	ldrb	r3, [r7, #19]
 8048544:	2b04      	cmp	r3, #4
 8048546:	f67f af78 	bls.w	804843a <ship_test+0x342>
				
			}
		}
	}
	//Draw
	clearScreen();
 804854a:	f7fc ff9b 	bl	8045484 <clearScreen>
	DrawSprite(&Ship) ;
 804854e:	4806      	ldr	r0, [pc, #24]	; (8048568 <ship_test+0x470>)
 8048550:	f7fc fc0c 	bl	8044d6c <DrawSprite>
	for(int n = 0  ;n < MAX_EXPLODES ; n++)
 8048554:	2300      	movs	r3, #0
 8048556:	60fb      	str	r3, [r7, #12]
 8048558:	e02b      	b.n	80485b2 <ship_test+0x4ba>
 804855a:	bf00      	nop
 804855c:	f3af 8000 	nop.w
 8048560:	7ae147ae 	.word	0x7ae147ae
 8048564:	3fefae14 	.word	0x3fefae14
 8048568:	20001070 	.word	0x20001070
 804856c:	20006084 	.word	0x20006084
 8048570:	200060ac 	.word	0x200060ac
 8048574:	200060b0 	.word	0x200060b0
 8048578:	20001850 	.word	0x20001850
 804857c:	200060a0 	.word	0x200060a0
 8048580:	41b40000 	.word	0x41b40000
 8048584:	43700000 	.word	0x43700000
 8048588:	43a00000 	.word	0x43a00000
 804858c:	200011c0 	.word	0x200011c0
 8048590:	200060b4 	.word	0x200060b4
 8048594:	200059f0 	.word	0x200059f0
	   {
		  DrawSprite(&Explo[n]);
 8048598:	68fb      	ldr	r3, [r7, #12]
 804859a:	f44f 72a8 	mov.w	r2, #336	; 0x150
 804859e:	fb02 f303 	mul.w	r3, r2, r3
 80485a2:	4a1b      	ldr	r2, [pc, #108]	; (8048610 <ship_test+0x518>)
 80485a4:	4413      	add	r3, r2
 80485a6:	4618      	mov	r0, r3
 80485a8:	f7fc fbe0 	bl	8044d6c <DrawSprite>
	for(int n = 0  ;n < MAX_EXPLODES ; n++)
 80485ac:	68fb      	ldr	r3, [r7, #12]
 80485ae:	3301      	adds	r3, #1
 80485b0:	60fb      	str	r3, [r7, #12]
 80485b2:	68fb      	ldr	r3, [r7, #12]
 80485b4:	2b04      	cmp	r3, #4
 80485b6:	ddef      	ble.n	8048598 <ship_test+0x4a0>
	   }
	for(int n =0 ; n < NUM_ASTEROIDS ;n++)
 80485b8:	2300      	movs	r3, #0
 80485ba:	60bb      	str	r3, [r7, #8]
 80485bc:	e00c      	b.n	80485d8 <ship_test+0x4e0>
	   {
		  DrawSprite(&BigAStr[n]);
 80485be:	68bb      	ldr	r3, [r7, #8]
 80485c0:	f44f 72a8 	mov.w	r2, #336	; 0x150
 80485c4:	fb02 f303 	mul.w	r3, r2, r3
 80485c8:	4a12      	ldr	r2, [pc, #72]	; (8048614 <ship_test+0x51c>)
 80485ca:	4413      	add	r3, r2
 80485cc:	4618      	mov	r0, r3
 80485ce:	f7fc fbcd 	bl	8044d6c <DrawSprite>
	for(int n =0 ; n < NUM_ASTEROIDS ;n++)
 80485d2:	68bb      	ldr	r3, [r7, #8]
 80485d4:	3301      	adds	r3, #1
 80485d6:	60bb      	str	r3, [r7, #8]
 80485d8:	68bb      	ldr	r3, [r7, #8]
 80485da:	2b04      	cmp	r3, #4
 80485dc:	ddef      	ble.n	80485be <ship_test+0x4c6>
	   }
	for(int n = 0 ; n< MAX_BULLETS; n++)
 80485de:	2300      	movs	r3, #0
 80485e0:	607b      	str	r3, [r7, #4]
 80485e2:	e00c      	b.n	80485fe <ship_test+0x506>
	{
		DrawSprite(&bullet[n]) ;
 80485e4:	687b      	ldr	r3, [r7, #4]
 80485e6:	f44f 72a8 	mov.w	r2, #336	; 0x150
 80485ea:	fb02 f303 	mul.w	r3, r2, r3
 80485ee:	4a0a      	ldr	r2, [pc, #40]	; (8048618 <ship_test+0x520>)
 80485f0:	4413      	add	r3, r2
 80485f2:	4618      	mov	r0, r3
 80485f4:	f7fc fbba 	bl	8044d6c <DrawSprite>
	for(int n = 0 ; n< MAX_BULLETS; n++)
 80485f8:	687b      	ldr	r3, [r7, #4]
 80485fa:	3301      	adds	r3, #1
 80485fc:	607b      	str	r3, [r7, #4]
 80485fe:	687b      	ldr	r3, [r7, #4]
 8048600:	2b31      	cmp	r3, #49	; 0x31
 8048602:	ddef      	ble.n	80485e4 <ship_test+0x4ec>
	}
	FlipBuffers();
 8048604:	f7fc ff02 	bl	804540c <FlipBuffers>

}
 8048608:	bf00      	nop
 804860a:	3720      	adds	r7, #32
 804860c:	46bd      	mov	sp, r7
 804860e:	bd80      	pop	{r7, pc}
 8048610:	200059f0 	.word	0x200059f0
 8048614:	200011c0 	.word	0x200011c0
 8048618:	20001850 	.word	0x20001850

0804861c <__errno>:
 804861c:	4b01      	ldr	r3, [pc, #4]	; (8048624 <__errno+0x8>)
 804861e:	6818      	ldr	r0, [r3, #0]
 8048620:	4770      	bx	lr
 8048622:	bf00      	nop
 8048624:	20000040 	.word	0x20000040

08048628 <__libc_init_array>:
 8048628:	b570      	push	{r4, r5, r6, lr}
 804862a:	4d0d      	ldr	r5, [pc, #52]	; (8048660 <__libc_init_array+0x38>)
 804862c:	4c0d      	ldr	r4, [pc, #52]	; (8048664 <__libc_init_array+0x3c>)
 804862e:	1b64      	subs	r4, r4, r5
 8048630:	10a4      	asrs	r4, r4, #2
 8048632:	2600      	movs	r6, #0
 8048634:	42a6      	cmp	r6, r4
 8048636:	d109      	bne.n	804864c <__libc_init_array+0x24>
 8048638:	4d0b      	ldr	r5, [pc, #44]	; (8048668 <__libc_init_array+0x40>)
 804863a:	4c0c      	ldr	r4, [pc, #48]	; (804866c <__libc_init_array+0x44>)
 804863c:	f001 fa0e 	bl	8049a5c <_init>
 8048640:	1b64      	subs	r4, r4, r5
 8048642:	10a4      	asrs	r4, r4, #2
 8048644:	2600      	movs	r6, #0
 8048646:	42a6      	cmp	r6, r4
 8048648:	d105      	bne.n	8048656 <__libc_init_array+0x2e>
 804864a:	bd70      	pop	{r4, r5, r6, pc}
 804864c:	f855 3b04 	ldr.w	r3, [r5], #4
 8048650:	4798      	blx	r3
 8048652:	3601      	adds	r6, #1
 8048654:	e7ee      	b.n	8048634 <__libc_init_array+0xc>
 8048656:	f855 3b04 	ldr.w	r3, [r5], #4
 804865a:	4798      	blx	r3
 804865c:	3601      	adds	r6, #1
 804865e:	e7f2      	b.n	8048646 <__libc_init_array+0x1e>
 8048660:	080811f8 	.word	0x080811f8
 8048664:	080811f8 	.word	0x080811f8
 8048668:	080811f8 	.word	0x080811f8
 804866c:	080811fc 	.word	0x080811fc

08048670 <memcpy>:
 8048670:	440a      	add	r2, r1
 8048672:	4291      	cmp	r1, r2
 8048674:	f100 33ff 	add.w	r3, r0, #4294967295
 8048678:	d100      	bne.n	804867c <memcpy+0xc>
 804867a:	4770      	bx	lr
 804867c:	b510      	push	{r4, lr}
 804867e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8048682:	f803 4f01 	strb.w	r4, [r3, #1]!
 8048686:	4291      	cmp	r1, r2
 8048688:	d1f9      	bne.n	804867e <memcpy+0xe>
 804868a:	bd10      	pop	{r4, pc}

0804868c <memset>:
 804868c:	4402      	add	r2, r0
 804868e:	4603      	mov	r3, r0
 8048690:	4293      	cmp	r3, r2
 8048692:	d100      	bne.n	8048696 <memset+0xa>
 8048694:	4770      	bx	lr
 8048696:	f803 1b01 	strb.w	r1, [r3], #1
 804869a:	e7f9      	b.n	8048690 <memset+0x4>
 804869c:	0000      	movs	r0, r0
	...

080486a0 <cos>:
 80486a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80486a2:	ec53 2b10 	vmov	r2, r3, d0
 80486a6:	4826      	ldr	r0, [pc, #152]	; (8048740 <cos+0xa0>)
 80486a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80486ac:	4281      	cmp	r1, r0
 80486ae:	dc06      	bgt.n	80486be <cos+0x1e>
 80486b0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8048738 <cos+0x98>
 80486b4:	b005      	add	sp, #20
 80486b6:	f85d eb04 	ldr.w	lr, [sp], #4
 80486ba:	f000 bbe9 	b.w	8048e90 <__kernel_cos>
 80486be:	4821      	ldr	r0, [pc, #132]	; (8048744 <cos+0xa4>)
 80486c0:	4281      	cmp	r1, r0
 80486c2:	dd09      	ble.n	80486d8 <cos+0x38>
 80486c4:	ee10 0a10 	vmov	r0, s0
 80486c8:	4619      	mov	r1, r3
 80486ca:	f7f7 fd95 	bl	80401f8 <__aeabi_dsub>
 80486ce:	ec41 0b10 	vmov	d0, r0, r1
 80486d2:	b005      	add	sp, #20
 80486d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80486d8:	4668      	mov	r0, sp
 80486da:	f000 f9cd 	bl	8048a78 <__ieee754_rem_pio2>
 80486de:	f000 0003 	and.w	r0, r0, #3
 80486e2:	2801      	cmp	r0, #1
 80486e4:	d00b      	beq.n	80486fe <cos+0x5e>
 80486e6:	2802      	cmp	r0, #2
 80486e8:	d016      	beq.n	8048718 <cos+0x78>
 80486ea:	b9e0      	cbnz	r0, 8048726 <cos+0x86>
 80486ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 80486f0:	ed9d 0b00 	vldr	d0, [sp]
 80486f4:	f000 fbcc 	bl	8048e90 <__kernel_cos>
 80486f8:	ec51 0b10 	vmov	r0, r1, d0
 80486fc:	e7e7      	b.n	80486ce <cos+0x2e>
 80486fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8048702:	ed9d 0b00 	vldr	d0, [sp]
 8048706:	f000 ffdb 	bl	80496c0 <__kernel_sin>
 804870a:	ec53 2b10 	vmov	r2, r3, d0
 804870e:	ee10 0a10 	vmov	r0, s0
 8048712:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8048716:	e7da      	b.n	80486ce <cos+0x2e>
 8048718:	ed9d 1b02 	vldr	d1, [sp, #8]
 804871c:	ed9d 0b00 	vldr	d0, [sp]
 8048720:	f000 fbb6 	bl	8048e90 <__kernel_cos>
 8048724:	e7f1      	b.n	804870a <cos+0x6a>
 8048726:	ed9d 1b02 	vldr	d1, [sp, #8]
 804872a:	ed9d 0b00 	vldr	d0, [sp]
 804872e:	2001      	movs	r0, #1
 8048730:	f000 ffc6 	bl	80496c0 <__kernel_sin>
 8048734:	e7e0      	b.n	80486f8 <cos+0x58>
 8048736:	bf00      	nop
	...
 8048740:	3fe921fb 	.word	0x3fe921fb
 8048744:	7fefffff 	.word	0x7fefffff

08048748 <sin>:
 8048748:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 804874a:	ec53 2b10 	vmov	r2, r3, d0
 804874e:	4828      	ldr	r0, [pc, #160]	; (80487f0 <sin+0xa8>)
 8048750:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8048754:	4281      	cmp	r1, r0
 8048756:	dc07      	bgt.n	8048768 <sin+0x20>
 8048758:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80487e8 <sin+0xa0>
 804875c:	2000      	movs	r0, #0
 804875e:	b005      	add	sp, #20
 8048760:	f85d eb04 	ldr.w	lr, [sp], #4
 8048764:	f000 bfac 	b.w	80496c0 <__kernel_sin>
 8048768:	4822      	ldr	r0, [pc, #136]	; (80487f4 <sin+0xac>)
 804876a:	4281      	cmp	r1, r0
 804876c:	dd09      	ble.n	8048782 <sin+0x3a>
 804876e:	ee10 0a10 	vmov	r0, s0
 8048772:	4619      	mov	r1, r3
 8048774:	f7f7 fd40 	bl	80401f8 <__aeabi_dsub>
 8048778:	ec41 0b10 	vmov	d0, r0, r1
 804877c:	b005      	add	sp, #20
 804877e:	f85d fb04 	ldr.w	pc, [sp], #4
 8048782:	4668      	mov	r0, sp
 8048784:	f000 f978 	bl	8048a78 <__ieee754_rem_pio2>
 8048788:	f000 0003 	and.w	r0, r0, #3
 804878c:	2801      	cmp	r0, #1
 804878e:	d00c      	beq.n	80487aa <sin+0x62>
 8048790:	2802      	cmp	r0, #2
 8048792:	d011      	beq.n	80487b8 <sin+0x70>
 8048794:	b9f0      	cbnz	r0, 80487d4 <sin+0x8c>
 8048796:	ed9d 1b02 	vldr	d1, [sp, #8]
 804879a:	ed9d 0b00 	vldr	d0, [sp]
 804879e:	2001      	movs	r0, #1
 80487a0:	f000 ff8e 	bl	80496c0 <__kernel_sin>
 80487a4:	ec51 0b10 	vmov	r0, r1, d0
 80487a8:	e7e6      	b.n	8048778 <sin+0x30>
 80487aa:	ed9d 1b02 	vldr	d1, [sp, #8]
 80487ae:	ed9d 0b00 	vldr	d0, [sp]
 80487b2:	f000 fb6d 	bl	8048e90 <__kernel_cos>
 80487b6:	e7f5      	b.n	80487a4 <sin+0x5c>
 80487b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80487bc:	ed9d 0b00 	vldr	d0, [sp]
 80487c0:	2001      	movs	r0, #1
 80487c2:	f000 ff7d 	bl	80496c0 <__kernel_sin>
 80487c6:	ec53 2b10 	vmov	r2, r3, d0
 80487ca:	ee10 0a10 	vmov	r0, s0
 80487ce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80487d2:	e7d1      	b.n	8048778 <sin+0x30>
 80487d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80487d8:	ed9d 0b00 	vldr	d0, [sp]
 80487dc:	f000 fb58 	bl	8048e90 <__kernel_cos>
 80487e0:	e7f1      	b.n	80487c6 <sin+0x7e>
 80487e2:	bf00      	nop
 80487e4:	f3af 8000 	nop.w
	...
 80487f0:	3fe921fb 	.word	0x3fe921fb
 80487f4:	7fefffff 	.word	0x7fefffff

080487f8 <fmod>:
 80487f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80487fa:	ed2d 8b02 	vpush	{d8}
 80487fe:	ec57 6b10 	vmov	r6, r7, d0
 8048802:	ec55 4b11 	vmov	r4, r5, d1
 8048806:	f000 f825 	bl	8048854 <__ieee754_fmod>
 804880a:	4622      	mov	r2, r4
 804880c:	462b      	mov	r3, r5
 804880e:	4630      	mov	r0, r6
 8048810:	4639      	mov	r1, r7
 8048812:	eeb0 8a40 	vmov.f32	s16, s0
 8048816:	eef0 8a60 	vmov.f32	s17, s1
 804881a:	f7f8 f93f 	bl	8040a9c <__aeabi_dcmpun>
 804881e:	b990      	cbnz	r0, 8048846 <fmod+0x4e>
 8048820:	2200      	movs	r2, #0
 8048822:	2300      	movs	r3, #0
 8048824:	4620      	mov	r0, r4
 8048826:	4629      	mov	r1, r5
 8048828:	f7f8 f906 	bl	8040a38 <__aeabi_dcmpeq>
 804882c:	b158      	cbz	r0, 8048846 <fmod+0x4e>
 804882e:	f7ff fef5 	bl	804861c <__errno>
 8048832:	2321      	movs	r3, #33	; 0x21
 8048834:	6003      	str	r3, [r0, #0]
 8048836:	2200      	movs	r2, #0
 8048838:	2300      	movs	r3, #0
 804883a:	4610      	mov	r0, r2
 804883c:	4619      	mov	r1, r3
 804883e:	f7f7 ffbd 	bl	80407bc <__aeabi_ddiv>
 8048842:	ec41 0b18 	vmov	d8, r0, r1
 8048846:	eeb0 0a48 	vmov.f32	s0, s16
 804884a:	eef0 0a68 	vmov.f32	s1, s17
 804884e:	ecbd 8b02 	vpop	{d8}
 8048852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08048854 <__ieee754_fmod>:
 8048854:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8048858:	ec53 2b11 	vmov	r2, r3, d1
 804885c:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8048860:	ea5e 0402 	orrs.w	r4, lr, r2
 8048864:	ec51 0b10 	vmov	r0, r1, d0
 8048868:	ee11 7a10 	vmov	r7, s2
 804886c:	ee11 ca10 	vmov	ip, s2
 8048870:	461e      	mov	r6, r3
 8048872:	d00d      	beq.n	8048890 <__ieee754_fmod+0x3c>
 8048874:	4c7a      	ldr	r4, [pc, #488]	; (8048a60 <__ieee754_fmod+0x20c>)
 8048876:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 804887a:	45a0      	cmp	r8, r4
 804887c:	4689      	mov	r9, r1
 804887e:	dc07      	bgt.n	8048890 <__ieee754_fmod+0x3c>
 8048880:	4254      	negs	r4, r2
 8048882:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 8048a6c <__ieee754_fmod+0x218>
 8048886:	4314      	orrs	r4, r2
 8048888:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 804888c:	455c      	cmp	r4, fp
 804888e:	d909      	bls.n	80488a4 <__ieee754_fmod+0x50>
 8048890:	f7f7 fe6a 	bl	8040568 <__aeabi_dmul>
 8048894:	4602      	mov	r2, r0
 8048896:	460b      	mov	r3, r1
 8048898:	f7f7 ff90 	bl	80407bc <__aeabi_ddiv>
 804889c:	ec41 0b10 	vmov	d0, r0, r1
 80488a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80488a4:	45f0      	cmp	r8, lr
 80488a6:	ee10 aa10 	vmov	sl, s0
 80488aa:	ee10 4a10 	vmov	r4, s0
 80488ae:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80488b2:	dc09      	bgt.n	80488c8 <__ieee754_fmod+0x74>
 80488b4:	dbf2      	blt.n	804889c <__ieee754_fmod+0x48>
 80488b6:	4290      	cmp	r0, r2
 80488b8:	d3f0      	bcc.n	804889c <__ieee754_fmod+0x48>
 80488ba:	d105      	bne.n	80488c8 <__ieee754_fmod+0x74>
 80488bc:	4b69      	ldr	r3, [pc, #420]	; (8048a64 <__ieee754_fmod+0x210>)
 80488be:	eb03 7515 	add.w	r5, r3, r5, lsr #28
 80488c2:	e9d5 0100 	ldrd	r0, r1, [r5]
 80488c6:	e7e9      	b.n	804889c <__ieee754_fmod+0x48>
 80488c8:	ea19 0f0b 	tst.w	r9, fp
 80488cc:	d14a      	bne.n	8048964 <__ieee754_fmod+0x110>
 80488ce:	f1b8 0f00 	cmp.w	r8, #0
 80488d2:	d13f      	bne.n	8048954 <__ieee754_fmod+0x100>
 80488d4:	4964      	ldr	r1, [pc, #400]	; (8048a68 <__ieee754_fmod+0x214>)
 80488d6:	4653      	mov	r3, sl
 80488d8:	2b00      	cmp	r3, #0
 80488da:	dc38      	bgt.n	804894e <__ieee754_fmod+0xfa>
 80488dc:	4b63      	ldr	r3, [pc, #396]	; (8048a6c <__ieee754_fmod+0x218>)
 80488de:	4033      	ands	r3, r6
 80488e0:	2b00      	cmp	r3, #0
 80488e2:	d14f      	bne.n	8048984 <__ieee754_fmod+0x130>
 80488e4:	f1be 0f00 	cmp.w	lr, #0
 80488e8:	d144      	bne.n	8048974 <__ieee754_fmod+0x120>
 80488ea:	4a5f      	ldr	r2, [pc, #380]	; (8048a68 <__ieee754_fmod+0x214>)
 80488ec:	463b      	mov	r3, r7
 80488ee:	2b00      	cmp	r3, #0
 80488f0:	dc3d      	bgt.n	804896e <__ieee754_fmod+0x11a>
 80488f2:	4b5f      	ldr	r3, [pc, #380]	; (8048a70 <__ieee754_fmod+0x21c>)
 80488f4:	4299      	cmp	r1, r3
 80488f6:	db4a      	blt.n	804898e <__ieee754_fmod+0x13a>
 80488f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80488fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8048900:	485b      	ldr	r0, [pc, #364]	; (8048a70 <__ieee754_fmod+0x21c>)
 8048902:	4282      	cmp	r2, r0
 8048904:	db57      	blt.n	80489b6 <__ieee754_fmod+0x162>
 8048906:	f3c6 0613 	ubfx	r6, r6, #0, #20
 804890a:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 804890e:	1a89      	subs	r1, r1, r2
 8048910:	1b98      	subs	r0, r3, r6
 8048912:	eba4 070c 	sub.w	r7, r4, ip
 8048916:	2900      	cmp	r1, #0
 8048918:	d164      	bne.n	80489e4 <__ieee754_fmod+0x190>
 804891a:	4564      	cmp	r4, ip
 804891c:	bf38      	it	cc
 804891e:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8048922:	2800      	cmp	r0, #0
 8048924:	bfa4      	itt	ge
 8048926:	463c      	movge	r4, r7
 8048928:	4603      	movge	r3, r0
 804892a:	ea53 0104 	orrs.w	r1, r3, r4
 804892e:	d0c5      	beq.n	80488bc <__ieee754_fmod+0x68>
 8048930:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8048934:	db6b      	blt.n	8048a0e <__ieee754_fmod+0x1ba>
 8048936:	494e      	ldr	r1, [pc, #312]	; (8048a70 <__ieee754_fmod+0x21c>)
 8048938:	428a      	cmp	r2, r1
 804893a:	db6e      	blt.n	8048a1a <__ieee754_fmod+0x1c6>
 804893c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8048940:	431d      	orrs	r5, r3
 8048942:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8048946:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 804894a:	4620      	mov	r0, r4
 804894c:	e7a6      	b.n	804889c <__ieee754_fmod+0x48>
 804894e:	3901      	subs	r1, #1
 8048950:	005b      	lsls	r3, r3, #1
 8048952:	e7c1      	b.n	80488d8 <__ieee754_fmod+0x84>
 8048954:	4946      	ldr	r1, [pc, #280]	; (8048a70 <__ieee754_fmod+0x21c>)
 8048956:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 804895a:	2b00      	cmp	r3, #0
 804895c:	ddbe      	ble.n	80488dc <__ieee754_fmod+0x88>
 804895e:	3901      	subs	r1, #1
 8048960:	005b      	lsls	r3, r3, #1
 8048962:	e7fa      	b.n	804895a <__ieee754_fmod+0x106>
 8048964:	ea4f 5128 	mov.w	r1, r8, asr #20
 8048968:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 804896c:	e7b6      	b.n	80488dc <__ieee754_fmod+0x88>
 804896e:	3a01      	subs	r2, #1
 8048970:	005b      	lsls	r3, r3, #1
 8048972:	e7bc      	b.n	80488ee <__ieee754_fmod+0x9a>
 8048974:	4a3e      	ldr	r2, [pc, #248]	; (8048a70 <__ieee754_fmod+0x21c>)
 8048976:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 804897a:	2b00      	cmp	r3, #0
 804897c:	ddb9      	ble.n	80488f2 <__ieee754_fmod+0x9e>
 804897e:	3a01      	subs	r2, #1
 8048980:	005b      	lsls	r3, r3, #1
 8048982:	e7fa      	b.n	804897a <__ieee754_fmod+0x126>
 8048984:	ea4f 522e 	mov.w	r2, lr, asr #20
 8048988:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 804898c:	e7b1      	b.n	80488f2 <__ieee754_fmod+0x9e>
 804898e:	1a5c      	subs	r4, r3, r1
 8048990:	2c1f      	cmp	r4, #31
 8048992:	dc0a      	bgt.n	80489aa <__ieee754_fmod+0x156>
 8048994:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 8048998:	fa08 f804 	lsl.w	r8, r8, r4
 804899c:	fa2a f303 	lsr.w	r3, sl, r3
 80489a0:	ea43 0308 	orr.w	r3, r3, r8
 80489a4:	fa0a f404 	lsl.w	r4, sl, r4
 80489a8:	e7aa      	b.n	8048900 <__ieee754_fmod+0xac>
 80489aa:	4b32      	ldr	r3, [pc, #200]	; (8048a74 <__ieee754_fmod+0x220>)
 80489ac:	1a5b      	subs	r3, r3, r1
 80489ae:	fa0a f303 	lsl.w	r3, sl, r3
 80489b2:	2400      	movs	r4, #0
 80489b4:	e7a4      	b.n	8048900 <__ieee754_fmod+0xac>
 80489b6:	eba0 0c02 	sub.w	ip, r0, r2
 80489ba:	f1bc 0f1f 	cmp.w	ip, #31
 80489be:	dc0a      	bgt.n	80489d6 <__ieee754_fmod+0x182>
 80489c0:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 80489c4:	fa0e fe0c 	lsl.w	lr, lr, ip
 80489c8:	fa27 f606 	lsr.w	r6, r7, r6
 80489cc:	ea46 060e 	orr.w	r6, r6, lr
 80489d0:	fa07 fc0c 	lsl.w	ip, r7, ip
 80489d4:	e79b      	b.n	804890e <__ieee754_fmod+0xba>
 80489d6:	4e27      	ldr	r6, [pc, #156]	; (8048a74 <__ieee754_fmod+0x220>)
 80489d8:	1ab6      	subs	r6, r6, r2
 80489da:	fa07 f606 	lsl.w	r6, r7, r6
 80489de:	f04f 0c00 	mov.w	ip, #0
 80489e2:	e794      	b.n	804890e <__ieee754_fmod+0xba>
 80489e4:	4564      	cmp	r4, ip
 80489e6:	bf38      	it	cc
 80489e8:	f100 30ff 	addcc.w	r0, r0, #4294967295
 80489ec:	2800      	cmp	r0, #0
 80489ee:	da05      	bge.n	80489fc <__ieee754_fmod+0x1a8>
 80489f0:	0fe0      	lsrs	r0, r4, #31
 80489f2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80489f6:	0064      	lsls	r4, r4, #1
 80489f8:	3901      	subs	r1, #1
 80489fa:	e789      	b.n	8048910 <__ieee754_fmod+0xbc>
 80489fc:	ea50 0307 	orrs.w	r3, r0, r7
 8048a00:	f43f af5c 	beq.w	80488bc <__ieee754_fmod+0x68>
 8048a04:	0ffb      	lsrs	r3, r7, #31
 8048a06:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8048a0a:	007c      	lsls	r4, r7, #1
 8048a0c:	e7f4      	b.n	80489f8 <__ieee754_fmod+0x1a4>
 8048a0e:	0fe1      	lsrs	r1, r4, #31
 8048a10:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8048a14:	0064      	lsls	r4, r4, #1
 8048a16:	3a01      	subs	r2, #1
 8048a18:	e78a      	b.n	8048930 <__ieee754_fmod+0xdc>
 8048a1a:	1a89      	subs	r1, r1, r2
 8048a1c:	2914      	cmp	r1, #20
 8048a1e:	dc0a      	bgt.n	8048a36 <__ieee754_fmod+0x1e2>
 8048a20:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8048a24:	fa03 f202 	lsl.w	r2, r3, r2
 8048a28:	40cc      	lsrs	r4, r1
 8048a2a:	4322      	orrs	r2, r4
 8048a2c:	410b      	asrs	r3, r1
 8048a2e:	ea43 0105 	orr.w	r1, r3, r5
 8048a32:	4610      	mov	r0, r2
 8048a34:	e732      	b.n	804889c <__ieee754_fmod+0x48>
 8048a36:	291f      	cmp	r1, #31
 8048a38:	dc07      	bgt.n	8048a4a <__ieee754_fmod+0x1f6>
 8048a3a:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8048a3e:	40cc      	lsrs	r4, r1
 8048a40:	fa03 f202 	lsl.w	r2, r3, r2
 8048a44:	4322      	orrs	r2, r4
 8048a46:	462b      	mov	r3, r5
 8048a48:	e7f1      	b.n	8048a2e <__ieee754_fmod+0x1da>
 8048a4a:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8048a4e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8048a52:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8048a56:	32e2      	adds	r2, #226	; 0xe2
 8048a58:	fa43 f202 	asr.w	r2, r3, r2
 8048a5c:	e7f3      	b.n	8048a46 <__ieee754_fmod+0x1f2>
 8048a5e:	bf00      	nop
 8048a60:	7fefffff 	.word	0x7fefffff
 8048a64:	08081008 	.word	0x08081008
 8048a68:	fffffbed 	.word	0xfffffbed
 8048a6c:	7ff00000 	.word	0x7ff00000
 8048a70:	fffffc02 	.word	0xfffffc02
 8048a74:	fffffbe2 	.word	0xfffffbe2

08048a78 <__ieee754_rem_pio2>:
 8048a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8048a7c:	ed2d 8b02 	vpush	{d8}
 8048a80:	ec55 4b10 	vmov	r4, r5, d0
 8048a84:	4bca      	ldr	r3, [pc, #808]	; (8048db0 <__ieee754_rem_pio2+0x338>)
 8048a86:	b08b      	sub	sp, #44	; 0x2c
 8048a88:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8048a8c:	4598      	cmp	r8, r3
 8048a8e:	4682      	mov	sl, r0
 8048a90:	9502      	str	r5, [sp, #8]
 8048a92:	dc08      	bgt.n	8048aa6 <__ieee754_rem_pio2+0x2e>
 8048a94:	2200      	movs	r2, #0
 8048a96:	2300      	movs	r3, #0
 8048a98:	ed80 0b00 	vstr	d0, [r0]
 8048a9c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8048aa0:	f04f 0b00 	mov.w	fp, #0
 8048aa4:	e028      	b.n	8048af8 <__ieee754_rem_pio2+0x80>
 8048aa6:	4bc3      	ldr	r3, [pc, #780]	; (8048db4 <__ieee754_rem_pio2+0x33c>)
 8048aa8:	4598      	cmp	r8, r3
 8048aaa:	dc78      	bgt.n	8048b9e <__ieee754_rem_pio2+0x126>
 8048aac:	9b02      	ldr	r3, [sp, #8]
 8048aae:	4ec2      	ldr	r6, [pc, #776]	; (8048db8 <__ieee754_rem_pio2+0x340>)
 8048ab0:	2b00      	cmp	r3, #0
 8048ab2:	ee10 0a10 	vmov	r0, s0
 8048ab6:	a3b0      	add	r3, pc, #704	; (adr r3, 8048d78 <__ieee754_rem_pio2+0x300>)
 8048ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8048abc:	4629      	mov	r1, r5
 8048abe:	dd39      	ble.n	8048b34 <__ieee754_rem_pio2+0xbc>
 8048ac0:	f7f7 fb9a 	bl	80401f8 <__aeabi_dsub>
 8048ac4:	45b0      	cmp	r8, r6
 8048ac6:	4604      	mov	r4, r0
 8048ac8:	460d      	mov	r5, r1
 8048aca:	d01b      	beq.n	8048b04 <__ieee754_rem_pio2+0x8c>
 8048acc:	a3ac      	add	r3, pc, #688	; (adr r3, 8048d80 <__ieee754_rem_pio2+0x308>)
 8048ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8048ad2:	f7f7 fb91 	bl	80401f8 <__aeabi_dsub>
 8048ad6:	4602      	mov	r2, r0
 8048ad8:	460b      	mov	r3, r1
 8048ada:	e9ca 2300 	strd	r2, r3, [sl]
 8048ade:	4620      	mov	r0, r4
 8048ae0:	4629      	mov	r1, r5
 8048ae2:	f7f7 fb89 	bl	80401f8 <__aeabi_dsub>
 8048ae6:	a3a6      	add	r3, pc, #664	; (adr r3, 8048d80 <__ieee754_rem_pio2+0x308>)
 8048ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8048aec:	f7f7 fb84 	bl	80401f8 <__aeabi_dsub>
 8048af0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8048af4:	f04f 0b01 	mov.w	fp, #1
 8048af8:	4658      	mov	r0, fp
 8048afa:	b00b      	add	sp, #44	; 0x2c
 8048afc:	ecbd 8b02 	vpop	{d8}
 8048b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8048b04:	a3a0      	add	r3, pc, #640	; (adr r3, 8048d88 <__ieee754_rem_pio2+0x310>)
 8048b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8048b0a:	f7f7 fb75 	bl	80401f8 <__aeabi_dsub>
 8048b0e:	a3a0      	add	r3, pc, #640	; (adr r3, 8048d90 <__ieee754_rem_pio2+0x318>)
 8048b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8048b14:	4604      	mov	r4, r0
 8048b16:	460d      	mov	r5, r1
 8048b18:	f7f7 fb6e 	bl	80401f8 <__aeabi_dsub>
 8048b1c:	4602      	mov	r2, r0
 8048b1e:	460b      	mov	r3, r1
 8048b20:	e9ca 2300 	strd	r2, r3, [sl]
 8048b24:	4620      	mov	r0, r4
 8048b26:	4629      	mov	r1, r5
 8048b28:	f7f7 fb66 	bl	80401f8 <__aeabi_dsub>
 8048b2c:	a398      	add	r3, pc, #608	; (adr r3, 8048d90 <__ieee754_rem_pio2+0x318>)
 8048b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8048b32:	e7db      	b.n	8048aec <__ieee754_rem_pio2+0x74>
 8048b34:	f7f7 fb62 	bl	80401fc <__adddf3>
 8048b38:	45b0      	cmp	r8, r6
 8048b3a:	4604      	mov	r4, r0
 8048b3c:	460d      	mov	r5, r1
 8048b3e:	d016      	beq.n	8048b6e <__ieee754_rem_pio2+0xf6>
 8048b40:	a38f      	add	r3, pc, #572	; (adr r3, 8048d80 <__ieee754_rem_pio2+0x308>)
 8048b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8048b46:	f7f7 fb59 	bl	80401fc <__adddf3>
 8048b4a:	4602      	mov	r2, r0
 8048b4c:	460b      	mov	r3, r1
 8048b4e:	e9ca 2300 	strd	r2, r3, [sl]
 8048b52:	4620      	mov	r0, r4
 8048b54:	4629      	mov	r1, r5
 8048b56:	f7f7 fb4f 	bl	80401f8 <__aeabi_dsub>
 8048b5a:	a389      	add	r3, pc, #548	; (adr r3, 8048d80 <__ieee754_rem_pio2+0x308>)
 8048b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8048b60:	f7f7 fb4c 	bl	80401fc <__adddf3>
 8048b64:	f04f 3bff 	mov.w	fp, #4294967295
 8048b68:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8048b6c:	e7c4      	b.n	8048af8 <__ieee754_rem_pio2+0x80>
 8048b6e:	a386      	add	r3, pc, #536	; (adr r3, 8048d88 <__ieee754_rem_pio2+0x310>)
 8048b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8048b74:	f7f7 fb42 	bl	80401fc <__adddf3>
 8048b78:	a385      	add	r3, pc, #532	; (adr r3, 8048d90 <__ieee754_rem_pio2+0x318>)
 8048b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8048b7e:	4604      	mov	r4, r0
 8048b80:	460d      	mov	r5, r1
 8048b82:	f7f7 fb3b 	bl	80401fc <__adddf3>
 8048b86:	4602      	mov	r2, r0
 8048b88:	460b      	mov	r3, r1
 8048b8a:	e9ca 2300 	strd	r2, r3, [sl]
 8048b8e:	4620      	mov	r0, r4
 8048b90:	4629      	mov	r1, r5
 8048b92:	f7f7 fb31 	bl	80401f8 <__aeabi_dsub>
 8048b96:	a37e      	add	r3, pc, #504	; (adr r3, 8048d90 <__ieee754_rem_pio2+0x318>)
 8048b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8048b9c:	e7e0      	b.n	8048b60 <__ieee754_rem_pio2+0xe8>
 8048b9e:	4b87      	ldr	r3, [pc, #540]	; (8048dbc <__ieee754_rem_pio2+0x344>)
 8048ba0:	4598      	cmp	r8, r3
 8048ba2:	f300 80d9 	bgt.w	8048d58 <__ieee754_rem_pio2+0x2e0>
 8048ba6:	f000 fe49 	bl	804983c <fabs>
 8048baa:	ec55 4b10 	vmov	r4, r5, d0
 8048bae:	ee10 0a10 	vmov	r0, s0
 8048bb2:	a379      	add	r3, pc, #484	; (adr r3, 8048d98 <__ieee754_rem_pio2+0x320>)
 8048bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8048bb8:	4629      	mov	r1, r5
 8048bba:	f7f7 fcd5 	bl	8040568 <__aeabi_dmul>
 8048bbe:	4b80      	ldr	r3, [pc, #512]	; (8048dc0 <__ieee754_rem_pio2+0x348>)
 8048bc0:	2200      	movs	r2, #0
 8048bc2:	f7f7 fb1b 	bl	80401fc <__adddf3>
 8048bc6:	f7f7 ff7f 	bl	8040ac8 <__aeabi_d2iz>
 8048bca:	4683      	mov	fp, r0
 8048bcc:	f7f7 fc62 	bl	8040494 <__aeabi_i2d>
 8048bd0:	4602      	mov	r2, r0
 8048bd2:	460b      	mov	r3, r1
 8048bd4:	ec43 2b18 	vmov	d8, r2, r3
 8048bd8:	a367      	add	r3, pc, #412	; (adr r3, 8048d78 <__ieee754_rem_pio2+0x300>)
 8048bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8048bde:	f7f7 fcc3 	bl	8040568 <__aeabi_dmul>
 8048be2:	4602      	mov	r2, r0
 8048be4:	460b      	mov	r3, r1
 8048be6:	4620      	mov	r0, r4
 8048be8:	4629      	mov	r1, r5
 8048bea:	f7f7 fb05 	bl	80401f8 <__aeabi_dsub>
 8048bee:	a364      	add	r3, pc, #400	; (adr r3, 8048d80 <__ieee754_rem_pio2+0x308>)
 8048bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8048bf4:	4606      	mov	r6, r0
 8048bf6:	460f      	mov	r7, r1
 8048bf8:	ec51 0b18 	vmov	r0, r1, d8
 8048bfc:	f7f7 fcb4 	bl	8040568 <__aeabi_dmul>
 8048c00:	f1bb 0f1f 	cmp.w	fp, #31
 8048c04:	4604      	mov	r4, r0
 8048c06:	460d      	mov	r5, r1
 8048c08:	dc0d      	bgt.n	8048c26 <__ieee754_rem_pio2+0x1ae>
 8048c0a:	4b6e      	ldr	r3, [pc, #440]	; (8048dc4 <__ieee754_rem_pio2+0x34c>)
 8048c0c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8048c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048c14:	4543      	cmp	r3, r8
 8048c16:	d006      	beq.n	8048c26 <__ieee754_rem_pio2+0x1ae>
 8048c18:	4622      	mov	r2, r4
 8048c1a:	462b      	mov	r3, r5
 8048c1c:	4630      	mov	r0, r6
 8048c1e:	4639      	mov	r1, r7
 8048c20:	f7f7 faea 	bl	80401f8 <__aeabi_dsub>
 8048c24:	e00f      	b.n	8048c46 <__ieee754_rem_pio2+0x1ce>
 8048c26:	462b      	mov	r3, r5
 8048c28:	4622      	mov	r2, r4
 8048c2a:	4630      	mov	r0, r6
 8048c2c:	4639      	mov	r1, r7
 8048c2e:	f7f7 fae3 	bl	80401f8 <__aeabi_dsub>
 8048c32:	ea4f 5328 	mov.w	r3, r8, asr #20
 8048c36:	9303      	str	r3, [sp, #12]
 8048c38:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8048c3c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8048c40:	f1b8 0f10 	cmp.w	r8, #16
 8048c44:	dc02      	bgt.n	8048c4c <__ieee754_rem_pio2+0x1d4>
 8048c46:	e9ca 0100 	strd	r0, r1, [sl]
 8048c4a:	e039      	b.n	8048cc0 <__ieee754_rem_pio2+0x248>
 8048c4c:	a34e      	add	r3, pc, #312	; (adr r3, 8048d88 <__ieee754_rem_pio2+0x310>)
 8048c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8048c52:	ec51 0b18 	vmov	r0, r1, d8
 8048c56:	f7f7 fc87 	bl	8040568 <__aeabi_dmul>
 8048c5a:	4604      	mov	r4, r0
 8048c5c:	460d      	mov	r5, r1
 8048c5e:	4602      	mov	r2, r0
 8048c60:	460b      	mov	r3, r1
 8048c62:	4630      	mov	r0, r6
 8048c64:	4639      	mov	r1, r7
 8048c66:	f7f7 fac7 	bl	80401f8 <__aeabi_dsub>
 8048c6a:	4602      	mov	r2, r0
 8048c6c:	460b      	mov	r3, r1
 8048c6e:	4680      	mov	r8, r0
 8048c70:	4689      	mov	r9, r1
 8048c72:	4630      	mov	r0, r6
 8048c74:	4639      	mov	r1, r7
 8048c76:	f7f7 fabf 	bl	80401f8 <__aeabi_dsub>
 8048c7a:	4622      	mov	r2, r4
 8048c7c:	462b      	mov	r3, r5
 8048c7e:	f7f7 fabb 	bl	80401f8 <__aeabi_dsub>
 8048c82:	a343      	add	r3, pc, #268	; (adr r3, 8048d90 <__ieee754_rem_pio2+0x318>)
 8048c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8048c88:	4604      	mov	r4, r0
 8048c8a:	460d      	mov	r5, r1
 8048c8c:	ec51 0b18 	vmov	r0, r1, d8
 8048c90:	f7f7 fc6a 	bl	8040568 <__aeabi_dmul>
 8048c94:	4622      	mov	r2, r4
 8048c96:	462b      	mov	r3, r5
 8048c98:	f7f7 faae 	bl	80401f8 <__aeabi_dsub>
 8048c9c:	4602      	mov	r2, r0
 8048c9e:	460b      	mov	r3, r1
 8048ca0:	4604      	mov	r4, r0
 8048ca2:	460d      	mov	r5, r1
 8048ca4:	4640      	mov	r0, r8
 8048ca6:	4649      	mov	r1, r9
 8048ca8:	f7f7 faa6 	bl	80401f8 <__aeabi_dsub>
 8048cac:	9a03      	ldr	r2, [sp, #12]
 8048cae:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8048cb2:	1ad3      	subs	r3, r2, r3
 8048cb4:	2b31      	cmp	r3, #49	; 0x31
 8048cb6:	dc24      	bgt.n	8048d02 <__ieee754_rem_pio2+0x28a>
 8048cb8:	e9ca 0100 	strd	r0, r1, [sl]
 8048cbc:	4646      	mov	r6, r8
 8048cbe:	464f      	mov	r7, r9
 8048cc0:	e9da 8900 	ldrd	r8, r9, [sl]
 8048cc4:	4630      	mov	r0, r6
 8048cc6:	4642      	mov	r2, r8
 8048cc8:	464b      	mov	r3, r9
 8048cca:	4639      	mov	r1, r7
 8048ccc:	f7f7 fa94 	bl	80401f8 <__aeabi_dsub>
 8048cd0:	462b      	mov	r3, r5
 8048cd2:	4622      	mov	r2, r4
 8048cd4:	f7f7 fa90 	bl	80401f8 <__aeabi_dsub>
 8048cd8:	9b02      	ldr	r3, [sp, #8]
 8048cda:	2b00      	cmp	r3, #0
 8048cdc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8048ce0:	f6bf af0a 	bge.w	8048af8 <__ieee754_rem_pio2+0x80>
 8048ce4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8048ce8:	f8ca 3004 	str.w	r3, [sl, #4]
 8048cec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8048cf0:	f8ca 8000 	str.w	r8, [sl]
 8048cf4:	f8ca 0008 	str.w	r0, [sl, #8]
 8048cf8:	f8ca 300c 	str.w	r3, [sl, #12]
 8048cfc:	f1cb 0b00 	rsb	fp, fp, #0
 8048d00:	e6fa      	b.n	8048af8 <__ieee754_rem_pio2+0x80>
 8048d02:	a327      	add	r3, pc, #156	; (adr r3, 8048da0 <__ieee754_rem_pio2+0x328>)
 8048d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8048d08:	ec51 0b18 	vmov	r0, r1, d8
 8048d0c:	f7f7 fc2c 	bl	8040568 <__aeabi_dmul>
 8048d10:	4604      	mov	r4, r0
 8048d12:	460d      	mov	r5, r1
 8048d14:	4602      	mov	r2, r0
 8048d16:	460b      	mov	r3, r1
 8048d18:	4640      	mov	r0, r8
 8048d1a:	4649      	mov	r1, r9
 8048d1c:	f7f7 fa6c 	bl	80401f8 <__aeabi_dsub>
 8048d20:	4602      	mov	r2, r0
 8048d22:	460b      	mov	r3, r1
 8048d24:	4606      	mov	r6, r0
 8048d26:	460f      	mov	r7, r1
 8048d28:	4640      	mov	r0, r8
 8048d2a:	4649      	mov	r1, r9
 8048d2c:	f7f7 fa64 	bl	80401f8 <__aeabi_dsub>
 8048d30:	4622      	mov	r2, r4
 8048d32:	462b      	mov	r3, r5
 8048d34:	f7f7 fa60 	bl	80401f8 <__aeabi_dsub>
 8048d38:	a31b      	add	r3, pc, #108	; (adr r3, 8048da8 <__ieee754_rem_pio2+0x330>)
 8048d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8048d3e:	4604      	mov	r4, r0
 8048d40:	460d      	mov	r5, r1
 8048d42:	ec51 0b18 	vmov	r0, r1, d8
 8048d46:	f7f7 fc0f 	bl	8040568 <__aeabi_dmul>
 8048d4a:	4622      	mov	r2, r4
 8048d4c:	462b      	mov	r3, r5
 8048d4e:	f7f7 fa53 	bl	80401f8 <__aeabi_dsub>
 8048d52:	4604      	mov	r4, r0
 8048d54:	460d      	mov	r5, r1
 8048d56:	e75f      	b.n	8048c18 <__ieee754_rem_pio2+0x1a0>
 8048d58:	4b1b      	ldr	r3, [pc, #108]	; (8048dc8 <__ieee754_rem_pio2+0x350>)
 8048d5a:	4598      	cmp	r8, r3
 8048d5c:	dd36      	ble.n	8048dcc <__ieee754_rem_pio2+0x354>
 8048d5e:	ee10 2a10 	vmov	r2, s0
 8048d62:	462b      	mov	r3, r5
 8048d64:	4620      	mov	r0, r4
 8048d66:	4629      	mov	r1, r5
 8048d68:	f7f7 fa46 	bl	80401f8 <__aeabi_dsub>
 8048d6c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8048d70:	e9ca 0100 	strd	r0, r1, [sl]
 8048d74:	e694      	b.n	8048aa0 <__ieee754_rem_pio2+0x28>
 8048d76:	bf00      	nop
 8048d78:	54400000 	.word	0x54400000
 8048d7c:	3ff921fb 	.word	0x3ff921fb
 8048d80:	1a626331 	.word	0x1a626331
 8048d84:	3dd0b461 	.word	0x3dd0b461
 8048d88:	1a600000 	.word	0x1a600000
 8048d8c:	3dd0b461 	.word	0x3dd0b461
 8048d90:	2e037073 	.word	0x2e037073
 8048d94:	3ba3198a 	.word	0x3ba3198a
 8048d98:	6dc9c883 	.word	0x6dc9c883
 8048d9c:	3fe45f30 	.word	0x3fe45f30
 8048da0:	2e000000 	.word	0x2e000000
 8048da4:	3ba3198a 	.word	0x3ba3198a
 8048da8:	252049c1 	.word	0x252049c1
 8048dac:	397b839a 	.word	0x397b839a
 8048db0:	3fe921fb 	.word	0x3fe921fb
 8048db4:	4002d97b 	.word	0x4002d97b
 8048db8:	3ff921fb 	.word	0x3ff921fb
 8048dbc:	413921fb 	.word	0x413921fb
 8048dc0:	3fe00000 	.word	0x3fe00000
 8048dc4:	08081018 	.word	0x08081018
 8048dc8:	7fefffff 	.word	0x7fefffff
 8048dcc:	ea4f 5428 	mov.w	r4, r8, asr #20
 8048dd0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8048dd4:	ee10 0a10 	vmov	r0, s0
 8048dd8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8048ddc:	ee10 6a10 	vmov	r6, s0
 8048de0:	460f      	mov	r7, r1
 8048de2:	f7f7 fe71 	bl	8040ac8 <__aeabi_d2iz>
 8048de6:	f7f7 fb55 	bl	8040494 <__aeabi_i2d>
 8048dea:	4602      	mov	r2, r0
 8048dec:	460b      	mov	r3, r1
 8048dee:	4630      	mov	r0, r6
 8048df0:	4639      	mov	r1, r7
 8048df2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8048df6:	f7f7 f9ff 	bl	80401f8 <__aeabi_dsub>
 8048dfa:	4b23      	ldr	r3, [pc, #140]	; (8048e88 <__ieee754_rem_pio2+0x410>)
 8048dfc:	2200      	movs	r2, #0
 8048dfe:	f7f7 fbb3 	bl	8040568 <__aeabi_dmul>
 8048e02:	460f      	mov	r7, r1
 8048e04:	4606      	mov	r6, r0
 8048e06:	f7f7 fe5f 	bl	8040ac8 <__aeabi_d2iz>
 8048e0a:	f7f7 fb43 	bl	8040494 <__aeabi_i2d>
 8048e0e:	4602      	mov	r2, r0
 8048e10:	460b      	mov	r3, r1
 8048e12:	4630      	mov	r0, r6
 8048e14:	4639      	mov	r1, r7
 8048e16:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8048e1a:	f7f7 f9ed 	bl	80401f8 <__aeabi_dsub>
 8048e1e:	4b1a      	ldr	r3, [pc, #104]	; (8048e88 <__ieee754_rem_pio2+0x410>)
 8048e20:	2200      	movs	r2, #0
 8048e22:	f7f7 fba1 	bl	8040568 <__aeabi_dmul>
 8048e26:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8048e2a:	ad04      	add	r5, sp, #16
 8048e2c:	f04f 0803 	mov.w	r8, #3
 8048e30:	46a9      	mov	r9, r5
 8048e32:	2600      	movs	r6, #0
 8048e34:	2700      	movs	r7, #0
 8048e36:	4632      	mov	r2, r6
 8048e38:	463b      	mov	r3, r7
 8048e3a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8048e3e:	46c3      	mov	fp, r8
 8048e40:	3d08      	subs	r5, #8
 8048e42:	f108 38ff 	add.w	r8, r8, #4294967295
 8048e46:	f7f7 fdf7 	bl	8040a38 <__aeabi_dcmpeq>
 8048e4a:	2800      	cmp	r0, #0
 8048e4c:	d1f3      	bne.n	8048e36 <__ieee754_rem_pio2+0x3be>
 8048e4e:	4b0f      	ldr	r3, [pc, #60]	; (8048e8c <__ieee754_rem_pio2+0x414>)
 8048e50:	9301      	str	r3, [sp, #4]
 8048e52:	2302      	movs	r3, #2
 8048e54:	9300      	str	r3, [sp, #0]
 8048e56:	4622      	mov	r2, r4
 8048e58:	465b      	mov	r3, fp
 8048e5a:	4651      	mov	r1, sl
 8048e5c:	4648      	mov	r0, r9
 8048e5e:	f000 f8df 	bl	8049020 <__kernel_rem_pio2>
 8048e62:	9b02      	ldr	r3, [sp, #8]
 8048e64:	2b00      	cmp	r3, #0
 8048e66:	4683      	mov	fp, r0
 8048e68:	f6bf ae46 	bge.w	8048af8 <__ieee754_rem_pio2+0x80>
 8048e6c:	e9da 2100 	ldrd	r2, r1, [sl]
 8048e70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8048e74:	e9ca 2300 	strd	r2, r3, [sl]
 8048e78:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8048e7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8048e80:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8048e84:	e73a      	b.n	8048cfc <__ieee754_rem_pio2+0x284>
 8048e86:	bf00      	nop
 8048e88:	41700000 	.word	0x41700000
 8048e8c:	08081098 	.word	0x08081098

08048e90 <__kernel_cos>:
 8048e90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8048e94:	ec57 6b10 	vmov	r6, r7, d0
 8048e98:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8048e9c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8048ea0:	ed8d 1b00 	vstr	d1, [sp]
 8048ea4:	da07      	bge.n	8048eb6 <__kernel_cos+0x26>
 8048ea6:	ee10 0a10 	vmov	r0, s0
 8048eaa:	4639      	mov	r1, r7
 8048eac:	f7f7 fe0c 	bl	8040ac8 <__aeabi_d2iz>
 8048eb0:	2800      	cmp	r0, #0
 8048eb2:	f000 8088 	beq.w	8048fc6 <__kernel_cos+0x136>
 8048eb6:	4632      	mov	r2, r6
 8048eb8:	463b      	mov	r3, r7
 8048eba:	4630      	mov	r0, r6
 8048ebc:	4639      	mov	r1, r7
 8048ebe:	f7f7 fb53 	bl	8040568 <__aeabi_dmul>
 8048ec2:	4b51      	ldr	r3, [pc, #324]	; (8049008 <__kernel_cos+0x178>)
 8048ec4:	2200      	movs	r2, #0
 8048ec6:	4604      	mov	r4, r0
 8048ec8:	460d      	mov	r5, r1
 8048eca:	f7f7 fb4d 	bl	8040568 <__aeabi_dmul>
 8048ece:	a340      	add	r3, pc, #256	; (adr r3, 8048fd0 <__kernel_cos+0x140>)
 8048ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8048ed4:	4682      	mov	sl, r0
 8048ed6:	468b      	mov	fp, r1
 8048ed8:	4620      	mov	r0, r4
 8048eda:	4629      	mov	r1, r5
 8048edc:	f7f7 fb44 	bl	8040568 <__aeabi_dmul>
 8048ee0:	a33d      	add	r3, pc, #244	; (adr r3, 8048fd8 <__kernel_cos+0x148>)
 8048ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8048ee6:	f7f7 f989 	bl	80401fc <__adddf3>
 8048eea:	4622      	mov	r2, r4
 8048eec:	462b      	mov	r3, r5
 8048eee:	f7f7 fb3b 	bl	8040568 <__aeabi_dmul>
 8048ef2:	a33b      	add	r3, pc, #236	; (adr r3, 8048fe0 <__kernel_cos+0x150>)
 8048ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8048ef8:	f7f7 f97e 	bl	80401f8 <__aeabi_dsub>
 8048efc:	4622      	mov	r2, r4
 8048efe:	462b      	mov	r3, r5
 8048f00:	f7f7 fb32 	bl	8040568 <__aeabi_dmul>
 8048f04:	a338      	add	r3, pc, #224	; (adr r3, 8048fe8 <__kernel_cos+0x158>)
 8048f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8048f0a:	f7f7 f977 	bl	80401fc <__adddf3>
 8048f0e:	4622      	mov	r2, r4
 8048f10:	462b      	mov	r3, r5
 8048f12:	f7f7 fb29 	bl	8040568 <__aeabi_dmul>
 8048f16:	a336      	add	r3, pc, #216	; (adr r3, 8048ff0 <__kernel_cos+0x160>)
 8048f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8048f1c:	f7f7 f96c 	bl	80401f8 <__aeabi_dsub>
 8048f20:	4622      	mov	r2, r4
 8048f22:	462b      	mov	r3, r5
 8048f24:	f7f7 fb20 	bl	8040568 <__aeabi_dmul>
 8048f28:	a333      	add	r3, pc, #204	; (adr r3, 8048ff8 <__kernel_cos+0x168>)
 8048f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8048f2e:	f7f7 f965 	bl	80401fc <__adddf3>
 8048f32:	4622      	mov	r2, r4
 8048f34:	462b      	mov	r3, r5
 8048f36:	f7f7 fb17 	bl	8040568 <__aeabi_dmul>
 8048f3a:	4622      	mov	r2, r4
 8048f3c:	462b      	mov	r3, r5
 8048f3e:	f7f7 fb13 	bl	8040568 <__aeabi_dmul>
 8048f42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8048f46:	4604      	mov	r4, r0
 8048f48:	460d      	mov	r5, r1
 8048f4a:	4630      	mov	r0, r6
 8048f4c:	4639      	mov	r1, r7
 8048f4e:	f7f7 fb0b 	bl	8040568 <__aeabi_dmul>
 8048f52:	460b      	mov	r3, r1
 8048f54:	4602      	mov	r2, r0
 8048f56:	4629      	mov	r1, r5
 8048f58:	4620      	mov	r0, r4
 8048f5a:	f7f7 f94d 	bl	80401f8 <__aeabi_dsub>
 8048f5e:	4b2b      	ldr	r3, [pc, #172]	; (804900c <__kernel_cos+0x17c>)
 8048f60:	4598      	cmp	r8, r3
 8048f62:	4606      	mov	r6, r0
 8048f64:	460f      	mov	r7, r1
 8048f66:	dc10      	bgt.n	8048f8a <__kernel_cos+0xfa>
 8048f68:	4602      	mov	r2, r0
 8048f6a:	460b      	mov	r3, r1
 8048f6c:	4650      	mov	r0, sl
 8048f6e:	4659      	mov	r1, fp
 8048f70:	f7f7 f942 	bl	80401f8 <__aeabi_dsub>
 8048f74:	460b      	mov	r3, r1
 8048f76:	4926      	ldr	r1, [pc, #152]	; (8049010 <__kernel_cos+0x180>)
 8048f78:	4602      	mov	r2, r0
 8048f7a:	2000      	movs	r0, #0
 8048f7c:	f7f7 f93c 	bl	80401f8 <__aeabi_dsub>
 8048f80:	ec41 0b10 	vmov	d0, r0, r1
 8048f84:	b003      	add	sp, #12
 8048f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8048f8a:	4b22      	ldr	r3, [pc, #136]	; (8049014 <__kernel_cos+0x184>)
 8048f8c:	4920      	ldr	r1, [pc, #128]	; (8049010 <__kernel_cos+0x180>)
 8048f8e:	4598      	cmp	r8, r3
 8048f90:	bfcc      	ite	gt
 8048f92:	4d21      	ldrgt	r5, [pc, #132]	; (8049018 <__kernel_cos+0x188>)
 8048f94:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8048f98:	2400      	movs	r4, #0
 8048f9a:	4622      	mov	r2, r4
 8048f9c:	462b      	mov	r3, r5
 8048f9e:	2000      	movs	r0, #0
 8048fa0:	f7f7 f92a 	bl	80401f8 <__aeabi_dsub>
 8048fa4:	4622      	mov	r2, r4
 8048fa6:	4680      	mov	r8, r0
 8048fa8:	4689      	mov	r9, r1
 8048faa:	462b      	mov	r3, r5
 8048fac:	4650      	mov	r0, sl
 8048fae:	4659      	mov	r1, fp
 8048fb0:	f7f7 f922 	bl	80401f8 <__aeabi_dsub>
 8048fb4:	4632      	mov	r2, r6
 8048fb6:	463b      	mov	r3, r7
 8048fb8:	f7f7 f91e 	bl	80401f8 <__aeabi_dsub>
 8048fbc:	4602      	mov	r2, r0
 8048fbe:	460b      	mov	r3, r1
 8048fc0:	4640      	mov	r0, r8
 8048fc2:	4649      	mov	r1, r9
 8048fc4:	e7da      	b.n	8048f7c <__kernel_cos+0xec>
 8048fc6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8049000 <__kernel_cos+0x170>
 8048fca:	e7db      	b.n	8048f84 <__kernel_cos+0xf4>
 8048fcc:	f3af 8000 	nop.w
 8048fd0:	be8838d4 	.word	0xbe8838d4
 8048fd4:	bda8fae9 	.word	0xbda8fae9
 8048fd8:	bdb4b1c4 	.word	0xbdb4b1c4
 8048fdc:	3e21ee9e 	.word	0x3e21ee9e
 8048fe0:	809c52ad 	.word	0x809c52ad
 8048fe4:	3e927e4f 	.word	0x3e927e4f
 8048fe8:	19cb1590 	.word	0x19cb1590
 8048fec:	3efa01a0 	.word	0x3efa01a0
 8048ff0:	16c15177 	.word	0x16c15177
 8048ff4:	3f56c16c 	.word	0x3f56c16c
 8048ff8:	5555554c 	.word	0x5555554c
 8048ffc:	3fa55555 	.word	0x3fa55555
 8049000:	00000000 	.word	0x00000000
 8049004:	3ff00000 	.word	0x3ff00000
 8049008:	3fe00000 	.word	0x3fe00000
 804900c:	3fd33332 	.word	0x3fd33332
 8049010:	3ff00000 	.word	0x3ff00000
 8049014:	3fe90000 	.word	0x3fe90000
 8049018:	3fd20000 	.word	0x3fd20000
 804901c:	00000000 	.word	0x00000000

08049020 <__kernel_rem_pio2>:
 8049020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8049024:	ed2d 8b02 	vpush	{d8}
 8049028:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 804902c:	f112 0f14 	cmn.w	r2, #20
 8049030:	9308      	str	r3, [sp, #32]
 8049032:	9101      	str	r1, [sp, #4]
 8049034:	4bc4      	ldr	r3, [pc, #784]	; (8049348 <__kernel_rem_pio2+0x328>)
 8049036:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8049038:	900b      	str	r0, [sp, #44]	; 0x2c
 804903a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 804903e:	9302      	str	r3, [sp, #8]
 8049040:	9b08      	ldr	r3, [sp, #32]
 8049042:	f103 33ff 	add.w	r3, r3, #4294967295
 8049046:	bfa8      	it	ge
 8049048:	1ed4      	subge	r4, r2, #3
 804904a:	9306      	str	r3, [sp, #24]
 804904c:	bfb2      	itee	lt
 804904e:	2400      	movlt	r4, #0
 8049050:	2318      	movge	r3, #24
 8049052:	fb94 f4f3 	sdivge	r4, r4, r3
 8049056:	f06f 0317 	mvn.w	r3, #23
 804905a:	fb04 3303 	mla	r3, r4, r3, r3
 804905e:	eb03 0a02 	add.w	sl, r3, r2
 8049062:	9b02      	ldr	r3, [sp, #8]
 8049064:	9a06      	ldr	r2, [sp, #24]
 8049066:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8049338 <__kernel_rem_pio2+0x318>
 804906a:	eb03 0802 	add.w	r8, r3, r2
 804906e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8049070:	1aa7      	subs	r7, r4, r2
 8049072:	ae22      	add	r6, sp, #136	; 0x88
 8049074:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8049078:	2500      	movs	r5, #0
 804907a:	4545      	cmp	r5, r8
 804907c:	dd13      	ble.n	80490a6 <__kernel_rem_pio2+0x86>
 804907e:	9b08      	ldr	r3, [sp, #32]
 8049080:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8049338 <__kernel_rem_pio2+0x318>
 8049084:	aa22      	add	r2, sp, #136	; 0x88
 8049086:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 804908a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 804908e:	f04f 0800 	mov.w	r8, #0
 8049092:	9b02      	ldr	r3, [sp, #8]
 8049094:	4598      	cmp	r8, r3
 8049096:	dc2f      	bgt.n	80490f8 <__kernel_rem_pio2+0xd8>
 8049098:	ed8d 8b04 	vstr	d8, [sp, #16]
 804909c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80490a0:	462f      	mov	r7, r5
 80490a2:	2600      	movs	r6, #0
 80490a4:	e01b      	b.n	80490de <__kernel_rem_pio2+0xbe>
 80490a6:	42ef      	cmn	r7, r5
 80490a8:	d407      	bmi.n	80490ba <__kernel_rem_pio2+0x9a>
 80490aa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80490ae:	f7f7 f9f1 	bl	8040494 <__aeabi_i2d>
 80490b2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80490b6:	3501      	adds	r5, #1
 80490b8:	e7df      	b.n	804907a <__kernel_rem_pio2+0x5a>
 80490ba:	ec51 0b18 	vmov	r0, r1, d8
 80490be:	e7f8      	b.n	80490b2 <__kernel_rem_pio2+0x92>
 80490c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80490c4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80490c8:	f7f7 fa4e 	bl	8040568 <__aeabi_dmul>
 80490cc:	4602      	mov	r2, r0
 80490ce:	460b      	mov	r3, r1
 80490d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80490d4:	f7f7 f892 	bl	80401fc <__adddf3>
 80490d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80490dc:	3601      	adds	r6, #1
 80490de:	9b06      	ldr	r3, [sp, #24]
 80490e0:	429e      	cmp	r6, r3
 80490e2:	f1a7 0708 	sub.w	r7, r7, #8
 80490e6:	ddeb      	ble.n	80490c0 <__kernel_rem_pio2+0xa0>
 80490e8:	ed9d 7b04 	vldr	d7, [sp, #16]
 80490ec:	f108 0801 	add.w	r8, r8, #1
 80490f0:	ecab 7b02 	vstmia	fp!, {d7}
 80490f4:	3508      	adds	r5, #8
 80490f6:	e7cc      	b.n	8049092 <__kernel_rem_pio2+0x72>
 80490f8:	9b02      	ldr	r3, [sp, #8]
 80490fa:	aa0e      	add	r2, sp, #56	; 0x38
 80490fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8049100:	930d      	str	r3, [sp, #52]	; 0x34
 8049102:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8049104:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8049108:	9c02      	ldr	r4, [sp, #8]
 804910a:	930c      	str	r3, [sp, #48]	; 0x30
 804910c:	00e3      	lsls	r3, r4, #3
 804910e:	930a      	str	r3, [sp, #40]	; 0x28
 8049110:	ab9a      	add	r3, sp, #616	; 0x268
 8049112:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8049116:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 804911a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 804911e:	ab72      	add	r3, sp, #456	; 0x1c8
 8049120:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8049124:	46c3      	mov	fp, r8
 8049126:	46a1      	mov	r9, r4
 8049128:	f1b9 0f00 	cmp.w	r9, #0
 804912c:	f1a5 0508 	sub.w	r5, r5, #8
 8049130:	dc77      	bgt.n	8049222 <__kernel_rem_pio2+0x202>
 8049132:	ec47 6b10 	vmov	d0, r6, r7
 8049136:	4650      	mov	r0, sl
 8049138:	f000 fc0a 	bl	8049950 <scalbn>
 804913c:	ec57 6b10 	vmov	r6, r7, d0
 8049140:	2200      	movs	r2, #0
 8049142:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8049146:	ee10 0a10 	vmov	r0, s0
 804914a:	4639      	mov	r1, r7
 804914c:	f7f7 fa0c 	bl	8040568 <__aeabi_dmul>
 8049150:	ec41 0b10 	vmov	d0, r0, r1
 8049154:	f000 fb7c 	bl	8049850 <floor>
 8049158:	4b7c      	ldr	r3, [pc, #496]	; (804934c <__kernel_rem_pio2+0x32c>)
 804915a:	ec51 0b10 	vmov	r0, r1, d0
 804915e:	2200      	movs	r2, #0
 8049160:	f7f7 fa02 	bl	8040568 <__aeabi_dmul>
 8049164:	4602      	mov	r2, r0
 8049166:	460b      	mov	r3, r1
 8049168:	4630      	mov	r0, r6
 804916a:	4639      	mov	r1, r7
 804916c:	f7f7 f844 	bl	80401f8 <__aeabi_dsub>
 8049170:	460f      	mov	r7, r1
 8049172:	4606      	mov	r6, r0
 8049174:	f7f7 fca8 	bl	8040ac8 <__aeabi_d2iz>
 8049178:	9004      	str	r0, [sp, #16]
 804917a:	f7f7 f98b 	bl	8040494 <__aeabi_i2d>
 804917e:	4602      	mov	r2, r0
 8049180:	460b      	mov	r3, r1
 8049182:	4630      	mov	r0, r6
 8049184:	4639      	mov	r1, r7
 8049186:	f7f7 f837 	bl	80401f8 <__aeabi_dsub>
 804918a:	f1ba 0f00 	cmp.w	sl, #0
 804918e:	4606      	mov	r6, r0
 8049190:	460f      	mov	r7, r1
 8049192:	dd6d      	ble.n	8049270 <__kernel_rem_pio2+0x250>
 8049194:	1e62      	subs	r2, r4, #1
 8049196:	ab0e      	add	r3, sp, #56	; 0x38
 8049198:	9d04      	ldr	r5, [sp, #16]
 804919a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 804919e:	f1ca 0118 	rsb	r1, sl, #24
 80491a2:	fa40 f301 	asr.w	r3, r0, r1
 80491a6:	441d      	add	r5, r3
 80491a8:	408b      	lsls	r3, r1
 80491aa:	1ac0      	subs	r0, r0, r3
 80491ac:	ab0e      	add	r3, sp, #56	; 0x38
 80491ae:	9504      	str	r5, [sp, #16]
 80491b0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80491b4:	f1ca 0317 	rsb	r3, sl, #23
 80491b8:	fa40 fb03 	asr.w	fp, r0, r3
 80491bc:	f1bb 0f00 	cmp.w	fp, #0
 80491c0:	dd65      	ble.n	804928e <__kernel_rem_pio2+0x26e>
 80491c2:	9b04      	ldr	r3, [sp, #16]
 80491c4:	2200      	movs	r2, #0
 80491c6:	3301      	adds	r3, #1
 80491c8:	9304      	str	r3, [sp, #16]
 80491ca:	4615      	mov	r5, r2
 80491cc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80491d0:	4294      	cmp	r4, r2
 80491d2:	f300 809c 	bgt.w	804930e <__kernel_rem_pio2+0x2ee>
 80491d6:	f1ba 0f00 	cmp.w	sl, #0
 80491da:	dd07      	ble.n	80491ec <__kernel_rem_pio2+0x1cc>
 80491dc:	f1ba 0f01 	cmp.w	sl, #1
 80491e0:	f000 80c0 	beq.w	8049364 <__kernel_rem_pio2+0x344>
 80491e4:	f1ba 0f02 	cmp.w	sl, #2
 80491e8:	f000 80c6 	beq.w	8049378 <__kernel_rem_pio2+0x358>
 80491ec:	f1bb 0f02 	cmp.w	fp, #2
 80491f0:	d14d      	bne.n	804928e <__kernel_rem_pio2+0x26e>
 80491f2:	4632      	mov	r2, r6
 80491f4:	463b      	mov	r3, r7
 80491f6:	4956      	ldr	r1, [pc, #344]	; (8049350 <__kernel_rem_pio2+0x330>)
 80491f8:	2000      	movs	r0, #0
 80491fa:	f7f6 fffd 	bl	80401f8 <__aeabi_dsub>
 80491fe:	4606      	mov	r6, r0
 8049200:	460f      	mov	r7, r1
 8049202:	2d00      	cmp	r5, #0
 8049204:	d043      	beq.n	804928e <__kernel_rem_pio2+0x26e>
 8049206:	4650      	mov	r0, sl
 8049208:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8049340 <__kernel_rem_pio2+0x320>
 804920c:	f000 fba0 	bl	8049950 <scalbn>
 8049210:	4630      	mov	r0, r6
 8049212:	4639      	mov	r1, r7
 8049214:	ec53 2b10 	vmov	r2, r3, d0
 8049218:	f7f6 ffee 	bl	80401f8 <__aeabi_dsub>
 804921c:	4606      	mov	r6, r0
 804921e:	460f      	mov	r7, r1
 8049220:	e035      	b.n	804928e <__kernel_rem_pio2+0x26e>
 8049222:	4b4c      	ldr	r3, [pc, #304]	; (8049354 <__kernel_rem_pio2+0x334>)
 8049224:	2200      	movs	r2, #0
 8049226:	4630      	mov	r0, r6
 8049228:	4639      	mov	r1, r7
 804922a:	f7f7 f99d 	bl	8040568 <__aeabi_dmul>
 804922e:	f7f7 fc4b 	bl	8040ac8 <__aeabi_d2iz>
 8049232:	f7f7 f92f 	bl	8040494 <__aeabi_i2d>
 8049236:	4602      	mov	r2, r0
 8049238:	460b      	mov	r3, r1
 804923a:	ec43 2b18 	vmov	d8, r2, r3
 804923e:	4b46      	ldr	r3, [pc, #280]	; (8049358 <__kernel_rem_pio2+0x338>)
 8049240:	2200      	movs	r2, #0
 8049242:	f7f7 f991 	bl	8040568 <__aeabi_dmul>
 8049246:	4602      	mov	r2, r0
 8049248:	460b      	mov	r3, r1
 804924a:	4630      	mov	r0, r6
 804924c:	4639      	mov	r1, r7
 804924e:	f7f6 ffd3 	bl	80401f8 <__aeabi_dsub>
 8049252:	f7f7 fc39 	bl	8040ac8 <__aeabi_d2iz>
 8049256:	e9d5 2300 	ldrd	r2, r3, [r5]
 804925a:	f84b 0b04 	str.w	r0, [fp], #4
 804925e:	ec51 0b18 	vmov	r0, r1, d8
 8049262:	f7f6 ffcb 	bl	80401fc <__adddf3>
 8049266:	f109 39ff 	add.w	r9, r9, #4294967295
 804926a:	4606      	mov	r6, r0
 804926c:	460f      	mov	r7, r1
 804926e:	e75b      	b.n	8049128 <__kernel_rem_pio2+0x108>
 8049270:	d106      	bne.n	8049280 <__kernel_rem_pio2+0x260>
 8049272:	1e63      	subs	r3, r4, #1
 8049274:	aa0e      	add	r2, sp, #56	; 0x38
 8049276:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 804927a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 804927e:	e79d      	b.n	80491bc <__kernel_rem_pio2+0x19c>
 8049280:	4b36      	ldr	r3, [pc, #216]	; (804935c <__kernel_rem_pio2+0x33c>)
 8049282:	2200      	movs	r2, #0
 8049284:	f7f7 fbf6 	bl	8040a74 <__aeabi_dcmpge>
 8049288:	2800      	cmp	r0, #0
 804928a:	d13d      	bne.n	8049308 <__kernel_rem_pio2+0x2e8>
 804928c:	4683      	mov	fp, r0
 804928e:	2200      	movs	r2, #0
 8049290:	2300      	movs	r3, #0
 8049292:	4630      	mov	r0, r6
 8049294:	4639      	mov	r1, r7
 8049296:	f7f7 fbcf 	bl	8040a38 <__aeabi_dcmpeq>
 804929a:	2800      	cmp	r0, #0
 804929c:	f000 80c0 	beq.w	8049420 <__kernel_rem_pio2+0x400>
 80492a0:	1e65      	subs	r5, r4, #1
 80492a2:	462b      	mov	r3, r5
 80492a4:	2200      	movs	r2, #0
 80492a6:	9902      	ldr	r1, [sp, #8]
 80492a8:	428b      	cmp	r3, r1
 80492aa:	da6c      	bge.n	8049386 <__kernel_rem_pio2+0x366>
 80492ac:	2a00      	cmp	r2, #0
 80492ae:	f000 8089 	beq.w	80493c4 <__kernel_rem_pio2+0x3a4>
 80492b2:	ab0e      	add	r3, sp, #56	; 0x38
 80492b4:	f1aa 0a18 	sub.w	sl, sl, #24
 80492b8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80492bc:	2b00      	cmp	r3, #0
 80492be:	f000 80ad 	beq.w	804941c <__kernel_rem_pio2+0x3fc>
 80492c2:	4650      	mov	r0, sl
 80492c4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8049340 <__kernel_rem_pio2+0x320>
 80492c8:	f000 fb42 	bl	8049950 <scalbn>
 80492cc:	ab9a      	add	r3, sp, #616	; 0x268
 80492ce:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80492d2:	ec57 6b10 	vmov	r6, r7, d0
 80492d6:	00ec      	lsls	r4, r5, #3
 80492d8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80492dc:	46aa      	mov	sl, r5
 80492de:	f1ba 0f00 	cmp.w	sl, #0
 80492e2:	f280 80d6 	bge.w	8049492 <__kernel_rem_pio2+0x472>
 80492e6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8049338 <__kernel_rem_pio2+0x318>
 80492ea:	462e      	mov	r6, r5
 80492ec:	2e00      	cmp	r6, #0
 80492ee:	f2c0 8104 	blt.w	80494fa <__kernel_rem_pio2+0x4da>
 80492f2:	ab72      	add	r3, sp, #456	; 0x1c8
 80492f4:	ed8d 8b06 	vstr	d8, [sp, #24]
 80492f8:	f8df a064 	ldr.w	sl, [pc, #100]	; 8049360 <__kernel_rem_pio2+0x340>
 80492fc:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8049300:	f04f 0800 	mov.w	r8, #0
 8049304:	1baf      	subs	r7, r5, r6
 8049306:	e0ea      	b.n	80494de <__kernel_rem_pio2+0x4be>
 8049308:	f04f 0b02 	mov.w	fp, #2
 804930c:	e759      	b.n	80491c2 <__kernel_rem_pio2+0x1a2>
 804930e:	f8d8 3000 	ldr.w	r3, [r8]
 8049312:	b955      	cbnz	r5, 804932a <__kernel_rem_pio2+0x30a>
 8049314:	b123      	cbz	r3, 8049320 <__kernel_rem_pio2+0x300>
 8049316:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 804931a:	f8c8 3000 	str.w	r3, [r8]
 804931e:	2301      	movs	r3, #1
 8049320:	3201      	adds	r2, #1
 8049322:	f108 0804 	add.w	r8, r8, #4
 8049326:	461d      	mov	r5, r3
 8049328:	e752      	b.n	80491d0 <__kernel_rem_pio2+0x1b0>
 804932a:	1acb      	subs	r3, r1, r3
 804932c:	f8c8 3000 	str.w	r3, [r8]
 8049330:	462b      	mov	r3, r5
 8049332:	e7f5      	b.n	8049320 <__kernel_rem_pio2+0x300>
 8049334:	f3af 8000 	nop.w
	...
 8049344:	3ff00000 	.word	0x3ff00000
 8049348:	080811e0 	.word	0x080811e0
 804934c:	40200000 	.word	0x40200000
 8049350:	3ff00000 	.word	0x3ff00000
 8049354:	3e700000 	.word	0x3e700000
 8049358:	41700000 	.word	0x41700000
 804935c:	3fe00000 	.word	0x3fe00000
 8049360:	080811a0 	.word	0x080811a0
 8049364:	1e62      	subs	r2, r4, #1
 8049366:	ab0e      	add	r3, sp, #56	; 0x38
 8049368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804936c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8049370:	a90e      	add	r1, sp, #56	; 0x38
 8049372:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8049376:	e739      	b.n	80491ec <__kernel_rem_pio2+0x1cc>
 8049378:	1e62      	subs	r2, r4, #1
 804937a:	ab0e      	add	r3, sp, #56	; 0x38
 804937c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8049380:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8049384:	e7f4      	b.n	8049370 <__kernel_rem_pio2+0x350>
 8049386:	a90e      	add	r1, sp, #56	; 0x38
 8049388:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 804938c:	3b01      	subs	r3, #1
 804938e:	430a      	orrs	r2, r1
 8049390:	e789      	b.n	80492a6 <__kernel_rem_pio2+0x286>
 8049392:	3301      	adds	r3, #1
 8049394:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8049398:	2900      	cmp	r1, #0
 804939a:	d0fa      	beq.n	8049392 <__kernel_rem_pio2+0x372>
 804939c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 804939e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 80493a2:	446a      	add	r2, sp
 80493a4:	3a98      	subs	r2, #152	; 0x98
 80493a6:	920a      	str	r2, [sp, #40]	; 0x28
 80493a8:	9a08      	ldr	r2, [sp, #32]
 80493aa:	18e3      	adds	r3, r4, r3
 80493ac:	18a5      	adds	r5, r4, r2
 80493ae:	aa22      	add	r2, sp, #136	; 0x88
 80493b0:	f104 0801 	add.w	r8, r4, #1
 80493b4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80493b8:	9304      	str	r3, [sp, #16]
 80493ba:	9b04      	ldr	r3, [sp, #16]
 80493bc:	4543      	cmp	r3, r8
 80493be:	da04      	bge.n	80493ca <__kernel_rem_pio2+0x3aa>
 80493c0:	461c      	mov	r4, r3
 80493c2:	e6a3      	b.n	804910c <__kernel_rem_pio2+0xec>
 80493c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80493c6:	2301      	movs	r3, #1
 80493c8:	e7e4      	b.n	8049394 <__kernel_rem_pio2+0x374>
 80493ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80493cc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80493d0:	f7f7 f860 	bl	8040494 <__aeabi_i2d>
 80493d4:	e8e5 0102 	strd	r0, r1, [r5], #8
 80493d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80493da:	46ab      	mov	fp, r5
 80493dc:	461c      	mov	r4, r3
 80493de:	f04f 0900 	mov.w	r9, #0
 80493e2:	2600      	movs	r6, #0
 80493e4:	2700      	movs	r7, #0
 80493e6:	9b06      	ldr	r3, [sp, #24]
 80493e8:	4599      	cmp	r9, r3
 80493ea:	dd06      	ble.n	80493fa <__kernel_rem_pio2+0x3da>
 80493ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80493ee:	e8e3 6702 	strd	r6, r7, [r3], #8
 80493f2:	f108 0801 	add.w	r8, r8, #1
 80493f6:	930a      	str	r3, [sp, #40]	; 0x28
 80493f8:	e7df      	b.n	80493ba <__kernel_rem_pio2+0x39a>
 80493fa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80493fe:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8049402:	f7f7 f8b1 	bl	8040568 <__aeabi_dmul>
 8049406:	4602      	mov	r2, r0
 8049408:	460b      	mov	r3, r1
 804940a:	4630      	mov	r0, r6
 804940c:	4639      	mov	r1, r7
 804940e:	f7f6 fef5 	bl	80401fc <__adddf3>
 8049412:	f109 0901 	add.w	r9, r9, #1
 8049416:	4606      	mov	r6, r0
 8049418:	460f      	mov	r7, r1
 804941a:	e7e4      	b.n	80493e6 <__kernel_rem_pio2+0x3c6>
 804941c:	3d01      	subs	r5, #1
 804941e:	e748      	b.n	80492b2 <__kernel_rem_pio2+0x292>
 8049420:	ec47 6b10 	vmov	d0, r6, r7
 8049424:	f1ca 0000 	rsb	r0, sl, #0
 8049428:	f000 fa92 	bl	8049950 <scalbn>
 804942c:	ec57 6b10 	vmov	r6, r7, d0
 8049430:	4ba0      	ldr	r3, [pc, #640]	; (80496b4 <__kernel_rem_pio2+0x694>)
 8049432:	ee10 0a10 	vmov	r0, s0
 8049436:	2200      	movs	r2, #0
 8049438:	4639      	mov	r1, r7
 804943a:	f7f7 fb1b 	bl	8040a74 <__aeabi_dcmpge>
 804943e:	b1f8      	cbz	r0, 8049480 <__kernel_rem_pio2+0x460>
 8049440:	4b9d      	ldr	r3, [pc, #628]	; (80496b8 <__kernel_rem_pio2+0x698>)
 8049442:	2200      	movs	r2, #0
 8049444:	4630      	mov	r0, r6
 8049446:	4639      	mov	r1, r7
 8049448:	f7f7 f88e 	bl	8040568 <__aeabi_dmul>
 804944c:	f7f7 fb3c 	bl	8040ac8 <__aeabi_d2iz>
 8049450:	4680      	mov	r8, r0
 8049452:	f7f7 f81f 	bl	8040494 <__aeabi_i2d>
 8049456:	4b97      	ldr	r3, [pc, #604]	; (80496b4 <__kernel_rem_pio2+0x694>)
 8049458:	2200      	movs	r2, #0
 804945a:	f7f7 f885 	bl	8040568 <__aeabi_dmul>
 804945e:	460b      	mov	r3, r1
 8049460:	4602      	mov	r2, r0
 8049462:	4639      	mov	r1, r7
 8049464:	4630      	mov	r0, r6
 8049466:	f7f6 fec7 	bl	80401f8 <__aeabi_dsub>
 804946a:	f7f7 fb2d 	bl	8040ac8 <__aeabi_d2iz>
 804946e:	1c65      	adds	r5, r4, #1
 8049470:	ab0e      	add	r3, sp, #56	; 0x38
 8049472:	f10a 0a18 	add.w	sl, sl, #24
 8049476:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 804947a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 804947e:	e720      	b.n	80492c2 <__kernel_rem_pio2+0x2a2>
 8049480:	4630      	mov	r0, r6
 8049482:	4639      	mov	r1, r7
 8049484:	f7f7 fb20 	bl	8040ac8 <__aeabi_d2iz>
 8049488:	ab0e      	add	r3, sp, #56	; 0x38
 804948a:	4625      	mov	r5, r4
 804948c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8049490:	e717      	b.n	80492c2 <__kernel_rem_pio2+0x2a2>
 8049492:	ab0e      	add	r3, sp, #56	; 0x38
 8049494:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8049498:	f7f6 fffc 	bl	8040494 <__aeabi_i2d>
 804949c:	4632      	mov	r2, r6
 804949e:	463b      	mov	r3, r7
 80494a0:	f7f7 f862 	bl	8040568 <__aeabi_dmul>
 80494a4:	4b84      	ldr	r3, [pc, #528]	; (80496b8 <__kernel_rem_pio2+0x698>)
 80494a6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80494aa:	2200      	movs	r2, #0
 80494ac:	4630      	mov	r0, r6
 80494ae:	4639      	mov	r1, r7
 80494b0:	f7f7 f85a 	bl	8040568 <__aeabi_dmul>
 80494b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80494b8:	4606      	mov	r6, r0
 80494ba:	460f      	mov	r7, r1
 80494bc:	e70f      	b.n	80492de <__kernel_rem_pio2+0x2be>
 80494be:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80494c2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80494c6:	f7f7 f84f 	bl	8040568 <__aeabi_dmul>
 80494ca:	4602      	mov	r2, r0
 80494cc:	460b      	mov	r3, r1
 80494ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80494d2:	f7f6 fe93 	bl	80401fc <__adddf3>
 80494d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80494da:	f108 0801 	add.w	r8, r8, #1
 80494de:	9b02      	ldr	r3, [sp, #8]
 80494e0:	4598      	cmp	r8, r3
 80494e2:	dc01      	bgt.n	80494e8 <__kernel_rem_pio2+0x4c8>
 80494e4:	45b8      	cmp	r8, r7
 80494e6:	ddea      	ble.n	80494be <__kernel_rem_pio2+0x49e>
 80494e8:	ed9d 7b06 	vldr	d7, [sp, #24]
 80494ec:	ab4a      	add	r3, sp, #296	; 0x128
 80494ee:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80494f2:	ed87 7b00 	vstr	d7, [r7]
 80494f6:	3e01      	subs	r6, #1
 80494f8:	e6f8      	b.n	80492ec <__kernel_rem_pio2+0x2cc>
 80494fa:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80494fc:	2b02      	cmp	r3, #2
 80494fe:	dc0b      	bgt.n	8049518 <__kernel_rem_pio2+0x4f8>
 8049500:	2b00      	cmp	r3, #0
 8049502:	dc35      	bgt.n	8049570 <__kernel_rem_pio2+0x550>
 8049504:	d059      	beq.n	80495ba <__kernel_rem_pio2+0x59a>
 8049506:	9b04      	ldr	r3, [sp, #16]
 8049508:	f003 0007 	and.w	r0, r3, #7
 804950c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8049510:	ecbd 8b02 	vpop	{d8}
 8049514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8049518:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 804951a:	2b03      	cmp	r3, #3
 804951c:	d1f3      	bne.n	8049506 <__kernel_rem_pio2+0x4e6>
 804951e:	ab4a      	add	r3, sp, #296	; 0x128
 8049520:	4423      	add	r3, r4
 8049522:	9306      	str	r3, [sp, #24]
 8049524:	461c      	mov	r4, r3
 8049526:	469a      	mov	sl, r3
 8049528:	9502      	str	r5, [sp, #8]
 804952a:	9b02      	ldr	r3, [sp, #8]
 804952c:	2b00      	cmp	r3, #0
 804952e:	f1aa 0a08 	sub.w	sl, sl, #8
 8049532:	dc6b      	bgt.n	804960c <__kernel_rem_pio2+0x5ec>
 8049534:	46aa      	mov	sl, r5
 8049536:	f1ba 0f01 	cmp.w	sl, #1
 804953a:	f1a4 0408 	sub.w	r4, r4, #8
 804953e:	f300 8085 	bgt.w	804964c <__kernel_rem_pio2+0x62c>
 8049542:	9c06      	ldr	r4, [sp, #24]
 8049544:	2000      	movs	r0, #0
 8049546:	3408      	adds	r4, #8
 8049548:	2100      	movs	r1, #0
 804954a:	2d01      	cmp	r5, #1
 804954c:	f300 809d 	bgt.w	804968a <__kernel_rem_pio2+0x66a>
 8049550:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8049554:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8049558:	f1bb 0f00 	cmp.w	fp, #0
 804955c:	f040 809b 	bne.w	8049696 <__kernel_rem_pio2+0x676>
 8049560:	9b01      	ldr	r3, [sp, #4]
 8049562:	e9c3 5600 	strd	r5, r6, [r3]
 8049566:	e9c3 7802 	strd	r7, r8, [r3, #8]
 804956a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 804956e:	e7ca      	b.n	8049506 <__kernel_rem_pio2+0x4e6>
 8049570:	3408      	adds	r4, #8
 8049572:	ab4a      	add	r3, sp, #296	; 0x128
 8049574:	441c      	add	r4, r3
 8049576:	462e      	mov	r6, r5
 8049578:	2000      	movs	r0, #0
 804957a:	2100      	movs	r1, #0
 804957c:	2e00      	cmp	r6, #0
 804957e:	da36      	bge.n	80495ee <__kernel_rem_pio2+0x5ce>
 8049580:	f1bb 0f00 	cmp.w	fp, #0
 8049584:	d039      	beq.n	80495fa <__kernel_rem_pio2+0x5da>
 8049586:	4602      	mov	r2, r0
 8049588:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 804958c:	9c01      	ldr	r4, [sp, #4]
 804958e:	e9c4 2300 	strd	r2, r3, [r4]
 8049592:	4602      	mov	r2, r0
 8049594:	460b      	mov	r3, r1
 8049596:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 804959a:	f7f6 fe2d 	bl	80401f8 <__aeabi_dsub>
 804959e:	ae4c      	add	r6, sp, #304	; 0x130
 80495a0:	2401      	movs	r4, #1
 80495a2:	42a5      	cmp	r5, r4
 80495a4:	da2c      	bge.n	8049600 <__kernel_rem_pio2+0x5e0>
 80495a6:	f1bb 0f00 	cmp.w	fp, #0
 80495aa:	d002      	beq.n	80495b2 <__kernel_rem_pio2+0x592>
 80495ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80495b0:	4619      	mov	r1, r3
 80495b2:	9b01      	ldr	r3, [sp, #4]
 80495b4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80495b8:	e7a5      	b.n	8049506 <__kernel_rem_pio2+0x4e6>
 80495ba:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80495be:	eb0d 0403 	add.w	r4, sp, r3
 80495c2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80495c6:	2000      	movs	r0, #0
 80495c8:	2100      	movs	r1, #0
 80495ca:	2d00      	cmp	r5, #0
 80495cc:	da09      	bge.n	80495e2 <__kernel_rem_pio2+0x5c2>
 80495ce:	f1bb 0f00 	cmp.w	fp, #0
 80495d2:	d002      	beq.n	80495da <__kernel_rem_pio2+0x5ba>
 80495d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80495d8:	4619      	mov	r1, r3
 80495da:	9b01      	ldr	r3, [sp, #4]
 80495dc:	e9c3 0100 	strd	r0, r1, [r3]
 80495e0:	e791      	b.n	8049506 <__kernel_rem_pio2+0x4e6>
 80495e2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80495e6:	f7f6 fe09 	bl	80401fc <__adddf3>
 80495ea:	3d01      	subs	r5, #1
 80495ec:	e7ed      	b.n	80495ca <__kernel_rem_pio2+0x5aa>
 80495ee:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80495f2:	f7f6 fe03 	bl	80401fc <__adddf3>
 80495f6:	3e01      	subs	r6, #1
 80495f8:	e7c0      	b.n	804957c <__kernel_rem_pio2+0x55c>
 80495fa:	4602      	mov	r2, r0
 80495fc:	460b      	mov	r3, r1
 80495fe:	e7c5      	b.n	804958c <__kernel_rem_pio2+0x56c>
 8049600:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8049604:	f7f6 fdfa 	bl	80401fc <__adddf3>
 8049608:	3401      	adds	r4, #1
 804960a:	e7ca      	b.n	80495a2 <__kernel_rem_pio2+0x582>
 804960c:	e9da 8900 	ldrd	r8, r9, [sl]
 8049610:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8049614:	9b02      	ldr	r3, [sp, #8]
 8049616:	3b01      	subs	r3, #1
 8049618:	9302      	str	r3, [sp, #8]
 804961a:	4632      	mov	r2, r6
 804961c:	463b      	mov	r3, r7
 804961e:	4640      	mov	r0, r8
 8049620:	4649      	mov	r1, r9
 8049622:	f7f6 fdeb 	bl	80401fc <__adddf3>
 8049626:	e9cd 0108 	strd	r0, r1, [sp, #32]
 804962a:	4602      	mov	r2, r0
 804962c:	460b      	mov	r3, r1
 804962e:	4640      	mov	r0, r8
 8049630:	4649      	mov	r1, r9
 8049632:	f7f6 fde1 	bl	80401f8 <__aeabi_dsub>
 8049636:	4632      	mov	r2, r6
 8049638:	463b      	mov	r3, r7
 804963a:	f7f6 fddf 	bl	80401fc <__adddf3>
 804963e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8049642:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8049646:	ed8a 7b00 	vstr	d7, [sl]
 804964a:	e76e      	b.n	804952a <__kernel_rem_pio2+0x50a>
 804964c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8049650:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8049654:	4640      	mov	r0, r8
 8049656:	4632      	mov	r2, r6
 8049658:	463b      	mov	r3, r7
 804965a:	4649      	mov	r1, r9
 804965c:	f7f6 fdce 	bl	80401fc <__adddf3>
 8049660:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8049664:	4602      	mov	r2, r0
 8049666:	460b      	mov	r3, r1
 8049668:	4640      	mov	r0, r8
 804966a:	4649      	mov	r1, r9
 804966c:	f7f6 fdc4 	bl	80401f8 <__aeabi_dsub>
 8049670:	4632      	mov	r2, r6
 8049672:	463b      	mov	r3, r7
 8049674:	f7f6 fdc2 	bl	80401fc <__adddf3>
 8049678:	ed9d 7b02 	vldr	d7, [sp, #8]
 804967c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8049680:	ed84 7b00 	vstr	d7, [r4]
 8049684:	f10a 3aff 	add.w	sl, sl, #4294967295
 8049688:	e755      	b.n	8049536 <__kernel_rem_pio2+0x516>
 804968a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 804968e:	f7f6 fdb5 	bl	80401fc <__adddf3>
 8049692:	3d01      	subs	r5, #1
 8049694:	e759      	b.n	804954a <__kernel_rem_pio2+0x52a>
 8049696:	9b01      	ldr	r3, [sp, #4]
 8049698:	9a01      	ldr	r2, [sp, #4]
 804969a:	601d      	str	r5, [r3, #0]
 804969c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80496a0:	605c      	str	r4, [r3, #4]
 80496a2:	609f      	str	r7, [r3, #8]
 80496a4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80496a8:	60d3      	str	r3, [r2, #12]
 80496aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80496ae:	6110      	str	r0, [r2, #16]
 80496b0:	6153      	str	r3, [r2, #20]
 80496b2:	e728      	b.n	8049506 <__kernel_rem_pio2+0x4e6>
 80496b4:	41700000 	.word	0x41700000
 80496b8:	3e700000 	.word	0x3e700000
 80496bc:	00000000 	.word	0x00000000

080496c0 <__kernel_sin>:
 80496c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80496c4:	ed2d 8b04 	vpush	{d8-d9}
 80496c8:	eeb0 8a41 	vmov.f32	s16, s2
 80496cc:	eef0 8a61 	vmov.f32	s17, s3
 80496d0:	ec55 4b10 	vmov	r4, r5, d0
 80496d4:	b083      	sub	sp, #12
 80496d6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80496da:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80496de:	9001      	str	r0, [sp, #4]
 80496e0:	da06      	bge.n	80496f0 <__kernel_sin+0x30>
 80496e2:	ee10 0a10 	vmov	r0, s0
 80496e6:	4629      	mov	r1, r5
 80496e8:	f7f7 f9ee 	bl	8040ac8 <__aeabi_d2iz>
 80496ec:	2800      	cmp	r0, #0
 80496ee:	d051      	beq.n	8049794 <__kernel_sin+0xd4>
 80496f0:	4622      	mov	r2, r4
 80496f2:	462b      	mov	r3, r5
 80496f4:	4620      	mov	r0, r4
 80496f6:	4629      	mov	r1, r5
 80496f8:	f7f6 ff36 	bl	8040568 <__aeabi_dmul>
 80496fc:	4682      	mov	sl, r0
 80496fe:	468b      	mov	fp, r1
 8049700:	4602      	mov	r2, r0
 8049702:	460b      	mov	r3, r1
 8049704:	4620      	mov	r0, r4
 8049706:	4629      	mov	r1, r5
 8049708:	f7f6 ff2e 	bl	8040568 <__aeabi_dmul>
 804970c:	a341      	add	r3, pc, #260	; (adr r3, 8049814 <__kernel_sin+0x154>)
 804970e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8049712:	4680      	mov	r8, r0
 8049714:	4689      	mov	r9, r1
 8049716:	4650      	mov	r0, sl
 8049718:	4659      	mov	r1, fp
 804971a:	f7f6 ff25 	bl	8040568 <__aeabi_dmul>
 804971e:	a33f      	add	r3, pc, #252	; (adr r3, 804981c <__kernel_sin+0x15c>)
 8049720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8049724:	f7f6 fd68 	bl	80401f8 <__aeabi_dsub>
 8049728:	4652      	mov	r2, sl
 804972a:	465b      	mov	r3, fp
 804972c:	f7f6 ff1c 	bl	8040568 <__aeabi_dmul>
 8049730:	a33c      	add	r3, pc, #240	; (adr r3, 8049824 <__kernel_sin+0x164>)
 8049732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8049736:	f7f6 fd61 	bl	80401fc <__adddf3>
 804973a:	4652      	mov	r2, sl
 804973c:	465b      	mov	r3, fp
 804973e:	f7f6 ff13 	bl	8040568 <__aeabi_dmul>
 8049742:	a33a      	add	r3, pc, #232	; (adr r3, 804982c <__kernel_sin+0x16c>)
 8049744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8049748:	f7f6 fd56 	bl	80401f8 <__aeabi_dsub>
 804974c:	4652      	mov	r2, sl
 804974e:	465b      	mov	r3, fp
 8049750:	f7f6 ff0a 	bl	8040568 <__aeabi_dmul>
 8049754:	a337      	add	r3, pc, #220	; (adr r3, 8049834 <__kernel_sin+0x174>)
 8049756:	e9d3 2300 	ldrd	r2, r3, [r3]
 804975a:	f7f6 fd4f 	bl	80401fc <__adddf3>
 804975e:	9b01      	ldr	r3, [sp, #4]
 8049760:	4606      	mov	r6, r0
 8049762:	460f      	mov	r7, r1
 8049764:	b9eb      	cbnz	r3, 80497a2 <__kernel_sin+0xe2>
 8049766:	4602      	mov	r2, r0
 8049768:	460b      	mov	r3, r1
 804976a:	4650      	mov	r0, sl
 804976c:	4659      	mov	r1, fp
 804976e:	f7f6 fefb 	bl	8040568 <__aeabi_dmul>
 8049772:	a325      	add	r3, pc, #148	; (adr r3, 8049808 <__kernel_sin+0x148>)
 8049774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8049778:	f7f6 fd3e 	bl	80401f8 <__aeabi_dsub>
 804977c:	4642      	mov	r2, r8
 804977e:	464b      	mov	r3, r9
 8049780:	f7f6 fef2 	bl	8040568 <__aeabi_dmul>
 8049784:	4602      	mov	r2, r0
 8049786:	460b      	mov	r3, r1
 8049788:	4620      	mov	r0, r4
 804978a:	4629      	mov	r1, r5
 804978c:	f7f6 fd36 	bl	80401fc <__adddf3>
 8049790:	4604      	mov	r4, r0
 8049792:	460d      	mov	r5, r1
 8049794:	ec45 4b10 	vmov	d0, r4, r5
 8049798:	b003      	add	sp, #12
 804979a:	ecbd 8b04 	vpop	{d8-d9}
 804979e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80497a2:	4b1b      	ldr	r3, [pc, #108]	; (8049810 <__kernel_sin+0x150>)
 80497a4:	ec51 0b18 	vmov	r0, r1, d8
 80497a8:	2200      	movs	r2, #0
 80497aa:	f7f6 fedd 	bl	8040568 <__aeabi_dmul>
 80497ae:	4632      	mov	r2, r6
 80497b0:	ec41 0b19 	vmov	d9, r0, r1
 80497b4:	463b      	mov	r3, r7
 80497b6:	4640      	mov	r0, r8
 80497b8:	4649      	mov	r1, r9
 80497ba:	f7f6 fed5 	bl	8040568 <__aeabi_dmul>
 80497be:	4602      	mov	r2, r0
 80497c0:	460b      	mov	r3, r1
 80497c2:	ec51 0b19 	vmov	r0, r1, d9
 80497c6:	f7f6 fd17 	bl	80401f8 <__aeabi_dsub>
 80497ca:	4652      	mov	r2, sl
 80497cc:	465b      	mov	r3, fp
 80497ce:	f7f6 fecb 	bl	8040568 <__aeabi_dmul>
 80497d2:	ec53 2b18 	vmov	r2, r3, d8
 80497d6:	f7f6 fd0f 	bl	80401f8 <__aeabi_dsub>
 80497da:	a30b      	add	r3, pc, #44	; (adr r3, 8049808 <__kernel_sin+0x148>)
 80497dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80497e0:	4606      	mov	r6, r0
 80497e2:	460f      	mov	r7, r1
 80497e4:	4640      	mov	r0, r8
 80497e6:	4649      	mov	r1, r9
 80497e8:	f7f6 febe 	bl	8040568 <__aeabi_dmul>
 80497ec:	4602      	mov	r2, r0
 80497ee:	460b      	mov	r3, r1
 80497f0:	4630      	mov	r0, r6
 80497f2:	4639      	mov	r1, r7
 80497f4:	f7f6 fd02 	bl	80401fc <__adddf3>
 80497f8:	4602      	mov	r2, r0
 80497fa:	460b      	mov	r3, r1
 80497fc:	4620      	mov	r0, r4
 80497fe:	4629      	mov	r1, r5
 8049800:	f7f6 fcfa 	bl	80401f8 <__aeabi_dsub>
 8049804:	e7c4      	b.n	8049790 <__kernel_sin+0xd0>
 8049806:	bf00      	nop
 8049808:	55555549 	.word	0x55555549
 804980c:	3fc55555 	.word	0x3fc55555
 8049810:	3fe00000 	.word	0x3fe00000
 8049814:	5acfd57c 	.word	0x5acfd57c
 8049818:	3de5d93a 	.word	0x3de5d93a
 804981c:	8a2b9ceb 	.word	0x8a2b9ceb
 8049820:	3e5ae5e6 	.word	0x3e5ae5e6
 8049824:	57b1fe7d 	.word	0x57b1fe7d
 8049828:	3ec71de3 	.word	0x3ec71de3
 804982c:	19c161d5 	.word	0x19c161d5
 8049830:	3f2a01a0 	.word	0x3f2a01a0
 8049834:	1110f8a6 	.word	0x1110f8a6
 8049838:	3f811111 	.word	0x3f811111

0804983c <fabs>:
 804983c:	ec51 0b10 	vmov	r0, r1, d0
 8049840:	ee10 2a10 	vmov	r2, s0
 8049844:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8049848:	ec43 2b10 	vmov	d0, r2, r3
 804984c:	4770      	bx	lr
	...

08049850 <floor>:
 8049850:	ec51 0b10 	vmov	r0, r1, d0
 8049854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8049858:	f3c1 570a 	ubfx	r7, r1, #20, #11
 804985c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8049860:	2e13      	cmp	r6, #19
 8049862:	ee10 5a10 	vmov	r5, s0
 8049866:	ee10 8a10 	vmov	r8, s0
 804986a:	460c      	mov	r4, r1
 804986c:	dc32      	bgt.n	80498d4 <floor+0x84>
 804986e:	2e00      	cmp	r6, #0
 8049870:	da14      	bge.n	804989c <floor+0x4c>
 8049872:	a333      	add	r3, pc, #204	; (adr r3, 8049940 <floor+0xf0>)
 8049874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8049878:	f7f6 fcc0 	bl	80401fc <__adddf3>
 804987c:	2200      	movs	r2, #0
 804987e:	2300      	movs	r3, #0
 8049880:	f7f7 f902 	bl	8040a88 <__aeabi_dcmpgt>
 8049884:	b138      	cbz	r0, 8049896 <floor+0x46>
 8049886:	2c00      	cmp	r4, #0
 8049888:	da57      	bge.n	804993a <floor+0xea>
 804988a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 804988e:	431d      	orrs	r5, r3
 8049890:	d001      	beq.n	8049896 <floor+0x46>
 8049892:	4c2d      	ldr	r4, [pc, #180]	; (8049948 <floor+0xf8>)
 8049894:	2500      	movs	r5, #0
 8049896:	4621      	mov	r1, r4
 8049898:	4628      	mov	r0, r5
 804989a:	e025      	b.n	80498e8 <floor+0x98>
 804989c:	4f2b      	ldr	r7, [pc, #172]	; (804994c <floor+0xfc>)
 804989e:	4137      	asrs	r7, r6
 80498a0:	ea01 0307 	and.w	r3, r1, r7
 80498a4:	4303      	orrs	r3, r0
 80498a6:	d01f      	beq.n	80498e8 <floor+0x98>
 80498a8:	a325      	add	r3, pc, #148	; (adr r3, 8049940 <floor+0xf0>)
 80498aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80498ae:	f7f6 fca5 	bl	80401fc <__adddf3>
 80498b2:	2200      	movs	r2, #0
 80498b4:	2300      	movs	r3, #0
 80498b6:	f7f7 f8e7 	bl	8040a88 <__aeabi_dcmpgt>
 80498ba:	2800      	cmp	r0, #0
 80498bc:	d0eb      	beq.n	8049896 <floor+0x46>
 80498be:	2c00      	cmp	r4, #0
 80498c0:	bfbe      	ittt	lt
 80498c2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80498c6:	fa43 f606 	asrlt.w	r6, r3, r6
 80498ca:	19a4      	addlt	r4, r4, r6
 80498cc:	ea24 0407 	bic.w	r4, r4, r7
 80498d0:	2500      	movs	r5, #0
 80498d2:	e7e0      	b.n	8049896 <floor+0x46>
 80498d4:	2e33      	cmp	r6, #51	; 0x33
 80498d6:	dd0b      	ble.n	80498f0 <floor+0xa0>
 80498d8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80498dc:	d104      	bne.n	80498e8 <floor+0x98>
 80498de:	ee10 2a10 	vmov	r2, s0
 80498e2:	460b      	mov	r3, r1
 80498e4:	f7f6 fc8a 	bl	80401fc <__adddf3>
 80498e8:	ec41 0b10 	vmov	d0, r0, r1
 80498ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80498f0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80498f4:	f04f 33ff 	mov.w	r3, #4294967295
 80498f8:	fa23 f707 	lsr.w	r7, r3, r7
 80498fc:	4207      	tst	r7, r0
 80498fe:	d0f3      	beq.n	80498e8 <floor+0x98>
 8049900:	a30f      	add	r3, pc, #60	; (adr r3, 8049940 <floor+0xf0>)
 8049902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8049906:	f7f6 fc79 	bl	80401fc <__adddf3>
 804990a:	2200      	movs	r2, #0
 804990c:	2300      	movs	r3, #0
 804990e:	f7f7 f8bb 	bl	8040a88 <__aeabi_dcmpgt>
 8049912:	2800      	cmp	r0, #0
 8049914:	d0bf      	beq.n	8049896 <floor+0x46>
 8049916:	2c00      	cmp	r4, #0
 8049918:	da02      	bge.n	8049920 <floor+0xd0>
 804991a:	2e14      	cmp	r6, #20
 804991c:	d103      	bne.n	8049926 <floor+0xd6>
 804991e:	3401      	adds	r4, #1
 8049920:	ea25 0507 	bic.w	r5, r5, r7
 8049924:	e7b7      	b.n	8049896 <floor+0x46>
 8049926:	2301      	movs	r3, #1
 8049928:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 804992c:	fa03 f606 	lsl.w	r6, r3, r6
 8049930:	4435      	add	r5, r6
 8049932:	4545      	cmp	r5, r8
 8049934:	bf38      	it	cc
 8049936:	18e4      	addcc	r4, r4, r3
 8049938:	e7f2      	b.n	8049920 <floor+0xd0>
 804993a:	2500      	movs	r5, #0
 804993c:	462c      	mov	r4, r5
 804993e:	e7aa      	b.n	8049896 <floor+0x46>
 8049940:	8800759c 	.word	0x8800759c
 8049944:	7e37e43c 	.word	0x7e37e43c
 8049948:	bff00000 	.word	0xbff00000
 804994c:	000fffff 	.word	0x000fffff

08049950 <scalbn>:
 8049950:	b570      	push	{r4, r5, r6, lr}
 8049952:	ec55 4b10 	vmov	r4, r5, d0
 8049956:	f3c5 520a 	ubfx	r2, r5, #20, #11
 804995a:	4606      	mov	r6, r0
 804995c:	462b      	mov	r3, r5
 804995e:	b99a      	cbnz	r2, 8049988 <scalbn+0x38>
 8049960:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8049964:	4323      	orrs	r3, r4
 8049966:	d036      	beq.n	80499d6 <scalbn+0x86>
 8049968:	4b39      	ldr	r3, [pc, #228]	; (8049a50 <scalbn+0x100>)
 804996a:	4629      	mov	r1, r5
 804996c:	ee10 0a10 	vmov	r0, s0
 8049970:	2200      	movs	r2, #0
 8049972:	f7f6 fdf9 	bl	8040568 <__aeabi_dmul>
 8049976:	4b37      	ldr	r3, [pc, #220]	; (8049a54 <scalbn+0x104>)
 8049978:	429e      	cmp	r6, r3
 804997a:	4604      	mov	r4, r0
 804997c:	460d      	mov	r5, r1
 804997e:	da10      	bge.n	80499a2 <scalbn+0x52>
 8049980:	a32b      	add	r3, pc, #172	; (adr r3, 8049a30 <scalbn+0xe0>)
 8049982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8049986:	e03a      	b.n	80499fe <scalbn+0xae>
 8049988:	f240 71ff 	movw	r1, #2047	; 0x7ff
 804998c:	428a      	cmp	r2, r1
 804998e:	d10c      	bne.n	80499aa <scalbn+0x5a>
 8049990:	ee10 2a10 	vmov	r2, s0
 8049994:	4620      	mov	r0, r4
 8049996:	4629      	mov	r1, r5
 8049998:	f7f6 fc30 	bl	80401fc <__adddf3>
 804999c:	4604      	mov	r4, r0
 804999e:	460d      	mov	r5, r1
 80499a0:	e019      	b.n	80499d6 <scalbn+0x86>
 80499a2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80499a6:	460b      	mov	r3, r1
 80499a8:	3a36      	subs	r2, #54	; 0x36
 80499aa:	4432      	add	r2, r6
 80499ac:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80499b0:	428a      	cmp	r2, r1
 80499b2:	dd08      	ble.n	80499c6 <scalbn+0x76>
 80499b4:	2d00      	cmp	r5, #0
 80499b6:	a120      	add	r1, pc, #128	; (adr r1, 8049a38 <scalbn+0xe8>)
 80499b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80499bc:	da1c      	bge.n	80499f8 <scalbn+0xa8>
 80499be:	a120      	add	r1, pc, #128	; (adr r1, 8049a40 <scalbn+0xf0>)
 80499c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80499c4:	e018      	b.n	80499f8 <scalbn+0xa8>
 80499c6:	2a00      	cmp	r2, #0
 80499c8:	dd08      	ble.n	80499dc <scalbn+0x8c>
 80499ca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80499ce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80499d2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80499d6:	ec45 4b10 	vmov	d0, r4, r5
 80499da:	bd70      	pop	{r4, r5, r6, pc}
 80499dc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80499e0:	da19      	bge.n	8049a16 <scalbn+0xc6>
 80499e2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80499e6:	429e      	cmp	r6, r3
 80499e8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80499ec:	dd0a      	ble.n	8049a04 <scalbn+0xb4>
 80499ee:	a112      	add	r1, pc, #72	; (adr r1, 8049a38 <scalbn+0xe8>)
 80499f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80499f4:	2b00      	cmp	r3, #0
 80499f6:	d1e2      	bne.n	80499be <scalbn+0x6e>
 80499f8:	a30f      	add	r3, pc, #60	; (adr r3, 8049a38 <scalbn+0xe8>)
 80499fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80499fe:	f7f6 fdb3 	bl	8040568 <__aeabi_dmul>
 8049a02:	e7cb      	b.n	804999c <scalbn+0x4c>
 8049a04:	a10a      	add	r1, pc, #40	; (adr r1, 8049a30 <scalbn+0xe0>)
 8049a06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8049a0a:	2b00      	cmp	r3, #0
 8049a0c:	d0b8      	beq.n	8049980 <scalbn+0x30>
 8049a0e:	a10e      	add	r1, pc, #56	; (adr r1, 8049a48 <scalbn+0xf8>)
 8049a10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8049a14:	e7b4      	b.n	8049980 <scalbn+0x30>
 8049a16:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8049a1a:	3236      	adds	r2, #54	; 0x36
 8049a1c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8049a20:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8049a24:	4620      	mov	r0, r4
 8049a26:	4b0c      	ldr	r3, [pc, #48]	; (8049a58 <scalbn+0x108>)
 8049a28:	2200      	movs	r2, #0
 8049a2a:	e7e8      	b.n	80499fe <scalbn+0xae>
 8049a2c:	f3af 8000 	nop.w
 8049a30:	c2f8f359 	.word	0xc2f8f359
 8049a34:	01a56e1f 	.word	0x01a56e1f
 8049a38:	8800759c 	.word	0x8800759c
 8049a3c:	7e37e43c 	.word	0x7e37e43c
 8049a40:	8800759c 	.word	0x8800759c
 8049a44:	fe37e43c 	.word	0xfe37e43c
 8049a48:	c2f8f359 	.word	0xc2f8f359
 8049a4c:	81a56e1f 	.word	0x81a56e1f
 8049a50:	43500000 	.word	0x43500000
 8049a54:	ffff3cb0 	.word	0xffff3cb0
 8049a58:	3c900000 	.word	0x3c900000

08049a5c <_init>:
 8049a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8049a5e:	bf00      	nop
 8049a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8049a62:	bc08      	pop	{r3}
 8049a64:	469e      	mov	lr, r3
 8049a66:	4770      	bx	lr

08049a68 <_fini>:
 8049a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8049a6a:	bf00      	nop
 8049a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8049a6e:	bc08      	pop	{r3}
 8049a70:	469e      	mov	lr, r3
 8049a72:	4770      	bx	lr
